(riemann_scaf
 (IMP_integral_def_TCC1 0
  (IMP_integral_def_TCC1-1 nil 3420183209
   ("" (expand "connected?") (("" (propax) nil nil)) nil)
   ((connected? const-decl "bool" deriv_domain_def "analysis/")) nil
   (IMP_integral_def assuming "analysis@integral_def[real]"
    "connected_domain: ASSUMPTION deriv_domain_def[T].connected?")))
 (IMP_integral_def_TCC2 0
  (IMP_integral_def_TCC2-1 nil 3420183209
   ("" (expand "not_one_element?")
    (("" (skosimp)
      (("" (case-replace "x!1=0")
        (("1" (inst + "1") (("1" (assert) nil nil)) nil)
         ("2" (inst + "0") (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (not_one_element? const-decl "bool" deriv_domain_def "analysis/"))
   nil
   (IMP_integral_def assuming "analysis@integral_def[real]"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (step_TCC1 0
  (step_TCC1-1 nil 3450779708
   ("" (expand "step?")
    (("" (expand "step_function?")
      (("" (expand "zeroed?")
        ((""
          (inst + "(# length := 2,
                     seq := (LAMBDA (ii: below(2)): if ii = 0 then a else b endif) #)")
          (("1" (expand "step_function_on?")
            (("1" (skosimp)
              (("1" (inst + "0") (("1" (skosimp) nil nil)) nil)) nil))
            nil)
           ("2" (skosimp) (("2" (assert) nil nil)) nil)
           ("3" (skosimp) (("3" (assert) nil nil)) nil)
           ("4" (skosimp) (("4" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((step_function? const-decl "bool" step_fun_def "analysis/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (b formal-const-decl "{x: real | a < x}" riemann_scaf nil)
    (a formal-const-decl "real" riemann_scaf nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (closed_interval type-eq-decl nil intervals_real "reals/")
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (partition type-eq-decl nil integral_def "analysis/")
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (step_function_on? const-decl "bool" step_fun_def "analysis/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (zeroed? const-decl "bool" riemann_scaf nil)
    (step? const-decl "bool" riemann_scaf nil))
   nil (step subtype "(LAMBDA x: 0)" "step")))
 (bounded_TCC1 0
  (bounded_TCC1-1 nil 3450779708
   ("" (expand "zeroed_bounded?")
    (("" (expand "bounded?")
      (("" (expand "zeroed?")
        (("" (expand "abs") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((bounded? const-decl "bool" sup_norm "measure_integration/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (zeroed? const-decl "bool" riemann_scaf nil)
    (zeroed_bounded? const-decl "bool" riemann_scaf nil))
   nil (bounded subtype "(LAMBDA x: 0)" "bounded")))
 (IMP_fun_preds_partial_TCC1 0
  (IMP_fun_preds_partial_TCC1-1 nil 3450779708
   ("" (expand "partial_order?")
    (("" (expand "preorder?")
      (("" (expand "restrict")
        (("" (split)
          (("1" (expand "reflexive?")
            (("1" (skosimp)
              (("1" (expand "<=") (("1" (propax) nil nil)) nil)) nil))
            nil)
           ("2" (expand "transitive?")
            (("2" (expand "<=")
              (("2" (skosimp*)
                (("2" (inst - "x!2")
                  (("2" (inst - "x!2") (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (expand "antisymmetric?")
            (("3" (expand "<=")
              (("3" (skosimp)
                (("3" (apply-extensionality 1 :hide? t)
                  (("3" (inst - "x!2")
                    (("3" (inst - "x!2") (("3" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((preorder? const-decl "bool" orders nil)
    (<= const-decl "bool" real_fun_orders "reals/")
    (reflexive? const-decl "bool" relations nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (transitive? const-decl "bool" relations nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (step? const-decl "bool" riemann_scaf nil)
    (step nonempty-type-eq-decl nil riemann_scaf nil)
    (antisymmetric? const-decl "bool" relations nil)
    (restrict const-decl "R" restrict nil)
    (partial_order? const-decl "bool" orders nil))
   nil
   (IMP_fun_preds_partial subtype
    "(restrict[[[real -> real], [real -> real]], [step, step], booleans.bool].restrict((real_fun_orders[real].<=)))"
    "(orders[step].partial_order?)")))
 (partition_to_finite_partition_TCC1 0
  (partition_to_finite_partition_TCC1-1 nil 3420272748
   ("" (grind) nil nil) nil nil
   (partition_to_finite_partition subtype "riemann_scaf.i"
    "below[P`length]")))
 (partition_to_finite_partition_TCC2 0
  (partition_to_finite_partition_TCC2-1 nil 3420272748
   ("" (grind) nil nil) nil nil
   (partition_to_finite_partition subtype
    "(number_fields.+)(riemann_scaf.i, 1)" "below[P`length]")))
 (partition_to_finite_partition_TCC3 0
  (partition_to_finite_partition_TCC3-1 nil 3420272748
   ("" (skosimp)
    (("" (expand "finite_partition?")
      (("" (split)
        (("1" (expand "singleton" 1 1)
          (("1" (expand "singleton" 1 1)
            (("1" (expand "union")
              (("1" (expand "member")
                (("1" (expand "fullset")
                  (("1" (expand "partition?")
                    (("1" (split)
                      (("1" (apply-extensionality :hide? t)
                        (("1" (expand "Union")
                          (("1" (case "x!1<a OR b <x!1")
                            (("1" (split)
                              (("1" (inst + "{x | x < a}") nil nil)
                               ("2" (inst + "{x | b<x}") nil nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (case "a<=x!1")
                                (("1"
                                  (case "x!1<=b")
                                  (("1"
                                    (hide 1 2)
                                    (("1"
                                      (lemma
                                       "part_in"
                                       ("P"
                                        "P!1"
                                        "a"
                                        "a"
                                        "b"
                                        "b"
                                        "x"
                                        "x!1"))
                                      (("1"
                                        (assert)
                                        (("1"
                                          (skosimp)
                                          (("1"
                                            (expand "<=" (-1 -2))
                                            (("1"
                                              (split -1)
                                              (("1"
                                                (split -2)
                                                (("1"
                                                  (inst
                                                   +
                                                   "{x |
                              seq(P!1)(ii!1) < x AND
                               x < seq(P!1)(1 + ii!1)}")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (inst 4 "ii!1")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (inst
                                                   +
                                                   "singleton[closed_interval[real](a, b)]
                             (seq(P!1)(1+ii!1))")
                                                  (("1"
                                                    (expand "extend")
                                                    (("1"
                                                      (expand
                                                       "singleton")
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (inst 3 "1+ii!1")
                                                      (("2"
                                                        (expand
                                                         "extend")
                                                        (("2"
                                                          (hide 1 2 4)
                                                          (("2"
                                                            (apply-extensionality
                                                             1
                                                             :hide?
                                                             t)
                                                            (("1"
                                                              (expand
                                                               "singleton")
                                                              (("1"
                                                                (lift-if
                                                                 1)
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skosimp)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (inst
                                                 +
                                                 "singleton[closed_interval[real](a, b)]
                             (seq(P!1)(ii!1))")
                                                (("1"
                                                  (expand "extend")
                                                  (("1"
                                                    (expand
                                                     "singleton")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (hide 1 2 4)
                                                    (("2"
                                                      (inst + "ii!1")
                                                      (("2"
                                                        (apply-extensionality
                                                         1
                                                         :hide?
                                                         t)
                                                        (("2"
                                                          (expand
                                                           "extend")
                                                          (("2"
                                                            (expand
                                                             "singleton")
                                                            (("2"
                                                              (lift-if
                                                               1)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (case-replace
                                                                   "x!2 = seq(P!1)(ii!1)")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skosimp*)
                        (("2" (typepred "x!1")
                          (("2" (typepred "y!1")
                            (("2" (split)
                              (("1"
                                (split)
                                (("1" (assert) nil nil)
                                 ("2" (grind) nil nil)
                                 ("3"
                                  (skosimp)
                                  (("3" (grind) nil nil))
                                  nil)
                                 ("4" (grind) nil nil))
                                nil)
                               ("2"
                                (split -2)
                                (("1" (grind) nil nil)
                                 ("2" (assert) nil nil)
                                 ("3" (grind) nil nil)
                                 ("4" (grind) nil nil))
                                nil)
                               ("3"
                                (skosimp)
                                (("3"
                                  (split -2)
                                  (("1" (grind) nil nil)
                                   ("2" (grind) nil nil)
                                   ("3" (grind) nil nil)
                                   ("4"
                                    (skosimp)
                                    (("4"
                                      (replace -1)
                                      (("4"
                                        (replace -2)
                                        (("4"
                                          (hide-all-but 2)
                                          (("4"
                                            (expand "disjoint?")
                                            (("4"
                                              (expand "intersection")
                                              (("4"
                                                (expand "empty?")
                                                (("4"
                                                  (expand "member")
                                                  (("4"
                                                    (skosimp)
                                                    (("4"
                                                      (expand
                                                       "singleton")
                                                      (("4"
                                                        (lemma
                                                         "part_not_in"
                                                         ("a"
                                                          "a"
                                                          "b"
                                                          "b"
                                                          "x"
                                                          "x!2"))
                                                        (("4"
                                                          (assert)
                                                          (("4"
                                                            (inst
                                                             -
                                                             "P!1")
                                                            (("4"
                                                              (inst
                                                               -
                                                               "i!2"
                                                               "i!1")
                                                              (("4"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("4"
                                (split)
                                (("1" (grind) nil nil)
                                 ("2" (grind) nil nil)
                                 ("3"
                                  (skosimp*)
                                  (("3"
                                    (replace -1)
                                    (("3"
                                      (replace -2)
                                      (("3"
                                        (hide-all-but 2)
                                        (("3"
                                          (expand "disjoint?")
                                          (("3"
                                            (expand "intersection")
                                            (("3"
                                              (expand "empty?")
                                              (("3"
                                                (expand "member")
                                                (("3"
                                                  (skosimp)
                                                  (("3"
                                                    (expand
                                                     "singleton")
                                                    (("3"
                                                      (lemma
                                                       "part_not_in"
                                                       ("a"
                                                        "a"
                                                        "b"
                                                        "b"
                                                        "x"
                                                        "x!2"))
                                                      (("3"
                                                        (assert)
                                                        (("3"
                                                          (inst
                                                           -
                                                           "P!1")
                                                          (("3"
                                                            (inst
                                                             -
                                                             "i!2"
                                                             "i!1")
                                                            (("3"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("4"
                                  (skosimp*)
                                  (("4"
                                    (lemma
                                     "parts_disjoint"
                                     ("a" "a" "b" "b"))
                                    (("4"
                                      (inst - "_" "P!1" "i!1" "i!2")
                                      (("4"
                                        (replace -2)
                                        (("4"
                                          (replace -3)
                                          (("4"
                                            (hide -2 -3)
                                            (("4"
                                              (expand "disjoint?")
                                              (("4"
                                                (expand "intersection")
                                                (("4"
                                                  (expand "empty?")
                                                  (("4"
                                                    (expand "member")
                                                    (("4"
                                                      (skosimp)
                                                      (("4"
                                                        (inst - "x!2")
                                                        (("4"
                                                          (assert)
                                                          (("4"
                                                            (replace
                                                             -1)
                                                            (("4"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (rewrite "finite_union")
          (("2" (hide 2)
            (("2" (rewrite "finite_union")
              (("1" (hide 2)
                (("1" (rewrite "is_finite_surj" + :dir rl)
                  (("1"
                    (inst + "length(P!1)-1"
                     "lambda (i: below(length(P!1) - 1)):
                         {x |
                              seq(P!1)(i) < x AND
                               x < seq(P!1)(1 + i)}")
                    (("1" (expand "surjective?")
                      (("1" (skosimp)
                        (("1" (typepred "y!1")
                          (("1" (skosimp)
                            (("1" (inst + "i!1")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skosimp) (("2" (inst + "i!1") nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (rewrite "is_finite_surj" + :dir rl)
                  (("2"
                    (inst + "length(P!1)"
                     "lambda (i: below(length(P!1))):singleton[closed_interval[real](a, b)]
                              (seq(P!1)(i))")
                    (("1" (expand "surjective?")
                      (("1" (skosimp)
                        (("1" (typepred "y!1")
                          (("1" (skosimp)
                            (("1" (inst + "i!1")
                              (("1"
                                (expand "extend")
                                (("1"
                                  (apply-extensionality :hide? t)
                                  (("1"
                                    (replace -1 1 rl)
                                    (("1"
                                      (lift-if 1)
                                      (("1"
                                        (prop)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -2)
                                            (("1"
                                              (expand "singleton")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (replace -2)
                                            (("2"
                                              (expand "singleton")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skosimp)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skosimp)
                      (("2" (inst + "i!1")
                        (("2" (expand "extend")
                          (("2" (apply-extensionality :hide? t)
                            (("1" (expand "singleton")
                              (("1"
                                (case-replace "x!1 = seq(P!1)(i!1)")
                                (("1" (assert) nil nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (skosimp) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_partition? const-decl "bool" partitions
     "measure_integration/")
    (finite_union judgement-tcc nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite_surj formula-decl nil finite_sets nil)
    (surjective? const-decl "bool" functions nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (singleton const-decl "(singleton?)" sets nil)
    (union const-decl "set" sets nil)
    (fullset const-decl "set" sets nil)
    (part_in formula-decl nil integral_def "analysis/")
    (finite_extend application-judgement "finite_set[T]"
     extend_set_props nil)
    (nonempty_extend application-judgement "(nonempty?[T])"
     extend_set_props nil)
    (FALSE const-decl "bool" booleans nil)
    (extend const-decl "R" extend nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (singleton_is_null application-judgement "null_set" lebesgue_def
     nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (set type-eq-decl nil sets nil) (Union const-decl "set" sets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil)
    (a formal-const-decl "real" riemann_scaf nil)
    (b formal-const-decl "{x: real | a < x}" riemann_scaf nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (closed_interval type-eq-decl nil intervals_real "reals/")
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (partition type-eq-decl nil integral_def "analysis/")
    (singleton? const-decl "bool" sets nil)
    (TRUE const-decl "bool" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (part_not_in formula-decl nil integral_def "analysis/")
    (parts_disjoint formula-decl nil integral_def "analysis/")
    (partition? const-decl "bool" partitions "measure_integration/")
    (member const-decl "bool" sets nil))
   nil
   (partition_to_finite_partition subtype
    "sets[[real -> booleans.bool]].union(sets[[real -> booleans.bool]].union(sets[[real -> booleans.bool]].singleton({x | reals.<(riemann_scaf.x, riemann_scaf.a)}), sets[[real -> booleans.bool]].singleton({x | reals.<(riemann_scaf.b, riemann_scaf.x)})), sets[set[real]].union({X | EXISTS (i: naturalnumbers.below(length(riemann_scaf.P))): riemann_scaf.X = sets[intervals_real[real].closed_interval(riemann_scaf.a, riemann_scaf.b)].singleton(seq(riemann_scaf.P)(i))}, {X | EXISTS (i: naturalnumbers.below((number_fields.-)(length(riemann_scaf.P), 1))): riemann_scaf.X = {x | booleans.AND(reals.<(seq(riemann_scaf.P)(i), riemann_scaf.x), reals.<(riemann_scaf.x, seq(riemann_scaf.P)((number_fields.+)(i, 1))))}}))"
    "finite_partition[real]")))
 (riemann_lebesgue_step_isf 0
  (riemann_lebesgue_step_isf-1 nil 3450826554
   ("" (skosimp)
    (("" (typepred "phi!1")
      (("" (expand "step?")
        (("" (flatten)
          ((""
            (lemma "step_function_integrable?"
             ("a" "a" "b" "b" "f" "phi!1"))
            (("" (expand "Integrable?")
              (("" (assert)
                (("" (hide -1)
                  (("" (expand "Integral")
                    ((""
                      (lemma "step_function_on_integral"
                       ("a" "a" "b" "b" "f" "phi!1"))
                      (("" (assert)
                        (("" (expand "step_function?")
                          (("" (skosimp)
                            (("" (inst - "P!1")
                              ((""
                                (assert)
                                ((""
                                  (replace -1)
                                  ((""
                                    (hide -1)
                                    ((""
                                      (expand "step_function_on?")
                                      ((""
                                        (typepred "P!1")
                                        ((""
                                          (case
                                           "forall (x:real): isf?(*[real](phi(singleton[real](x)),phi!1)) & isf_integral(*[real](phi(singleton[real](x)),phi!1))=0")
                                          (("1"
                                            (case
                                             "forall (ii: below(length(P!1) - 1)): isf?(*[real]( val_in(a, b, P!1, ii, phi!1),phi(open(seq(P!1)(ii), seq(P!1)(1 + ii))))) & isf_integral(*[real]( val_in(a, b, P!1, ii, phi!1),phi(open(seq(P!1)(ii), seq(P!1)(1 + ii)))))=P!1`seq(1 + ii) * val_in(a, b, P!1, ii, phi!1) -
                P!1`seq(ii) * val_in(a, b, P!1, ii, phi!1)")
                                            (("1"
                                              (name
                                               "FF"
                                               "LAMBDA (ii: below(length(P!1) - 1)):
               P!1`seq(1 + ii) * val_in(a, b, P!1, ii, phi!1) -
                P!1`seq(ii) * val_in(a, b, P!1, ii, phi!1)")
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (case
                                                   "FORALL (ii: below(length(P!1) - 1)):
        isf?(*[real]
                 (val_in(a, b, P!1, ii, phi!1),
                  phi(open(seq(P!1)(ii), seq(P!1)(1 + ii)))))
         &
         isf_integral(*[real]
                          (val_in(a, b, P!1, ii, phi!1),
                           phi(open(seq(P!1)(ii), seq(P!1)(1 + ii)))))
          = FF(ii)")
                                                  (("1"
                                                    (case
                                                     "forall (n:nat): n <= length(P!1) - 2 => isf?(*[real](phi({x:real | a <= x & x < seq(P!1)(n+1)}),phi!1)) & sigma(0,n,FF) = isf_integral(*[real](phi({x:real | a <= x & x < seq(P!1)(n+1)}),phi!1))")
                                                    (("1"
                                                      (inst
                                                       -
                                                       "length(P!1)-2")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replace -8)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (replace
                                                               -2)
                                                              (("1"
                                                                (hide
                                                                 -3
                                                                 -4
                                                                 -5
                                                                 -2)
                                                                (("1"
                                                                  (inst
                                                                   -2
                                                                   "b")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (lemma
                                                                       "isf_add"
                                                                       ("i1"
                                                                        "(*[real](phi({x: real | a <= x & x < b}), phi!1))"
                                                                        "i2"
                                                                        "(*[real](phi(singleton[real](b)), phi!1))"))
                                                                      (("1"
                                                                        (lemma
                                                                         "isf_integral_add"
                                                                         ("i1"
                                                                          "(*[real](phi({x: real | a <= x & x < b}), phi!1))"
                                                                          "i2"
                                                                          "(*[real](phi(singleton[real](b)), phi!1))"))
                                                                        (("1"
                                                                          (case-replace
                                                                           "((*[real](phi({x: real | a <= x & x < b}), phi!1)) +
                    (*[real](phi(singleton[real](b)), phi!1)))=phi!1")
                                                                          (("1"
                                                                            (replace
                                                                             -3)
                                                                            (("1"
                                                                              (replace
                                                                               -2
                                                                               1)
                                                                              (("1"
                                                                                (replace
                                                                                 -6)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             (-11
                                                                              1))
                                                                            (("2"
                                                                              (apply-extensionality
                                                                               :hide?
                                                                               t)
                                                                              (("2"
                                                                                (expand
                                                                                 "zeroed?")
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "x!1")
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (name
                                                         "GG"
                                                         "lambda (n: below(length(P!1) - 1)): (*[real]
                            (phi({x: real | a <= x & x < seq(P!1)(n + 1)}),
                             phi!1))")
                                                        (("2"
                                                          (case
                                                           "FORALL (n: nat):
        n <= length(P!1) - 2 =>
         isf?(GG(n)) & sigma(0, n, FF) =
           isf_integral(GG(n))")
                                                          (("1"
                                                            (skosimp)
                                                            (("1"
                                                              (inst
                                                               -
                                                               "n!1")
                                                              (("1"
                                                                (expand
                                                                 "GG")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (hide -1)
                                                              (("2"
                                                                (induct
                                                                 "n")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (expand
                                                                     "sigma")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "GG")
                                                                        (("1"
                                                                          (inst
                                                                           -2
                                                                           "0")
                                                                          (("1"
                                                                            (inst
                                                                             -5
                                                                             "a")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (lemma
                                                                                 "isf_add"
                                                                                 ("i1"
                                                                                  "(*[real](phi(singleton[real](a)), phi!1))"
                                                                                  "i2"
                                                                                  "(*[real]
                (val_in(a, b, P!1, 0, phi!1),
                 phi(open(seq(P!1)(0), seq(P!1)(1 + 0)))))"))
                                                                                (("1"
                                                                                  (lemma
                                                                                   "isf_integral_add"
                                                                                   ("i1"
                                                                                    "(*[real](phi(singleton[real](a)), phi!1))"
                                                                                    "i2"
                                                                                    "(*[real]
                (val_in(a, b, P!1, 0, phi!1),
                 phi(open(seq(P!1)(0), seq(P!1)(1 + 0)))))"))
                                                                                  (("1"
                                                                                    (replace
                                                                                     -9)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -5)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "+
")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "*")
                                                                                          (("1"
                                                                                            (case-replace
                                                                                             "(LAMBDA (x: real):
             phi(singleton[real](a))(x) * phi!1(x) +
              val_in(a, b, P!1, 0, phi!1) *
               phi(open(seq(P!1)(0), seq(P!1)(1)))(x))=(LAMBDA (x_1: real):
             phi({x: real | a <= x & x < seq(P!1)(1)})(x_1) * phi!1(x_1))")
                                                                                            (("1"
                                                                                              (replace
                                                                                               -3)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -2)
                                                                                                (("1"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide
                                                                                               2
                                                                                               -7)
                                                                                              (("2"
                                                                                                (apply-extensionality
                                                                                                 1
                                                                                                 :hide?
                                                                                                 t)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "singleton")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "phi")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "member")
                                                                                                      (("1"
                                                                                                        (case-replace
                                                                                                         "x!1=a")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -11)
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -13
                                                                                                               "0")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "val_in")
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -14
                                                                                                                     "0")
                                                                                                                    (("1"
                                                                                                                      (skosimp)
                                                                                                                      (("1"
                                                                                                                        (case-replace
                                                                                                                         "open(a, seq(P!1)(1))(a)")
                                                                                                                        (("1"
                                                                                                                          (hide-all-but
                                                                                                                           (-12
                                                                                                                            -14
                                                                                                                            -1))
                                                                                                                          (("1"
                                                                                                                            (grind)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (case-replace
                                                                                                             "a <= x!1 & x!1 < seq(P!1)(1)")
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (case-replace
                                                                                                                 "open(seq(P!1)(0), seq(P!1)(1))(x!1)")
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -16
                                                                                                                   "0")
                                                                                                                  (("1"
                                                                                                                    (skosimp)
                                                                                                                    (("1"
                                                                                                                      (inst-cp
                                                                                                                       -16
                                                                                                                       "x!1")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "val_in")
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -16
                                                                                                                           "pick(a,b,P!1,0)")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide-all-but
                                                                                                                   (-1
                                                                                                                    -2
                                                                                                                    1
                                                                                                                    2))
                                                                                                                  (("2"
                                                                                                                    (grind)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("3"
                                                                                                                  (inst
                                                                                                                   -14
                                                                                                                   "0")
                                                                                                                  (("3"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (replace
                                                                                                               1
                                                                                                               3)
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -12
                                                                                                                 "0")
                                                                                                                (("2"
                                                                                                                  (case-replace
                                                                                                                   "open(seq(P!1)(0), seq(P!1)(1))(x!1)")
                                                                                                                  (("1"
                                                                                                                    (hide-all-but
                                                                                                                     (-1
                                                                                                                      -13
                                                                                                                      -11
                                                                                                                      1
                                                                                                                      2))
                                                                                                                    (("1"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (replace
                                                                                                                     1
                                                                                                                     4)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("3"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (inst
                                                                                                   -12
                                                                                                   "0")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("3"
                                                                                              (inst
                                                                                               -13
                                                                                               "0")
                                                                                              (("3"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skosimp*)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "sigma"
                                                                       1)
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (replace
                                                                           -2)
                                                                          (("2"
                                                                            (hide
                                                                             -2)
                                                                            (("2"
                                                                              (inst
                                                                               -3
                                                                               "1+j!1")
                                                                              (("2"
                                                                                (inst
                                                                                 -6
                                                                                 "seq(P!1)(1 + j!1)")
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (hide
                                                                                     -5
                                                                                     -6)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "isf_add"
                                                                                       ("i2"
                                                                                        "(*[real]
                        (val_in(a, b, P!1, 1 + j!1, phi!1),
                         phi(open(seq(P!1)(1 + j!1),
                                  seq(P!1)(1 + (1 + j!1))))))"
                                                                                        "i1"
                                                                                        "(*[real](phi(singleton[real](seq(P!1)(1 + j!1))), phi!1))"))
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "isf_integral_add"
                                                                                         ("i2"
                                                                                          "(*[real]
                        (val_in(a, b, P!1, 1 + j!1, phi!1),
                         phi(open(seq(P!1)(1 + j!1),
                                  seq(P!1)(1 + (1 + j!1))))))"
                                                                                          "i1"
                                                                                          "(*[real](phi(singleton[real](seq(P!1)(1 + j!1))), phi!1))"))
                                                                                        (("2"
                                                                                          (replace
                                                                                           -6)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -8)
                                                                                            (("2"
                                                                                              (hide
                                                                                               -5
                                                                                               -6
                                                                                               -7
                                                                                               -8)
                                                                                              (("2"
                                                                                                (name-replace
                                                                                                 "HH"
                                                                                                 "((*[real]
                        (phi(singleton[real](seq(P!1)(1 + j!1))), phi!1))
                    +
                    (*[real]
                         (val_in(a, b, P!1, 1 + j!1, phi!1),
                          phi(open(seq(P!1)(1 + j!1),
                                   seq(P!1)(1 + (1 + j!1)))))))")
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   "isf_add"
                                                                                                   ("i1"
                                                                                                    "GG(j!1)"
                                                                                                    "i2"
                                                                                                    "HH"))
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "isf_integral_add"
                                                                                                     ("i1"
                                                                                                      "GG(j!1)"
                                                                                                      "i2"
                                                                                                      "HH"))
                                                                                                    (("1"
                                                                                                      (case-replace
                                                                                                       "GG(j!1) + HH=GG(1+j!1)")
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -2
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -4
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide
                                                                                                         -1
                                                                                                         -2
                                                                                                         -3
                                                                                                         -4
                                                                                                         -5
                                                                                                         2)
                                                                                                        (("2"
                                                                                                          (apply-extensionality
                                                                                                           :hide?
                                                                                                           t)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "HH")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "GG")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "singleton")
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "phi")
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "member")
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "*")
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "+")
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "open")
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "ball")
                                                                                                                            (("2"
                                                                                                                              (case-replace
                                                                                                                               "abs((seq(P!1)(1 + j!1) + seq(P!1)(2 + j!1)) / 2 - x!1) <
            (seq(P!1)(2 + j!1) - seq(P!1)(1 + j!1)) / 2 IFF (seq(P!1)(1 + j!1) < x!1 & x!1 < seq(P!1)(2 + j!1))")
                                                                                                                              (("1"
                                                                                                                                (hide
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -
                                                                                                                                   "1+j!1")
                                                                                                                                  (("1"
                                                                                                                                    (case-replace
                                                                                                                                     "a<= x!1")
                                                                                                                                    (("1"
                                                                                                                                      (case-replace
                                                                                                                                       "x!1 < seq(P!1)(1 + j!1)")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (case-replace
                                                                                                                                           "x!1 = seq(P!1)(1 + j!1)")
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (assert)
                                                                                                                                            (("2"
                                                                                                                                              (case-replace
                                                                                                                                               "x!1 < seq(P!1)(2 + j!1)")
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "val_in")
                                                                                                                                                (("1"
                                                                                                                                                  (inst
                                                                                                                                                   -8
                                                                                                                                                   "1+j!1")
                                                                                                                                                  (("1"
                                                                                                                                                    (skosimp)
                                                                                                                                                    (("1"
                                                                                                                                                      (inst-cp
                                                                                                                                                       -8
                                                                                                                                                       "x!1")
                                                                                                                                                      (("1"
                                                                                                                                                        (inst
                                                                                                                                                         -8
                                                                                                                                                         "pick(a, b, P!1, 1 + j!1)")
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (hide
                                                                                                                                 2)
                                                                                                                                (("2"
                                                                                                                                  (grind)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (skosimp)
                                                                  (("3"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("4"
                                                                  (skosimp)
                                                                  (("4"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("5"
                                                                  (skosimp)
                                                                  (("5"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("6"
                                                                  (skosimp)
                                                                  (("6"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("7"
                                                                  (skosimp)
                                                                  (("7"
                                                                    (skosimp)
                                                                    (("7"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("8"
                                                                  (skosimp)
                                                                  (("8"
                                                                    (skosimp)
                                                                    (("8"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("9"
                                                                  (skosimp)
                                                                  (("9"
                                                                    (skosimp)
                                                                    (("9"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("10"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("11"
                                                                  (skosimp)
                                                                  (("11"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("12"
                                                                  (skosimp)
                                                                  (("12"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("13"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("14"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("15"
                                                                  (skosimp)
                                                                  (("15"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("16"
                                                                  (skosimp)
                                                                  (("16"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("17"
                                                                  (skosimp)
                                                                  (("17"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("18"
                                                                  (skosimp)
                                                                  (("18"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (skosimp)
                                                            (("3"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("4"
                                                            (skosimp)
                                                            (("4"
                                                              (skosimp)
                                                              (("4"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("5"
                                                            (skosimp)
                                                            (("5"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("6"
                                                            (skosimp)
                                                            (("6"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (skosimp)
                                                      (("3"
                                                        (skosimp)
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("4"
                                                      (skosimp)
                                                      (("4"
                                                        (skosimp)
                                                        (("4"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("5"
                                                      (skosimp)
                                                      (("5"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("6"
                                                      (skosimp)
                                                      (("6"
                                                        (skosimp)
                                                        (("6"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (skosimp)
                                                    (("2"
                                                      (inst -2 "ii!1")
                                                      (("2"
                                                        (expand "FF")
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (skosimp)
                                                (("2"
                                                  (inst -5 "ii!1")
                                                  (("2"
                                                    (lemma
                                                     "isf_phi"
                                                     ("E"
                                                      "(ball[real, (LAMBDA (x, y: real): abs(x - y))]
               ((seq(P!1)(1 + ii!1) + seq(P!1)(ii!1)) / 2,
                (seq(P!1)(1 + ii!1) - seq(P!1)(ii!1)) / 2))"))
                                                    (("1"
                                                      (lemma
                                                       "isf_integral_phi"
                                                       ("E"
                                                        "(ball[real, (LAMBDA (x, y: real): abs(x - y))]
                     ((seq(P!1)(1 + ii!1) + seq(P!1)(ii!1)) / 2,
                      (seq(P!1)(1 + ii!1) - seq(P!1)(ii!1)) / 2))"))
                                                      (("1"
                                                        (expand
                                                         "mu"
                                                         -1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (case-replace
                                                             "2 * ((seq(P!1)(1 + ii!1) - seq(P!1)(ii!1)) / 2)= seq(P!1)(1 + ii!1) - seq(P!1)(ii!1)")
                                                            (("1"
                                                              (hide -1)
                                                              (("1"
                                                                (case-replace
                                                                 "((ball[real, (LAMBDA (x, y: real): abs(x - y))]
                            ((seq(P!1)(1 + ii!1) + seq(P!1)(ii!1)) / 2,
                             (seq(P!1)(1 + ii!1) - seq(P!1)(ii!1)) / 2)))=open(seq(P!1)(ii!1), seq(P!1)(1 + ii!1))")
                                                                (("1"
                                                                  (hide
                                                                   -1)
                                                                  (("1"
                                                                    (hide
                                                                     -3)
                                                                    (("1"
                                                                      (lemma
                                                                       "isf_scal"
                                                                       ("c"
                                                                        "val_in(a, b, P!1, ii!1, phi!1)"
                                                                        "i"
                                                                        "phi(open(seq(P!1)(ii!1), seq(P!1)(1 + ii!1)))"))
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (lemma
                                                                           "isf_integral_scal"
                                                                           ("c"
                                                                            "val_in(a, b, P!1, ii!1, phi!1)"
                                                                            "i"
                                                                            "phi(open(seq(P!1)(ii!1), seq(P!1)(1 + ii!1)))"))
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (replace
                                                                               -3)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (case-replace
                                                                                   "lambda_(open(seq(P!1)(ii!1), seq(P!1)(1 + ii!1)))`2=P!1`seq(1 + ii!1)-P!1`seq(ii!1)")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (case-replace
                                                                                     "open(seq(P!1)(ii!1), seq(P!1)(1 + ii!1))=ball((seq(P!1)(1 + ii!1) + seq(P!1)(ii!1)) / 2,
                    (seq(P!1)(1 + ii!1) - seq(P!1)(ii!1)) / 2)")
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "lambda_ball")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (apply-extensionality
                                                                                       1
                                                                                       :hide?
                                                                                       t)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "open")
                                                                                        (("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (-9
                                                                    1))
                                                                  (("2"
                                                                    (apply-extensionality
                                                                     :hide?
                                                                     t)
                                                                    (("2"
                                                                      (expand
                                                                       "open")
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "measurable_set?")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "mu_fin?")
                                                          (("2"
                                                            (split)
                                                            (("1"
                                                              (lemma
                                                               "ball_is_cal_M"
                                                               ("x"
                                                                "(seq(P!1)(1 + ii!1) + seq(P!1)(ii!1)) / 2"
                                                                "r"
                                                                "(seq(P!1)(1 + ii!1) - seq(P!1)(ii!1)) / 2"))
                                                              (("1"
                                                                (expand
                                                                 "member")
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (rewrite
                                                                   "lambda_ball")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (skosimp)
                                              (("3"
                                                (assert)
                                                (("3"
                                                  (typepred "P!1")
                                                  (("3"
                                                    (inst - "ii!1")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("4" (propax) nil nil))
                                            nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2"
                                              (skosimp)
                                              (("2"
                                                (lemma "phi_is_simple")
                                                (("2"
                                                  (inst
                                                   -
                                                   "singleton[real](x!1)")
                                                  (("1"
                                                    (lemma
                                                     "isf_scal"
                                                     ("c"
                                                      "phi!1(x!1)"
                                                      "i"
                                                      "phi(singleton[real](x!1))"))
                                                    (("1"
                                                      (split 1)
                                                      (("1"
                                                        (expand
                                                         "*"
                                                         (-1 1))
                                                        (("1"
                                                          (case-replace
                                                           "(LAMBDA (x: real): phi!1(x!1) * phi(singleton[real](x!1))(x))=(LAMBDA (x: real): phi(singleton[real](x!1))(x) * phi!1(x))")
                                                          (("1"
                                                            (hide-all-but
                                                             1)
                                                            (("1"
                                                              (apply-extensionality
                                                               :hide?
                                                               t)
                                                              (("1"
                                                                (expand
                                                                 "singleton")
                                                                (("1"
                                                                  (expand
                                                                   "phi")
                                                                  (("1"
                                                                    (expand
                                                                     "member")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         "isf_integral"
                                                         ("i"
                                                          "*[real](phi!1(x!1), phi(singleton[real](x!1)))"))
                                                        (("1"
                                                          (lemma
                                                           "integral_scal"
                                                           ("c"
                                                            "phi!1(x!1)"
                                                            "f"
                                                            "phi(singleton[real](x!1))"))
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (expand
                                                               "*"
                                                               (-2 1))
                                                              (("1"
                                                                (case-replace
                                                                 "(LAMBDA (x: real):
                      phi!1(x!1) * phi(singleton[real](x!1))(x))=(LAMBDA (x: real):
                     phi(singleton[real](x!1))(x) * phi!1(x))")
                                                                (("1"
                                                                  (replace
                                                                   -3
                                                                   1
                                                                   rl)
                                                                  (("1"
                                                                    (hide
                                                                     -1
                                                                     -2
                                                                     -3
                                                                     -4)
                                                                    (("1"
                                                                      (lemma
                                                                       "integral_phi_closed"
                                                                       ("a"
                                                                        "x!1"
                                                                        "b"
                                                                        "x!1"))
                                                                      (("1"
                                                                        (case-replace
                                                                         "closed(x!1, x!1)=singleton[real](x!1)")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("2"
                                                                            (apply-extensionality
                                                                             :hide?
                                                                             t)
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (apply-extensionality
                                                                     :hide?
                                                                     t)
                                                                    (("2"
                                                                      (expand
                                                                       "singleton")
                                                                      (("2"
                                                                        (expand
                                                                         "phi")
                                                                        (("2"
                                                                          (expand
                                                                           "member")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (lemma
                                                               "integrable_phi_closed"
                                                               ("a"
                                                                "x!1"
                                                                "b"
                                                                "x!1"))
                                                              (("2"
                                                                (case-replace
                                                                 "closed(x!1, x!1)=singleton[real](x!1)")
                                                                (("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (apply-extensionality
                                                                     :hide?
                                                                     t)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (lemma
                                                         "isf_phi"
                                                         ("E"
                                                          "singleton[real](x!1)"))
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (expand
                                                             "mu_fin?")
                                                            (("2"
                                                              (case-replace
                                                               "closed_ball(x!1, 0)=singleton[real](x!1)")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (rewrite
                                                                   "lambda_singleton")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (apply-extensionality
                                                                   :hide?
                                                                   t)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (lemma
                                                       "singleton_is_cal_M"
                                                       ("x" "x!1"))
                                                      (("2"
                                                        (expand
                                                         "member")
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((step nonempty-type-eq-decl nil riemann_scaf nil)
    (step? const-decl "bool" riemann_scaf nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Integrable? const-decl "bool" integral_def "analysis/")
    (step_function_on_integral formula-decl nil integral_step
     "analysis/")
    (step_function? const-decl "bool" step_fun_def "analysis/")
    (step_function_on? const-decl "bool" step_fun_def "analysis/")
    (singleton_is_null application-judgement "null_set" lebesgue_def
     nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def
     "measure_integration/")
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     "measure_integration/")
    (cal_M const-decl "sigma_algebra" lebesgue_def nil)
    (nnreal type-eq-decl nil real_types nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     "extended_nnreal/")
    (complete_sigma_finite? const-decl "bool" measure_def
     "measure_integration/")
    (complete_sigma_finite type-eq-decl nil measure_def
     "measure_integration/")
    (lambda_ const-decl "complete_sigma_finite[real, cal_M]"
     lebesgue_def nil)
    (isf? const-decl "bool" isf "measure_integration/")
    (set type-eq-decl nil sets nil)
    (phi const-decl "nat" measure_space "measure_integration/")
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (isf nonempty-type-eq-decl nil isf "measure_integration/")
    (isf_integral const-decl "real" isf "measure_integration/")
    (ball_is_cal_M formula-decl nil lebesgue_def nil)
    (isf_integral_phi formula-decl nil isf "measure_integration/")
    (isf_scal judgement-tcc nil isf "measure_integration/")
    (isf_integral_scal formula-decl nil isf "measure_integration/")
    (lambda_ball formula-decl nil lebesgue_def nil)
    (mu const-decl "nnreal" measure_props "measure_integration/")
    (mu_fin? const-decl "bool" measure_props "measure_integration/")
    (measurable_set nonempty-type-eq-decl nil measure_space_def
     "measure_integration/")
    (measurable_set? const-decl "bool" measure_space_def
     "measure_integration/")
    (isf_phi judgement-tcc nil isf "measure_integration/")
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (sigma_0_neg formula-decl nil sigma_below "reals/")
    (minus_real_is_real application-judgement "real" reals nil)
    (open_interval type-eq-decl nil intervals_real "reals/")
    (pick const-decl "{t: T | seq(P)(j) < t AND t < seq(P)(j + 1)}"
     integral_step "analysis/")
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (isf_add judgement-tcc nil isf "measure_integration/")
    (+ const-decl "[T -> real]" real_fun_ops "reals/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (member const-decl "bool" sets nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (zeroed? const-decl "bool" riemann_scaf nil)
    (isf_integral_add formula-decl nil isf "measure_integration/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (integer nonempty-type-from-decl nil integers nil)
    (sigma def-decl "real" sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (T_low type-eq-decl nil sigma "reals/")
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (open const-decl "open_interval" real_topology "metric_space/")
    (open_interval nonempty-type-eq-decl nil real_topology
     "metric_space/")
    (ball const-decl "set[T]" metric_space_def "metric_space/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (val_in const-decl "real" integral_step "analysis/")
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (open_is_measurable application-judgement "measurable_set"
     lebesgue_def nil)
    (lambda_singleton formula-decl nil lebesgue_def nil)
    (integral_scal formula-decl nil integral "measure_integration/")
    (integrable? const-decl "bool" integral "measure_integration/")
    (integrable nonempty-type-eq-decl nil integral
     "measure_integration/")
    (integral_phi_closed formula-decl nil lebesgue_def nil)
    (closed_is_measurable application-judgement "measurable_set"
     lebesgue_def nil)
    (metric_induced_topology const-decl "setofsets[T]" metric_space_def
     "metric_space/")
    (closed? const-decl "bool" topology "topology/")
    (closed nonempty-type-eq-decl nil topology "topology/")
    (closed_ball const-decl "closed" real_topology "metric_space/")
    (closed_interval nonempty-type-eq-decl nil real_topology
     "metric_space/")
    (closed const-decl "closed_interval" real_topology "metric_space/")
    (integrable_phi_closed formula-decl nil lebesgue_def nil)
    (isf_integral formula-decl nil integral "measure_integration/")
    (singleton_is_cal_M formula-decl nil lebesgue_def nil)
    (phi_is_simple judgement-tcc nil measure_space
     "measure_integration/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (partition type-eq-decl nil integral_def "analysis/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (closed_interval type-eq-decl nil intervals_real "reals/")
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Integral const-decl "real" integral_def "analysis/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (step_function_integrable? formula-decl nil integral_step
     "analysis/")
    (a formal-const-decl "real" riemann_scaf nil)
    (< const-decl "bool" reals nil)
    (b formal-const-decl "{x: real | a < x}" riemann_scaf nil))
   shostak))
 (riemann_lebesgue_step_integrable 0
  (riemann_lebesgue_step_integrable-1 nil 3420256049
   ("" (skosimp)
    (("" (lemma "riemann_lebesgue_step_isf" ("phi" "phi!1"))
      (("" (flatten)
        (("" (assert)
          (("" (hide -1)
            (("" (lemma "isf_is_integrable")
              (("" (inst - "phi!1")
                (("" (assert)
                  (("" (replace -3)
                    (("" (rewrite "isf_integral") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((step nonempty-type-eq-decl nil riemann_scaf nil)
    (step? const-decl "bool" riemann_scaf nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (riemann_lebesgue_step_isf formula-decl nil riemann_scaf nil)
    (lambda_ const-decl "complete_sigma_finite[real, cal_M]"
     lebesgue_def nil)
    (complete_sigma_finite type-eq-decl nil measure_def
     "measure_integration/")
    (complete_sigma_finite? const-decl "bool" measure_def
     "measure_integration/")
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     "extended_nnreal/")
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (cal_M const-decl "sigma_algebra" lebesgue_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     "measure_integration/")
    (sigma_algebra? const-decl "bool" subset_algebra_def
     "measure_integration/")
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (isf_is_integrable judgement-tcc nil integral
     "measure_integration/")
    (isf_integral formula-decl nil integral "measure_integration/")
    (isf nonempty-type-eq-decl nil isf "measure_integration/")
    (isf? const-decl "bool" isf "measure_integration/"))
   shostak))
 (step_function_is_simple 0
  (step_function_is_simple-1 nil 3420258089
   ("" (skosimp)
    (("" (typepred "x!1")
      (("" (lemma "riemann_lebesgue_step_isf" ("phi" "x!1"))
        (("" (flatten)
          (("" (expand "isf?") (("" (flatten) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((step nonempty-type-eq-decl nil riemann_scaf nil)
    (step? const-decl "bool" riemann_scaf nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (isf? const-decl "bool" isf "measure_integration/")
    (riemann_lebesgue_step_isf formula-decl nil riemann_scaf nil))
   shostak
   (step_function_is_simple subtype "riemann_scaf.x"
    "simple[real, cal_M]")))
 (step_function_is_bounded 0
  (step_function_is_bounded-1 nil 3450584200
   ("" (skolem + "phi!1")
    (("" (typepred "phi!1")
      (("" (expand "zeroed_bounded?")
        (("" (expand "step?")
          (("" (flatten)
            (("" (assert)
              (("" (lemma "step_function_is_simple")
                (("" (inst - "phi!1")
                  (("" (lemma "simple_is_bounded_measurable")
                    (("" (inst - "phi!1")
                      (("" (expand "bounded_measurable?")
                        (("" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((step nonempty-type-eq-decl nil riemann_scaf nil)
    (step? const-decl "bool" riemann_scaf nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (simple nonempty-type-eq-decl nil measure_space
     "measure_integration/")
    (simple? const-decl "bool" measure_space "measure_integration/")
    (bounded_measurable? const-decl "bool" measure_space
     "measure_integration/")
    (simple_is_bounded_measurable judgement-tcc nil measure_space
     "measure_integration/")
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def
     "measure_integration/")
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     "measure_integration/")
    (cal_M const-decl "sigma_algebra" lebesgue_def nil)
    (step_function_is_simple judgement-tcc nil riemann_scaf nil)
    (zeroed_bounded? const-decl "bool" riemann_scaf nil))
   shostak
   (step_function_is_bounded subtype "riemann_scaf.x" "bounded")))
 (zeroed_bounded_neg_fun 0
  (zeroed_bounded_neg_fun-1 nil 3769795159
   ("" (skosimp)
    (("" (typepred "f!1")
      (("" (expand "zeroed_bounded?")
        (("" (flatten)
          (("" (expand "zeroed?")
            (("" (skosimp)
              (("" (inst - "x!1") (("" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil (zeroed? const-decl "bool" riemann_scaf nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (bounded? const-decl "bool" sup_norm "measure_integration/") nil
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (zeroed_bounded? const-decl "bool" riemann_scaf nil)
    (bounded nonempty-type-eq-decl nil riemann_scaf nil))
   nil))
 (lower_step_exists 0
  (lower_step_exists-1 nil 3450706122
   ("" (skosimp)
    (("" (typepred "f!1")
      (("" (expand "zeroed_bounded?")
        (("" (expand "bounded?")
          (("" (flatten)
            (("" (skosimp*)
              (("" (lemma "integrable_phi_closed" ("a" "a" "b" "b"))
                (("1"
                  (lemma "integrable_scal"
                   ("c" "-c!1" "f" "phi(closed(a, b))"))
                  (("1" (inst + "*[real](-c!1, phi(closed(a, b)))")
                    (("1" (hide-all-but (-3 -4 1))
                      (("1" (expand "<=" 1)
                        (("1" (skosimp)
                          (("1" (expand "zeroed?")
                            (("1" (inst - "x!1")
                              (("1"
                                (inst - "x!1")
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "step?")
                      (("2" (split)
                        (("1" (expand "step_function?")
                          (("1"
                            (inst + "(# length := 2,
                     seq := (LAMBDA (ii: below(2)): if ii = 0 then a else b endif) #)")
                            (("1" (expand "step_function_on?")
                              (("1"
                                (skosimp)
                                (("1"
                                  (inst + "-c!1")
                                  (("1"
                                    (skosimp)
                                    (("1"
                                      (hide-all-but 1)
                                      (("1"
                                        (typepred "x!1")
                                        (("1"
                                          (expand "phi")
                                          (("1"
                                            (expand "member")
                                            (("1"
                                              (expand "closed")
                                              (("1"
                                                (expand "closed_ball")
                                                (("1"
                                                  (expand "*")
                                                  (("1"
                                                    (case-replace
                                                     "abs((a + b) / 2 - x!1) <= (b - a) / 2")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skosimp) (("2" (assert) nil nil))
                              nil)
                             ("3" (skosimp) (("3" (assert) nil nil))
                              nil)
                             ("4" (skosimp) (("4" (assert) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "zeroed?" 1)
                          (("2" (skosimp)
                            (("2" (hide-all-but (-1 1))
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (propax) nil nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bounded nonempty-type-eq-decl nil riemann_scaf nil)
    (zeroed_bounded? const-decl "bool" riemann_scaf nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bounded? const-decl "bool" sup_norm "measure_integration/")
    (lambda_ const-decl "complete_sigma_finite[real, cal_M]"
     lebesgue_def nil)
    (complete_sigma_finite type-eq-decl nil measure_def
     "measure_integration/")
    (complete_sigma_finite? const-decl "bool" measure_def
     "measure_integration/")
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     "extended_nnreal/")
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (cal_M const-decl "sigma_algebra" lebesgue_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     "measure_integration/")
    (sigma_algebra? const-decl "bool" subset_algebra_def
     "measure_integration/")
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (closed const-decl "closed_interval" real_topology "metric_space/")
    (closed_interval nonempty-type-eq-decl nil real_topology
     "metric_space/")
    (closed_ball const-decl "closed" real_topology "metric_space/")
    (closed nonempty-type-eq-decl nil topology "topology/")
    (closed? const-decl "bool" topology "topology/")
    (metric_induced_topology const-decl "setofsets[T]" metric_space_def
     "metric_space/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (phi const-decl "nat" measure_space "measure_integration/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (set type-eq-decl nil sets nil)
    (integrable nonempty-type-eq-decl nil integral
     "measure_integration/")
    (integrable? const-decl "bool" integral "measure_integration/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (integrable_scal judgement-tcc nil integral "measure_integration/")
    (minus_real_is_real application-judgement "real" reals nil)
    (closed_is_measurable application-judgement "measurable_set"
     lebesgue_def nil)
    (step_function? const-decl "bool" step_fun_def "analysis/")
    (step_function_on? const-decl "bool" step_fun_def "analysis/")
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (open_interval type-eq-decl nil intervals_real "reals/")
    (below type-eq-decl nil nat_types nil)
    (closed_interval type-eq-decl nil intervals_real "reals/")
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (partition type-eq-decl nil integral_def "analysis/")
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (member const-decl "bool" sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (zeroed? const-decl "bool" riemann_scaf nil)
    (<= const-decl "bool" real_fun_orders "reals/")
    (step nonempty-type-eq-decl nil riemann_scaf nil)
    (step? const-decl "bool" riemann_scaf nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (integrable_phi_closed formula-decl nil lebesgue_def nil)
    (a formal-const-decl "real" riemann_scaf nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (b formal-const-decl "{x: real | a < x}" riemann_scaf nil))
   shostak))
 (upper_step_exists 0
  (upper_step_exists-1 nil 3450706482
   ("" (skosimp)
    (("" (lemma "lower_step_exists" ("f" "-f!1"))
      (("1" (skosimp)
        (("1" (inst + "-phi!1")
          (("1" (expand "<=")
            (("1" (skosimp)
              (("1" (inst - "x!1") (("1" (grind) nil nil)) nil)) nil))
            nil)
           ("2" (typepred "phi!1")
            (("2" (hide -2)
              (("2" (expand "step?")
                (("2" (flatten)
                  (("2" (split)
                    (("1" (hide -2)
                      (("1" (expand "step_function?")
                        (("1" (skosimp)
                          (("1" (inst + "P!1")
                            (("1" (expand "step_function_on?")
                              (("1"
                                (skosimp)
                                (("1"
                                  (inst - "ii!1")
                                  (("1"
                                    (skosimp)
                                    (("1"
                                      (inst + "-fv!1")
                                      (("1"
                                        (skosimp)
                                        (("1"
                                          (inst - "x!1")
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "zeroed?")
                      (("2" (skosimp)
                        (("2" (inst - "x!1")
                          (("2" (assert)
                            (("2" (hide -2) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (typepred "f!1")
          (("2" (expand "zeroed_bounded?")
            (("2" (flatten)
              (("2" (use "zeroed_bounded_neg_fun")
                (("2" (expand "zeroed_bounded?")
                  (("2" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((zeroed_bounded_neg_fun formula-decl nil riemann_scaf nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (step_function? const-decl "bool" step_fun_def "analysis/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (a formal-const-decl "real" riemann_scaf nil)
    (< const-decl "bool" reals nil)
    (b formal-const-decl "{x: real | a < x}" riemann_scaf nil)
    (closed_interval type-eq-decl nil intervals_real "reals/")
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (partition type-eq-decl nil integral_def "analysis/")
    (open_interval type-eq-decl nil intervals_real "reals/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (step_function_on? const-decl "bool" step_fun_def "analysis/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (zeroed? const-decl "bool" riemann_scaf nil)
    (<= const-decl "bool" real_fun_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_real_is_real application-judgement "real" reals nil) nil
    (step nonempty-type-eq-decl nil riemann_scaf nil)
    (step? const-decl "bool" riemann_scaf nil) nil nil
    (lower_step_exists formula-decl nil riemann_scaf nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (zeroed_bounded? const-decl "bool" riemann_scaf nil)
    (bounded nonempty-type-eq-decl nil riemann_scaf nil) nil)
   shostak))
 (lower_riemann_integral_TCC1 0
  (lower_riemann_integral_TCC1-1 nil 3450707160
   ("" (skosimp)
    (("" (lemma "riemann_lebesgue_step_integrable" ("phi" "phi!1"))
      (("" (flatten) nil nil)) nil))
    nil)
   ((step nonempty-type-eq-decl nil riemann_scaf nil)
    (step? const-decl "bool" riemann_scaf nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (riemann_lebesgue_step_integrable formula-decl nil riemann_scaf
     nil))
   nil
   (lower_riemann_integral subtype "riemann_scaf.phi"
    "integrable[real, cal_M, lambda_]")))
 (lower_riemann_integral_TCC2 0
  (lower_riemann_integral_TCC2-1 nil 3450707160
   ("" (skosimp)
    (("" (split)
      (("1" (expand "nonempty?")
        (("1" (expand "empty?")
          (("1" (expand "member")
            (("1" (lemma "lower_step_exists" ("f" "f!1"))
              (("1" (skosimp)
                (("1" (inst - "Integral(a,b,phi!1)")
                  (("1" (inst + "phi!1")
                    (("1" (assert)
                      (("1"
                        (lemma "riemann_lebesgue_step_integrable"
                         ("phi" "phi!1"))
                        (("1" (flatten) nil nil)) nil))
                      nil))
                    nil)
                   ("2"
                    (lemma "riemann_lebesgue_step_integrable"
                     ("phi" "phi!1"))
                    (("2" (flatten) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "above_bounded")
        (("2" (typepred "f!1")
          (("2" (expand "zeroed_bounded?")
            (("2" (flatten)
              (("2" (expand "bounded?")
                (("2" (skosimp)
                  (("2" (inst + "(b-a)*c!1")
                    (("2" (expand "upper_bound")
                      (("2" (skosimp)
                        (("2" (typepred "z!1")
                          (("2" (skosimp)
                            (("2" (expand "<=" -1)
                              (("2"
                                (lemma
                                 "riemann_lebesgue_step_integrable"
                                 ("phi" "phi!1"))
                                (("2"
                                  (flatten)
                                  (("2"
                                    (replace -5)
                                    (("2"
                                      (hide -1 -3 -5)
                                      (("2"
                                        (lemma
                                         "integrable_phi_closed"
                                         ("a" "a" "b" "b"))
                                        (("1"
                                          (lemma
                                           "integral_phi_closed"
                                           ("a" "a" "b" "b"))
                                          (("1"
                                            (lemma
                                             "integrable_scal"
                                             ("c"
                                              "c!1"
                                              "f"
                                              "phi(closed(a, b))"))
                                            (("1"
                                              (lemma
                                               "integral_scal"
                                               ("c"
                                                "c!1"
                                                "f"
                                                "phi(closed(a, b))"))
                                              (("1"
                                                (replace -3)
                                                (("1"
                                                  (lemma
                                                   "integral_ae_le"
                                                   ("f1"
                                                    "phi!1"
                                                    "f2"
                                                    "*[real](c!1, phi(closed(a, b)))"))
                                                  (("1"
                                                    (split -1)
                                                    (("1"
                                                      (replace -2)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but
                                                       (1 -6 -7 -8))
                                                      (("2"
                                                        (expand
                                                         "ae_le?")
                                                        (("2"
                                                          (expand
                                                           "pointwise_ae?")
                                                          (("2"
                                                            (expand
                                                             "ae?")
                                                            (("2"
                                                              (expand
                                                               "fullset")
                                                              (("2"
                                                                (expand
                                                                 "ae_in?")
                                                                (("2"
                                                                  (inst
                                                                   +
                                                                   "emptyset[real]")
                                                                  (("2"
                                                                    (expand
                                                                     "emptyset")
                                                                    (("2"
                                                                      (skosimp)
                                                                      (("2"
                                                                        (expand
                                                                         "phi")
                                                                        (("2"
                                                                          (expand
                                                                           "member")
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "x!1")
                                                                            (("2"
                                                                              (inst
                                                                               -
                                                                               "x!1")
                                                                              (("2"
                                                                                (expand
                                                                                 "zeroed?")
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "x!1")
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((empty? const-decl "bool" sets nil)
    (bounded nonempty-type-eq-decl nil riemann_scaf nil)
    (zeroed_bounded? const-decl "bool" riemann_scaf nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (lower_step_exists formula-decl nil riemann_scaf nil)
    (step nonempty-type-eq-decl nil riemann_scaf nil)
    (step? const-decl "bool" riemann_scaf nil)
    (b formal-const-decl "{x: real | a < x}" riemann_scaf nil)
    (< const-decl "bool" reals nil)
    (a formal-const-decl "real" riemann_scaf nil)
    (Integrable? const-decl "bool" integral_def "analysis/")
    (Integrable_funs type-eq-decl nil integral_def "analysis/")
    (Integral const-decl "real" integral_def "analysis/")
    (riemann_lebesgue_step_integrable formula-decl nil riemann_scaf
     nil)
    (member const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (upper_bound const-decl "bool" bound_defs "reals/")
    (integral const-decl "real" integral "measure_integration/")
    (integrable nonempty-type-eq-decl nil integral
     "measure_integration/")
    (integrable? const-decl "bool" integral "measure_integration/")
    (lambda_ const-decl "complete_sigma_finite[real, cal_M]"
     lebesgue_def nil)
    (complete_sigma_finite type-eq-decl nil measure_def
     "measure_integration/")
    (complete_sigma_finite? const-decl "bool" measure_def
     "measure_integration/")
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     "extended_nnreal/")
    (cal_M const-decl "sigma_algebra" lebesgue_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     "measure_integration/")
    (sigma_algebra? const-decl "bool" subset_algebra_def
     "measure_integration/")
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" real_fun_orders "reals/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integral_phi_closed formula-decl nil lebesgue_def nil)
    (integral_scal formula-decl nil integral "measure_integration/")
    (integral_ae_le formula-decl nil integral "measure_integration/")
    (pointwise_ae? const-decl "bool" measure_theory
     "measure_integration/")
    (fullset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (negligible nonempty-type-eq-decl nil measure_theory
     "measure_integration/")
    (negligible_set? const-decl "bool" measure_theory
     "measure_integration/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (zeroed? const-decl "bool" riemann_scaf nil)
    (TRUE const-decl "bool" booleans nil)
    (ae_in? const-decl "bool" measure_theory "measure_integration/")
    (real_is_complete name-judgement "metric_complete" real_topology
     "metric_space/")
    (ae_le? const-decl "bool" measure_theory "measure_integration/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (closed_is_measurable application-judgement "measurable_set"
     lebesgue_def nil)
    (integrable_scal judgement-tcc nil integral "measure_integration/")
    (set type-eq-decl nil sets nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (phi const-decl "nat" measure_space "measure_integration/")
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (metric_induced_topology const-decl "setofsets[T]" metric_space_def
     "metric_space/")
    (closed? const-decl "bool" topology "topology/")
    (closed nonempty-type-eq-decl nil topology "topology/")
    (closed_ball const-decl "closed" real_topology "metric_space/")
    (closed_interval nonempty-type-eq-decl nil real_topology
     "metric_space/")
    (closed const-decl "closed_interval" real_topology "metric_space/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<= const-decl "bool" reals nil)
    (integrable_phi_closed formula-decl nil lebesgue_def nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (bounded? const-decl "bool" sup_norm "measure_integration/")
    (above_bounded const-decl "bool" bounded_reals "reals/"))
   nil
   (lower_riemann_integral subtype
    "{z | EXISTS phi: booleans.AND(real_fun_orders[real].<=(riemann_scaf.phi, riemann_scaf.f), riemann_scaf.z = integral[real, lebesgue_def.cal_M, lebesgue_def.lambda_].integral(riemann_scaf.phi))}"
    "sup_set[real]")))
 (upper_riemann_integral_TCC1 0
  (upper_riemann_integral_TCC1-1 nil 3450716455
   ("" (skosimp)
    (("" (lemma "riemann_lebesgue_step_integrable" ("phi" "psi!1"))
      (("" (flatten) nil nil)) nil))
    nil)
   ((step nonempty-type-eq-decl nil riemann_scaf nil)
    (step? const-decl "bool" riemann_scaf nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (riemann_lebesgue_step_integrable formula-decl nil riemann_scaf
     nil))
   nil
   (upper_riemann_integral subtype "riemann_scaf.psi"
    "integrable[real, cal_M, lambda_]")))
 (upper_riemann_integral_TCC2 0
  (upper_riemann_integral_TCC2-1 nil 3450716455
   ("" (skosimp)
    (("" (split)
      (("1" (expand "nonempty?")
        (("1" (expand "empty?")
          (("1" (expand "member")
            (("1" (lemma "upper_step_exists" ("f" "f!1"))
              (("1" (skosimp)
                (("1"
                  (lemma "riemann_lebesgue_step_integrable"
                   ("phi" "psi!1"))
                  (("1" (flatten)
                    (("1" (inst - "Integral[real](a, b, psi!1)")
                      (("1" (inst + "psi!1") (("1" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "below_bounded")
        (("2" (typepred "f!1")
          (("2" (expand "zeroed_bounded?")
            (("2" (flatten)
              (("2" (expand "bounded?")
                (("2" (skosimp)
                  (("2" (inst + "(-c!1)*(b-a)")
                    (("2" (expand "lower_bound")
                      (("2" (skosimp)
                        (("2" (typepred "z!1")
                          (("2" (skosimp)
                            (("2"
                              (lemma "riemann_lebesgue_step_integrable"
                               ("phi" "psi!1"))
                              (("2"
                                (flatten)
                                (("2"
                                  (lemma
                                   "integrable_phi_closed"
                                   ("a" "a" "b" "b"))
                                  (("1"
                                    (lemma
                                     "integral_phi_closed"
                                     ("a" "a" "b" "b"))
                                    (("1"
                                      (lemma
                                       "integrable_scal"
                                       ("c"
                                        "(-c!1)"
                                        "f"
                                        "phi(closed(a, b))"))
                                      (("1"
                                        (lemma
                                         "integral_scal"
                                         ("c"
                                          "(-c!1)"
                                          "f"
                                          "phi(closed(a, b))"))
                                        (("1"
                                          (replace -3)
                                          (("1"
                                            (lemma
                                             "integral_ae_le"
                                             ("f2"
                                              "psi!1"
                                              "f1"
                                              "*[real]((-c!1), phi(closed(a, b)))"))
                                            (("1"
                                              (split -1)
                                              (("1"
                                                (replace -2)
                                                (("1"
                                                  (replace -10)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but
                                                 (1 -11 -10 -8))
                                                (("2"
                                                  (expand "<=")
                                                  (("2"
                                                    (expand "ae_le?")
                                                    (("2"
                                                      (expand
                                                       "pointwise_ae?")
                                                      (("2"
                                                        (expand "ae?")
                                                        (("2"
                                                          (expand
                                                           "fullset")
                                                          (("2"
                                                            (expand
                                                             "ae_in?")
                                                            (("2"
                                                              (inst
                                                               +
                                                               "emptyset[real]")
                                                              (("2"
                                                                (skosimp)
                                                                (("2"
                                                                  (expand
                                                                   "emptyset")
                                                                  (("2"
                                                                    (expand
                                                                     "*")
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "x!1")
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "x!1")
                                                                        (("2"
                                                                          (expand
                                                                           "zeroed?")
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "x!1")
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((empty? const-decl "bool" sets nil)
    (bounded nonempty-type-eq-decl nil riemann_scaf nil)
    (zeroed_bounded? const-decl "bool" riemann_scaf nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (upper_step_exists formula-decl nil riemann_scaf nil)
    (riemann_lebesgue_step_integrable formula-decl nil riemann_scaf
     nil)
    (step? const-decl "bool" riemann_scaf nil)
    (step nonempty-type-eq-decl nil riemann_scaf nil)
    (b formal-const-decl "{x: real | a < x}" riemann_scaf nil)
    (< const-decl "bool" reals nil)
    (a formal-const-decl "real" riemann_scaf nil)
    (Integral const-decl "real" integral_def "analysis/")
    (Integrable_funs type-eq-decl nil integral_def "analysis/")
    (Integrable? const-decl "bool" integral_def "analysis/")
    (member const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (lower_bound const-decl "bool" bound_defs "reals/")
    (integral const-decl "real" integral "measure_integration/")
    (integrable nonempty-type-eq-decl nil integral
     "measure_integration/")
    (integrable? const-decl "bool" integral "measure_integration/")
    (lambda_ const-decl "complete_sigma_finite[real, cal_M]"
     lebesgue_def nil)
    (complete_sigma_finite type-eq-decl nil measure_def
     "measure_integration/")
    (complete_sigma_finite? const-decl "bool" measure_def
     "measure_integration/")
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     "extended_nnreal/")
    (cal_M const-decl "sigma_algebra" lebesgue_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     "measure_integration/")
    (sigma_algebra? const-decl "bool" subset_algebra_def
     "measure_integration/")
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" real_fun_orders "reals/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integrable_phi_closed formula-decl nil lebesgue_def nil)
    (<= const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (closed_is_measurable application-judgement "measurable_set"
     lebesgue_def nil)
    (integrable_scal judgement-tcc nil integral "measure_integration/")
    (set type-eq-decl nil sets nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (phi const-decl "nat" measure_space "measure_integration/")
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (metric_induced_topology const-decl "setofsets[T]" metric_space_def
     "metric_space/")
    (closed? const-decl "bool" topology "topology/")
    (closed nonempty-type-eq-decl nil topology "topology/")
    (closed_ball const-decl "closed" real_topology "metric_space/")
    (closed_interval nonempty-type-eq-decl nil real_topology
     "metric_space/")
    (closed const-decl "closed_interval" real_topology "metric_space/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (pointwise_ae? const-decl "bool" measure_theory
     "measure_integration/")
    (fullset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (negligible nonempty-type-eq-decl nil measure_theory
     "measure_integration/")
    (negligible_set? const-decl "bool" measure_theory
     "measure_integration/")
    (TRUE const-decl "bool" booleans nil)
    (zeroed? const-decl "bool" riemann_scaf nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ae_in? const-decl "bool" measure_theory "measure_integration/")
    (real_is_complete name-judgement "metric_complete" real_topology
     "metric_space/")
    (ae_le? const-decl "bool" measure_theory "measure_integration/")
    (integral_ae_le formula-decl nil integral "measure_integration/")
    (integral_scal formula-decl nil integral "measure_integration/")
    (integral_phi_closed formula-decl nil lebesgue_def nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (bounded? const-decl "bool" sup_norm "measure_integration/")
    (below_bounded const-decl "bool" bounded_reals "reals/"))
   nil
   (upper_riemann_integral subtype
    "{z | EXISTS psi: booleans.AND(real_fun_orders[real].<=(riemann_scaf.f, riemann_scaf.psi), riemann_scaf.z = integral[real, lebesgue_def.cal_M, lebesgue_def.lambda_].integral(riemann_scaf.psi))}"
    "inf_set[real]")))
 (lower_riemann_prop1 0
  (lower_riemann_prop1-1 nil 3450818440
   ("" (skosimp)
    (("" (name "RHS" "lower_riemann_integral(f!1) - epsilon!1")
      (("" (replace -1)
        (("" (expand "lower_riemann_integral")
          ((""
            (typepred
             "sup({z | EXISTS phi: phi <= f!1 AND z = integral(phi)})")
            (("1"
              (name-replace "SUP"
               "sup({z | EXISTS phi: phi <= f!1 AND z = integral(phi)})")
              (("1" (expand "least_upper_bound")
                (("1" (flatten)
                  (("1" (expand "upper_bound")
                    (("1" (inst -2 "SUP-epsilon!1")
                      (("1" (assert)
                        (("1" (skosimp)
                          (("1" (typepred "z!1")
                            (("1" (skosimp)
                              (("1"
                                (replace -2)
                                (("1"
                                  (inst + "phi!1")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (lemma "lower_riemann_integral_TCC2" ("f" "f!1"))
              (("2" (propax) nil nil)) nil)
             ("3" (skosimp)
              (("3" (lemma "lower_riemann_integral_TCC1" ("f" "f!1"))
                (("3" (inst - "phi!1") (("3" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (lower_riemann_integral const-decl "real" riemann_scaf nil)
    (bounded nonempty-type-eq-decl nil riemann_scaf nil)
    (zeroed_bounded? const-decl "bool" riemann_scaf nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (lower_riemann_integral_TCC1 subtype-tcc nil riemann_scaf nil)
    (lower_riemann_integral_TCC2 subtype-tcc nil riemann_scaf nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (upper_bound const-decl "bool" bound_defs "reals/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (least_upper_bound const-decl "bool" bound_defs "reals/")
    (<= const-decl "bool" reals nil) (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (setof type-eq-decl nil defined_types nil)
    (above_bounded const-decl "bool" bounded_reals "reals/")
    (sup_set type-eq-decl nil bounded_reals "reals/")
    (sup const-decl "{x | least_upper_bound(<=)(x, Su)}" bounded_reals
         "reals/")
    (step? const-decl "bool" riemann_scaf nil)
    (step nonempty-type-eq-decl nil riemann_scaf nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" real_fun_orders "reals/")
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def
     "measure_integration/")
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     "measure_integration/")
    (cal_M const-decl "sigma_algebra" lebesgue_def nil)
    (nnreal type-eq-decl nil real_types nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     "extended_nnreal/")
    (complete_sigma_finite? const-decl "bool" measure_def
     "measure_integration/")
    (complete_sigma_finite type-eq-decl nil measure_def
     "measure_integration/")
    (lambda_ const-decl "complete_sigma_finite[real, cal_M]"
     lebesgue_def nil)
    (integrable? const-decl "bool" integral "measure_integration/")
    (integrable nonempty-type-eq-decl nil integral
     "measure_integration/")
    (integral const-decl "real" integral "measure_integration/"))
   shostak))
 (upper_riemann_prop1 0
  (upper_riemann_prop1-1 nil 3450819321
   ("" (skosimp)
    (("" (name "RHS" "upper_riemann_integral(f!1) + epsilon!1")
      (("" (replace -1)
        (("" (expand "upper_riemann_integral")
          ((""
            (typepred
             "inf({z | EXISTS psi: f!1 <= psi AND z = integral(psi)})")
            (("1"
              (name-replace "INF"
               "inf({z | EXISTS psi: f!1 <= psi AND z = integral(psi)})")
              (("1" (expand "greatest_lower_bound")
                (("1" (flatten)
                  (("1" (expand "lower_bound")
                    (("1" (inst -2 "INF+epsilon!1")
                      (("1" (assert)
                        (("1" (skosimp)
                          (("1" (typepred "z!1")
                            (("1" (skosimp)
                              (("1"
                                (replace -2)
                                (("1"
                                  (replace -4)
                                  (("1"
                                    (inst + "psi!1")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (lemma "upper_riemann_integral_TCC2" ("f" "f!1"))
              (("2" (propax) nil nil)) nil)
             ("3" (lemma "upper_riemann_integral_TCC1" ("f" "f!1"))
              (("3" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (upper_riemann_integral const-decl "real" riemann_scaf nil)
    (bounded nonempty-type-eq-decl nil riemann_scaf nil)
    (zeroed_bounded? const-decl "bool" riemann_scaf nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (upper_riemann_integral_TCC1 subtype-tcc nil riemann_scaf nil)
    (upper_riemann_integral_TCC2 subtype-tcc nil riemann_scaf nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (lower_bound const-decl "bool" bound_defs "reals/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (greatest_lower_bound const-decl "bool" bound_defs "reals/")
    (<= const-decl "bool" reals nil) (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (setof type-eq-decl nil defined_types nil)
    (below_bounded const-decl "bool" bounded_reals "reals/")
    (inf_set type-eq-decl nil bounded_reals "reals/")
    (inf const-decl "{x | greatest_lower_bound(<=)(x, Sl)}"
         bounded_reals "reals/")
    (step? const-decl "bool" riemann_scaf nil)
    (step nonempty-type-eq-decl nil riemann_scaf nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" real_fun_orders "reals/")
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def
     "measure_integration/")
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     "measure_integration/")
    (cal_M const-decl "sigma_algebra" lebesgue_def nil)
    (nnreal type-eq-decl nil real_types nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     "extended_nnreal/")
    (complete_sigma_finite? const-decl "bool" measure_def
     "measure_integration/")
    (complete_sigma_finite type-eq-decl nil measure_def
     "measure_integration/")
    (lambda_ const-decl "complete_sigma_finite[real, cal_M]"
     lebesgue_def nil)
    (integrable? const-decl "bool" integral "measure_integration/")
    (integrable nonempty-type-eq-decl nil integral
     "measure_integration/")
    (integral const-decl "real" integral "measure_integration/"))
   shostak))
 (lower_riemann_prop2 0
  (lower_riemann_prop2-1 nil 3450823935
   ("" (skosimp)
    (("" (expand "lower_riemann_integral")
      ((""
        (typepred
         "sup({z | EXISTS phi: phi <= f!1 AND z = integral(phi)})")
        (("1"
          (name-replace "RHS"
           "sup({z | EXISTS phi: phi <= f!1 AND z = integral(phi)})")
          (("1" (expand "least_upper_bound")
            (("1" (expand "upper_bound")
              (("1" (flatten)
                (("1" (inst - "integral(phi!1)")
                  (("1" (inst + "phi!1") nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (lemma "lower_riemann_integral_TCC2" ("f" "f!1"))
          (("2" (propax) nil nil)) nil)
         ("3" (lemma "lower_riemann_integral_TCC1" ("f" "f!1"))
          (("3" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   ((lower_riemann_integral const-decl "real" riemann_scaf nil)
    (lower_riemann_integral_TCC1 subtype-tcc nil riemann_scaf nil)
    (lower_riemann_integral_TCC2 subtype-tcc nil riemann_scaf nil)
    (upper_bound const-decl "bool" bound_defs "reals/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (pred type-eq-decl nil defined_types nil)
    (least_upper_bound const-decl "bool" bound_defs "reals/")
    (<= const-decl "bool" reals nil) (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (setof type-eq-decl nil defined_types nil)
    (above_bounded const-decl "bool" bounded_reals "reals/")
    (sup_set type-eq-decl nil bounded_reals "reals/")
    (sup const-decl "{x | least_upper_bound(<=)(x, Su)}" bounded_reals
         "reals/")
    (step? const-decl "bool" riemann_scaf nil)
    (step nonempty-type-eq-decl nil riemann_scaf nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" real_fun_orders "reals/")
    (zeroed_bounded? const-decl "bool" riemann_scaf nil)
    (bounded nonempty-type-eq-decl nil riemann_scaf nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def
     "measure_integration/")
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     "measure_integration/")
    (cal_M const-decl "sigma_algebra" lebesgue_def nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     "extended_nnreal/")
    (complete_sigma_finite? const-decl "bool" measure_def
     "measure_integration/")
    (complete_sigma_finite type-eq-decl nil measure_def
     "measure_integration/")
    (lambda_ const-decl "complete_sigma_finite[real, cal_M]"
     lebesgue_def nil)
    (integrable? const-decl "bool" integral "measure_integration/")
    (integrable nonempty-type-eq-decl nil integral
     "measure_integration/")
    (integral const-decl "real" integral "measure_integration/"))
   shostak))
 (upper_riemann_prop2 0
  (upper_riemann_prop2-1 nil 3450823809
   ("" (skosimp)
    (("" (expand "upper_riemann_integral")
      ((""
        (typepred
         "inf({z | EXISTS psi: f!1 <= psi AND z = integral(psi)})")
        (("1"
          (name-replace "LHS"
           "inf({z | EXISTS psi: f!1 <= psi AND z = integral(psi)})")
          (("1" (expand "greatest_lower_bound")
            (("1" (flatten)
              (("1" (expand "lower_bound")
                (("1" (inst -1 "integral(psi!1)")
                  (("1" (inst + "psi!1") nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (lemma "upper_riemann_integral_TCC2" ("f" "f!1"))
          (("2" (propax) nil nil)) nil)
         ("3" (lemma "upper_riemann_integral_TCC1" ("f" "f!1"))
          (("3" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   ((upper_riemann_integral const-decl "real" riemann_scaf nil)
    (upper_riemann_integral_TCC1 subtype-tcc nil riemann_scaf nil)
    (upper_riemann_integral_TCC2 subtype-tcc nil riemann_scaf nil)
    (lower_bound const-decl "bool" bound_defs "reals/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (pred type-eq-decl nil defined_types nil)
    (greatest_lower_bound const-decl "bool" bound_defs "reals/")
    (<= const-decl "bool" reals nil) (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (setof type-eq-decl nil defined_types nil)
    (below_bounded const-decl "bool" bounded_reals "reals/")
    (inf_set type-eq-decl nil bounded_reals "reals/")
    (inf const-decl "{x | greatest_lower_bound(<=)(x, Sl)}"
         bounded_reals "reals/")
    (step? const-decl "bool" riemann_scaf nil)
    (step nonempty-type-eq-decl nil riemann_scaf nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" real_fun_orders "reals/")
    (zeroed_bounded? const-decl "bool" riemann_scaf nil)
    (bounded nonempty-type-eq-decl nil riemann_scaf nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def
     "measure_integration/")
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     "measure_integration/")
    (cal_M const-decl "sigma_algebra" lebesgue_def nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     "extended_nnreal/")
    (complete_sigma_finite? const-decl "bool" measure_def
     "measure_integration/")
    (complete_sigma_finite type-eq-decl nil measure_def
     "measure_integration/")
    (lambda_ const-decl "complete_sigma_finite[real, cal_M]"
     lebesgue_def nil)
    (integrable? const-decl "bool" integral "measure_integration/")
    (integrable nonempty-type-eq-decl nil integral
     "measure_integration/")
    (integral const-decl "real" integral "measure_integration/"))
   shostak))
 (lower_upper_riemann_prop 0
  (lower_upper_riemann_prop-1 nil 3450793358
   ("" (skosimp)
    (("" (expand "upper_riemann_integral")
      (("" (expand "lower_riemann_integral")
        ((""
          (typepred
           "sup({z | EXISTS phi: phi <= f!1 AND z = integral(phi)})")
          (("1"
            (name-replace "LOW"
             "sup({z | EXISTS phi: phi <= f!1 AND z = integral(phi)})")
            (("1"
              (typepred
               "inf({z | EXISTS psi: f!1 <= psi AND z = integral(psi)})")
              (("1"
                (name-replace "HIGH"
                 "inf({z | EXISTS psi: f!1 <= psi AND z = integral(psi)})")
                (("1" (expand "greatest_lower_bound")
                  (("1" (expand "least_upper_bound")
                    (("1" (flatten)
                      (("1" (inst -4 "HIGH")
                        (("1" (split -4)
                          (("1" (propax) nil nil)
                           ("2" (assert) nil nil)
                           ("3" (expand "upper_bound" 1)
                            (("3" (skosimp)
                              (("3"
                                (typepred "z!1")
                                (("3"
                                  (skosimp)
                                  (("3"
                                    (inst -4 "z!1")
                                    (("3"
                                      (split -4)
                                      (("1" (propax) nil nil)
                                       ("2" (assert) nil nil)
                                       ("3"
                                        (expand "lower_bound" 1)
                                        (("3"
                                          (skosimp)
                                          (("3"
                                            (typepred "z!2")
                                            (("3"
                                              (skosimp)
                                              (("3"
                                                (lemma
                                                 "riemann_lebesgue_step_integrable"
                                                 ("phi" "phi!1"))
                                                (("3"
                                                  (lemma
                                                   "riemann_lebesgue_step_integrable"
                                                   ("phi" "psi!1"))
                                                  (("3"
                                                    (flatten)
                                                    (("3"
                                                      (replace -3)
                                                      (("3"
                                                        (replace -6)
                                                        (("3"
                                                          (hide
                                                           -1
                                                           -3
                                                           -4
                                                           -6
                                                           -11
                                                           -12)
                                                          (("3"
                                                            (replace
                                                             -4)
                                                            (("3"
                                                              (replace
                                                               -6)
                                                              (("3"
                                                                (hide
                                                                 -4
                                                                 -6
                                                                 2
                                                                 3)
                                                                (("3"
                                                                  (lemma
                                                                   "integral_ae_le"
                                                                   ("f1"
                                                                    "phi!1"
                                                                    "f2"
                                                                    "psi!1"))
                                                                  (("3"
                                                                    (assert)
                                                                    (("3"
                                                                      (hide
                                                                       -1
                                                                       -2
                                                                       2)
                                                                      (("3"
                                                                        (expand
                                                                         "<=")
                                                                        (("3"
                                                                          (expand
                                                                           "ae_le?")
                                                                          (("3"
                                                                            (expand
                                                                             "pointwise_ae?")
                                                                            (("3"
                                                                              (expand
                                                                               "ae?")
                                                                              (("3"
                                                                                (expand
                                                                                 "fullset")
                                                                                (("3"
                                                                                  (expand
                                                                                   "ae_in?")
                                                                                  (("3"
                                                                                    (inst
                                                                                     +
                                                                                     "emptyset[real]")
                                                                                    (("3"
                                                                                      (skosimp)
                                                                                      (("3"
                                                                                        (inst
                                                                                         -
                                                                                         "x!1")
                                                                                        (("3"
                                                                                          (inst
                                                                                           -
                                                                                           "x!1")
                                                                                          (("3"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (lemma "upper_riemann_integral_TCC2" ("f" "f!1"))
                (("2" (propax) nil nil)) nil)
               ("3" (skosimp)
                (("3"
                  (lemma "riemann_lebesgue_step_integrable"
                   ("phi" "psi!1"))
                  (("3" (flatten) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (lemma "lower_riemann_integral_TCC2" ("f" "f!1"))
            (("2" (propax) nil nil)) nil)
           ("3" (skosimp)
            (("3"
              (lemma "riemann_lebesgue_step_integrable"
               ("phi" "phi!1"))
              (("3" (flatten) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((upper_riemann_integral const-decl "real" riemann_scaf nil)
    (integral const-decl "real" integral "measure_integration/")
    (integrable nonempty-type-eq-decl nil integral
     "measure_integration/")
    (integrable? const-decl "bool" integral "measure_integration/")
    (lambda_ const-decl "complete_sigma_finite[real, cal_M]"
     lebesgue_def nil)
    (complete_sigma_finite type-eq-decl nil measure_def
     "measure_integration/")
    (complete_sigma_finite? const-decl "bool" measure_def
     "measure_integration/")
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     "extended_nnreal/")
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (cal_M const-decl "sigma_algebra" lebesgue_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     "measure_integration/")
    (sigma_algebra? const-decl "bool" subset_algebra_def
     "measure_integration/")
    (setofsets type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bounded nonempty-type-eq-decl nil riemann_scaf nil)
    (zeroed_bounded? const-decl "bool" riemann_scaf nil)
    (<= const-decl "bool" real_fun_orders "reals/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (step nonempty-type-eq-decl nil riemann_scaf nil)
    (step? const-decl "bool" riemann_scaf nil)
    (sup const-decl "{x | least_upper_bound(<=)(x, Su)}" bounded_reals
         "reals/")
    (sup_set type-eq-decl nil bounded_reals "reals/")
    (above_bounded const-decl "bool" bounded_reals "reals/")
    (setof type-eq-decl nil defined_types nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil) (<= const-decl "bool" reals nil)
    (least_upper_bound const-decl "bool" bound_defs "reals/")
    (pred type-eq-decl nil defined_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (greatest_lower_bound const-decl "bool" bound_defs "reals/")
    (below_bounded const-decl "bool" bounded_reals "reals/")
    (inf_set type-eq-decl nil bounded_reals "reals/")
    (inf const-decl "{x | greatest_lower_bound(<=)(x, Sl)}"
         bounded_reals "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (integral_ae_le formula-decl nil integral "measure_integration/")
    (ae_le? const-decl "bool" measure_theory "measure_integration/")
    (real_is_complete name-judgement "metric_complete" real_topology
     "metric_space/")
    (ae_in? const-decl "bool" measure_theory "measure_integration/")
    (member const-decl "bool" sets nil)
    (TRUE const-decl "bool" booleans nil)
    (negligible_set? const-decl "bool" measure_theory
     "measure_integration/")
    (negligible nonempty-type-eq-decl nil measure_theory
     "measure_integration/")
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (fullset const-decl "set" sets nil)
    (pointwise_ae? const-decl "bool" measure_theory
     "measure_integration/")
    (riemann_lebesgue_step_integrable formula-decl nil riemann_scaf
     nil)
    (lower_bound const-decl "bool" bound_defs "reals/")
    (upper_bound const-decl "bool" bound_defs "reals/")
    (upper_riemann_integral_TCC2 subtype-tcc nil riemann_scaf nil)
    (lower_riemann_integral_TCC2 subtype-tcc nil riemann_scaf nil)
    (lower_riemann_integral const-decl "real" riemann_scaf nil))
   shostak))
 (riemann_integrable_def1 0
  (riemann_integrable_def1-1 nil 3450803522
   ("" (skosimp)
    (("" (lemma "lower_upper_riemann_prop" ("f" "f!1"))
      (("" (expand "<=")
        (("" (split)
          (("1" (assert)
            (("1"
              (name "EPS"
                    "(upper_riemann_integral(f!1)-lower_riemann_integral(f!1))/2")
              (("1" (case "EPS>0")
                (("1"
                  (lemma "steps_exist[real]"
                   ("a" "a" "b" "b" "f" "f!1"))
                  (("1" (expand "Integrable?")
                    (("1" (assert)
                      (("1" (inst - "EPS")
                        (("1" (skolem - ("phi!1" "psi!1"))
                          (("1" (flatten)
                            (("1" (hide -9)
                              (("1"
                                (name
                                 "phi!2"
                                 "lambda x: if a <= x AND x <= b then phi!1(x) else 0 endif")
                                (("1"
                                  (name
                                   "psi!2"
                                   "lambda x: if a <= x AND x <= b then psi!1(x) else 0 endif")
                                  (("1"
                                    (case "step?(phi!2)")
                                    (("1"
                                      (case "step?(psi!2)")
                                      (("1"
                                        (hide -3 -4 -5 -6)
                                        (("1"
                                          (case
                                           "phi!2<=f!1 & f!1 <= psi!2")
                                          (("1"
                                            (lemma
                                             "lower_riemann_prop2"
                                             ("phi" "phi!2" "f" "f!1"))
                                            (("1"
                                              (lemma
                                               "upper_riemann_prop2"
                                               ("psi"
                                                "psi!2"
                                                "f"
                                                "f!1"))
                                              (("1"
                                                (flatten -3)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide -7)
                                                    (("1"
                                                      (lemma
                                                       "riemann_lebesgue_step_integrable"
                                                       ("phi" "phi!2"))
                                                      (("1"
                                                        (lemma
                                                         "riemann_lebesgue_step_integrable"
                                                         ("phi"
                                                          "psi!2"))
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (lemma
                                                             "Integral_diff[real]"
                                                             ("a"
                                                              "a"
                                                              "b"
                                                              "b"
                                                              "f"
                                                              "psi!2"
                                                              "g"
                                                              "phi!2"))
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (expand
                                                                   "-"
                                                                   (-15
                                                                    -16))
                                                                  (("1"
                                                                    (lemma
                                                                     "integral_restrict_eq"
                                                                     ("a"
                                                                      "a"
                                                                      "b"
                                                                      "b"
                                                                      "f"
                                                                      "LAMBDA (x: real): psi!2(x) - phi!2(x)"
                                                                      "g"
                                                                      "LAMBDA (x: real): psi!1(x) - phi!1(x)"))
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (split
                                                                         -1)
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (expand
                                                                             "Integral"
                                                                             -3)
                                                                            (("1"
                                                                              (replace
                                                                               -3)
                                                                              (("1"
                                                                                (expand
                                                                                 "Integral")
                                                                                (("1"
                                                                                  (replace
                                                                                   -6)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -9)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("2"
                                                                            (skosimp)
                                                                            (("2"
                                                                              (expand
                                                                               "psi!2")
                                                                              (("2"
                                                                                (expand
                                                                                 "phi!2")
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (expand
                                                                           "Integrable?")
                                                                          (("3"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (propax) nil nil))
                                              nil)
                                             ("2" (propax) nil nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (-3 1))
                                            (("2"
                                              (expand "<=" 1)
                                              (("2"
                                                (typepred "f!1")
                                                (("2"
                                                  (expand
                                                   "zeroed_bounded?")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (hide -1)
                                                      (("2"
                                                        (expand
                                                         "zeroed?")
                                                        (("2"
                                                          (split 1)
                                                          (("1"
                                                            (skosimp)
                                                            (("1"
                                                              (inst
                                                               -
                                                               "x!1")
                                                              (("1"
                                                                (expand
                                                                 "phi!2")
                                                                (("1"
                                                                  (case
                                                                   "a <= x!1 AND x!1 <= b")
                                                                  (("1"
                                                                    (inst
                                                                     -3
                                                                     "x!1")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (replace
                                                                       1
                                                                       2)
                                                                      (("2"
                                                                        (hide
                                                                         -2)
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skosimp)
                                                            (("2"
                                                              (expand
                                                               "psi!2")
                                                              (("2"
                                                                (case-replace
                                                                 "a <= x!1 AND x!1 <= b")
                                                                (("1"
                                                                  (inst
                                                                   -3
                                                                   "x!1")
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (replace
                                                                   1
                                                                   2)
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "x!1")
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but (-5 1))
                                        (("2"
                                          (expand "step?")
                                          (("2"
                                            (expand "psi!2")
                                            (("2"
                                              (split)
                                              (("1"
                                                (expand
                                                 "step_function?")
                                                (("1"
                                                  (skosimp)
                                                  (("1"
                                                    (inst + "P!1")
                                                    (("1"
                                                      (expand
                                                       "step_function_on?")
                                                      (("1"
                                                        (skosimp)
                                                        (("1"
                                                          (inst
                                                           -
                                                           "ii!1")
                                                          (("1"
                                                            (skosimp)
                                                            (("1"
                                                              (inst
                                                               +
                                                               "fv!1")
                                                              (("1"
                                                                (skosimp)
                                                                (("1"
                                                                  (typepred
                                                                   "x!1")
                                                                  (("1"
                                                                    (typepred
                                                                     "P!1")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (inst
                                                                         -7
                                                                         "x!1")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide -1)
                                                (("2"
                                                  (expand "zeroed?")
                                                  (("2"
                                                    (skosimp)
                                                    (("2"
                                                      (split)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (-3 1))
                                      (("2"
                                        (expand "phi!2")
                                        (("2"
                                          (expand "step?")
                                          (("2"
                                            (split)
                                            (("1"
                                              (expand "step_function?")
                                              (("1"
                                                (skosimp)
                                                (("1"
                                                  (inst + "P!1")
                                                  (("1"
                                                    (expand
                                                     "step_function_on?")
                                                    (("1"
                                                      (skosimp)
                                                      (("1"
                                                        (inst - "ii!1")
                                                        (("1"
                                                          (skosimp)
                                                          (("1"
                                                            (inst
                                                             +
                                                             "fv!1")
                                                            (("1"
                                                              (skosimp)
                                                              (("1"
                                                                (typepred
                                                                 "x!1")
                                                                (("1"
                                                                  (typepred
                                                                   "P!1")
                                                                  (("1"
                                                                    (inst
                                                                     -7
                                                                     "x!1")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide -1)
                                              (("2"
                                                (expand "zeroed?")
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2"
              (lemma "step_to_integrable[real]"
               ("a" "a" "b" "b" "f" "f!1"))
              (("2" (expand "Integrable?")
                (("2" (assert)
                  (("2" (hide 2)
                    (("2" (skosimp)
                      (("2"
                        (lemma "lower_riemann_prop1"
                         ("f" "f!1" "epsilon" "eps!1/2"))
                        (("2"
                          (lemma "upper_riemann_prop1"
                           ("f" "f!1" "epsilon" "eps!1/2"))
                          (("2" (skosimp*)
                            (("2"
                              (lemma "riemann_lebesgue_step_integrable"
                               ("phi" "phi!1"))
                              (("2"
                                (lemma
                                 "riemann_lebesgue_step_integrable"
                                 ("phi" "psi!1"))
                                (("2"
                                  (flatten)
                                  (("2"
                                    (inst + "phi!1" "psi!1")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (typepred "phi!1")
                                        (("2"
                                          (typepred "psi!1")
                                          (("2"
                                            (expand "step?")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (replace -1)
                                                (("2"
                                                  (replace -3)
                                                  (("2"
                                                    (lemma
                                                     "integral_diff[real]"
                                                     ("a"
                                                      "a"
                                                      "b"
                                                      "b"
                                                      "f"
                                                      "psi!1"
                                                      "g"
                                                      "phi!1"))
                                                    (("2"
                                                      (expand "-" 1)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "Integrable?")
                                                          (("2"
                                                            (expand
                                                             "Integral")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (hide-all-but
                                                                     (-13
                                                                      -15
                                                                      1))
                                                                    (("2"
                                                                      (skosimp)
                                                                      (("2"
                                                                        (expand
                                                                         "<="
                                                                         (-1
                                                                          -2))
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "xx!1")
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "xx!1")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bounded nonempty-type-eq-decl nil riemann_scaf nil)
    (zeroed_bounded? const-decl "bool" riemann_scaf nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (lower_upper_riemann_prop formula-decl nil riemann_scaf nil)
    (lower_riemann_integral const-decl "real" riemann_scaf nil)
    (upper_riemann_integral const-decl "real" riemann_scaf nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (steps_exist formula-decl nil integral_split_scaf "analysis/")
    (a formal-const-decl "real" riemann_scaf nil)
    (< const-decl "bool" reals nil)
    (b formal-const-decl "{x: real | a < x}" riemann_scaf nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (<= const-decl "bool" real_fun_orders "reals/")
    (upper_riemann_prop2 formula-decl nil riemann_scaf nil)
    (riemann_lebesgue_step_integrable formula-decl nil riemann_scaf
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (Integral const-decl "real" integral_def "analysis/")
    (integral_restrict_eq formula-decl nil integral_def "analysis/")
    (Integral_diff formula-decl nil integral "analysis/")
    (step nonempty-type-eq-decl nil riemann_scaf nil)
    (lower_riemann_prop2 formula-decl nil riemann_scaf nil)
    (closed_interval type-eq-decl nil intervals_real "reals/")
    (zeroed? const-decl "bool" riemann_scaf nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (step_function_on? const-decl "bool" step_fun_def "analysis/")
    (open_interval type-eq-decl nil intervals_real "reals/")
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (partition type-eq-decl nil integral_def "analysis/")
    (step_function? const-decl "bool" step_fun_def "analysis/")
    (step? const-decl "bool" riemann_scaf nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Integrable? const-decl "bool" integral_def "analysis/")
    (> const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (step_to_integrable formula-decl nil integral_step "analysis/")
    (upper_riemann_prop1 formula-decl nil riemann_scaf nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (integral_diff formula-decl nil integral_prep "analysis/")
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (lower_riemann_prop1 formula-decl nil riemann_scaf nil)
    (<= const-decl "bool" reals nil))
   shostak))
 (riemann_integrable_def2 0
  (riemann_integrable_def2-1 nil 3450865321
   ("" (skosimp)
    (("" (lemma "riemann_integrable_def1" ("f" "f!1"))
      (("" (assert)
        (("" (expand "Integrable?")
          (("" (expand "Integral")
            (("" (lemma "steps_exist" ("a" "a" "b" "b" "f" "f!1"))
              (("" (assert)
                ((""
                  (name "EPS"
                        "integral(a, b, f!1) - lower_riemann_integral(f!1)")
                  (("" (lemma "trichotomy" ("x" "EPS"))
                    (("" (split)
                      (("1" (inst - "EPS/2")
                        (("1" (skosimp)
                          (("1"
                            (name "phi!1"
                                  "lambda x: if a <=x&x<=b then f1!1(x) else 0 endif")
                            (("1"
                              (name "psi!1"
                                    "lambda x: if a <=x&x<=b then f2!1(x) else 0 endif")
                              (("1"
                                (case "step?(psi!1)")
                                (("1"
                                  (case "step?(phi!1)")
                                  (("1"
                                    (case "f!1<=psi!1")
                                    (("1"
                                      (case "phi!1<=f!1")
                                      (("1"
                                        (lemma
                                         "step_function_integrable?"
                                         ("a" "a" "b" "b" "f" "f1!1"))
                                        (("1"
                                          (lemma
                                           "step_function_integrable?"
                                           ("a"
                                            "a"
                                            "b"
                                            "b"
                                            "f"
                                            "f2!1"))
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lemma
                                               "integral_restr_eq"
                                               ("a"
                                                "a"
                                                "b"
                                                "b"
                                                "f"
                                                "f1!1"
                                                "g"
                                                "phi!1"))
                                              (("1"
                                                (lemma
                                                 "integral_restr_eq"
                                                 ("a"
                                                  "a"
                                                  "b"
                                                  "b"
                                                  "f"
                                                  "f2!1"
                                                  "g"
                                                  "psi!1"))
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (split -1)
                                                    (("1"
                                                      (split -2)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (hide
                                                           -11
                                                           -12
                                                           -15
                                                           -16
                                                           -17)
                                                          (("1"
                                                            (lemma
                                                             "integral_diff[real]"
                                                             ("a"
                                                              "a"
                                                              "b"
                                                              "b"
                                                              "f"
                                                              "psi!1"
                                                              "g"
                                                              "phi!1"))
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (lemma
                                                                   "integral_diff[real]"
                                                                   ("a"
                                                                    "a"
                                                                    "b"
                                                                    "b"
                                                                    "f"
                                                                    "f2!1"
                                                                    "g"
                                                                    "f1!1"))
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (hide
                                                                         -1)
                                                                        (("1"
                                                                          (expand
                                                                           "-"
                                                                           -17)
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (replace
                                                                               -5
                                                                               *
                                                                               :dir
                                                                               rl)
                                                                              (("1"
                                                                                (replace
                                                                                 -7
                                                                                 *
                                                                                 :dir
                                                                                 rl)
                                                                                (("1"
                                                                                  (hide
                                                                                   -1
                                                                                   -2
                                                                                   -3
                                                                                   -4
                                                                                   -5
                                                                                   -6
                                                                                   -7
                                                                                   -8
                                                                                   -9)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -7)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "riemann_lebesgue_step_integrable"
                                                                                       ("phi"
                                                                                        "phi!1"))
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "riemann_lebesgue_step_integrable"
                                                                                         ("phi"
                                                                                          "psi!1"))
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "Integral")
                                                                                            (("1"
                                                                                              (replace
                                                                                               -3)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -6)
                                                                                                (("1"
                                                                                                  (hide
                                                                                                   -1
                                                                                                   -3
                                                                                                   -4
                                                                                                   -6)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -10)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "upper_riemann_prop1"
                                                                                                       ("f"
                                                                                                        "f!1"
                                                                                                        "epsilon"
                                                                                                        "EPS"))
                                                                                                      (("1"
                                                                                                        (skosimp)
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "Integral_le"
                                                                                                           ("a"
                                                                                                            "a"
                                                                                                            "b"
                                                                                                            "b"
                                                                                                            "f"
                                                                                                            "f!1"
                                                                                                            "g"
                                                                                                            "psi!2"))
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "riemann_lebesgue_step_integrable"
                                                                                                             ("phi"
                                                                                                              "psi!2"))
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -3)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "Integral")
                                                                                                                    (("1"
                                                                                                                      (hide-all-but
                                                                                                                       (-4
                                                                                                                        1))
                                                                                                                      (("1"
                                                                                                                        (skosimp)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "<="
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             -
                                                                                                                             "x!1")
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (1 -6))
                                                        (("2"
                                                          (expand
                                                           "step?")
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (hide -1)
                                                              (("2"
                                                                (expand
                                                                 "zeroed?")
                                                                (("2"
                                                                  (expand
                                                                   "phi!1")
                                                                  (("2"
                                                                    (skosimp)
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "x!1")
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but
                                                       (-7 1))
                                                      (("2"
                                                        (expand
                                                         "step?")
                                                        (("2"
                                                          (expand
                                                           "zeroed?")
                                                          (("2"
                                                            (expand
                                                             "psi!1")
                                                            (("2"
                                                              (skosimp)
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "x!1")
                                                                (("2"
                                                                  (hide
                                                                   -3)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but (1 -10 -2))
                                        (("2"
                                          (typepred "f!1")
                                          (("2"
                                            (expand "zeroed_bounded?")
                                            (("2"
                                              (expand "step?")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (hide -1 -3)
                                                  (("2"
                                                    (expand "<=" 1)
                                                    (("2"
                                                      (skosimp)
                                                      (("2"
                                                        (expand
                                                         "zeroed?")
                                                        (("2"
                                                          (inst
                                                           -
                                                           "x!1")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "x!1")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "x!1")
                                                              (("1"
                                                                (expand
                                                                 "phi!1")
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (-2 1 -9))
                                      (("2"
                                        (typepred "f!1")
                                        (("2"
                                          (expand "zeroed_bounded?")
                                          (("2"
                                            (expand "step?")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (hide -1 -3)
                                                (("2"
                                                  (expand "<=" 1)
                                                  (("2"
                                                    (skosimp)
                                                    (("2"
                                                      (expand
                                                       "zeroed?")
                                                      (("2"
                                                        (inst - "x!1")
                                                        (("2"
                                                          (inst
                                                           -
                                                           "x!1")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "x!1")
                                                            (("1"
                                                              (expand
                                                               "psi!1")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "psi!1")
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (expand "step?")
                                      (("2"
                                        (hide-all-but (-6 1))
                                        (("2"
                                          (expand "phi!1")
                                          (("2"
                                            (split)
                                            (("1"
                                              (expand "step_function?")
                                              (("1"
                                                (skosimp)
                                                (("1"
                                                  (inst + "P!1")
                                                  (("1"
                                                    (expand
                                                     "step_function_on?")
                                                    (("1"
                                                      (skosimp)
                                                      (("1"
                                                        (inst - "ii!1")
                                                        (("1"
                                                          (skosimp)
                                                          (("1"
                                                            (inst
                                                             +
                                                             "fv!1")
                                                            (("1"
                                                              (skosimp)
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "x!1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (typepred
                                                                     "x!1")
                                                                    (("1"
                                                                      (typepred
                                                                       "P!1")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "zeroed?")
                                              (("2"
                                                (hide -1)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but (1 -6))
                                  (("2"
                                    (expand "step?")
                                    (("2"
                                      (expand "psi!1")
                                      (("2"
                                        (split)
                                        (("1"
                                          (expand "step_function?")
                                          (("1"
                                            (expand
                                             "step_function_on?")
                                            (("1"
                                              (skosimp)
                                              (("1"
                                                (inst + "P!1")
                                                (("1"
                                                  (skosimp)
                                                  (("1"
                                                    (inst - "ii!1")
                                                    (("1"
                                                      (skosimp)
                                                      (("1"
                                                        (inst + "fv!1")
                                                        (("1"
                                                          (skosimp)
                                                          (("1"
                                                            (inst
                                                             -
                                                             "x!1")
                                                            (("1"
                                                              (typepred
                                                               "x!1")
                                                              (("1"
                                                                (typepred
                                                                 "P!1")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide -1)
                                          (("2"
                                            (expand "zeroed?")
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("2" (replace -1) (("2" (assert) nil nil)) nil)
                       ("3" (hide-all-but (-1 -2 -4 -5 1))
                        (("3"
                          (lemma "lower_riemann_prop1"
                           ("f" "f!1" "epsilon" "-EPS"))
                          (("1" (skosimp)
                            (("1" (replace -4 -2 rl)
                              (("1"
                                (assert)
                                (("1"
                                  (case-replace
                                   "lower_riemann_integral(f!1) -
        -(integral(a, b, f!1) - lower_riemann_integral(f!1)) = integral(a, b, f!1)")
                                  (("1"
                                    (hide -1)
                                    (("1"
                                      (hide-all-but (-1 -2 -5))
                                      (("1"
                                        (lemma
                                         "integral_le"
                                         ("a"
                                          "a"
                                          "b"
                                          "b"
                                          "f"
                                          "phi!1"
                                          "g"
                                          "f!1"))
                                        (("1"
                                          (lemma
                                           "riemann_lebesgue_step_integrable"
                                           ("phi" "phi!1"))
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand
                                                 "Integrable?"
                                                 -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (split -4)
                                                    (("1"
                                                      (expand
                                                       "Integral")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (skosimp)
                                                      (("2"
                                                        (expand
                                                         "<="
                                                         -4)
                                                        (("2"
                                                          (inst
                                                           -4
                                                           "x!1")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bounded nonempty-type-eq-decl nil riemann_scaf nil)
    (zeroed_bounded? const-decl "bool" riemann_scaf nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (riemann_integrable_def1 formula-decl nil riemann_scaf nil)
    (Integrable? const-decl "bool" integral_def "analysis/")
    (b formal-const-decl "{x: real | a < x}" riemann_scaf nil)
    (< const-decl "bool" reals nil)
    (a formal-const-decl "real" riemann_scaf nil)
    (steps_exist formula-decl nil integral_split_scaf "analysis/")
    (lower_riemann_integral const-decl "real" riemann_scaf nil)
    (integral const-decl "{S: real | integral?(a, b, ff, S)}"
     integral_def "analysis/")
    (integral? const-decl "bool" integral_def "analysis/")
    (integrable? const-decl "bool" integral_def "analysis/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (integral_restr_eq formula-decl nil integral_prep "analysis/")
    (riemann_lebesgue_step_integrable formula-decl nil riemann_scaf
     nil)
    (step nonempty-type-eq-decl nil riemann_scaf nil)
    (upper_riemann_prop1 formula-decl nil riemann_scaf nil)
    (Integral_le formula-decl nil integral "analysis/")
    (closed_interval type-eq-decl nil intervals_real "reals/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (integral_diff formula-decl nil integral_prep "analysis/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (zeroed? const-decl "bool" riemann_scaf nil)
    (step_function_integrable? formula-decl nil integral_step
     "analysis/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (<= const-decl "bool" real_fun_orders "reals/")
    (step_function? const-decl "bool" step_fun_def "analysis/")
    (partition type-eq-decl nil integral_def "analysis/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (open_interval type-eq-decl nil intervals_real "reals/")
    (step_function_on? const-decl "bool" step_fun_def "analysis/")
    (step? const-decl "bool" riemann_scaf nil)
    (<= const-decl "bool" reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (>= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (lower_riemann_prop1 formula-decl nil riemann_scaf nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (integral_le formula-decl nil integral_prep "analysis/")
    (trichotomy formula-decl nil real_axioms nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Integral const-decl "real" integral_def "analysis/"))
   shostak))
 (ii_of_x_TCC1 0
  (ii_of_x_TCC1-1 nil 3450935427
   ("" (skosimp) (("" (assert) nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (ii_of_x subtype "(number_fields.-)(length(riemann_scaf.P), 1)"
    "nat")))
 (ii_of_x_TCC2 0
  (ii_of_x_TCC2-1 nil 3450935427
   ("" (skosimp) (("" (assert) nil nil)) nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (ii_of_x subtype "(number_fields.+)(riemann_scaf.ii, 1)"
    "below[P`length]")))
 (ii_of_x_TCC3 0
  (ii_of_x_TCC3-1 nil 3450935427
   ("" (skosimp)
    (("" (typepred "x!1")
      (("" (lemma "part_in" ("a" "a" "b" "b" "P" "P!1" "x" "x!1"))
        (("" (assert)
          (("" (skosimp)
            (("" (expand "<=" -2)
              (("" (split)
                (("1" (expand "nonempty?")
                  (("1" (expand "empty?")
                    (("1" (inst - "ii!1")
                      (("1" (expand "member") (("1" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (typepred "P!1")
                  (("2" (typepred "ii!1")
                    (("2" (expand "nonempty?")
                      (("2" (expand "empty?")
                        (("2" (inst -10 "ii!1+1")
                          (("1" (expand "member")
                            (("1" (assert)
                              (("1"
                                (assert)
                                (("1"
                                  (inst -5 "ii!1+1")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((b formal-const-decl "{x: real | a < x}" riemann_scaf nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (a formal-const-decl "real" riemann_scaf nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonempty? const-decl "bool" sets nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (part_in formula-decl nil integral_def "analysis/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (closed_interval type-eq-decl nil intervals_real "reals/")
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (partition type-eq-decl nil integral_def "analysis/"))
   nil
   (ii_of_x subtype
    "{ii: naturalnumbers.below((number_fields.-)(length(riemann_scaf.P), 1)) | booleans.AND(reals.<=(seq(riemann_scaf.P)(ii), riemann_scaf.x), reals.<(riemann_scaf.x, seq(riemann_scaf.P)((number_fields.+)(ii, 1))))}"
    "(sets[naturalnumbers.below((number_fields.-)(length(riemann_scaf.P), 1))].nonempty?)")))
 (ii_of_x_def 0
  (ii_of_x_def-1 nil 3451310505
   ("" (skosimp)
    (("" (expand "ii_of_x")
      ((""
        (lemma "choose_member[below(length(P!1) - 1)]"
         ("a" "{ii: below(length(P!1) - 1) |
              seq(P!1)(ii) <= x!1 AND x!1 < seq(P!1)(1 + ii)}"))
        ((""
          (case "nonempty?({ii: below(length(P!1) - 1) |
                    seq(P!1)(ii) <= x!1 AND x!1 < seq(P!1)(1 + ii)})")
          (("1" (split -2)
            (("1" (split 1)
              (("1" (flatten)
                (("1" (replace -1)
                  (("1" (hide -1)
                    (("1" (expand "member") (("1" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2"
                  (name-replace "CC" "choose[below(length(P!1) - 1)]
          ({ii: below(length(P!1) - 1) |
              seq(P!1)(ii) <= x!1 AND x!1 < seq(P!1)(1 + ii)})")
                  (("2" (expand "member")
                    (("2" (flatten)
                      (("2" (hide -5)
                        (("2" (expand "<=" -1)
                          (("2" (split)
                            (("1" (expand "<=" -3)
                              (("1"
                                (split)
                                (("1"
                                  (lemma
                                   "parts_disjoint"
                                   ("a"
                                    "a"
                                    "b"
                                    "b"
                                    "P"
                                    "P!1"
                                    "ii"
                                    "ii!1"
                                    "jj"
                                    "CC"
                                    "x"
                                    "x!1"))
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (lemma
                                   "part_not_in"
                                   ("a" "a" "b" "b" "x" "x!1"))
                                  (("2"
                                    (assert)
                                    (("2"
                                      (inst - "P!1")
                                      (("2"
                                        (inst - "ii!1" "CC")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "<=" -3)
                              (("2"
                                (split)
                                (("1"
                                  (lemma
                                   "part_not_in"
                                   ("a" "a" "b" "b" "x" "x!1"))
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst - "P!1")
                                      (("1"
                                        (inst - "CC" "ii!1")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (hide -3 -4)
                                    (("2"
                                      (lemma
                                       "trich_lt"
                                       ("x" "CC" "y" "ii!1"))
                                      (("2"
                                        (split)
                                        (("1"
                                          (lemma
                                           "parts_order"
                                           ("a"
                                            "a"
                                            "b"
                                            "b"
                                            "P"
                                            "P!1"
                                            "ii"
                                            "CC"
                                            "jj"
                                            "ii!1"))
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2" (propax) nil nil)
                                         ("3"
                                          (lemma
                                           "parts_order"
                                           ("a"
                                            "a"
                                            "b"
                                            "b"
                                            "P"
                                            "P!1"
                                            "jj"
                                            "CC"
                                            "ii"
                                            "ii!1"))
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "nonempty?") (("2" (propax) nil nil)) nil))
            nil)
           ("2" (hide-all-but 1)
            (("2" (expand "nonempty?")
              (("2" (expand "empty?")
                (("2" (expand "member")
                  (("2"
                    (lemma "part_in"
                     ("a" "a" "b" "b" "P" "P!1" "x" "x!1"))
                    (("2" (assert)
                      (("2" (skosimp)
                        (("2" (expand "<=" -2)
                          (("2" (split)
                            (("1" (inst - "ii!2")
                              (("1" (assert) nil nil)) nil)
                             ("2" (typepred "x!1")
                              (("2"
                                (typepred "P!1")
                                (("2"
                                  (typepred "ii!2")
                                  (("2"
                                    (case-replace "ii!2=length(P!1)-2")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (inst -10 "ii!2+1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst - "ii!2+1")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ii_of_x const-decl "below(length(P) - 1)" riemann_scaf nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nonempty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (trich_lt formula-decl nil real_props nil)
    (parts_order formula-decl nil integral_def "analysis/")
    (part_not_in formula-decl nil integral_def "analysis/")
    (parts_disjoint formula-decl nil integral_def "analysis/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (part_in formula-decl nil integral_def "analysis/")
    (empty? const-decl "bool" sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (choose_member formula-decl nil sets_lemmas nil)
    (set type-eq-decl nil sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (a formal-const-decl "real" riemann_scaf nil)
    (b formal-const-decl "{x: real | a < x}" riemann_scaf nil)
    (closed_interval type-eq-decl nil intervals_real "reals/")
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (partition type-eq-decl nil integral_def "analysis/"))
   shostak))
 (ii_of_x_prop 0
  (ii_of_x_prop-1 nil 3451018544
   ("" (skosimp)
    (("" (split)
      (("1" (flatten)
        (("1" (lemma "part_in" ("a" "a" "b" "b" "P" "P!1" "x" "x!1"))
          (("1" (assert)
            (("1" (skolem - "II_X")
              (("1" (flatten)
                (("1" (typepred "x!1")
                  (("1" (typepred "II_X")
                    (("1" (expand "<=" -5)
                      (("1" (split -5)
                        (("1" (case-replace "ii_of_x(P!1)(x!1)=II_X")
                          (("1" (hide -1)
                            (("1" (inst + "II_X")
                              (("1"
                                (assert)
                                (("1"
                                  (hide -1 -2 -3 -4 -5)
                                  (("1"
                                    (expand "ii_of_x")
                                    (("1"
                                      (typepred "y!1")
                                      (("1"
                                        (lemma
                                         "part_in"
                                         ("a"
                                          "a"
                                          "b"
                                          "b"
                                          "P"
                                          "P!1"
                                          "x"
                                          "y!1"))
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2 -6)
                            (("2" (expand "ii_of_x")
                              (("2"
                                (lemma
                                 "choose_member[below(length(P!1) - 1)]"
                                 ("a"
                                  "{ii: below(length(P!1) - 1) |
              seq(P!1)(ii) <= x!1 AND x!1 < seq(P!1)(1 + ii)}"))
                                (("2"
                                  (name-replace
                                   "LHS"
                                   "choose[below(length(P!1) - 1)]
          ({ii: below(length(P!1) - 1) |
              seq(P!1)(ii) <= x!1 AND x!1 < seq(P!1)(1 + ii)})")
                                  (("1"
                                    (expand "member")
                                    (("1"
                                      (split)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "<=" (-1 -7))
                                          (("1"
                                            (split)
                                            (("1"
                                              (split -7)
                                              (("1"
                                                (lemma
                                                 "parts_disjoint"
                                                 ("a"
                                                  "a"
                                                  "b"
                                                  "b"
                                                  "P"
                                                  "P!1"
                                                  "x"
                                                  "x!1"
                                                  "ii"
                                                  "LHS"
                                                  "jj"
                                                  "II_X"))
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma
                                                 "part_not_in"
                                                 ("a"
                                                  "a"
                                                  "b"
                                                  "b"
                                                  "x"
                                                  "x!1"))
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (inst - "P!1")
                                                    (("2"
                                                      (inst
                                                       -
                                                       "LHS"
                                                       "II_X")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (split)
                                              (("1"
                                                (lemma
                                                 "part_not_in"
                                                 ("a"
                                                  "a"
                                                  "b"
                                                  "b"
                                                  "x"
                                                  "x!1"))
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst - "P!1")
                                                    (("1"
                                                      (inst
                                                       -
                                                       "II_X"
                                                       "LHS")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but
                                                 (-1 -2 1))
                                                (("2"
                                                  (lemma
                                                   "trich_lt"
                                                   ("x"
                                                    "LHS"
                                                    "y"
                                                    "II_X"))
                                                  (("2"
                                                    (split)
                                                    (("1"
                                                      (lemma
                                                       "parts_order"
                                                       ("a"
                                                        "a"
                                                        "b"
                                                        "b"
                                                        "P"
                                                        "P!1"
                                                        "ii"
                                                        "LHS"
                                                        "jj"
                                                        "II_X"))
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (propax)
                                                      nil
                                                      nil)
                                                     ("3"
                                                      (lemma
                                                       "parts_order"
                                                       ("a"
                                                        "a"
                                                        "b"
                                                        "b"
                                                        "P"
                                                        "P!1"
                                                        "jj"
                                                        "LHS"
                                                        "ii"
                                                        "II_X"))
                                                      (("3"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "empty?")
                                        (("2"
                                          (inst - "II_X")
                                          (("2"
                                            (expand "member")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "nonempty?")
                                    (("2"
                                      (hide 1 -2)
                                      (("2"
                                        (expand "empty?")
                                        (("2"
                                          (inst - "II_X")
                                          (("2"
                                            (expand "member")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (case-replace "II_X=length(P!1)-2")
                          (("1" (typepred "P!1")
                            (("1" (assert) nil nil)) nil)
                           ("2" (case "II_X < length(P!1)-2")
                            (("1" (hide -3 1)
                              (("1"
                                (inst + "II_X+1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (lemma
                                     "parts_order"
                                     ("a"
                                      "a"
                                      "b"
                                      "b"
                                      "P"
                                      "P!1"
                                      "ii"
                                      "1+II_X"
                                      "jj"
                                      "2+II_X"))
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case-replace
                                         "ii_of_x(P!1)(x!1)=II_X+1")
                                        (("1"
                                          (hide -1 -2 -4 -5 -6 -7)
                                          (("1"
                                            (expand "ii_of_x")
                                            (("1"
                                              (typepred "y!1")
                                              (("1"
                                                (lemma
                                                 "part_in"
                                                 ("a"
                                                  "a"
                                                  "b"
                                                  "b"
                                                  "P"
                                                  "P!1"
                                                  "x"
                                                  "y!1"))
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2 -7)
                                          (("2"
                                            (expand "ii_of_x")
                                            (("2"
                                              (lemma
                                               "choose_member[below(length(P!1) - 1)]"
                                               ("a"
                                                "{ii: below(length(P!1) - 1) |
              seq(P!1)(ii) <= x!1 AND x!1 < seq(P!1)(1 + ii)}"))
                                              (("2"
                                                (case
                                                 "nonempty?[below(length(P!1) - 1)]({ii: below(length(P!1) - 1) |
                    seq(P!1)(ii) <= x!1 AND x!1 < seq(P!1)(1 + ii)})")
                                                (("1"
                                                  (split -2)
                                                  (("1"
                                                    (name-replace
                                                     "LHS"
                                                     "choose[below(length(P!1) - 1)]
          ({ii: below(length(P!1) - 1) |
              seq(P!1)(ii) <= x!1 AND x!1 < seq(P!1)(1 + ii)})")
                                                    (("1"
                                                      (expand "member")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (expand
                                                           "<="
                                                           -1)
                                                          (("1"
                                                            (split)
                                                            (("1"
                                                              (lemma
                                                               "part_not_in"
                                                               ("a"
                                                                "a"
                                                                "b"
                                                                "b"
                                                                "x"
                                                                "x!1"))
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "P!1")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "LHS"
                                                                     "1+II_X")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (-1
                                                                -6
                                                                1))
                                                              (("2"
                                                                (lemma
                                                                 "trich_lt"
                                                                 ("x"
                                                                  "LHS"
                                                                  "y"
                                                                  "1+II_X"))
                                                                (("2"
                                                                  (split)
                                                                  (("1"
                                                                    (lemma
                                                                     "parts_order"
                                                                     ("a"
                                                                      "a"
                                                                      "b"
                                                                      "b"
                                                                      "P"
                                                                      "P!1"
                                                                      "ii"
                                                                      "LHS"
                                                                      "jj"
                                                                      "1+II_X"))
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (propax)
                                                                    nil
                                                                    nil)
                                                                   ("3"
                                                                    (lemma
                                                                     "parts_order"
                                                                     ("a"
                                                                      "a"
                                                                      "b"
                                                                      "b"
                                                                      "P"
                                                                      "P!1"
                                                                      "jj"
                                                                      "LHS"
                                                                      "ii"
                                                                      "1+II_X"))
                                                                    (("3"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "nonempty?")
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -1 2)
                                                  (("2"
                                                    (expand
                                                     "nonempty?")
                                                    (("2"
                                                      (expand "empty?")
                                                      (("2"
                                                        (inst
                                                         -
                                                         "1+II_X")
                                                        (("2"
                                                          (expand
                                                           "member")
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skosimp*)
        (("2" (expand "ii_of_x")
          (("2"
            (lemma "choose_member[below(length(P!1) - 1)]"
             ("a" "{ii: below(length(P!1) - 1) |
              seq(P!1)(ii) <= x!1 AND x!1 < seq(P!1)(1 + ii)}"))
            (("2"
              (case "nonempty?({ii: below(length(P!1) - 1) |
                    seq(P!1)(ii) <= x!1 AND x!1 < seq(P!1)(1 + ii)})")
              (("1" (split -2)
                (("1"
                  (name-replace "LHS"
                   "choose[below(length(P!1) - 1)]({ii: below(length(P!1) - 1) |
                       seq(P!1)(ii) <= x!1 AND x!1 < seq(P!1)(1 + ii)})")
                  (("1" (expand "member")
                    (("1"
                      (lemma "choose_member[below(length(P!1) - 1)]"
                       ("a" "{ii: below(length(P!1) - 1) |
              seq(P!1)(ii) <= y!1 AND y!1 < seq(P!1)(1 + ii)}"))
                      (("1"
                        (name-replace "RHS"
                         "choose[below(length(P!1) - 1)]({ii: below(length(P!1) - 1) |
                       seq(P!1)(ii) <= y!1 AND y!1 < seq(P!1)(1 + ii)})")
                        (("1" (split -1)
                          (("1" (expand "member")
                            (("1" (hide -3)
                              (("1"
                                (flatten)
                                (("1"
                                  (expand "<=")
                                  (("1"
                                    (split)
                                    (("1"
                                      (split)
                                      (("1"
                                        (split)
                                        (("1"
                                          (split)
                                          (("1"
                                            (lemma
                                             "parts_disjoint"
                                             ("a"
                                              "a"
                                              "b"
                                              "b"
                                              "P"
                                              "P!1"
                                              "ii"
                                              "ii!1"
                                              "jj"
                                              "LHS"
                                              "x"
                                              "x!1"))
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lemma
                                                 "parts_disjoint"
                                                 ("a"
                                                  "a"
                                                  "b"
                                                  "b"
                                                  "P"
                                                  "P!1"
                                                  "ii"
                                                  "ii!1"
                                                  "jj"
                                                  "RHS"
                                                  "x"
                                                  "y!1"))
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (lemma
                                             "part_not_in"
                                             ("a"
                                              "a"
                                              "b"
                                              "b"
                                              "x"
                                              "y!1"))
                                            (("2"
                                              (assert)
                                              (("2"
                                                (inst - "P!1")
                                                (("2"
                                                  (inst - "RHS" "ii!1")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma
                                           "part_not_in"
                                           ("a" "a" "b" "b" "x" "x!1"))
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst - "P!1")
                                              (("2"
                                                (inst - "LHS" "ii!1")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (split -5)
                                        (("1"
                                          (hide -3 -4 -8 1 -7)
                                          (("1"
                                            (lemma
                                             "part_not_in"
                                             ("a"
                                              "a"
                                              "b"
                                              "b"
                                              "x"
                                              "x!1"))
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst - "P!1")
                                                (("1"
                                                  (inst - "ii!1" "LHS")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case-replace "LHS=ii!1")
                                          (("1"
                                            (hide -1 -2 -3 -7)
                                            (("1"
                                              (split -4)
                                              (("1"
                                                (lemma
                                                 "parts_disjoint"
                                                 ("a"
                                                  "a"
                                                  "b"
                                                  "b"
                                                  "P"
                                                  "P!1"
                                                  "ii"
                                                  "ii!1"
                                                  "jj"
                                                  "RHS"))
                                                (("1"
                                                  (inst - "y!1")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma
                                                 "part_not_in"
                                                 ("a"
                                                  "a"
                                                  "b"
                                                  "b"
                                                  "x"
                                                  "y!1"))
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (inst - "P!1")
                                                    (("2"
                                                      (inst
                                                       -
                                                       "RHS"
                                                       "ii!1")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (-1 -2 1))
                                            (("2"
                                              (lemma
                                               "trich_lt"
                                               ("x" "ii!1" "y" "LHS"))
                                              (("2"
                                                (split)
                                                (("1"
                                                  (lemma
                                                   "parts_order"
                                                   ("a"
                                                    "a"
                                                    "b"
                                                    "b"
                                                    "P"
                                                    "P!1"
                                                    "ii"
                                                    "ii!1"
                                                    "jj"
                                                    "LHS"))
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2" (assert) nil nil)
                                                 ("3"
                                                  (lemma
                                                   "parts_order"
                                                   ("a"
                                                    "a"
                                                    "b"
                                                    "b"
                                                    "P"
                                                    "P!1"
                                                    "jj"
                                                    "ii!1"
                                                    "ii"
                                                    "LHS"))
                                                  (("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (split -7)
                                      (("1"
                                        (lemma
                                         "part_not_in"
                                         ("a" "a" "b" "b" "x" "y!1"))
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst - "P!1")
                                            (("1"
                                              (inst - "ii!1" "RHS")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case-replace "RHS=ii!1")
                                        (("1"
                                          (hide -1 -2 -9)
                                          (("1"
                                            (hide -1 -2)
                                            (("1"
                                              (split)
                                              (("1"
                                                (split)
                                                (("1"
                                                  (lemma
                                                   "parts_disjoint"
                                                   ("a"
                                                    "a"
                                                    "b"
                                                    "b"
                                                    "P"
                                                    "P!1"
                                                    "x"
                                                    "x!1"
                                                    "ii"
                                                    "ii!1"
                                                    "jj"
                                                    "LHS"))
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (lemma
                                                   "part_not_in"
                                                   ("a"
                                                    "a"
                                                    "b"
                                                    "b"
                                                    "x"
                                                    "x!1"))
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (inst - "P!1")
                                                      (("2"
                                                        (inst
                                                         -
                                                         "LHS"
                                                         "ii!1")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (split)
                                                (("1"
                                                  (lemma
                                                   "part_not_in"
                                                   ("a"
                                                    "a"
                                                    "b"
                                                    "b"
                                                    "x"
                                                    "x!1"))
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (inst - "P!1")
                                                      (("1"
                                                        (inst
                                                         -
                                                         "ii!1"
                                                         "LHS")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -3 -4)
                                                  (("2"
                                                    (lemma
                                                     "trich_lt"
                                                     ("x"
                                                      "ii!1"
                                                      "y"
                                                      "LHS"))
                                                    (("2"
                                                      (split)
                                                      (("1"
                                                        (lemma
                                                         "parts_order"
                                                         ("a"
                                                          "a"
                                                          "b"
                                                          "b"
                                                          "P"
                                                          "P!1"
                                                          "ii"
                                                          "ii!1"
                                                          "jj"
                                                          "LHS"))
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("3"
                                                        (lemma
                                                         "parts_order"
                                                         ("a"
                                                          "a"
                                                          "b"
                                                          "b"
                                                          "P"
                                                          "P!1"
                                                          "jj"
                                                          "ii!1"
                                                          "ii"
                                                          "LHS"))
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (lemma
                                             "trich_lt"
                                             ("x" "RHS" "y" "ii!1"))
                                            (("2"
                                              (split)
                                              (("1"
                                                (lemma
                                                 "parts_order"
                                                 ("a"
                                                  "a"
                                                  "b"
                                                  "b"
                                                  "P"
                                                  "P!1"
                                                  "ii"
                                                  "RHS"
                                                  "jj"
                                                  "ii!1"))
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2" (propax) nil nil)
                                               ("3"
                                                (lemma
                                                 "parts_order"
                                                 ("a"
                                                  "a"
                                                  "b"
                                                  "b"
                                                  "P"
                                                  "P!1"
                                                  "jj"
                                                  "RHS"
                                                  "ii"
                                                  "ii!1"))
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "empty?")
                            (("2" (inst - "ii!1")
                              (("2"
                                (expand "member")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "nonempty?")
                          (("2" (replace -1)
                            (("2" (hide 1)
                              (("2"
                                (expand "empty?")
                                (("2"
                                  (inst - "ii!1")
                                  (("2"
                                    (expand "member")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "nonempty?") (("2" (propax) nil nil))
                  nil))
                nil)
               ("2" (hide 2 -1)
                (("2" (expand "nonempty?")
                  (("2" (expand "empty?")
                    (("2" (expand "member")
                      (("2" (inst - "ii!1") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (partition type-eq-decl nil integral_def "analysis/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (closed_interval type-eq-decl nil intervals_real "reals/")
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (b formal-const-decl "{x: real | a < x}" riemann_scaf nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (a formal-const-decl "real" riemann_scaf nil)
    (part_in formula-decl nil integral_def "analysis/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (ii_of_x const-decl "below(length(P) - 1)" riemann_scaf nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (trich_lt formula-decl nil real_props nil)
    (parts_order formula-decl nil integral_def "analysis/")
    (parts_disjoint formula-decl nil integral_def "analysis/")
    (part_not_in formula-decl nil integral_def "analysis/")
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (choose_member formula-decl nil sets_lemmas nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (part_set_of_TCC1 0
  (part_set_of_TCC1-1 nil 3450936937
   ("" (skosimp) (("" (assert) nil nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (part_set_of subtype
    "riemann_scaf.ii_of_x(riemann_scaf.P)(riemann_scaf.x)"
    "below[P`length]")))
 (part_set_of_TCC2 0
  (part_set_of_TCC2-1 nil 3450936937
   ("" (skosimp)
    (("" (typepred "x!1")
      (("" (typepred "ii_of_x(P!1)(x!1)") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((b formal-const-decl "{x: real | a < x}" riemann_scaf nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (a formal-const-decl "real" riemann_scaf nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (closed_interval type-eq-decl nil intervals_real "reals/")
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (partition type-eq-decl nil integral_def "analysis/")
    (ii_of_x const-decl "below(length(P) - 1)" riemann_scaf nil))
   nil
   (part_set_of subtype
    "(number_fields.+)(riemann_scaf.ii_of_x(riemann_scaf.P)(riemann_scaf.x), 1)"
    "below[P`length]")))
 (part_set_of_TCC3 0
  (part_set_of_TCC3-1 nil 3450937652
   ("" (skosimp)
    (("" (expand "nonempty?")
      (("" (expand "empty?")
        (("" (expand "member")
          (("" (typepred "ii_of_x(P!1)(x!1)")
            ((""
              (inst -
               "(seq(P!1)(1 + ii_of_x(P!1)(x!1))+seq(P!1)(ii_of_x(P!1)(x!1)))/2")
              (("1" (assert)
                (("1" (typepred "P!1")
                  (("1" (inst - "ii_of_x(P!1)(x!1)")
                    (("1" (assert) nil nil)) nil))
                  nil))
                nil)
               ("2" (assert) nil nil) ("3" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonempty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (a formal-const-decl "real" riemann_scaf nil)
    (b formal-const-decl "{x: real | a < x}" riemann_scaf nil)
    (closed_interval type-eq-decl nil intervals_real "reals/")
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (partition type-eq-decl nil integral_def "analysis/")
    (ii_of_x const-decl "below(length(P) - 1)" riemann_scaf nil)
    (empty? const-decl "bool" sets nil))
   nil
   (part_set_of subtype
    "{y | booleans.AND(reals.<(seq(riemann_scaf.P)(riemann_scaf.ii_of_x(riemann_scaf.P)(riemann_scaf.x)), riemann_scaf.y), reals.<(riemann_scaf.y, seq(riemann_scaf.P)((number_fields.+)(riemann_scaf.ii_of_x(riemann_scaf.P)(riemann_scaf.x), 1))))}"
    "(sets[real].nonempty?)")))
 (part_set_of_prop_TCC1 0
  (part_set_of_prop_TCC1-1 nil 3450944091
   ("" (skosimp) (("" (assert) nil nil)) nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (part_set_of_prop subtype "riemann_scaf.x"
    "{x | booleans.AND(reals.<=(riemann_scaf.a, riemann_scaf.x), reals.<(riemann_scaf.x, riemann_scaf.b))}")))
 (part_set_of_prop 0
  (part_set_of_prop-1 nil 3450944888
   ("" (skosimp)
    (("" (typepred "part_set_of(P!1)(x!1)")
      (("" (expand "restrict")
        (("" (expand "member")
          (("" (expand "part_set_of")
            (("" (expand "ii_of_x")
              ((""
                (lemma "choose_member[below(length(P!1) - 1)]"
                 ("a" "{ii: below(length(P!1) - 1) |
                      seq(P!1)(ii) <= x!1 AND x!1 < seq(P!1)(1 + ii)}"))
                ((""
                  (case-replace "empty?({ii: below(length(P!1) - 1) |
                    seq(P!1)(ii) <= x!1 AND x!1 < seq(P!1)(1 + ii)})")
                  (("1" (hide -2 2)
                    (("1" (expand "empty?")
                      (("1" (expand "member")
                        (("1"
                          (lemma "part_in" ("a" "a" "b" "b" "x" "x!1"))
                          (("1" (inst - "P!1")
                            (("1" (assert)
                              (("1"
                                (skosimp)
                                (("1"
                                  (expand "<=" -1)
                                  (("1"
                                    (split)
                                    (("1"
                                      (expand "<=" -2)
                                      (("1"
                                        (split)
                                        (("1"
                                          (inst - "ii!1")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (typepred "ii!1")
                                          (("2"
                                            (typepred "P!1")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (inst + "ii!1+1")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (inst + "ii!1")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (replace 1 -1)
                    (("2"
                      (name-replace "II" "choose[below(length(P!1) - 1)]
                  ({ii: below(length(P!1) - 1) |
                      seq(P!1)(ii) <= x!1 AND x!1 < seq(P!1)(1 + ii)})")
                      (("1" (expand "member")
                        (("1" (flatten)
                          (("1" (typepred "II")
                            (("1" (hide -2 -3)
                              (("1"
                                (expand "<=" -2)
                                (("1"
                                  (split -2)
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (inst 2 "II")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "nonempty?")
                        (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((part_set_of const-decl "(nonempty?[real])" riemann_scaf nil)
    (partition type-eq-decl nil integral_def "analysis/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (closed_interval type-eq-decl nil intervals_real "reals/")
    (b formal-const-decl "{x: real | a < x}" riemann_scaf nil)
    (< const-decl "bool" reals nil)
    (a formal-const-decl "real" riemann_scaf nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (choose_member formula-decl nil sets_lemmas nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (choose const-decl "(p)" sets nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (part_in formula-decl nil integral_def "analysis/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (empty? const-decl "bool" sets nil)
    (ii_of_x const-decl "below(length(P) - 1)" riemann_scaf nil)
    (member const-decl "bool" sets nil))
   shostak))
 (lower_step_TCC1 0
  (lower_step_TCC1-1 nil 3450936937
   ("" (skosimp*) (("" (assert) nil nil)) nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (lower_step subtype "riemann_scaf.x"
    "{x | booleans.AND(reals.<=(riemann_scaf.a, riemann_scaf.x), reals.<(riemann_scaf.x, riemann_scaf.b))}")))
 (lower_step_TCC2 0
  (lower_step_TCC2-1 nil 3450936937
   ("" (skosimp)
    (("" (case "a < x!1 & x!1 < b")
      (("1" (hide 1 2)
        (("1" (flatten)
          (("1" (split)
            (("1" (typepred "part_set_of(P!1)(x!1)")
              (("1" (hide 2)
                (("1" (name-replace "DRL" "part_set_of(P!1)(x!1)")
                  (("1" (expand "image")
                    (("1" (expand "nonempty?")
                      (("1" (expand "empty?")
                        (("1" (skosimp)
                          (("1" (expand "member")
                            (("1" (inst - "f!1(x!2)")
                              (("1" (inst + "x!2") nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred "f!1")
              (("2" (expand "zeroed_bounded?")
                (("2" (expand "bounded?")
                  (("2" (flatten)
                    (("2" (skosimp)
                      (("2" (expand "below_bounded")
                        (("2" (inst 1 "-c!1")
                          (("2" (expand "image")
                            (("2" (expand "lower_bound")
                              (("2"
                                (skosimp)
                                (("2"
                                  (typepred "z!1")
                                  (("2"
                                    (skosimp)
                                    (("2"
                                      (replace -1)
                                      (("2"
                                        (inst - "x!2")
                                        (("2"
                                          (hide-all-but (-2 1))
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (assert)
        (("2" (assert)
          (("2" (inst + "0")
            (("2" (typepred "P!1") (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((b formal-const-decl "{x: real | a < x}" riemann_scaf nil)
    (a formal-const-decl "real" riemann_scaf nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bounded? const-decl "bool" sup_norm "measure_integration/")
    (minus_real_is_real application-judgement "real" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (lower_bound const-decl "bool" bound_defs "reals/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below_bounded const-decl "bool" bounded_reals "reals/")
    (part_set_of const-decl "(nonempty?[real])" riemann_scaf nil)
    (partition type-eq-decl nil integral_def "analysis/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (closed_interval type-eq-decl nil intervals_real "reals/")
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bounded nonempty-type-eq-decl nil riemann_scaf nil)
    (zeroed_bounded? const-decl "bool" riemann_scaf nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (lower_step subtype
    "function_image[real, real].image(riemann_scaf.f, riemann_scaf.part_set_of(riemann_scaf.P)(riemann_scaf.x))"
    "inf_set[real]")))
 (lower_step_TCC3 0
  (lower_step_TCC3-1 nil 3450936937
   ("" (skosimp)
    (("" (lemma "lower_step_TCC2" ("P" "P!1" "f" "f!1"))
      (("" (expand "step?")
        (("" (split)
          (("1" (expand "step_function?")
            (("1" (inst + "P!1")
              (("1" (expand "step_function_on?")
                (("1" (skosimp)
                  (("1"
                    (name "MID"
                          "(seq(P!1)(ii!1)+ seq(P!1)(1 + ii!1))/2")
                    (("1" (inst - "MID")
                      (("1" (assert)
                        (("1" (assert)
                          (("1" (typepred "P!1")
                            (("1" (inst - "ii!1")
                              (("1"
                                (assert)
                                (("1"
                                  (split -6)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (inst
                                       +
                                       "inf[real](image[real, real](f!1, part_set_of(P!1)(MID)))")
                                      (("1"
                                        (skosimp)
                                        (("1"
                                          (typepred "x!1")
                                          (("1"
                                            (lift-if 1)
                                            (("1"
                                              (prop)
                                              (("1"
                                                (skosimp)
                                                (("1"
                                                  (lemma
                                                   "part_not_in"
                                                   ("a"
                                                    "a"
                                                    "b"
                                                    "b"
                                                    "x"
                                                    "x!1"))
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (inst - "P!1")
                                                      (("1"
                                                        (inst
                                                         -
                                                         "ii!1"
                                                         "ii!2")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 1)
                                                (("2"
                                                  (case-replace
                                                   "part_set_of(P!1)(x!1)=part_set_of(P!1)(MID)")
                                                  (("2"
                                                    (hide 2)
                                                    (("2"
                                                      (apply-extensionality
                                                       1
                                                       :hide?
                                                       t)
                                                      (("2"
                                                        (expand
                                                         "part_set_of")
                                                        (("2"
                                                          (case-replace
                                                           "ii_of_x(P!1)(x!1)=ii_of_x(P!1)(MID)")
                                                          (("2"
                                                            (hide 2)
                                                            (("2"
                                                              (hide -4)
                                                              (("2"
                                                                (expand
                                                                 "ii_of_x")
                                                                (("2"
                                                                  (hide
                                                                   -3)
                                                                  (("2"
                                                                    (lemma
                                                                     "choose_member[below(length(P!1) - 1)]"
                                                                     ("a"
                                                                      "{ii: below(length(P!1) - 1) |
              seq(P!1)(ii) <= x!1 AND x!1 < seq(P!1)(1 + ii)}"))
                                                                    (("2"
                                                                      (case-replace
                                                                       "empty?({ii: below(length(P!1) - 1) |
                    seq(P!1)(ii) <= x!1 AND x!1 < seq(P!1)(1 + ii)})")
                                                                      (("1"
                                                                        (expand
                                                                         "empty?")
                                                                        (("1"
                                                                          (expand
                                                                           "member")
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "ii!1")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (replace
                                                                         1
                                                                         -1)
                                                                        (("2"
                                                                          (name-replace
                                                                           "II_LEFT"
                                                                           "choose[below(length(P!1) - 1)]
          ({ii: below(length(P!1) - 1) |
              seq(P!1)(ii) <= x!1 AND x!1 < seq(P!1)(1 + ii)})")
                                                                          (("1"
                                                                            (expand
                                                                             "member")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (lemma
                                                                                 "part_not_in"
                                                                                 ("a"
                                                                                  "a"
                                                                                  "b"
                                                                                  "b"
                                                                                  "x"
                                                                                  "x!1"))
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "P!1")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "ii!1"
                                                                                       "II_LEFT")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "<="
                                                                                         -2)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -4)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -5)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "/="
                                                                                               -1)
                                                                                              (("1"
                                                                                                (split
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (hide
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "parts_disjoint"
                                                                                                     ("a"
                                                                                                      "a"
                                                                                                      "b"
                                                                                                      "b"))
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "x!1"
                                                                                                       "P!1"
                                                                                                       "ii!1"
                                                                                                       "II_LEFT")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (hide
                                                                                                             -1
                                                                                                             -2
                                                                                                             -3
                                                                                                             -4
                                                                                                             -5
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "choose_member[below(length(P!1) - 1)]"
                                                                                                               ("a"
                                                                                                                "{ii: below(length(P!1) - 1) |
               seq(P!1)(ii) <= MID AND MID < seq(P!1)(1 + ii)}"))
                                                                                                              (("1"
                                                                                                                (case-replace
                                                                                                                 "empty?({ii: below(length(P!1) - 1) |
                    seq(P!1)(ii) <= MID AND MID < seq(P!1)(1 + ii)})")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "empty?")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "member")
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -
                                                                                                                       "ii!1")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (replace
                                                                                                                   1
                                                                                                                   -1)
                                                                                                                  (("2"
                                                                                                                    (name-replace
                                                                                                                     "II_RIGHT"
                                                                                                                     "choose[below(length(P!1) - 1)]
           ({ii: below(length(P!1) - 1) |
               seq(P!1)(ii) <= MID AND MID < seq(P!1)(1 + ii)})")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "member")
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "<="
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (split)
                                                                                                                            (("1"
                                                                                                                              (lemma
                                                                                                                               "parts_disjoint"
                                                                                                                               ("a"
                                                                                                                                "a"
                                                                                                                                "b"
                                                                                                                                "b"
                                                                                                                                "P"
                                                                                                                                "P!1"
                                                                                                                                "x"
                                                                                                                                "MID"
                                                                                                                                "ii"
                                                                                                                                "ii!1"
                                                                                                                                "jj"
                                                                                                                                "II_RIGHT"))
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (lemma
                                                                                                                               "part_not_in"
                                                                                                                               ("a"
                                                                                                                                "a"
                                                                                                                                "b"
                                                                                                                                "b"
                                                                                                                                "x"
                                                                                                                                "MID"))
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (inst
                                                                                                                                   -
                                                                                                                                   "P!1")
                                                                                                                                  (("2"
                                                                                                                                    (inst
                                                                                                                                     -
                                                                                                                                     "ii!1"
                                                                                                                                     "II_RIGHT")
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (expand
                                                                                                                       "nonempty?")
                                                                                                                      (("2"
                                                                                                                        (propax)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "nonempty?")
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skosimp)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (lemma
                                         "part_not_in"
                                         ("a" "a" "b" "b"))
                                        (("2"
                                          (inst - "MID")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst - "P!1")
                                              (("2"
                                                (inst - "ii!1" "ii!2")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "zeroed?")
            (("2" (skosimp)
              (("2" (split)
                (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((partition type-eq-decl nil integral_def "analysis/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (closed_interval type-eq-decl nil intervals_real "reals/")
    (b formal-const-decl "{x: real | a < x}" riemann_scaf nil)
    (< const-decl "bool" reals nil)
    (a formal-const-decl "real" riemann_scaf nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (bounded nonempty-type-eq-decl nil riemann_scaf nil)
    (zeroed_bounded? const-decl "bool" riemann_scaf nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (lower_step_TCC2 subtype-tcc nil riemann_scaf nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (choose_member formula-decl nil sets_lemmas nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (parts_disjoint formula-decl nil integral_def "analysis/")
    (choose const-decl "(p)" sets nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (ii_of_x const-decl "below(length(P) - 1)" riemann_scaf nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (part_not_in formula-decl nil integral_def "analysis/")
    (open_interval type-eq-decl nil intervals_real "reals/")
    (inf_set type-eq-decl nil bounded_reals "reals/")
    (pred type-eq-decl nil defined_types nil)
    (greatest_lower_bound const-decl "bool" bound_defs "reals/")
    (inf const-decl "{x | greatest_lower_bound(<=)(x, Sl)}"
         bounded_reals "reals/")
    (below_bounded const-decl "bool" bounded_reals "reals/")
    (setof type-eq-decl nil defined_types nil)
    (part_set_of const-decl "(nonempty?[real])" riemann_scaf nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (step_function_on? const-decl "bool" step_fun_def "analysis/")
    (step_function? const-decl "bool" step_fun_def "analysis/")
    (zeroed? const-decl "bool" riemann_scaf nil)
    (step? const-decl "bool" riemann_scaf nil))
   nil
   (lower_step subtype
    "LAMBDA x: IF booleans.OR(reals.<(riemann_scaf.x, riemann_scaf.a), reals.<(riemann_scaf.b, riemann_scaf.x)) THEN 0 ELSIF booleans.OR(EXISTS (ii: naturalnumbers.below((number_fields.-)(length(riemann_scaf.P), 1))): riemann_scaf.x = seq(riemann_scaf.P)(ii), riemann_scaf.x = riemann_scaf.b) THEN riemann_scaf.f(riemann_scaf.x) ELSE bounded_reals[real].inf(function_image[real, real].image(riemann_scaf.f, riemann_scaf.part_set_of(riemann_scaf.P)(riemann_scaf.x))) ENDIF"
    "step")))
 (upper_step_TCC1 0
  (upper_step_TCC1-1 nil 3450936937
   ("" (skosimp)
    (("" (typepred "part_set_of(P!1)(x!1)")
      (("1" (split)
        (("1" (expand "nonempty?")
          (("1" (expand "image")
            (("1" (expand "empty?")
              (("1" (expand "member")
                (("1" (skosimp)
                  (("1" (inst - "f!1(x!2)")
                    (("1" (inst 1 "x!2") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide-all-but 1)
          (("2" (typepred "f!1")
            (("2" (expand "zeroed_bounded?")
              (("2" (flatten)
                (("2" (expand "above_bounded")
                  (("2" (expand "bounded?")
                    (("2" (skosimp)
                      (("2" (inst + "c!1")
                        (("2" (hide -2)
                          (("2" (expand "image")
                            (("2" (expand "upper_bound")
                              (("2"
                                (skosimp)
                                (("2"
                                  (typepred "z!1")
                                  (("2"
                                    (skosimp)
                                    (("2"
                                      (inst - "x!2")
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   ((part_set_of const-decl "(nonempty?[real])" riemann_scaf nil)
    (partition type-eq-decl nil integral_def "analysis/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (closed_interval type-eq-decl nil intervals_real "reals/")
    (b formal-const-decl "{x: real | a < x}" riemann_scaf nil)
    (< const-decl "bool" reals nil)
    (a formal-const-decl "real" riemann_scaf nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (above_bounded const-decl "bool" bounded_reals "reals/")
    (upper_bound const-decl "bool" bound_defs "reals/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nnreal type-eq-decl nil real_types nil)
    (bounded? const-decl "bool" sup_norm "measure_integration/")
    (empty? const-decl "bool" sets nil)
    (zeroed_bounded? const-decl "bool" riemann_scaf nil)
    (bounded nonempty-type-eq-decl nil riemann_scaf nil)
    (member const-decl "bool" sets nil))
   nil
   (upper_step subtype
    "function_image[real, real].image(riemann_scaf.f, riemann_scaf.part_set_of(riemann_scaf.P)(riemann_scaf.x))"
    "sup_set[real]")))
 (upper_step_TCC2 0
  (upper_step_TCC2-1 nil 3450936937
   ("" (skosimp)
    (("" (expand "step?")
      (("" (split)
        (("1" (expand "step_function?")
          (("1" (inst + "P!1")
            (("1" (expand "step_function_on?")
              (("1" (skosimp)
                (("1"
                  (name "MID" "(seq(P!1)(ii!1)+ seq(P!1)(1 + ii!1))/2")
                  (("1"
                    (lemma "upper_step_TCC1"
                     ("P" "P!1" "f" "f!1" "x" "MID"))
                    (("1" (assert)
                      (("1" (split -1)
                        (("1" (flatten)
                          (("1"
                            (inst + "sup[real]
                   (image[real, real](f!1, part_set_of(P!1)(MID)))")
                            (("1" (skosimp)
                              (("1"
                                (typepred "x!1")
                                (("1"
                                  (lift-if 1)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (skosimp)
                                      (("1"
                                        (lemma
                                         "part_not_in"
                                         ("a" "a" "b" "b" "x" "x!1"))
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst - "P!1")
                                            (("1"
                                              (inst - "ii!1" "ii!2")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 1)
                                      (("2"
                                        (expand "part_set_of")
                                        (("2"
                                          (case-replace
                                           "ii_of_x(P!1)(x!1)=ii_of_x(P!1)(MID)")
                                          (("2"
                                            (hide -3 -4 2)
                                            (("2"
                                              (expand "ii_of_x")
                                              (("2"
                                                (lemma
                                                 "choose_member[below(length(P!1) - 1)]"
                                                 ("a"
                                                  "{ii: below(length(P!1) - 1) |
              seq(P!1)(ii) <= x!1 AND x!1 < seq(P!1)(1 + ii)}"))
                                                (("2"
                                                  (case-replace
                                                   "empty?({ii: below(length(P!1) - 1) |
                    seq(P!1)(ii) <= x!1 AND x!1 < seq(P!1)(1 + ii)})")
                                                  (("1"
                                                    (expand "empty?")
                                                    (("1"
                                                      (inst - "ii!1")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (replace 1 -1)
                                                    (("2"
                                                      (name-replace
                                                       "II_LEFT"
                                                       "choose[below(length(P!1) - 1)]
          ({ii: below(length(P!1) - 1) |
              seq(P!1)(ii) <= x!1 AND x!1 < seq(P!1)(1 + ii)})")
                                                      (("1"
                                                        (expand
                                                         "member")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (expand
                                                             "<="
                                                             -1)
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (hide
                                                                 1)
                                                                (("1"
                                                                  (lemma
                                                                   "parts_disjoint"
                                                                   ("a"
                                                                    "a"
                                                                    "b"
                                                                    "b"
                                                                    "P"
                                                                    "P!1"
                                                                    "ii"
                                                                    "ii!1"
                                                                    "jj"
                                                                    "II_LEFT"
                                                                    "x"
                                                                    "x!1"))
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (hide
                                                                         -1
                                                                         -2
                                                                         -3)
                                                                        (("1"
                                                                          (lemma
                                                                           "choose_member[below(length(P!1) - 1)]"
                                                                           ("a"
                                                                            "{ii: below(length(P!1) - 1) |
               seq(P!1)(ii) <= MID AND MID < seq(P!1)(1 + ii)}"))
                                                                          (("1"
                                                                            (case-replace
                                                                             "empty?({ii: below(length(P!1) - 1) |
                    seq(P!1)(ii) <= MID AND MID < seq(P!1)(1 + ii)})")
                                                                            (("1"
                                                                              (expand
                                                                               "empty?")
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "ii!1")
                                                                                (("1"
                                                                                  (typepred
                                                                                   "P!1")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "ii!1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (replace
                                                                               1
                                                                               -1)
                                                                              (("2"
                                                                                (name-replace
                                                                                 "II_RIGHT"
                                                                                 "choose[below(length(P!1) - 1)]
           ({ii: below(length(P!1) - 1) |
               seq(P!1)(ii) <= MID AND MID < seq(P!1)(1 + ii)})")
                                                                                (("1"
                                                                                  (hide
                                                                                   1)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "member")
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "<="
                                                                                         -1)
                                                                                        (("1"
                                                                                          (split)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "parts_disjoint"
                                                                                             ("a"
                                                                                              "a"
                                                                                              "b"
                                                                                              "b"
                                                                                              "P"
                                                                                              "P!1"
                                                                                              "x"
                                                                                              "MID"
                                                                                              "ii"
                                                                                              "II_RIGHT"
                                                                                              "jj"
                                                                                              "ii!1"))
                                                                                            (("1"
                                                                                              (typepred
                                                                                               "P!1")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -
                                                                                                 "ii!1")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (lemma
                                                                                             "part_not_in"
                                                                                             ("a"
                                                                                              "a"
                                                                                              "b"
                                                                                              "b"
                                                                                              "x"
                                                                                              "MID"))
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -
                                                                                                 "P!1")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "ii!1"
                                                                                                   "II_RIGHT")
                                                                                                  (("2"
                                                                                                    (typepred
                                                                                                     "P!1")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "ii!1")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (expand
                                                                                   "nonempty?")
                                                                                  (("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (lemma
                                                                 "part_not_in"
                                                                 ("a"
                                                                  "a"
                                                                  "b"
                                                                  "b"
                                                                  "x"
                                                                  "x!1"))
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "P!1")
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "ii!1"
                                                                       "II_LEFT")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "nonempty?")
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil)
                         ("2" (hide 1)
                          (("2" (skosimp)
                            (("2"
                              (lemma "part_not_in"
                               ("a" "a" "b" "b" "x" "MID"))
                              (("2"
                                (assert)
                                (("2"
                                  (inst - "P!1")
                                  (("2"
                                    (inst - "ii!1" "ii!2")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (typepred "P!1")
                                        (("2"
                                          (inst - "ii!1")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (hide 1)
                          (("3" (typepred "P!1")
                            (("3" (inst - "ii!1")
                              (("3" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "zeroed?")
          (("2" (skosimp)
            (("2" (split)
              (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((step? const-decl "bool" riemann_scaf nil)
    (zeroed? const-decl "bool" riemann_scaf nil)
    (step_function? const-decl "bool" step_fun_def "analysis/")
    (step_function_on? const-decl "bool" step_fun_def "analysis/")
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ii_of_x const-decl "below(length(P) - 1)" riemann_scaf nil)
    (empty? const-decl "bool" sets nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (member const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (parts_disjoint formula-decl nil integral_def "analysis/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (choose_member formula-decl nil sets_lemmas nil)
    (part_not_in formula-decl nil integral_def "analysis/")
    (open_interval type-eq-decl nil intervals_real "reals/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sup_set type-eq-decl nil bounded_reals "reals/")
    (pred type-eq-decl nil defined_types nil)
    (least_upper_bound const-decl "bool" bound_defs "reals/")
    (sup const-decl "{x | least_upper_bound(<=)(x, Su)}" bounded_reals
         "reals/")
    (above_bounded const-decl "bool" bounded_reals "reals/")
    (setof type-eq-decl nil defined_types nil)
    (part_set_of const-decl "(nonempty?[real])" riemann_scaf nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (bounded nonempty-type-eq-decl nil riemann_scaf nil)
    (zeroed_bounded? const-decl "bool" riemann_scaf nil)
    (upper_step_TCC1 subtype-tcc nil riemann_scaf nil)
    (partition type-eq-decl nil integral_def "analysis/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (closed_interval type-eq-decl nil intervals_real "reals/")
    (b formal-const-decl "{x: real | a < x}" riemann_scaf nil)
    (< const-decl "bool" reals nil)
    (a formal-const-decl "real" riemann_scaf nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil
   (upper_step subtype
    "LAMBDA x: IF booleans.OR(reals.<(riemann_scaf.x, riemann_scaf.a), reals.<(riemann_scaf.b, riemann_scaf.x)) THEN 0 ELSIF booleans.OR(EXISTS (ii: naturalnumbers.below((number_fields.-)(length(riemann_scaf.P), 1))): riemann_scaf.x = seq(riemann_scaf.P)(ii), riemann_scaf.x = riemann_scaf.b) THEN riemann_scaf.f(riemann_scaf.x) ELSE bounded_reals[real].sup(function_image[real, real].image(riemann_scaf.f, riemann_scaf.part_set_of(riemann_scaf.P)(riemann_scaf.x))) ENDIF"
    "step")))
 (lower_step_prop 0
  (lower_step_prop-1 nil 3450943549
   ("" (skosimp)
    (("" (expand "<=")
      (("" (skosimp)
        (("" (expand "lower_step")
          (("" (lift-if)
            (("" (assert)
              (("" (typepred "f!1")
                (("" (expand "zeroed_bounded?")
                  (("" (flatten)
                    (("" (hide -1)
                      (("" (split)
                        (("1" (expand "zeroed?")
                          (("1" (inst - "x!1")
                            (("1" (flatten) (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (prop)
                            (("2"
                              (lemma "lower_step_TCC2"
                               ("P" "P!1" "f" "f!1" "x" "x!1"))
                              (("2"
                                (replace 1 -1)
                                (("2"
                                  (replace 4 -1)
                                  (("2"
                                    (replace 5 -1)
                                    (("2"
                                      (replace 2 -1)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (typepred
                                           "inf(image(f!1, part_set_of(P!1)(x!1)))")
                                          (("2"
                                            (name-replace
                                             "INF"
                                             "inf(image(f!1, part_set_of(P!1)(x!1)))")
                                            (("2"
                                              (hide -2 -3)
                                              (("2"
                                                (expand
                                                 "greatest_lower_bound")
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (expand "image")
                                                    (("2"
                                                      (expand
                                                       "lower_bound")
                                                      (("2"
                                                        (inst
                                                         -
                                                         "f!1(x!1)")
                                                        (("2"
                                                          (inst
                                                           1
                                                           "x!1")
                                                          (("2"
                                                            (lemma
                                                             "part_set_of_prop"
                                                             ("x"
                                                              "x!1"
                                                              "P"
                                                              "P!1"))
                                                            (("2"
                                                              (expand
                                                               "member")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((<= const-decl "bool" real_fun_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (partition type-eq-decl nil integral_def "analysis/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (closed_interval type-eq-decl nil intervals_real "reals/")
    (b formal-const-decl "{x: real | a < x}" riemann_scaf nil)
    (< const-decl "bool" reals nil)
    (a formal-const-decl "real" riemann_scaf nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (lower_step_TCC2 subtype-tcc nil riemann_scaf nil)
    (part_set_of const-decl "(nonempty?[real])" riemann_scaf nil)
    (inf const-decl "{x | greatest_lower_bound(<=)(x, Sl)}"
         bounded_reals "reals/")
    (inf_set type-eq-decl nil bounded_reals "reals/")
    (below_bounded const-decl "bool" bounded_reals "reals/")
    (setof type-eq-decl nil defined_types nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (greatest_lower_bound const-decl "bool" bound_defs "reals/")
    (pred type-eq-decl nil defined_types nil)
    (lower_bound const-decl "bool" bound_defs "reals/")
    (member const-decl "bool" sets nil)
    (part_set_of_prop formula-decl nil riemann_scaf nil)
    (zeroed? const-decl "bool" riemann_scaf nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (zeroed_bounded? const-decl "bool" riemann_scaf nil)
    (bounded nonempty-type-eq-decl nil riemann_scaf nil))
   shostak))
 (upper_step_prop 0
  (upper_step_prop-1 nil 3450946643
   ("" (skosimp)
    (("" (expand "<=")
      (("" (skosimp)
        (("" (expand "upper_step")
          (("" (typepred "f!1")
            (("" (expand "zeroed_bounded?")
              (("" (flatten)
                (("" (expand "zeroed?")
                  (("" (hide -1)
                    (("" (lift-if 1)
                      (("" (case-replace "x!1 < a OR b < x!1")
                        (("1" (inst - "x!1") (("1" (assert) nil nil))
                          nil)
                         ("2" (replace 1 2)
                          (("2" (hide -1)
                            (("2" (flatten)
                              (("2"
                                (prop)
                                (("1" (assert) nil nil)
                                 ("2" (assert) nil nil)
                                 ("3"
                                  (lemma
                                   "upper_step_TCC1"
                                   ("P" "P!1" "f" "f!1" "x" "x!1"))
                                  (("3"
                                    (replace 1)
                                    (("3"
                                      (replace 2)
                                      (("3"
                                        (replace 4)
                                        (("3"
                                          (replace 5)
                                          (("3"
                                            (flatten)
                                            (("3"
                                              (typepred
                                               "sup(image(f!1, part_set_of(P!1)(x!1)))")
                                              (("3"
                                                (name-replace
                                                 "SUP"
                                                 "sup(image(f!1, part_set_of(P!1)(x!1)))")
                                                (("3"
                                                  (expand
                                                   "least_upper_bound")
                                                  (("3"
                                                    (flatten)
                                                    (("3"
                                                      (expand "image")
                                                      (("3"
                                                        (expand
                                                         "upper_bound")
                                                        (("3"
                                                          (inst
                                                           -
                                                           "f!1(x!1)")
                                                          (("3"
                                                            (inst
                                                             1
                                                             "x!1")
                                                            (("3"
                                                              (hide
                                                               -1
                                                               -2
                                                               -3)
                                                              (("3"
                                                                (lemma
                                                                 "part_set_of_prop"
                                                                 ("x"
                                                                  "x!1"
                                                                  "P"
                                                                  "P!1"))
                                                                (("3"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((<= const-decl "bool" real_fun_orders "reals/")
    (zeroed? const-decl "bool" riemann_scaf nil)
    (partition type-eq-decl nil integral_def "analysis/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (closed_interval type-eq-decl nil intervals_real "reals/")
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (upper_step_TCC1 subtype-tcc nil riemann_scaf nil)
    (part_set_of const-decl "(nonempty?[real])" riemann_scaf nil)
    (sup const-decl "{x | least_upper_bound(<=)(x, Su)}" bounded_reals
         "reals/")
    (sup_set type-eq-decl nil bounded_reals "reals/")
    (above_bounded const-decl "bool" bounded_reals "reals/")
    (setof type-eq-decl nil defined_types nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (least_upper_bound const-decl "bool" bound_defs "reals/")
    (pred type-eq-decl nil defined_types nil)
    (member const-decl "bool" sets nil)
    (part_set_of_prop formula-decl nil riemann_scaf nil)
    (upper_bound const-decl "bool" bound_defs "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (a formal-const-decl "real" riemann_scaf nil)
    (b formal-const-decl "{x: real | a < x}" riemann_scaf nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (zeroed_bounded? const-decl "bool" riemann_scaf nil)
    (bounded nonempty-type-eq-decl nil riemann_scaf nil))
   shostak))
 (lower_step_neg_TCC1 0
  (lower_step_neg_TCC1-1 nil 3451793427
   ("" (use "zeroed_bounded_neg_fun") nil nil)
   ((zeroed_bounded_neg_fun formula-decl nil riemann_scaf nil)) nil
   (lower_step_neg subtype "(real_fun_ops[real].-)(riemann_scaf.f)"
    "bounded")))
 (lower_step_neg 0
  (lower_step_neg-1 nil 3451793428
   ("" (skosimp)
    (("" (apply-extensionality :hide? t)
      (("" (typepred "f!1")
        (("" (expand "zeroed_bounded?")
          (("" (flatten)
            (("" (expand "zeroed?")
              (("" (inst - "x!1")
                (("" (expand "-" 1 2)
                  (("" (expand "upper_step")
                    (("" (expand "lower_step")
                      (("" (case-replace "x!1 < a OR b < x!1")
                        (("" (replace 1)
                          (("" (case-replace "x!1=b")
                            (("1" (expand "-") (("1" (propax) nil nil))
                              nil)
                             ("2" (replace 1)
                              (("2"
                                (case-replace
                                 "EXISTS (ii: below(length(P!1) - 1)): x!1 = seq(P!1)(ii)")
                                (("1"
                                  (expand "-")
                                  (("1" (propax) nil nil))
                                  nil)
                                 ("2"
                                  (replace 1)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (typepred
                                       "inf(image(-f!1, part_set_of(P!1)(x!1)))")
                                      (("2"
                                        (name-replace
                                         "LHS"
                                         "inf(image(-f!1, part_set_of(P!1)(x!1)))")
                                        (("2"
                                          (typepred
                                           "sup(image(f!1, part_set_of(P!1)(x!1)))")
                                          (("2"
                                            (name-replace
                                             "RHS"
                                             "sup(image(f!1, part_set_of(P!1)(x!1)))")
                                            (("2"
                                              (expand
                                               "least_upper_bound")
                                              (("2"
                                                (expand "upper_bound")
                                                (("2"
                                                  (expand
                                                   "greatest_lower_bound")
                                                  (("2"
                                                    (expand
                                                     "lower_bound")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (inst
                                                         -4
                                                         "-RHS")
                                                        (("2"
                                                          (case-replace
                                                           "FORALL (z: (image(-f!1, part_set_of(P!1)(x!1)))): -RHS <= z")
                                                          (("1"
                                                            (inst
                                                             -3
                                                             "-LHS")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (split
                                                                 -3)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (skosimp)
                                                                  (("2"
                                                                    (typepred
                                                                     "z!1")
                                                                    (("2"
                                                                      (expand
                                                                       "image")
                                                                      (("2"
                                                                        (skosimp)
                                                                        (("2"
                                                                          (inst
                                                                           -4
                                                                           "-z!1")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "image")
                                                                            (("2"
                                                                              (expand
                                                                               "-")
                                                                              (("2"
                                                                                (inst
                                                                                 +
                                                                                 "x!2")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skosimp)
                                                            (("2"
                                                              (typepred
                                                               "z!1")
                                                              (("2"
                                                                (expand
                                                                 "image")
                                                                (("2"
                                                                  (skosimp)
                                                                  (("2"
                                                                    (expand
                                                                     "-")
                                                                    (("2"
                                                                      (inst
                                                                       -2
                                                                       "-z!1")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "image")
                                                                        (("2"
                                                                          (inst
                                                                           +
                                                                           "x!2")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (step nonempty-type-eq-decl nil riemann_scaf nil)
    (step? const-decl "bool" riemann_scaf nil)
    (partition type-eq-decl nil integral_def "analysis/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (closed_interval type-eq-decl nil intervals_real "reals/")
    (b formal-const-decl "{x: real | a < x}" riemann_scaf nil)
    (< const-decl "bool" reals nil)
    (a formal-const-decl "real" riemann_scaf nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (bounded nonempty-type-eq-decl nil riemann_scaf nil)
    (zeroed_bounded? const-decl "bool" riemann_scaf nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (zeroed? const-decl "bool" riemann_scaf nil)
    (part_set_of const-decl "(nonempty?[real])" riemann_scaf nil)
    (inf const-decl "{x | greatest_lower_bound(<=)(x, Sl)}"
         bounded_reals "reals/")
    (inf_set type-eq-decl nil bounded_reals "reals/")
    (below_bounded const-decl "bool" bounded_reals "reals/")
    (setof type-eq-decl nil defined_types nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (greatest_lower_bound const-decl "bool" bound_defs "reals/")
    (pred type-eq-decl nil defined_types nil)
    (least_upper_bound const-decl "bool" bound_defs "reals/")
    (above_bounded const-decl "bool" bounded_reals "reals/")
    (sup_set type-eq-decl nil bounded_reals "reals/")
    (sup const-decl "{x | least_upper_bound(<=)(x, Su)}" bounded_reals
         "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (lower_bound const-decl "bool" bound_defs "reals/")
    (upper_bound const-decl "bool" bound_defs "reals/")
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   shostak))
 (lower_step_part 0
  (lower_step_part-1 nil 3451036046
   ("" (skosimp)
    (("" (expand "step_function_on?")
      (("" (skosimp)
        (("" (name "MID" "(seq(P!1)(ii!1)+ seq(P!1)(1 + ii!1))/2")
          (("" (inst + "lower_step(f!1, P!1)(MID)")
            (("" (skosimp)
              (("" (expand "lower_step")
                (("" (assert)
                  ((""
                    (case-replace
                     "EXISTS (ii: below(length(P!1) - 1)): x!1 = seq(P!1)(ii)
")
                    (("1" (skosimp)
                      (("1" (typepred "x!1")
                        (("1"
                          (lemma "part_not_in"
                           ("a" "a" "b" "b" "x" "x!1"))
                          (("1" (assert)
                            (("1" (inst - "P!1")
                              (("1"
                                (inst - "ii!1" "ii!2")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (replace 1 2)
                      (("2"
                        (case-replace
                         "EXISTS (ii: below(length(P!1) - 1)): MID = seq(P!1)(ii)")
                        (("1" (skosimp)
                          (("1"
                            (lemma "part_not_in"
                             ("a" "a" "b" "b" "x" "MID"))
                            (("1" (assert)
                              (("1"
                                (inst - "P!1")
                                (("1"
                                  (inst - "ii!1" "ii!2")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (replace 1 3)
                          (("2" (hide 1 2)
                            (("2"
                              (case-replace
                               "part_set_of(P!1)(x!1)=part_set_of(P!1)(MID)")
                              (("2"
                                (hide 2)
                                (("2"
                                  (apply-extensionality :hide? t)
                                  (("2"
                                    (expand "part_set_of")
                                    (("2"
                                      (lemma
                                       "ii_of_x_prop"
                                       ("P" "P!1" "x" "x!1" "y" "MID"))
                                      (("2"
                                        (flatten -1)
                                        (("2"
                                          (hide -1)
                                          (("2"
                                            (split)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (inst + "ii!1")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((step_function_on? const-decl "bool" step_fun_def "analysis/")
    (partition type-eq-decl nil integral_def "analysis/")
    (below type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (closed_interval type-eq-decl nil intervals_real "reals/")
    (b formal-const-decl "{x: real | a < x}" riemann_scaf nil)
    (< const-decl "bool" reals nil)
    (a formal-const-decl "real" riemann_scaf nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (part_set_of const-decl "(nonempty?[real])" riemann_scaf nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (ii_of_x_prop formula-decl nil riemann_scaf nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (part_not_in formula-decl nil integral_def "analysis/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (open_interval type-eq-decl nil intervals_real "reals/")
    (zeroed_bounded? const-decl "bool" riemann_scaf nil)
    (bounded nonempty-type-eq-decl nil riemann_scaf nil)
    (step? const-decl "bool" riemann_scaf nil)
    (step nonempty-type-eq-decl nil riemann_scaf nil))
   shostak))
 (abs_of_sub_metric 0
  (abs_of_sub_metric-1 nil 3769795993 ("" (grind) nil nil)
   ((minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (metric_zero? const-decl "bool" metric_def "metric_space/")
    (metric_symmetric? const-decl "bool" metric_def "metric_space/")
    (metric_triangle? const-decl "bool" metric_def "metric_space/")
    (metric? const-decl "bool" metric_def "metric_space/")
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (riemann_sequence_TCC1 0
  (riemann_sequence_TCC1-1 nil 3450877363
   ("" (skosimp*)
    (("" (expand "-")
      (("" (typepred "Psi!1(x1!1)")
        (("" (typepred "Phi!1(x1!1)")
          ((""
            (lemma "riemann_lebesgue_step_integrable"
             ("phi" "Phi!1(x1!1)"))
            ((""
              (lemma "riemann_lebesgue_step_integrable"
               ("phi" "Psi!1(x1!1)"))
              (("" (flatten)
                ((""
                  (lemma "integrable_diff"
                   ("f1" "Psi!1(x1!1)" "f2" "Phi!1(x1!1)"))
                  (("" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((increasing? const-decl "bool" fun_preds_partial "structures/")
    (lambda_ const-decl "complete_sigma_finite[real, cal_M]"
     lebesgue_def nil)
    (complete_sigma_finite type-eq-decl nil measure_def
     "measure_integration/")
    (complete_sigma_finite? const-decl "bool" measure_def
     "measure_integration/")
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     "extended_nnreal/")
    (nnreal type-eq-decl nil real_types nil)
    (cal_M const-decl "sigma_algebra" lebesgue_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     "measure_integration/")
    (sigma_algebra? const-decl "bool" subset_algebra_def
     "measure_integration/")
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (integrable nonempty-type-eq-decl nil integral
     "measure_integration/")
    (integrable? const-decl "bool" integral "measure_integration/")
    (integrable_diff judgement-tcc nil integral "measure_integration/")
    (riemann_lebesgue_step_integrable formula-decl nil riemann_scaf
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (step? const-decl "bool" riemann_scaf nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (step nonempty-type-eq-decl nil riemann_scaf nil)
    (restrict const-decl "R" restrict nil)
    (<= const-decl "bool" reals nil)
    (<= const-decl "bool" real_fun_orders "reals/")
    (decreasing? const-decl "bool" fun_preds_partial "structures/"))
   nil
   (riemann_sequence subtype
    "((pointwise_convergence[real].-)(riemann_scaf.Psi, riemann_scaf.Phi))"
    "[nat -> integrable[real, cal_M, lambda_]]")))
 (riemann_sequence_TCC2 0
  (riemann_sequence_TCC2-1 nil 3450877363
   ("" (skosimp*)
    (("" (typepred "Psi!1(x1!1)")
      ((""
        (lemma "riemann_lebesgue_step_integrable"
         ("phi" "Psi!1(x1!1)"))
        (("" (flatten) nil nil)) nil))
      nil))
    nil)
   ((decreasing? const-decl "bool" fun_preds_partial "structures/")
    (<= const-decl "bool" real_fun_orders "reals/")
    (<= const-decl "bool" reals nil)
    (restrict const-decl "R" restrict nil)
    (step nonempty-type-eq-decl nil riemann_scaf nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (step? const-decl "bool" riemann_scaf nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (riemann_lebesgue_step_integrable formula-decl nil riemann_scaf
     nil))
   nil
   (riemann_sequence subtype "riemann_scaf.Psi"
    "[nat -> integrable[real, cal_M, lambda_]]")))
 (riemann_sequence_TCC3 0
  (riemann_sequence_TCC3-1 nil 3450877363
   ("" (skosimp*)
    (("" (typepred "Phi!1(x1!1)")
      ((""
        (lemma "riemann_lebesgue_step_integrable"
         ("phi" "Phi!1(x1!1)"))
        (("" (flatten) nil nil)) nil))
      nil))
    nil)
   ((increasing? const-decl "bool" fun_preds_partial "structures/")
    (<= const-decl "bool" real_fun_orders "reals/")
    (<= const-decl "bool" reals nil)
    (restrict const-decl "R" restrict nil)
    (step nonempty-type-eq-decl nil riemann_scaf nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (step? const-decl "bool" riemann_scaf nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (riemann_lebesgue_step_integrable formula-decl nil riemann_scaf
     nil))
   nil
   (riemann_sequence subtype "riemann_scaf.Phi"
    "[nat -> integrable[real, cal_M, lambda_]]")))
 (riemann_sequence 0
  (riemann_sequence-3 nil 3722367093
   ("" (skosimp)
    (("" (lemma "bounded_above_is_convergent" ("u" "integral o Phi!1"))
      (("1"
        (lemma "bounded_below_is_convergent" ("u" "integral o Psi!1"))
        (("1" (split)
          (("1" (split)
            (("1" (expand "convergent_upto?")
              (("1" (expand "convergent_downto?")
                (("1" (skolem - "LOW_LIM")
                  (("1" (skolem - "HIGH_LIM")
                    (("1" (expand "converges_upto?")
                      (("1" (expand "converges_downto?")
                        (("1" (flatten)
                          (("1" (inst + "LOW_LIM")
                            (("1" (replace -1)
                              (("1"
                                (case-replace "LOW_LIM=HIGH_LIM")
                                (("1"
                                  (replace -4)
                                  (("1"
                                    (name-replace "LIMIT" "HIGH_LIM")
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (case
                                         "lower_riemann_integral(f!1)=LIMIT")
                                        (("1"
                                          (case
                                           "upper_riemann_integral(f!1)=LIMIT")
                                          (("1"
                                            (lemma
                                             "riemann_integrable_def1"
                                             ("f" "f!1"))
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lemma
                                                 "riemann_integrable_def2"
                                                 ("f" "f!1"))
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (lemma
                                               "lower_upper_riemann_prop"
                                               ("f" "f!1"))
                                              (("2"
                                                (expand "<=" -1)
                                                (("2"
                                                  (split)
                                                  (("1"
                                                    (replace -2)
                                                    (("1"
                                                      (hide
                                                       -3
                                                       -4
                                                       -6
                                                       1
                                                       -8)
                                                      (("1"
                                                        (rewrite
                                                         "metric_convergence_def")
                                                        (("1"
                                                          (expand
                                                           "metric_converges_to")
                                                          (("1"
                                                            (expand
                                                             "o ")
                                                            (("1"
                                                              (expand
                                                               "member")
                                                              (("1"
                                                                (inst
                                                                 -3
                                                                 "(upper_riemann_integral(f!1)-LIMIT)/2")
                                                                (("1"
                                                                  (skosimp)
                                                                  (("1"
                                                                    (inst
                                                                     -3
                                                                     "n!1")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "ball")
                                                                        (("1"
                                                                          (lemma
                                                                           "lower_riemann_prop1"
                                                                           ("f"
                                                                            "f!1"
                                                                            "epsilon"
                                                                            "(upper_riemann_integral(f!1) - LIMIT) / 2"))
                                                                          (("1"
                                                                            (skosimp)
                                                                            (("1"
                                                                              (replace
                                                                               -4)
                                                                              (("1"
                                                                                (inst
                                                                                 -6
                                                                                 "n!1")
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "integral_ae_le"
                                                                                     ("f1"
                                                                                      "phi!1"
                                                                                      "f2"
                                                                                      "Psi!1(n!1)"))
                                                                                    (("1"
                                                                                      (split)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "upper_riemann_prop2"
                                                                                         ("f"
                                                                                          "f!1"
                                                                                          "psi"
                                                                                          "Psi!1(n!1)"))
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide-all-but
                                                                                         (-1
                                                                                          -7
                                                                                          1))
                                                                                        (("2"
                                                                                          (expand
                                                                                           "ae_le?")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "pointwise_ae?")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "ae?")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "fullset")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "ae_in?")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     +
                                                                                                     "emptyset[real]")
                                                                                                    (("2"
                                                                                                      (skosimp)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "<="
                                                                                                         (-1
                                                                                                          -2))
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "x!1")
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "x!1")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (lemma
                                             "trich_lt"
                                             ("x"
                                              "lower_riemann_integral(f!1)"
                                              "y"
                                              "LIMIT"))
                                            (("2"
                                              (split)
                                              (("1"
                                                (hide-all-but
                                                 (-1 -2 -6 -3))
                                                (("1"
                                                  (rewrite
                                                   "metric_convergence_def")
                                                  (("1"
                                                    (expand
                                                     "metric_converges_to")
                                                    (("1"
                                                      (inst
                                                       -2
                                                       "(LIMIT-lower_riemann_integral(f!1))/2")
                                                      (("1"
                                                        (skosimp)
                                                        (("1"
                                                          (expand
                                                           "member")
                                                          (("1"
                                                            (inst
                                                             -2
                                                             "n!1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "o ")
                                                                (("1"
                                                                  (hide
                                                                   -3)
                                                                  (("1"
                                                                    (expand
                                                                     "ball")
                                                                    (("1"
                                                                      (lemma
                                                                       "lower_riemann_prop2"
                                                                       ("f"
                                                                        "f!1"
                                                                        "phi"
                                                                        "Phi!1(n!1)"))
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "n!1")
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (rewrite
                                                     "abs_of_sub_metric")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (propax) nil nil)
                                               ("3"
                                                (hide -2 -3 -5 1 -7)
                                                (("3"
                                                  (rewrite
                                                   "metric_convergence_def")
                                                  (("1"
                                                    (expand
                                                     "metric_converges_to")
                                                    (("1"
                                                      (inst
                                                       -
                                                       "(lower_riemann_integral(f!1)-LIMIT)/2")
                                                      (("1"
                                                        (skosimp)
                                                        (("1"
                                                          (inst
                                                           -
                                                           "n!1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "o ")
                                                              (("1"
                                                                (lemma
                                                                 "lower_riemann_prop1"
                                                                 ("f"
                                                                  "f!1"
                                                                  "epsilon"
                                                                  "(lower_riemann_integral(f!1) - LIMIT) / 2"))
                                                                (("1"
                                                                  (skosimp)
                                                                  (("1"
                                                                    (inst
                                                                     -5
                                                                     "n!1")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (hide
                                                                         -5)
                                                                        (("1"
                                                                          (lemma
                                                                           "integral_ae_le"
                                                                           ("f1"
                                                                            "phi!1"
                                                                            "f2"
                                                                            "Psi!1(n!1)"))
                                                                          (("1"
                                                                            (split)
                                                                            (("1"
                                                                              (name-replace
                                                                               "DRL1"
                                                                               "integral.integral(phi!1)")
                                                                              (("1"
                                                                                (name-replace
                                                                                 "DRL2"
                                                                                 "integral.integral(Psi!1(n!1))")
                                                                                (("1"
                                                                                  (name-replace
                                                                                   "LOW_RIEMANN"
                                                                                   "lower_riemann_integral(f!1)")
                                                                                  (("1"
                                                                                    (hide
                                                                                     -2
                                                                                     -6)
                                                                                    (("1"
                                                                                      (grind-reals)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "ball")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "abs")
                                                                                          (("1"
                                                                                            (grind-reals)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               (-1
                                                                                -5
                                                                                1))
                                                                              (("2"
                                                                                (expand
                                                                                 "ae_le?")
                                                                                (("2"
                                                                                  (expand
                                                                                   "pointwise_ae?")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "ae?")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "fullset")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "ae_in?")
                                                                                        (("2"
                                                                                          (inst
                                                                                           +
                                                                                           "emptyset[real]")
                                                                                          (("2"
                                                                                            (skosimp)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "<="
                                                                                               (-1
                                                                                                -2))
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -
                                                                                                 "x!1")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "x!1")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (rewrite
                                                     "abs_of_sub_metric")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but (-1 -3 -6 1 -5))
                                  (("2"
                                    (rewrite "metric_convergence_def")
                                    (("1"
                                      (rewrite
                                       "metric_convergence_def")
                                      (("1"
                                        (rewrite
                                         "metric_convergence_def")
                                        (("1"
                                          (expand
                                           "metric_converges_to")
                                          (("1"
                                            (typepred
                                             "abs(HIGH_LIM-LOW_LIM)")
                                            (("1"
                                              (expand ">=" -1)
                                              (("1"
                                                (expand "<=" -1)
                                                (("1"
                                                  (split -1)
                                                  (("1"
                                                    (name-replace
                                                     "EPS"
                                                     "abs(HIGH_LIM - LOW_LIM)")
                                                    (("1"
                                                      (hide -2 -3 1)
                                                      (("1"
                                                        (inst
                                                         -
                                                         "EPS/4")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "EPS/4")
                                                          (("1"
                                                            (inst
                                                             -5
                                                             "EPS/2")
                                                            (("1"
                                                              (skosimp*)
                                                              (("1"
                                                                (expand
                                                                 "o ")
                                                                (("1"
                                                                  (expand
                                                                   "member")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "n!1+n!2+n!3")
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "n!1+n!2+n!3")
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "n!1+n!2+n!3")
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           "n!1+n!2+n!3")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (name-replace
                                                                               "NN"
                                                                               "n!1 + n!2 + n!3")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (expand
                                                                                   "-"
                                                                                   -6)
                                                                                  (("1"
                                                                                    (typepred
                                                                                     "Phi!1(NN)")
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "Psi!1(NN)")
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "riemann_lebesgue_step_integrable"
                                                                                         ("phi"
                                                                                          "Phi!1(NN)"))
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "riemann_lebesgue_step_integrable"
                                                                                           ("phi"
                                                                                            "Psi!1(NN)"))
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "integrable_diff"
                                                                                               ("f1"
                                                                                                "Psi!1(NN)"
                                                                                                "f2"
                                                                                                "Phi!1(NN)"))
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "integral_diff"
                                                                                                 ("f1"
                                                                                                  "Psi!1(NN)"
                                                                                                  "f2"
                                                                                                  "Phi!1(NN)"))
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (name-replace
                                                                                                     "LOW"
                                                                                                     "integral.integral(Phi!1(NN))")
                                                                                                    (("1"
                                                                                                      (name-replace
                                                                                                       "HIGH"
                                                                                                       "integral.integral(Psi!1(NN))")
                                                                                                      (("1"
                                                                                                        (hide-all-but
                                                                                                         (-11
                                                                                                          -12
                                                                                                          -13
                                                                                                          -14
                                                                                                          -15
                                                                                                          -16))
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "ball")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "EPS")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "abs")
                                                                                                              (("1"
                                                                                                                (grind-reals)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but
                                                     (-1 1))
                                                    (("2"
                                                      (expand "abs")
                                                      (("2"
                                                        (grind-reals)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (rewrite "abs_of_sub_metric")
                                          nil
                                          nil))
                                        nil)
                                       ("2"
                                        (rewrite "abs_of_sub_metric")
                                        nil
                                        nil))
                                      nil)
                                     ("2"
                                      (rewrite "abs_of_sub_metric")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2 -1 -3)
              (("2" (expand "bounded_above?")
                (("2" (expand "o" 1)
                  (("2" (inst + "integral(Psi!1(0))")
                    (("1" (skolem + "n!1")
                      (("1"
                        (lemma "integral_ae_le"
                         ("f1" "Phi!1(n!1)" "f2" "Psi!1(0)"))
                        (("1" (assert)
                          (("1" (hide 2)
                            (("1" (expand "ae_le?")
                              (("1"
                                (expand "pointwise_ae?")
                                (("1"
                                  (inst-cp - "n!1")
                                  (("1"
                                    (inst - "0")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "ae?")
                                          (("1"
                                            (expand "fullset")
                                            (("1"
                                              (expand "ae_in?")
                                              (("1"
                                                (inst
                                                 +
                                                 "emptyset[real]")
                                                (("1"
                                                  (skosimp)
                                                  (("1"
                                                    (expand
                                                     "<="
                                                     (-2 -3))
                                                    (("1"
                                                      (inst - "x!1")
                                                      (("1"
                                                        (inst - "x!1")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "Psi!1(0)")
                      (("2"
                        (lemma "riemann_lebesgue_step_integrable"
                         ("phi" "Psi!1(0)"))
                        (("2" (flatten) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (hide-all-but 1)
              (("3" (typepred "Phi!1")
                (("3" (expand "increasing?")
                  (("3" (skolem + ("i!1" "j!1"))
                    (("3" (flatten)
                      (("3" (expand "o" 1)
                        (("3" (inst - "i!1" "j!1")
                          (("3" (expand "restrict")
                            (("3" (assert)
                              (("3"
                                (expand "<=" -1)
                                (("3"
                                  (lemma
                                   "integral_ae_le"
                                   ("f1"
                                    "Phi!1(i!1)"
                                    "f2"
                                    "Phi!1(j!1)"))
                                  (("3"
                                    (assert)
                                    (("3"
                                      (hide 2)
                                      (("3"
                                        (expand "ae_le?")
                                        (("3"
                                          (expand "pointwise_ae?")
                                          (("3"
                                            (expand "ae?")
                                            (("3"
                                              (expand "fullset")
                                              (("3"
                                                (expand "ae_in?")
                                                (("3"
                                                  (inst
                                                   +
                                                   "emptyset[real]")
                                                  (("3"
                                                    (skosimp)
                                                    (("3"
                                                      (inst - "x!1")
                                                      (("3"
                                                        (expand
                                                         "member")
                                                        (("3"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide -1 -3 2)
            (("2" (expand "bounded_below?")
              (("2" (expand "o")
                (("2" (typepred "Phi!1(0)")
                  (("2"
                    (lemma "riemann_lebesgue_step_integrable"
                     ("phi" "Phi!1(0)"))
                    (("2" (flatten)
                      (("2" (inst + "integral(Phi!1(0))")
                        (("2" (skolem + "n!1")
                          (("2" (hide -1 -3)
                            (("2" (inst-cp - "0")
                              (("2"
                                (inst - "n!1")
                                (("2"
                                  (flatten)
                                  (("2"
                                    (hide -3 -6)
                                    (("2"
                                      (expand "<=" (-3 -4))
                                      (("2"
                                        (lemma
                                         "integral_ae_le"
                                         ("f1"
                                          "Phi!1(0)"
                                          "f2"
                                          "Psi!1(n!1)"))
                                        (("2"
                                          (assert)
                                          (("2"
                                            (hide 2 -1 -2)
                                            (("2"
                                              (expand "ae_le?")
                                              (("2"
                                                (expand
                                                 "pointwise_ae?")
                                                (("2"
                                                  (expand "ae?")
                                                  (("2"
                                                    (expand "fullset")
                                                    (("2"
                                                      (expand "ae_in?")
                                                      (("2"
                                                        (inst
                                                         +
                                                         "emptyset[real]")
                                                        (("2"
                                                          (skosimp)
                                                          (("2"
                                                            (inst
                                                             -
                                                             "x!1")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "x!1")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (hide-all-but 1)
            (("3" (typepred "Psi!1")
              (("3" (expand "decreasing?")
                (("3" (expand "o ")
                  (("3" (expand "restrict")
                    (("3" (skolem + ("i!1" "j!1"))
                      (("3" (flatten)
                        (("3" (inst - "i!1" "j!1")
                          (("3" (assert)
                            (("3" (expand "<=" -1)
                              (("3"
                                (hide -2)
                                (("3"
                                  (typepred "Psi!1(i!1)")
                                  (("3"
                                    (typepred "Psi!1(j!1)")
                                    (("3"
                                      (lemma
                                       "riemann_lebesgue_step_integrable"
                                       ("phi" "Psi!1(i!1)"))
                                      (("3"
                                        (lemma
                                         "riemann_lebesgue_step_integrable"
                                         ("phi" "Psi!1(j!1)"))
                                        (("3"
                                          (flatten)
                                          (("3"
                                            (hide -1 -3 -4 -6 -7 -8)
                                            (("3"
                                              (lemma
                                               "integral_ae_le"
                                               ("f1"
                                                "Psi!1(j!1)"
                                                "f2"
                                                "Psi!1(i!1)"))
                                              (("3"
                                                (assert)
                                                (("3"
                                                  (hide -1 -2 2)
                                                  (("3"
                                                    (expand "ae_le?")
                                                    (("3"
                                                      (expand
                                                       "pointwise_ae?")
                                                      (("3"
                                                        (expand "ae?")
                                                        (("3"
                                                          (expand
                                                           "fullset")
                                                          (("3"
                                                            (expand
                                                             "ae_in?")
                                                            (("3"
                                                              (inst
                                                               +
                                                               "emptyset[real]")
                                                              (("3"
                                                                (skosimp)
                                                                (("3"
                                                                  (inst
                                                                   -
                                                                   "x!1")
                                                                  (("3"
                                                                    (expand
                                                                     "member")
                                                                    (("3"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skolem + "n!1")
          (("2"
            (lemma "riemann_lebesgue_step_integrable"
             ("phi" "Psi!1(n!1)"))
            (("2" (flatten) nil nil)) nil))
          nil))
        nil)
       ("2" (skolem + "n!1")
        (("2" (typepred "Phi!1(n!1)")
          (("2"
            (lemma "riemann_lebesgue_step_integrable"
             ("phi" "Phi!1(n!1)"))
            (("2" (flatten) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((decreasing? const-decl "bool" fun_preds_partial "structures/")
    (bounded_below_is_convergent formula-decl nil convergence_aux
     "metric_space/")
    (decreasing? const-decl "bool" real_fun_preds "reals/")
    (bounded_below? const-decl "bool" real_fun_preds "reals/")
    (convergent_downto? const-decl "bool" convergence_aux
     "metric_space/")
    (converges_downto? const-decl "bool" convergence_aux
     "metric_space/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (zeroed_bounded? const-decl "bool" riemann_scaf nil)
    (bounded nonempty-type-eq-decl nil riemann_scaf nil)
    (lower_riemann_integral const-decl "real" riemann_scaf nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (metric_convergence_def formula-decl nil metric_space
     "metric_space/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (f!1 skolem-const-decl "bounded" riemann_scaf nil)
    (LIMIT skolem-const-decl "real" riemann_scaf nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (ball const-decl "set[T]" metric_space_def "metric_space/")
    (integral_ae_le formula-decl nil integral "measure_integration/")
    (pointwise_ae? const-decl "bool" measure_theory
     "measure_integration/")
    (fullset const-decl "set" sets nil)
    (emptyset_is_compact name-judgement "compact" convergence_aux
     "metric_space/")
    (emptyset_is_clopen name-judgement "clopen" convergence_aux
     "metric_space/")
    (finite_emptyset name-judgement "finite_set[real]" integral_def
     "analysis/")
    (subset_algebra_emptyset name-judgement "(S)" lebesgue_def nil)
    (outer_negligible_emptyset name-judgement "outer_negligible"
     real_lebesgue_scaf nil)
    (subset_algebra_emptyset name-judgement "(S)" real_lebesgue_scaf
     nil)
    (subset_algebra_emptyset name-judgement "(S)" real_lebesgue_scaf
     nil)
    (finite_emptyset name-judgement "finite_set" sigma_countable
     "sigma_set/")
    (finite_emptyset name-judgement "finite_set" bounded_nats
     "orders/")
    (finite_emptyset name-judgement "finite_set[T]" step_fun_props
     "analysis/")
    (finite_emptyset name-judgement "finite_set" countable_props
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set" countable_setofsets
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (negligible nonempty-type-eq-decl nil measure_theory
     "measure_integration/")
    (negligible_set? const-decl "bool" measure_theory
     "measure_integration/")
    (set type-eq-decl nil sets nil)
    (TRUE const-decl "bool" booleans nil)
    (ae_in? const-decl "bool" measure_theory "measure_integration/")
    (ae? const-decl "bool" measure_theory "measure_integration/")
    (fullset_is_clopen name-judgement "clopen" convergence_aux
     "metric_space/")
    (measurable_fullset name-judgement "measurable_set[real, cal_M]"
     lebesgue_def nil)
    (subset_algebra_fullset name-judgement "(cal_M)" lebesgue_def nil)
    (real_is_complete name-judgement "metric_complete" real_topology
     "metric_space/")
    (subset_algebra_fullset name-judgement "(induced_sigma_algebra)"
     real_lebesgue_scaf nil)
    (subset_algebra_fullset name-judgement "(lebesgue_measurable)"
     real_lebesgue_scaf nil)
    (ae_le? const-decl "bool" measure_theory "measure_integration/")
    (upper_riemann_prop2 formula-decl nil riemann_scaf nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (lower_riemann_prop1 formula-decl nil riemann_scaf nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member const-decl "bool" sets nil)
    (metric_converges_to const-decl "bool" metric_space_def
     "metric_space/")
    (lower_upper_riemann_prop formula-decl nil riemann_scaf nil)
    (riemann_integrable_def1 formula-decl nil riemann_scaf nil)
    (riemann_integrable_def2 formula-decl nil riemann_scaf nil)
    (upper_riemann_integral const-decl "real" riemann_scaf nil)
    (trich_lt formula-decl nil real_props nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (ball_is_metric_open application-judgement "metric_open"
     convergence_aux "metric_space/")
    (abs_of_sub_metric formula-decl nil riemann_scaf nil)
    (lower_riemann_prop2 formula-decl nil riemann_scaf nil)
    (metric? const-decl "bool" metric_def "metric_space/")
    (- const-decl "sequence[[T -> real]]" pointwise_convergence
       "measure_integration/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (HIGH_LIM skolem-const-decl "real" riemann_scaf nil)
    (LOW_LIM skolem-const-decl "real" riemann_scaf nil)
    (EPS skolem-const-decl
     "{n: nonneg_real | n >= HIGH_LIM - LOW_LIM AND n >= -(HIGH_LIM - LOW_LIM)}"
     riemann_scaf nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (riemann_lebesgue_step_integrable formula-decl nil riemann_scaf
     nil)
    (integral_diff formula-decl nil integral "measure_integration/")
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (integrable_diff judgement-tcc nil integral "measure_integration/")
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (converges_upto? const-decl "bool" convergence_aux "metric_space/")
    (convergent_upto? const-decl "bool" convergence_aux
     "metric_space/")
    (bounded_above? const-decl "bool" real_fun_preds "reals/")
    (Psi!1 skolem-const-decl "(decreasing?
     [nat, step, restrict[[real, real], [nat, nat], boolean](reals.<=),
      (restrict[[[real -> real], [real -> real]], [step, step], bool]
           ((real_fun_orders.<=)))])" riemann_scaf nil)
    (increasing? const-decl "bool" real_fun_preds "reals/")
    (bounded_above_is_convergent formula-decl nil convergence_aux
     "metric_space/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def
     "measure_integration/")
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     "measure_integration/")
    (cal_M const-decl "sigma_algebra" lebesgue_def nil)
    (nnreal type-eq-decl nil real_types nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     "extended_nnreal/")
    (complete_sigma_finite? const-decl "bool" measure_def
     "measure_integration/")
    (complete_sigma_finite type-eq-decl nil measure_def
     "measure_integration/")
    (lambda_ const-decl "complete_sigma_finite[real, cal_M]"
     lebesgue_def nil)
    (integrable? const-decl "bool" integral "measure_integration/")
    (integrable nonempty-type-eq-decl nil integral
     "measure_integration/")
    (O const-decl "T3" function_props nil)
    (integral const-decl "real" integral "measure_integration/")
    (step? const-decl "bool" riemann_scaf nil)
    (step nonempty-type-eq-decl nil riemann_scaf nil)
    (restrict const-decl "R" restrict nil)
    (<= const-decl "bool" reals nil)
    (<= const-decl "bool" real_fun_orders "reals/")
    (increasing? const-decl "bool" fun_preds_partial "structures/"))
   nil))
 (lower_step_error_TCC1 0
  (lower_step_error_TCC1-1 nil 3451190578
   ("" (skosimp)
    (("" (lemma "riemann_lebesgue_step_integrable" ("phi" "psi!1"))
      (("" (flatten) nil nil)) nil))
    nil)
   ((step nonempty-type-eq-decl nil riemann_scaf nil)
    (step? const-decl "bool" riemann_scaf nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (riemann_lebesgue_step_integrable formula-decl nil riemann_scaf
     nil))
   nil
   (lower_step_error subtype "riemann_scaf.psi"
    "integrable[real, cal_M, lambda_]")))
 (lower_step_error_TCC2 0
  (lower_step_error_TCC2-1 nil 3451190578
   ("" (skosimp)
    (("" (lemma "riemann_lebesgue_step_integrable" ("phi" "phi!1"))
      (("" (flatten) nil nil)) nil))
    nil)
   ((step nonempty-type-eq-decl nil riemann_scaf nil)
    (step? const-decl "bool" riemann_scaf nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (riemann_lebesgue_step_integrable formula-decl nil riemann_scaf
     nil))
   nil
   (lower_step_error subtype "riemann_scaf.phi"
    "integrable[real, cal_M, lambda_]")))
 (lower_step_error 0
  (lower_step_error-1 nil 3722371143
   ("" (skosimp)
    (("" (name "N1" "length(P1!1)-2")
      (("" (name "N2" "length(P2!1)-2")
        ((""
          (lemma "both_sides_times_pos_le1"
           ("pz" "2*part_norm(P2!1)" "x" "0" "y" "sup_norm(f!1)"))
          (("" (replace -3)
            ((""
              (name-replace "K" "2 * sup_norm(f!1) * part_norm(P2!1)")
              (("" (assert)
                ((""
                  (lemma "riemann_lebesgue_step_integrable"
                   ("phi" "phi!1"))
                  ((""
                    (lemma "riemann_lebesgue_step_integrable"
                     ("phi" "psi!1"))
                    (("" (flatten)
                      (("" (hide -1 -3 -4 -6)
                        ((""
                          (lemma "integrable_diff"
                           ("f1" "phi!1" "f2" "psi!1"))
                          ((""
                            (case "K*N1 >= integral((-[real])(phi!1, psi!1))")
                            (("1" (rewrite "integral_diff")
                              (("1"
                                (expand "K")
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (name
                                 "EE"
                                 "lambda (ii:below(N2+1)): {x | seq(P2!1)(ii) < x & x < seq(P2!1)(ii+1)}")
                                (("2"
                                  (name
                                   "PHI"
                                   "lambda (ii:below(N2+1)): phi(EE(ii))")
                                  (("2"
                                    (name
                                     "FF"
                                     "lambda (ii:below(N2+1)):
                                                               (*[real])(PHI(ii), (-[real])(phi!1, psi!1))")
                                    (("2"
                                      (case
                                       "forall (ii: below(N2 + 1)): integrable?(FF(ii))")
                                      (("1"
                                        (hide -2 -3 -4)
                                        (("1"
                                          (name
                                           "GG"
                                           "(LAMBDA (ii: below(N2+1)): integral.integral(FF(ii)))")
                                          (("1"
                                            (case
                                             "FORALL (n: nat):
                                                                                      n <= N2 =>
                                                                                       integral(phi(closed(seq(P2!1)(0), seq(P2!1)(n+1))) *
                                                                                                 (-[real])(phi!1, psi!1))
                                                                                        = sigma[below(N2 + 1)](0, n, GG)")
                                            (("1"
                                              (inst - "N2")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (case-replace
                                                   "phi(closed(seq(P2!1)(0), seq(P2!1)(1 + N2))) *
                                                                            (-[real])(phi!1, psi!1)=(-[real])(phi!1, psi!1)")
                                                  (("1"
                                                    (replace -2)
                                                    (("1"
                                                      (hide -1 -2)
                                                      (("1"
                                                        (expand ">=")
                                                        (("1"
                                                          (name
                                                           "PART2"
                                                           "lambda (ii:below(N1+1)): ii_of_x(P2!1)(seq(P1!1)(ii))")
                                                          (("1"
                                                            (case
                                                             "PART2(0)=0")
                                                            (("1"
                                                              (hide -2)
                                                              (("1"
                                                                (case
                                                                 "forall (ii:below(N1+1)): 0 <= PART2(ii) & PART2(ii) < N2+1")
                                                                (("1"
                                                                  (case
                                                                   "forall(ii,jj:below(N1+1)):ii<=jj=>PART2(ii)<=PART2(jj)")
                                                                  (("1"
                                                                    (name
                                                                     "ENDS"
                                                                     "lambda (ii:below(N1+1)): exists (jj:below(N2+1)): seq(P1!1)(ii) = seq(P2!1)(jj)")
                                                                    (("1"
                                                                      (name
                                                                       "MIDS"
                                                                       "LAMBDA (ii: below(N1 + 1)): not ENDS(ii)")
                                                                      (("1"
                                                                        (name
                                                                         "JUMPS"
                                                                         "image[below(N1+1),below(N2+1)](PART2,MIDS)")
                                                                        (("1"
                                                                          (case
                                                                           "forall (ii:below(N2+1)): JUMPS(ii) => GG(ii) <=K")
                                                                          (("1"
                                                                            (case
                                                                             "forall (ii:below(N2+1)): not JUMPS(ii) => GG(ii)<=0")
                                                                            (("1"
                                                                              (hide
                                                                               -3
                                                                               -4
                                                                               -5)
                                                                              (("1"
                                                                                (case
                                                                                 "sigma[below(N2 + 1)](PART2(N1)+1, N2, GG) <= 0")
                                                                                (("1"
                                                                                  (case
                                                                                   "forall (ii: below(N1)): sigma[below(N2 + 1)](PART2(ii) + 1, PART2(ii+1)-1, GG) <= 0")
                                                                                  (("1"
                                                                                    (case
                                                                                     "FORALL (n: posnat):
                                                                                                                                                                                                                          n <= N1 => sigma[below(N2 + 1)](0, PART2(n), GG) <= K * n")
                                                                                    (("1"
                                                                                      (case-replace
                                                                                       "N1=0")
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "sigma_le[below(N2 + 1)]"
                                                                                         ("low"
                                                                                          "0"
                                                                                          "high"
                                                                                          "N2"
                                                                                          "F"
                                                                                          "GG"
                                                                                          "G"
                                                                                          "lambda (ii: below(N2 + 1)): 0"))
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "sigma_zero[below(N2 + 1)]"
                                                                                           -1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (hide
                                                                                               2)
                                                                                              (("1"
                                                                                                (skosimp)
                                                                                                (("1"
                                                                                                  (typepred
                                                                                                   "n!1")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -7
                                                                                                     "n!1")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "JUMPS"
                                                                                                         -7)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "image")
                                                                                                          (("1"
                                                                                                            (skosimp)
                                                                                                            (("1"
                                                                                                              (typepred
                                                                                                               "x!1")
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -5)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "MIDS")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "ENDS")
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       +
                                                                                                                       "0")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (inst
                                                                                         -
                                                                                         "N1")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "sigma_split[below(N2 + 1)]"
                                                                                             ("low"
                                                                                              "0"
                                                                                              "high"
                                                                                              "N2"
                                                                                              "F"
                                                                                              "GG"
                                                                                              "z"
                                                                                              "PART2(N1)"))
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       2)
                                                                                      (("2"
                                                                                        (induct
                                                                                         "n")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil)
                                                                                         ("3"
                                                                                          (skosimp)
                                                                                          (("3"
                                                                                            (case-replace
                                                                                             "j!1=0")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (case-replace
                                                                                                 "PART2(1)=0")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "sigma"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -8
                                                                                                       "0")
                                                                                                      (("1"
                                                                                                        (split
                                                                                                         -8)
                                                                                                        (("1"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (inst
                                                                                                           -7
                                                                                                           "0")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (case
                                                                                                   "PART2(1) >=1")
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -6
                                                                                                       "0")
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "sigma_first"
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (inst-cp
                                                                                                           -7
                                                                                                           "0")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (split
                                                                                                               -8)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "sigma"
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -8
                                                                                                                   "PART2(1)")
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -9
                                                                                                                     "PART2(1)")
                                                                                                                    (("1"
                                                                                                                      (case-replace
                                                                                                                       "JUMPS(PART2(1))")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (expand
                                                                                                                 "JUMPS")
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "image")
                                                                                                                  (("2"
                                                                                                                    (skosimp)
                                                                                                                    (("2"
                                                                                                                      (typepred
                                                                                                                       "x!1")
                                                                                                                      (("2"
                                                                                                                        (case-replace
                                                                                                                         "x!1=0")
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "MIDS")
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "ENDS")
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               +
                                                                                                                               "0")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (inst
                                                                                                                           -12
                                                                                                                           "1"
                                                                                                                           "x!1")
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -4
                                                                                                 "j!1")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "sigma"
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -7
                                                                                                     "PART2(1+j!1)")
                                                                                                    (("2"
                                                                                                      (split
                                                                                                       -7)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "sigma_split[below(N2 + 1)]"
                                                                                                         ("low"
                                                                                                          "0"
                                                                                                          "high"
                                                                                                          "PART2(1 + j!1) - 1"
                                                                                                          "z"
                                                                                                          "PART2(j!1)"
                                                                                                          "F"
                                                                                                          "GG"))
                                                                                                        (("1"
                                                                                                          (case-replace
                                                                                                           "PART2(j!1)=PART2(1 + j!1)")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -8
                                                                                                               "j!1"
                                                                                                               "j!1+1")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (inst
                                                                                                         -6
                                                                                                         "PART2(1 + j!1)")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             "sigma_split[below(N2 + 1)]"
                                                                                                             ("low"
                                                                                                              "0"
                                                                                                              "high"
                                                                                                              "PART2(1 + j!1) - 1"
                                                                                                              "z"
                                                                                                              "PART2(j!1)"
                                                                                                              "F"
                                                                                                              "GG"))
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -7
                                                                                                                 "j!1"
                                                                                                                 "1+j!1")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("4"
                                                                                          (skosimp)
                                                                                          (("4"
                                                                                            (assert)
                                                                                            (("4"
                                                                                              (inst
                                                                                               -9
                                                                                               "n!2")
                                                                                              (("4"
                                                                                                (flatten)
                                                                                                (("4"
                                                                                                  (assert)
                                                                                                  (("4"
                                                                                                    (skosimp*)
                                                                                                    (("4"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("5"
                                                                                          (skosimp)
                                                                                          (("5"
                                                                                            (assert)
                                                                                            (("5"
                                                                                              (skosimp*)
                                                                                              (("5"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("6"
                                                                                          (skosimp)
                                                                                          (("6"
                                                                                            (assert)
                                                                                            (("6"
                                                                                              (inst
                                                                                               -7
                                                                                               "n!1")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("7"
                                                                                          (skosimp)
                                                                                          (("7"
                                                                                            (assert)
                                                                                            (("7"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("8"
                                                                                          (skosimp*)
                                                                                          (("8"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("9"
                                                                                          (assert)
                                                                                          (("9"
                                                                                            (skosimp*)
                                                                                            (("9"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (skosimp)
                                                                                      (("3"
                                                                                        (skosimp)
                                                                                        (("3"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("4"
                                                                                      (skosimp)
                                                                                      (("4"
                                                                                        (inst
                                                                                         -7
                                                                                         "n!1")
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("5"
                                                                                      (skosimp)
                                                                                      (("5"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     2)
                                                                                    (("2"
                                                                                      (skosimp)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "sigma_le[below(N2 + 1)]"
                                                                                         ("low"
                                                                                          "PART2(ii!1) + 1"
                                                                                          "high"
                                                                                          "PART2(ii!1 + 1) - 1"
                                                                                          "F"
                                                                                          "GG"
                                                                                          "G"
                                                                                          "lambda (ii:below(N2 + 1)):0"))
                                                                                        (("2"
                                                                                          (rewrite
                                                                                           "sigma_zero[below(N2 + 1)]"
                                                                                           -1)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (hide
                                                                                               -1
                                                                                               2)
                                                                                              (("2"
                                                                                                (skosimp)
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "n!1")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -3
                                                                                                     "n!1")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "JUMPS"
                                                                                                         -3)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "image")
                                                                                                          (("2"
                                                                                                            (skosimp)
                                                                                                            (("2"
                                                                                                              (typepred
                                                                                                               "x!1")
                                                                                                              (("2"
                                                                                                                (lemma
                                                                                                                 "trich_lt"
                                                                                                                 ("x"
                                                                                                                  "ii!1"
                                                                                                                  "y"
                                                                                                                  "x!1"))
                                                                                                                (("2"
                                                                                                                  (split)
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -8
                                                                                                                     "ii!1+1"
                                                                                                                     "x!1")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("3"
                                                                                                                    (inst
                                                                                                                     -8
                                                                                                                     "x!1"
                                                                                                                     "ii!1")
                                                                                                                    (("3"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (skosimp)
                                                                                    (("3"
                                                                                      (skosimp)
                                                                                      (("3"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("4"
                                                                                    (skosimp)
                                                                                    (("4"
                                                                                      (inst
                                                                                       +
                                                                                       "N2")
                                                                                      (("4"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("5"
                                                                                    (skosimp)
                                                                                    (("5"
                                                                                      (assert)
                                                                                      (("5"
                                                                                        (inst-cp
                                                                                         -5
                                                                                         "ii!1")
                                                                                        (("5"
                                                                                          (flatten)
                                                                                          (("5"
                                                                                            (assert)
                                                                                            (("5"
                                                                                              (inst
                                                                                               +
                                                                                               "0")
                                                                                              (("5"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "sigma_le[below(N2 + 1)]"
                                                                                     ("low"
                                                                                      "PART2(N1)+1"
                                                                                      "high"
                                                                                      "N2"
                                                                                      "F"
                                                                                      "GG"
                                                                                      "G"
                                                                                      "lambda (ii:below(N2 + 1)): 0"))
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "sigma_zero[below(N2 + 1)]"
                                                                                       -1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (hide
                                                                                           2)
                                                                                          (("2"
                                                                                            (skosimp)
                                                                                            (("2"
                                                                                              (typepred
                                                                                               "n!1")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -3
                                                                                                 "n!1")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "JUMPS"
                                                                                                     -3)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "image")
                                                                                                      (("2"
                                                                                                        (skosimp)
                                                                                                        (("2"
                                                                                                          (typepred
                                                                                                           "x!1")
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -7
                                                                                                             "x!1"
                                                                                                             "N1")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (skosimp)
                                                                                  (("3"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("4"
                                                                                  (flatten)
                                                                                  (("4"
                                                                                    (inst
                                                                                     +
                                                                                     "0")
                                                                                    (("4"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (hide
                                                                                 -1)
                                                                                (("2"
                                                                                  (skosimp)
                                                                                  (("2"
                                                                                    (hide
                                                                                     -1
                                                                                     -2
                                                                                     -3)
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "ii!1")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "JUMPS")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "image")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "GG")
                                                                                            (("2"
                                                                                              (hide
                                                                                               -5)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "FF")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "PHI")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "EE")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -5
                                                                                                       "ii!1")
                                                                                                      (("2"
                                                                                                        (lemma
                                                                                                         "integral_ae_le"
                                                                                                         ("f1"
                                                                                                          "(*[real])
                                                                                                                                                                                      (phi({x |
                                                                                                                                                                                              seq(P2!1)(ii!1) < x &
                                                                                                                                                                                               x < seq(P2!1)(1 + ii!1)}),
                                                                                                                                                                                       (-[real])(phi!1, psi!1))"
                                                                                                          "f2"
                                                                                                          "lambda (x:real): 0"))
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           "integral_zero")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (hide
                                                                                                               3)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "ae_le?")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "pointwise_ae?")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "ae?")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "fullset")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "ae_in?")
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           +
                                                                                                                           "emptyset[real]")
                                                                                                                          (("1"
                                                                                                                            (skosimp)
                                                                                                                            (("1"
                                                                                                                              (hide
                                                                                                                               1)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "*")
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "phi")
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "member")
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "-")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (case-replace
                                                                                                                                           "seq(P2!1)(ii!1) < x!1 & x!1 < seq(P2!1)(1 + ii!1)")
                                                                                                                                          (("1"
                                                                                                                                            (flatten)
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (hide-all-but
                                                                                                                                                 (-1
                                                                                                                                                  -2
                                                                                                                                                  -3
                                                                                                                                                  -4
                                                                                                                                                  -5
                                                                                                                                                  -12
                                                                                                                                                  -12
                                                                                                                                                  -14
                                                                                                                                                  -15
                                                                                                                                                  1
                                                                                                                                                  2))
                                                                                                                                                (("1"
                                                                                                                                                  (replace
                                                                                                                                                   -7)
                                                                                                                                                  (("1"
                                                                                                                                                    (replace
                                                                                                                                                     -8)
                                                                                                                                                    (("1"
                                                                                                                                                      (hide
                                                                                                                                                       -7
                                                                                                                                                       -8)
                                                                                                                                                      (("1"
                                                                                                                                                        (expand
                                                                                                                                                         "lower_step"
                                                                                                                                                         1
                                                                                                                                                         2)
                                                                                                                                                        (("1"
                                                                                                                                                          (case-replace
                                                                                                                                                           "EXISTS (ii: below(length(P2!1) - 1)): x!1 = seq(P2!1)(ii)")
                                                                                                                                                          (("1"
                                                                                                                                                            (skosimp)
                                                                                                                                                            (("1"
                                                                                                                                                              (lemma
                                                                                                                                                               "part_not_in"
                                                                                                                                                               ("a"
                                                                                                                                                                "a"
                                                                                                                                                                "b"
                                                                                                                                                                "b"
                                                                                                                                                                "x"
                                                                                                                                                                "x!1"))
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                (("1"
                                                                                                                                                                  (inst
                                                                                                                                                                   -
                                                                                                                                                                   "P2!1")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (inst
                                                                                                                                                                     -
                                                                                                                                                                     "ii!1"
                                                                                                                                                                     "ii!2")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (replace
                                                                                                                                                             1
                                                                                                                                                             2)
                                                                                                                                                            (("2"
                                                                                                                                                              (expand
                                                                                                                                                               "lower_step")
                                                                                                                                                              (("2"
                                                                                                                                                                (case-replace
                                                                                                                                                                 "EXISTS (ii: below(length(P1!1) - 1)): x!1 = seq(P1!1)(ii)")
                                                                                                                                                                (("1"
                                                                                                                                                                  (skosimp)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (expand
                                                                                                                                                                     "PART2"
                                                                                                                                                                     3)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (inst
                                                                                                                                                                       3
                                                                                                                                                                       "ii!2")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (lemma
                                                                                                                                                                         "ii_of_x_def"
                                                                                                                                                                         ("P"
                                                                                                                                                                          "P2!1"
                                                                                                                                                                          "x"
                                                                                                                                                                          "seq(P1!1)(ii!2)"
                                                                                                                                                                          "ii"
                                                                                                                                                                          "ii!1"))
                                                                                                                                                                        (("1"
                                                                                                                                                                          (assert)
                                                                                                                                                                          nil
                                                                                                                                                                          nil))
                                                                                                                                                                        nil)
                                                                                                                                                                       ("2"
                                                                                                                                                                        (expand
                                                                                                                                                                         "MIDS")
                                                                                                                                                                        (("2"
                                                                                                                                                                          (expand
                                                                                                                                                                           "ENDS")
                                                                                                                                                                          (("2"
                                                                                                                                                                            (skosimp)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (inst
                                                                                                                                                                               +
                                                                                                                                                                               "jj!1")
                                                                                                                                                                              (("2"
                                                                                                                                                                                (assert)
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (replace
                                                                                                                                                                   1)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (typepred
                                                                                                                                                                     "inf(image(f!1, part_set_of(P1!1)(x!1)))")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (name-replace
                                                                                                                                                                       "INF1"
                                                                                                                                                                       "inf(image(f!1, part_set_of(P1!1)(x!1)))")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (typepred
                                                                                                                                                                         "inf(image(f!1, part_set_of(P2!1)(x!1)))")
                                                                                                                                                                        (("2"
                                                                                                                                                                          (name-replace
                                                                                                                                                                           "INF2"
                                                                                                                                                                           "inf(image(f!1, part_set_of(P2!1)(x!1)))")
                                                                                                                                                                          (("2"
                                                                                                                                                                            (expand
                                                                                                                                                                             "greatest_lower_bound")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (flatten)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (name
                                                                                                                                                                                 "II"
                                                                                                                                                                                 "ii_of_x(P1!1)(x!1)")
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (lemma
                                                                                                                                                                                   "ii_of_x_def"
                                                                                                                                                                                   ("P"
                                                                                                                                                                                    "P1!1"
                                                                                                                                                                                    "x"
                                                                                                                                                                                    "x!1"
                                                                                                                                                                                    "ii"
                                                                                                                                                                                    "II"))
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (flatten)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (case
                                                                                                                                                                                         "seq(P1!1)(II) <=seq(P2!1)(ii!1)")
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (case
                                                                                                                                                                                           "seq(P2!1)(1 + ii!1)<=seq(P1!1)(II+1)")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (inst
                                                                                                                                                                                             -7
                                                                                                                                                                                             "INF1")
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (expand
                                                                                                                                                                                                 "lower_bound")
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (skosimp)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (typepred
                                                                                                                                                                                                     "z!1")
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (expand
                                                                                                                                                                                                       "image")
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (skosimp)
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (typepred
                                                                                                                                                                                                           "x!2")
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (expand
                                                                                                                                                                                                             "part_set_of")
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (flatten)
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (lemma
                                                                                                                                                                                                                 "ii_of_x_def"
                                                                                                                                                                                                                 ("P"
                                                                                                                                                                                                                  "P2!1"
                                                                                                                                                                                                                  "x"
                                                                                                                                                                                                                  "x!1"
                                                                                                                                                                                                                  "ii"
                                                                                                                                                                                                                  "ii!1"))
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                    (replace
                                                                                                                                                                                                                     -1)
                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                      (inst
                                                                                                                                                                                                                       -11
                                                                                                                                                                                                                       "z!1")
                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                        (expand
                                                                                                                                                                                                                         "image")
                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                          (inst
                                                                                                                                                                                                                           +
                                                                                                                                                                                                                           "x!2")
                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                            (expand
                                                                                                                                                                                                                             "part_set_of")
                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                              (propax)
                                                                                                                                                                                                                              nil
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil)
                                                                                                                                                                                           ("2"
                                                                                                                                                                                            (case
                                                                                                                                                                                             "seq(P1!1)(II + 1)<seq(P2!1)(1 + ii!1)")
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (hide
                                                                                                                                                                                               1)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (inst
                                                                                                                                                                                                 4
                                                                                                                                                                                                 "II+1")
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (expand
                                                                                                                                                                                                   "PART2")
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (lemma
                                                                                                                                                                                                     "ii_of_x_def"
                                                                                                                                                                                                     ("P"
                                                                                                                                                                                                      "P2!1"
                                                                                                                                                                                                      "x"
                                                                                                                                                                                                      "seq(P1!1)(1 + II)"
                                                                                                                                                                                                      "ii"
                                                                                                                                                                                                      "ii!1"))
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                      nil
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil)
                                                                                                                                                                                                 ("2"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (expand
                                                                                                                                                                                                     "MIDS")
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (expand
                                                                                                                                                                                                       "ENDS")
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (skosimp)
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (lemma
                                                                                                                                                                                                           "part_not_in"
                                                                                                                                                                                                           ("a"
                                                                                                                                                                                                            "a"
                                                                                                                                                                                                            "b"
                                                                                                                                                                                                            "b"
                                                                                                                                                                                                            "x"
                                                                                                                                                                                                            "seq(P1!1)(1 + II)"))
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                              (inst
                                                                                                                                                                                                               -
                                                                                                                                                                                                               "P2!1")
                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                (inst
                                                                                                                                                                                                                 -
                                                                                                                                                                                                                 "ii!1"
                                                                                                                                                                                                                 "jj!1")
                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                  nil
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil)
                                                                                                                                                                                             ("2"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              nil
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil)
                                                                                                                                                                                         ("2"
                                                                                                                                                                                          (case
                                                                                                                                                                                           "seq(P2!1)(ii!1)<seq(P1!1)(II)")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (hide
                                                                                                                                                                                             1)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (inst
                                                                                                                                                                                               4
                                                                                                                                                                                               "II")
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (expand
                                                                                                                                                                                                 "PART2")
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (lemma
                                                                                                                                                                                                   "ii_of_x_def"
                                                                                                                                                                                                   ("P"
                                                                                                                                                                                                    "P2!1"
                                                                                                                                                                                                    "x"
                                                                                                                                                                                                    "seq(P1!1)(II)"
                                                                                                                                                                                                    "ii"
                                                                                                                                                                                                    "ii!1"))
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                    nil
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil)
                                                                                                                                                                                               ("2"
                                                                                                                                                                                                (expand
                                                                                                                                                                                                 "MIDS")
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (expand
                                                                                                                                                                                                   "ENDS")
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (skosimp)
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (expand
                                                                                                                                                                                                       "<="
                                                                                                                                                                                                       -3)
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (split)
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (lemma
                                                                                                                                                                                                           "trich_lt"
                                                                                                                                                                                                           ("x"
                                                                                                                                                                                                            "ii!1"
                                                                                                                                                                                                            "y"
                                                                                                                                                                                                            "jj!1"))
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (split)
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (replace
                                                                                                                                                                                                               -3)
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (lemma
                                                                                                                                                                                                                 "parts_order_le"
                                                                                                                                                                                                                 ("a"
                                                                                                                                                                                                                  "a"
                                                                                                                                                                                                                  "b"
                                                                                                                                                                                                                  "b"
                                                                                                                                                                                                                  "P"
                                                                                                                                                                                                                  "P2!1"
                                                                                                                                                                                                                  "ii"
                                                                                                                                                                                                                  "ii!1+1"
                                                                                                                                                                                                                  "jj"
                                                                                                                                                                                                                  "jj!1"))
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                  nil
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil)
                                                                                                                                                                                                             ("2"
                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                              nil
                                                                                                                                                                                                              nil)
                                                                                                                                                                                                             ("3"
                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                              (("3"
                                                                                                                                                                                                                (lemma
                                                                                                                                                                                                                 "parts_order"
                                                                                                                                                                                                                 ("a"
                                                                                                                                                                                                                  "a"
                                                                                                                                                                                                                  "b"
                                                                                                                                                                                                                  "b"
                                                                                                                                                                                                                  "P"
                                                                                                                                                                                                                  "P2!1"
                                                                                                                                                                                                                  "ii"
                                                                                                                                                                                                                  "jj!1"
                                                                                                                                                                                                                  "jj"
                                                                                                                                                                                                                  "ii!1"))
                                                                                                                                                                                                                (("3"
                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                  nil
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil)
                                                                                                                                                                                                         ("2"
                                                                                                                                                                                                          (inst
                                                                                                                                                                                                           1
                                                                                                                                                                                                           "II")
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                            nil
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil)
                                                                                                                                                                                           ("2"
                                                                                                                                                                                            (assert)
                                                                                                                                                                                            nil
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (replace
                                                                                                                                             1)
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (rewrite
                                                                                                           "integrable_zero")
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             2)
                                                                            (("2"
                                                                              (skosimp)
                                                                              (("2"
                                                                                (expand
                                                                                 "GG")
                                                                                (("2"
                                                                                  (hide
                                                                                   -1
                                                                                   -2
                                                                                   -3
                                                                                   -4
                                                                                   -5
                                                                                   -6
                                                                                   -7
                                                                                   -8)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "FF")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "K")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "PHI")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "EE")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -
                                                                                             "ii!1")
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "integral_ae_le"
                                                                                               ("f1"
                                                                                                "(((*[real])
                                                                                                                                                                          (phi({x |
                                                                                                                                                                                  seq(P2!1)(ii!1) < x &
                                                                                                                                                                                   x < seq(P2!1)(1 + ii!1)}),
                                                                                                                                                                           (-[real])(phi!1, psi!1))))"
                                                                                                "f2"
                                                                                                "(*[real])(2 *sup_norm(f!1),
                                                                                                                                                                          phi({x |seq(P2!1)(ii!1) < x &
                                                                                                                                                                                   x < seq(P2!1)(1 + ii!1)}))
                                                                                                                                                                                "))
                                                                                              (("1"
                                                                                                (split)
                                                                                                (("1"
                                                                                                  (name-replace
                                                                                                   "LHS"
                                                                                                   "integral.integral((((*[real])
                                                                                                                                                                                             (phi({x |
                                                                                                                                                                                                     seq(P2!1)(ii!1) < x &
                                                                                                                                                                                                      x < seq(P2!1)(1 + ii!1)}),
                                                                                                                                                                                              (-[real])(phi!1, psi!1)))))")
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     "integral_scal")
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "integral_phi_open"
                                                                                                       ("a"
                                                                                                        "seq(P2!1)(ii!1)"
                                                                                                        "b"
                                                                                                        "seq(P2!1)(1 + ii!1)"))
                                                                                                      (("1"
                                                                                                        (case-replace
                                                                                                         "open(seq(P2!1)(ii!1), seq(P2!1)(1 + ii!1))={x | seq(P2!1)(ii!1) < x & x < seq(P2!1)(1 + ii!1)}")
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "part_norm")
                                                                                                              (("1"
                                                                                                                (lemma
                                                                                                                 "width_lem"
                                                                                                                 ("a"
                                                                                                                  "a"
                                                                                                                  "b"
                                                                                                                  "b"
                                                                                                                  "P"
                                                                                                                  "P2!1"
                                                                                                                  "ii"
                                                                                                                  "ii!1"))
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "finseq_appl")
                                                                                                                  (("1"
                                                                                                                    (typepred
                                                                                                                     "sup_norm(f!1)")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       ">=")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "<="
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (split)
                                                                                                                          (("1"
                                                                                                                            (lemma
                                                                                                                             "both_sides_times_pos_le1"
                                                                                                                             ("pz"
                                                                                                                              "sup_norm(f!1)"
                                                                                                                              "x"
                                                                                                                              "P2!1`seq(1 + ii!1) - P2!1`seq(ii!1)"
                                                                                                                              "y"
                                                                                                                              "width(a, b, P2!1)"))
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (hide-all-but
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (apply-extensionality
                                                                                                             :hide?
                                                                                                             t)
                                                                                                            (("2"
                                                                                                              (typepred
                                                                                                               "P2!1")
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 "ii!1")
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "open")
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "ball")
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "abs")
                                                                                                                      (("2"
                                                                                                                        (grind-reals)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (typepred
                                                                                                           "P2!1")
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "ii!1")
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (lemma
                                                                                                       "integrable_phi_open"
                                                                                                       ("a"
                                                                                                        "seq(P2!1)(ii!1)"
                                                                                                        "b"
                                                                                                        "seq(P2!1)(1 + ii!1)"))
                                                                                                      (("1"
                                                                                                        (case-replace
                                                                                                         "open(seq(P2!1)(ii!1), seq(P2!1)(1 + ii!1))={x | seq(P2!1)(ii!1) < x & x < seq(P2!1)(1 + ii!1)}")
                                                                                                        (("1"
                                                                                                          (apply-extensionality
                                                                                                           :hide?
                                                                                                           t)
                                                                                                          (("1"
                                                                                                            (hide-all-but
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (typepred
                                                                                                               "P2!1")
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 "ii!1")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "open")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "ball")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "abs")
                                                                                                                      (("1"
                                                                                                                        (grind-reals)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (typepred
                                                                                                         "P2!1")
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "ii!1")
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "ae_le?")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "pointwise_ae?")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "ae?")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "fullset")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "ae_in?")
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               +
                                                                                                               "emptyset[real]")
                                                                                                              (("2"
                                                                                                                (skosimp)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "*"
                                                                                                                   2)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "-"
                                                                                                                     2)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "phi"
                                                                                                                       2)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "member")
                                                                                                                        (("2"
                                                                                                                          (case-replace
                                                                                                                           "seq(P2!1)(ii!1) < x!1 & x!1 < seq(P2!1)(1 + ii!1)")
                                                                                                                          (("1"
                                                                                                                            (hide-all-but
                                                                                                                             (-9
                                                                                                                              -10
                                                                                                                              2))
                                                                                                                            (("1"
                                                                                                                              (lemma
                                                                                                                               "lower_step_prop"
                                                                                                                               ("f"
                                                                                                                                "f!1"
                                                                                                                                "P"
                                                                                                                                "P1!1"))
                                                                                                                              (("1"
                                                                                                                                (replace
                                                                                                                                 -2
                                                                                                                                 -1
                                                                                                                                 rl)
                                                                                                                                (("1"
                                                                                                                                  (lemma
                                                                                                                                   "sup_norm_prop"
                                                                                                                                   ("f"
                                                                                                                                    "f!1"))
                                                                                                                                  (("1"
                                                                                                                                    (flatten)
                                                                                                                                    (("1"
                                                                                                                                      (case
                                                                                                                                       "phi!1(x!1)<=sup_norm(f!1)")
                                                                                                                                      (("1"
                                                                                                                                        (case
                                                                                                                                         "-psi!1(x!1)<=sup_norm(f!1)")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (hide
                                                                                                                                           -1
                                                                                                                                           2)
                                                                                                                                          (("2"
                                                                                                                                            (lemma
                                                                                                                                             "lower_step_prop"
                                                                                                                                             ("f"
                                                                                                                                              "f!1"
                                                                                                                                              "P"
                                                                                                                                              "P2!1"))
                                                                                                                                            (("2"
                                                                                                                                              (replace
                                                                                                                                               -6
                                                                                                                                               -1
                                                                                                                                               rl)
                                                                                                                                              (("2"
                                                                                                                                                (hide
                                                                                                                                                 -4
                                                                                                                                                 -5)
                                                                                                                                                (("2"
                                                                                                                                                  (expand
                                                                                                                                                   "<="
                                                                                                                                                   -1)
                                                                                                                                                  (("2"
                                                                                                                                                    (inst
                                                                                                                                                     -
                                                                                                                                                     "x!1")
                                                                                                                                                    (("2"
                                                                                                                                                      (expand
                                                                                                                                                       "lower_step")
                                                                                                                                                      (("2"
                                                                                                                                                        (replace
                                                                                                                                                         -4)
                                                                                                                                                        (("2"
                                                                                                                                                          (assert)
                                                                                                                                                          (("2"
                                                                                                                                                            (case-replace
                                                                                                                                                             "x!1 < a OR b < x!1")
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (replace
                                                                                                                                                               1)
                                                                                                                                                              (("2"
                                                                                                                                                                (case-replace
                                                                                                                                                                 "(EXISTS (ii: below(length(P2!1) - 1)): x!1 = seq(P2!1)(ii)) OR
                                                                                                                                                                                                                                  x!1 = b")
                                                                                                                                                                (("1"
                                                                                                                                                                  (inst
                                                                                                                                                                   -3
                                                                                                                                                                   "x!1")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (hide-all-but
                                                                                                                                                                     (-3
                                                                                                                                                                      2))
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (replace
                                                                                                                                                                   1)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (hide
                                                                                                                                                                     -4)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (typepred
                                                                                                                                                                       "inf(image(f!1, part_set_of(P2!1)(x!1)))")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (name-replace
                                                                                                                                                                         "INF"
                                                                                                                                                                         "inf(image(f!1, part_set_of(P2!1)(x!1)))")
                                                                                                                                                                        (("2"
                                                                                                                                                                          (expand
                                                                                                                                                                           "greatest_lower_bound")
                                                                                                                                                                          (("2"
                                                                                                                                                                            (flatten)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (expand
                                                                                                                                                                               "lower_bound")
                                                                                                                                                                              (("2"
                                                                                                                                                                                (inst
                                                                                                                                                                                 -2
                                                                                                                                                                                 "-sup_norm(f!1)")
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (skosimp)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (typepred
                                                                                                                                                                                       "z!1")
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "image")
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (skosimp)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (inst
                                                                                                                                                                                             -4
                                                                                                                                                                                             "x!2")
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (hide-all-but
                                                                                                                                                                                               (-1
                                                                                                                                                                                                1
                                                                                                                                                                                                -4))
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                nil
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (hide
                                                                                                                                         2
                                                                                                                                         -5
                                                                                                                                         -4)
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "<="
                                                                                                                                           -3)
                                                                                                                                          (("2"
                                                                                                                                            (inst
                                                                                                                                             -3
                                                                                                                                             "x!1")
                                                                                                                                            (("2"
                                                                                                                                              (inst
                                                                                                                                               -1
                                                                                                                                               "x!1")
                                                                                                                                              (("2"
                                                                                                                                                (hide
                                                                                                                                                 -2)
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (replace
                                                                                                                               1)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide
                                                                                                 -1
                                                                                                 2)
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   "integrable_phi_open"
                                                                                                   ("a"
                                                                                                    "seq(P2!1)(ii!1)"
                                                                                                    "b"
                                                                                                    "seq(P2!1)(1 + ii!1)"))
                                                                                                  (("1"
                                                                                                    (case-replace
                                                                                                     "open(seq(P2!1)(ii!1), seq(P2!1)(1 + ii!1))={x |
                                                                                                                                                                                                 seq(P2!1)(ii!1) < x & x < seq(P2!1)(1 + ii!1)}")
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "integrable_scal"
                                                                                                         +)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (apply-extensionality
                                                                                                         :hide?
                                                                                                         t)
                                                                                                        (("2"
                                                                                                          (typepred
                                                                                                           "P2!1")
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "ii!1")
                                                                                                            (("2"
                                                                                                              (hide-all-but
                                                                                                               (-4
                                                                                                                1))
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "open")
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "ball")
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "abs")
                                                                                                                    (("2"
                                                                                                                      (grind-reals)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (typepred
                                                                                                       "P2!1")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "ii!1")
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (skosimp)
                                                                          (("2"
                                                                            (inst
                                                                             -4
                                                                             "x1!1")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (-1
                                                                      -9
                                                                      -10
                                                                      1))
                                                                    (("2"
                                                                      (case
                                                                       "FORALL (ii:below(N1)):PART2(ii)<=PART2(ii+1)")
                                                                      (("1"
                                                                        (case
                                                                         "FORALL (ii: below(N1 + 1),n:nat): ii+n <= N1 => PART2(ii) <= PART2(ii+n)")
                                                                        (("1"
                                                                          (skosimp)
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "ii!1"
                                                                             "jj!1-ii!1")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (induct
                                                                             "n")
                                                                            (("1"
                                                                              (skosimp)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (skosimp)
                                                                              (("2"
                                                                                (skosimp)
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "ii!1")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -
                                                                                       "ii!1+j!1")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (skosimp)
                                                                              (("3"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("4"
                                                                              (skosimp)
                                                                              (("4"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (hide
                                                                           2)
                                                                          (("3"
                                                                            (skosimp)
                                                                            (("3"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         2)
                                                                        (("2"
                                                                          (skosimp)
                                                                          (("2"
                                                                            (expand
                                                                             "PART2")
                                                                            (("2"
                                                                              (name
                                                                               "II"
                                                                               "ii_of_x(P2!1)(seq(P1!1)(ii!1))")
                                                                              (("2"
                                                                                (name
                                                                                 "JJ"
                                                                                 "ii_of_x(P2!1)(seq(P1!1)(1 + ii!1))")
                                                                                (("2"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -2)
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "ii_of_x_def")
                                                                                      (("2"
                                                                                        (rewrite
                                                                                         "ii_of_x_def")
                                                                                        (("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (typepred
                                                                                             "P1!1")
                                                                                            (("2"
                                                                                              (inst
                                                                                               -
                                                                                               "ii!1")
                                                                                              (("2"
                                                                                                (name-replace
                                                                                                 "xx"
                                                                                                 "seq(P1!1)(ii!1)")
                                                                                                (("2"
                                                                                                  (name-replace
                                                                                                   "yy"
                                                                                                   "seq(P1!1)(ii!1+1)")
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     "parts_order_le"
                                                                                                     ("a"
                                                                                                      "a"
                                                                                                      "b"
                                                                                                      "b"
                                                                                                      "P"
                                                                                                      "P2!1"
                                                                                                      "ii"
                                                                                                      "JJ+1"
                                                                                                      "jj"
                                                                                                      "II"))
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (1
                                                                    -9
                                                                    -8))
                                                                  (("2"
                                                                    (skosimp)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "PART2")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (typepred
                                                                             "ii_of_x(P2!1)(seq(P1!1)(ii!1))")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (1
                                                                -8
                                                                -9))
                                                              (("2"
                                                                (expand
                                                                 "PART2")
                                                                (("2"
                                                                  (rewrite
                                                                   "ii_of_x_def")
                                                                  (("2"
                                                                    (typepred
                                                                     "P2!1")
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "0")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skosimp)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (lemma
                                                                 "parts_order_le"
                                                                 ("a"
                                                                  "a"
                                                                  "b"
                                                                  "b"
                                                                  "P"
                                                                  "P1!1"
                                                                  "ii"
                                                                  "0"
                                                                  "jj"
                                                                  "ii!1"))
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (typepred
                                                                       "P1!1")
                                                                      (("2"
                                                                        (lemma
                                                                         "parts_order"
                                                                         ("a"
                                                                          "a"
                                                                          "b"
                                                                          "b"
                                                                          "P"
                                                                          "P1!1"
                                                                          "ii"
                                                                          "ii!1"
                                                                          "jj"
                                                                          "N1+1"))
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but
                                                     (1 -8))
                                                    (("2"
                                                      (typepred
                                                       "phi!1")
                                                      (("2"
                                                        (typepred
                                                         "psi!1")
                                                        (("2"
                                                          (expand
                                                           "step?")
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (hide
                                                               -1
                                                               -3)
                                                              (("2"
                                                                (apply-extensionality
                                                                 :hide?
                                                                 t)
                                                                (("2"
                                                                  (expand
                                                                   "zeroed?")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "x!1")
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "x!1")
                                                                      (("2"
                                                                        (expand
                                                                         "*")
                                                                        (("2"
                                                                          (expand
                                                                           "-")
                                                                          (("2"
                                                                            (ground)
                                                                            (("1"
                                                                              (factor
                                                                               3)
                                                                              (("1"
                                                                                (case-replace
                                                                                 "phi!1(x!1) -  psi!1(x!1) = 0")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (cancel-by
                                                                                   4
                                                                                   "phi!1(x!1) - psi!1(x!1)")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "closed")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "closed_ball")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "phi")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "member")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "abs")
                                                                                            (("2"
                                                                                              (lift-if)
                                                                                              (("2"
                                                                                                (ground)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (factor
                                                                               3)
                                                                              (("2"
                                                                                (case-replace
                                                                                 "phi!1(x!1) -  psi!1(x!1) = 0")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (cancel-by
                                                                                   4
                                                                                   "phi!1(x!1) - psi!1(x!1)")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "closed")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "closed_ball")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "phi")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "member")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "abs")
                                                                                            (("2"
                                                                                              (lift-if)
                                                                                              (("2"
                                                                                                (ground)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (factor
                                                                               5)
                                                                              (("3"
                                                                                (case-replace
                                                                                 "phi!1(x!1) -  psi!1(x!1) = 0")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (name-replace
                                                                                   "PP"
                                                                                   "phi!1(x!1) - psi!1(x!1)")
                                                                                  (("2"
                                                                                    (cancel-by
                                                                                     6
                                                                                     "PP")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "closed")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "closed_ball")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "phi")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "member")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "abs")
                                                                                              (("2"
                                                                                                (lift-if)
                                                                                                (("2"
                                                                                                  (ground)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (induct "n")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "sigma" 1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst - "0")
                                                        (("1"
                                                          (expand "GG")
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (lemma
                                                               "integral.integral_ae_eq"
                                                               ("f"
                                                                "phi(closed(seq(P2!1)(0), seq(P2!1)(1))) *
                                                                                              (-[real])(phi!1, psi!1)"
                                                                "h"
                                                                "FF(0)"))
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (hide
                                                                   2)
                                                                  (("1"
                                                                    (expand
                                                                     "ae_eq?")
                                                                    (("1"
                                                                      (expand
                                                                       "restrict")
                                                                      (("1"
                                                                        (expand
                                                                         "pointwise_ae?")
                                                                        (("1"
                                                                          (expand
                                                                           "ae?")
                                                                          (("1"
                                                                            (expand
                                                                             "fullset")
                                                                            (("1"
                                                                              (expand
                                                                               "ae_in?")
                                                                              (("1"
                                                                                (lemma
                                                                                 "singleton_is_null"
                                                                                 ("x"
                                                                                  "seq(P2!1)(0)"))
                                                                                (("1"
                                                                                  (lemma
                                                                                   "singleton_is_null"
                                                                                   ("x"
                                                                                    "seq(P2!1)(1)"))
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "null_union"
                                                                                     ("N1"
                                                                                      "singleton[real](seq(P2!1)(0))"
                                                                                      "N2"
                                                                                      "singleton[real](seq(P2!1)(1))"))
                                                                                    (("1"
                                                                                      (inst
                                                                                       +
                                                                                       "union[real]
                                                                                                        (singleton[real](seq(P2!1)(0)),
                                                                                                         singleton[real](seq(P2!1)(1)))")
                                                                                      (("1"
                                                                                        (skosimp)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -1
                                                                                           -2
                                                                                           -3)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "union")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "singleton")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "member")
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     -1
                                                                                                     -2
                                                                                                     -3
                                                                                                     -8
                                                                                                     -9
                                                                                                     -4)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "FF")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "PHI")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "EE")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "*")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "-")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "phi")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "member")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "closed")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "closed_ball")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "abs")
                                                                                                                        (("1"
                                                                                                                          (grind-reals)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (lemma
                                                                   "integrable_is_measurable")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "FF(0)")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skosimp*)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "sigma"
                                                       1)
                                                      (("2"
                                                        (replace
                                                         -1
                                                         1
                                                         rl)
                                                        (("2"
                                                          (hide -1 -3)
                                                          (("2"
                                                            (expand
                                                             "GG")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "1+j!1")
                                                              (("2"
                                                                (expand
                                                                 "FF")
                                                                (("2"
                                                                  (name-replace
                                                                   "HH"
                                                                   "(-[real])(phi!1, psi!1)")
                                                                  (("2"
                                                                    (expand
                                                                     "PHI")
                                                                    (("2"
                                                                      (rewrite
                                                                       "integral_add"
                                                                       1
                                                                       :dir
                                                                       rl)
                                                                      (("2"
                                                                        (lemma
                                                                         "parts_order_le"
                                                                         ("a"
                                                                          "a"
                                                                          "b"
                                                                          "b"
                                                                          "P"
                                                                          "P2!1"
                                                                          "ii"
                                                                          "0"
                                                                          "jj"
                                                                          "1+j!1"))
                                                                        (("2"
                                                                          (split)
                                                                          (("1"
                                                                            (lemma
                                                                             "closed_is_measurable"
                                                                             ("a"
                                                                              "seq(P2!1)(0)"
                                                                              "b"
                                                                              "seq(P2!1)(1 + j!1)"))
                                                                            (("1"
                                                                              (lemma
                                                                               "indefinite_integrable"
                                                                               ("E"
                                                                                "closed(seq(P2!1)(0), seq(P2!1)(1 + j!1))"
                                                                                "f"
                                                                                "HH"))
                                                                              (("1"
                                                                                (lemma
                                                                                 "integrable_add"
                                                                                 ("f1"
                                                                                  "(*[real])(phi(EE(1 + j!1)), HH)"
                                                                                  "f2"
                                                                                  "phi(closed(seq(P2!1)(0), seq(P2!1)(1 + j!1))) * HH"))
                                                                                (("1"
                                                                                  (lemma
                                                                                   "indefinite_integrable"
                                                                                   ("E"
                                                                                    "closed(seq(P2!1)(0), seq(P2!1)(2 + j!1))"
                                                                                    "f"
                                                                                    "HH"))
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "integral.integral_ae_eq"
                                                                                     ("f"
                                                                                      "phi(closed(seq(P2!1)(0), seq(P2!1)(2 + j!1))) * HH"
                                                                                      "h"
                                                                                      "((*[real])(phi(EE(1 + j!1)), HH)) +
                                                                                                                                   phi(closed(seq(P2!1)(0), seq(P2!1)(1 + j!1))) * HH"))
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (hide
                                                                                         -1
                                                                                         -2
                                                                                         -3
                                                                                         -4
                                                                                         2
                                                                                         -7
                                                                                         -8
                                                                                         -9
                                                                                         -10
                                                                                         -14
                                                                                         -15)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "ae_eq?")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "restrict")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "pointwise_ae?")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "ae?")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "fullset")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "ae_in?")
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "singleton_is_null"
                                                                                                       ("x"
                                                                                                        "seq(P2!1)(2 + j!1)"))
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         +
                                                                                                         "singleton[real](seq(P2!1)(2 + j!1))")
                                                                                                        (("1"
                                                                                                          (skosimp)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "singleton")
                                                                                                            (("1"
                                                                                                              (hide
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (typepred
                                                                                                                 "P2!1")
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -
                                                                                                                   "1+j!1")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "EE")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "member")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "+ ")
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "*")
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "phi")
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "member")
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "closed")
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "closed_ball")
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "abs")
                                                                                                                                    (("1"
                                                                                                                                      (grind-reals)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (lemma
                                                                                       "integrable_is_measurable")
                                                                                      (("2"
                                                                                        (inst-cp
                                                                                         -
                                                                                         "((*[real])(phi(EE(1 + j!1)), HH))")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -
                                                                                           "phi(closed(seq(P2!1)(0), seq(P2!1)(1 + j!1))) * HH")
                                                                                          (("2"
                                                                                            (rewrite
                                                                                             "sum_measurable[real, cal_M]"
                                                                                             1)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil)
                                                                                 ("3"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (skosimp*)
                                                  (("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (skosimp*)
                                                  (("4"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("5"
                                                  (skosimp*)
                                                  (("5"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("6"
                                                  (skosimp*)
                                                  (("6"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("7"
                                                  (skosimp)
                                                  (("7"
                                                    (lemma
                                                     "parts_order_le"
                                                     ("a"
                                                      "a"
                                                      "b"
                                                      "b"
                                                      "P"
                                                      "P2!1"
                                                      "ii"
                                                      "0"
                                                      "jj"
                                                      "1+n!2"))
                                                    (("7"
                                                      (split)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lemma
                                                           "indefinite_integrable[real, cal_M, lambda_]"
                                                           ("E"
                                                            "closed(seq(P2!1)(0), seq(P2!1)(1 + n!2))"
                                                            "f"
                                                            "(-[real])(phi!1,psi!1)"))
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("8" (assert) nil nil)
                                                 ("9"
                                                  (skosimp)
                                                  (("9"
                                                    (lemma
                                                     "parts_order_le"
                                                     ("a"
                                                      "a"
                                                      "b"
                                                      "b"
                                                      "P"
                                                      "P2!1"
                                                      "ii"
                                                      "0"
                                                      "jj"
                                                      "1+n!2"))
                                                    (("9"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("10"
                                                  (assert)
                                                  nil
                                                  nil)
                                                 ("11"
                                                  (skosimp*)
                                                  (("11"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("12"
                                                  (skosimp)
                                                  (("12"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (skosimp*)
                                              (("3" (assert) nil nil))
                                              nil)
                                             ("4"
                                              (skosimp*)
                                              (("4" (assert) nil nil))
                                              nil)
                                             ("5"
                                              (skosimp)
                                              (("5"
                                                (lemma
                                                 "parts_order_le"
                                                 ("a"
                                                  "a"
                                                  "b"
                                                  "b"
                                                  "P"
                                                  "P2!1"
                                                  "ii"
                                                  "0"
                                                  "jj"
                                                  "1+n!1"))
                                                (("5"
                                                  (split)
                                                  (("1"
                                                    (lemma
                                                     "closed_is_measurable"
                                                     ("a"
                                                      "seq(P2!1)(0)"
                                                      "b"
                                                      "seq(P2!1)(1 + n!1)"))
                                                    (("1"
                                                      (rewrite
                                                       "indefinite_integrable")
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("6"
                                              (skosimp)
                                              (("6" (assert) nil nil))
                                              nil)
                                             ("7"
                                              (skosimp)
                                              (("7" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2" (propax) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skosimp)
                                        (("2"
                                          (expand "FF")
                                          (("2"
                                            (expand "PHI")
                                            (("2"
                                              (rewrite
                                               "indefinite_integrable")
                                              (("2"
                                                (expand "EE")
                                                (("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (typepred "P2!1")
                                                    (("2"
                                                      (inst - "ii!1")
                                                      (("2"
                                                        (lemma
                                                         "open_is_measurable"
                                                         ("a"
                                                          "seq(P2!1)(ii!1)"
                                                          "b"
                                                          "seq(P2!1)(1 + ii!1)"))
                                                        (("1"
                                                          (case-replace
                                                           "open(seq(P2!1)(ii!1), seq(P2!1)(1 + ii!1))={x | seq(P2!1)(ii!1) < x & x < seq(P2!1)(1 + ii!1)}")
                                                          (("1"
                                                            (apply-extensionality
                                                             :hide?
                                                             t)
                                                            (("1"
                                                              (hide
                                                               -1
                                                               2)
                                                              (("1"
                                                                (expand
                                                                 "open")
                                                                (("1"
                                                                  (expand
                                                                   "ball")
                                                                  (("1"
                                                                    (expand
                                                                     "abs")
                                                                    (("1"
                                                                      (grind-reals)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((partition type-eq-decl nil integral_def "analysis/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (closed_interval type-eq-decl nil intervals_real "reals/")
    (b formal-const-decl "{x: real | a < x}" riemann_scaf nil)
    (< const-decl "bool" reals nil)
    (a formal-const-decl "real" riemann_scaf nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (bounded nonempty-type-eq-decl nil riemann_scaf nil)
    (zeroed_bounded? const-decl "bool" riemann_scaf nil)
    (sup_norm const-decl "nnreal" sup_norm "measure_integration/")
    (nnreal type-eq-decl nil real_types nil)
    (bounded nonempty-type-eq-decl nil sup_norm "measure_integration/")
    (bounded? const-decl "bool" sup_norm "measure_integration/")
    (part_norm const-decl "posreal" riemann_scaf nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (riemann_lebesgue_step_integrable formula-decl nil riemann_scaf
     nil)
    (step? const-decl "bool" riemann_scaf nil)
    (step nonempty-type-eq-decl nil riemann_scaf nil)
    (integrable_diff judgement-tcc nil integral "measure_integration/")
    (integrable? const-decl "bool" integral "measure_integration/")
    (integrable nonempty-type-eq-decl nil integral
     "measure_integration/")
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def
     "measure_integration/")
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     "measure_integration/")
    (cal_M const-decl "sigma_algebra" lebesgue_def nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     "extended_nnreal/")
    (complete_sigma_finite? const-decl "bool" measure_def
     "measure_integration/")
    (complete_sigma_finite type-eq-decl nil measure_def
     "measure_integration/")
    (lambda_ const-decl "complete_sigma_finite[real, cal_M]"
     lebesgue_def nil)
    (set type-eq-decl nil sets nil)
    (phi const-decl "nat" measure_space "measure_integration/")
    (simple nonempty-type-eq-decl nil measure_space
     "measure_integration/")
    (simple? const-decl "bool" measure_space "measure_integration/")
    (integral_add formula-decl nil integral "measure_integration/")
    (indefinite_integrable formula-decl nil integral
     "measure_integration/")
    (measurable_set? const-decl "bool" measure_space_def
     "measure_integration/")
    (measurable_set nonempty-type-eq-decl nil measure_space_def
     "measure_integration/")
    (sum_measurable judgement-tcc nil measure_space_def
     "measure_integration/")
    (+ const-decl "[T -> real]" real_fun_ops "reals/")
    (integrable_add judgement-tcc nil integral "measure_integration/")
    (closed_is_measurable judgement-tcc nil lebesgue_def nil)
    (integral_ae_eq formula-decl nil integral "measure_integration/")
    (measurable_function? const-decl "bool" measure_space_def
     "measure_integration/")
    (measurable_function nonempty-type-eq-decl nil measure_space_def
     "measure_integration/")
    (restrict const-decl "R" restrict nil)
    (union const-decl "set" sets nil)
    (zero_times1 formula-decl nil real_props nil)
    (both_sides_plus_le1 formula-decl nil real_props nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (null_set nonempty-type-eq-decl nil measure_theory
     "measure_integration/")
    (null_set? const-decl "bool" measure_theory "measure_integration/")
    (null_union judgement-tcc nil measure_theory
     "measure_integration/")
    (singleton_is_null application-judgement "null_set" lebesgue_def
     nil)
    (singleton_is_null judgement-tcc nil lebesgue_def nil)
    (ae_eq? const-decl "bool" measure_theory "measure_integration/")
    (integrable_is_measurable judgement-tcc nil integral
     "measure_integration/")
    (ii_of_x const-decl "below(length(P) - 1)" riemann_scaf nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (integrable_zero formula-decl nil integral "measure_integration/")
    (integral_zero formula-decl nil integral "measure_integration/")
    (pointwise_ae? const-decl "bool" measure_theory
     "measure_integration/")
    (fullset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (negligible nonempty-type-eq-decl nil measure_theory
     "measure_integration/")
    (negligible_set? const-decl "bool" measure_theory
     "measure_integration/")
    (TRUE const-decl "bool" booleans nil)
    (part_not_in formula-decl nil integral_def "analysis/")
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (parts_order formula-decl nil integral_def "analysis/")
    (parts_order_le formula-decl nil integral_def "analysis/")
    (lower_bound const-decl "bool" bound_defs "reals/")
    (part_set_of const-decl "(nonempty?[real])" riemann_scaf nil)
    (inf const-decl "{x | greatest_lower_bound(<=)(x, Sl)}"
         bounded_reals "reals/")
    (inf_set type-eq-decl nil bounded_reals "reals/")
    (below_bounded const-decl "bool" bounded_reals "reals/")
    (nonempty? const-decl "bool" sets nil)
    (greatest_lower_bound const-decl "bool" bound_defs "reals/")
    (ii_of_x_def formula-decl nil riemann_scaf nil)
    (member const-decl "bool" sets nil)
    (ae_in? const-decl "bool" measure_theory "measure_integration/")
    (real_is_complete name-judgement "metric_complete" real_topology
     "metric_space/")
    (ae_le? const-decl "bool" measure_theory "measure_integration/")
    (integral_ae_le formula-decl nil integral "measure_integration/")
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (sigma_first formula-decl nil sigma "reals/")
    (sigma_0_neg formula-decl nil sigma_below "reals/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (sigma_zero formula-decl nil sigma "reals/")
    (subrange type-eq-decl nil integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (sigma_le formula-decl nil sigma "reals/")
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (sigma_split formula-decl nil sigma "reals/")
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (trich_lt formula-decl nil real_props nil)
    (lower_step_prop formula-decl nil riemann_scaf nil)
    (sup_norm_prop formula-decl nil sup_norm "measure_integration/")
    (<= const-decl "bool" real_fun_orders "reals/")
    (integrable_phi_open formula-decl nil lebesgue_def nil)
    (integral_phi_open formula-decl nil lebesgue_def nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (div_cancel1 formula-decl nil real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (width const-decl "posreal" integral_def "analysis/")
    (width_lem formula-decl nil integral_def "analysis/")
    (open_is_measurable application-judgement "measurable_set"
     lebesgue_def nil)
    (ball const-decl "set[T]" metric_space_def "metric_space/")
    (open_interval nonempty-type-eq-decl nil real_topology
     "metric_space/")
    (open const-decl "open_interval" real_topology "metric_space/")
    (integral_scal formula-decl nil integral "measure_integration/")
    (integrable_scal judgement-tcc nil integral "measure_integration/")
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (zeroed? const-decl "bool" riemann_scaf nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (/= const-decl "boolean" notequal nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (integer nonempty-type-from-decl nil integers nil)
    (sigma def-decl "real" sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (T_low type-eq-decl nil sigma "reals/")
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (closed const-decl "closed_interval" real_topology "metric_space/")
    (closed_interval nonempty-type-eq-decl nil real_topology
     "metric_space/")
    (closed_ball const-decl "closed" real_topology "metric_space/")
    (closed nonempty-type-eq-decl nil topology "topology/")
    (closed? const-decl "bool" topology "topology/")
    (metric_induced_topology const-decl "setofsets[T]" metric_space_def
     "metric_space/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (closed_is_measurable application-judgement "measurable_set"
     lebesgue_def nil)
    (open_is_measurable judgement-tcc nil lebesgue_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (integral_diff formula-decl nil integral "measure_integration/")
    (integral const-decl "real" integral "measure_integration/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (darboux_TCC1 0
  (darboux_TCC1-1 nil 3450973777
   ("" (skosimp) (("" (assert) nil nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (darboux subtype "0" "below[fs`length]")))
 (darboux_TCC2 0
  (darboux_TCC2-1 nil 3450973777
   ("" (skosimp) (("" (assert) nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (darboux subtype "(number_fields.-)(length(riemann_scaf.fs), 1)"
    "below[fs`length]")))
 (darboux_TCC3 0
  (darboux_TCC3-1 nil 3450973777
   ("" (skosimp) (("" (skosimp) (("" (assert) nil nil)) nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (darboux subtype "riemann_scaf.ii" "below[fs`length]")))
 (darboux_TCC4 0
  (darboux_TCC4-1 nil 3450973777
   ("" (skosimp) (("" (skosimp) (("" (assert) nil nil)) nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (darboux subtype "(number_fields.+)(1, riemann_scaf.ii)"
    "below[fs`length]")))
 (darboux_TCC5 0
  (darboux_TCC5-1 nil 3450973777
   ("" (skosimp*)
    (("" (assert)
      ((""
        (lemma "riemann_lebesgue_step_integrable"
         ("phi" "lower_step(f!1)(x1!1)"))
        (("" (flatten) nil nil)) nil))
      nil))
    nil)
   ((riemann_lebesgue_step_integrable formula-decl nil riemann_scaf
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (step? const-decl "bool" riemann_scaf nil)
    (step nonempty-type-eq-decl nil riemann_scaf nil)
    (zeroed_bounded? const-decl "bool" riemann_scaf nil)
    (bounded nonempty-type-eq-decl nil riemann_scaf nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (a formal-const-decl "real" riemann_scaf nil)
    (< const-decl "bool" reals nil)
    (b formal-const-decl "{x: real | a < x}" riemann_scaf nil)
    (closed_interval type-eq-decl nil intervals_real "reals/")
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (partition type-eq-decl nil integral_def "analysis/"))
   nil
   (darboux subtype "riemann_scaf.lower_step(riemann_scaf.f)"
    "[integral_def[real].partition(riemann_scaf.a, riemann_scaf.b) -> integrable[real, cal_M, lambda_]]")))
 (darboux_TCC6 0
  (darboux_TCC6-1 nil 3450973777
   ("" (skosimp*)
    ((""
      (lemma "riemann_lebesgue_step_integrable"
       ("phi" "upper_step(f!1)(x1!1)"))
      (("" (flatten) nil nil)) nil))
    nil)
   ((partition type-eq-decl nil integral_def "analysis/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (closed_interval type-eq-decl nil intervals_real "reals/")
    (b formal-const-decl "{x: real | a < x}" riemann_scaf nil)
    (< const-decl "bool" reals nil)
    (a formal-const-decl "real" riemann_scaf nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (bounded nonempty-type-eq-decl nil riemann_scaf nil)
    (zeroed_bounded? const-decl "bool" riemann_scaf nil)
    (step nonempty-type-eq-decl nil riemann_scaf nil)
    (step? const-decl "bool" riemann_scaf nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (riemann_lebesgue_step_integrable formula-decl nil riemann_scaf
     nil))
   nil
   (darboux subtype "riemann_scaf.upper_step(riemann_scaf.f)"
    "[integral_def[real].partition(riemann_scaf.a, riemann_scaf.b) -> integrable[real, cal_M, lambda_]]")))
 (darboux 0
  (darboux-1 nil 3722368411
   ("" (skolem + ("PS!1" "_"))
    ((""
      (case "FORALL (f: bounded):
                                                                convergence?(part_norm o PS!1, 0) =>
                                                                 convergence?(integral o lower_step(f) o PS!1,
                                                                               lower_riemann_integral(f))")
      (("1" (skosimp)
        (("1" (inst-cp - "f!1")
          (("1" (assert)
            (("1" (inst - "-f!1")
              (("1" (hide -2 -3)
                (("1"
                  (case-replace
                   "lower_riemann_integral(-f!1) = -upper_riemann_integral(f!1)")
                  (("1" (hide -1)
                    (("1" (expand "o")
                      (("1"
                        (case-replace "(LAMBDA (x_1: nat):
                                                                                     integral.integral(lower_step(-f!1)(PS!1(x_1))))=(LAMBDA (x_1: nat): -integral(upper_step(f!1)(PS!1(x_1))))")
                        (("1" (hide -1)
                          (("1" (rewrite "metric_convergence_def")
                            (("1" (rewrite "metric_convergence_def")
                              (("1"
                                (expand "metric_converges_to")
                                (("1"
                                  (skosimp)
                                  (("1"
                                    (inst - "r!1")
                                    (("1"
                                      (skosimp)
                                      (("1"
                                        (inst + "n!1")
                                        (("1"
                                          (skosimp)
                                          (("1"
                                            (inst - "i!1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (name-replace
                                                 "DRL1"
                                                 "upper_riemann_integral(f!1)")
                                                (("1"
                                                  (name-replace
                                                   "DRL2"
                                                   "integral.integral(upper_step(f!1)(PS!1(i!1)))")
                                                  (("1"
                                                    (expand "ball")
                                                    (("1"
                                                      (expand "abs")
                                                      (("1"
                                                        (grind-reals)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skosimp)
                                (("2"
                                  (lemma
                                   "riemann_lebesgue_step_integrable"
                                   ("phi"
                                    "upper_step(f!1)(PS!1(x!1))"))
                                  (("2" (flatten) nil nil))
                                  nil))
                                nil)
                               ("3"
                                (rewrite "abs_of_sub_metric")
                                nil
                                nil))
                              nil)
                             ("2" (skosimp)
                              (("2"
                                (lemma
                                 "riemann_lebesgue_step_integrable"
                                 ("phi" "upper_step(f!1)(PS!1(x!1))"))
                                (("2" (flatten) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide -1 2)
                          (("2" (apply-extensionality :hide? t)
                            (("1" (name-replace "P!1" "PS!1(x!1)")
                              (("1"
                                (case-replace
                                 "lower_step(-f!1)(P!1)=-upper_step(f!1)(P!1)")
                                (("1" (rewrite "integral_opp") nil nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (expand "upper_step")
                                    (("2"
                                      (expand "lower_step")
                                      (("2"
                                        (apply-extensionality :hide? t)
                                        (("2"
                                          (expand "lower_step")
                                          (("2"
                                            (expand "upper_step")
                                            (("2"
                                              (expand "-")
                                              (("2"
                                                (case-replace
                                                 "x!2 < a OR b < x!2")
                                                (("2"
                                                  (replace 1 2)
                                                  (("2"
                                                    (case-replace
                                                     "(EXISTS (ii: below(length(P!1) - 1)): x!2 = seq(P!1)(ii)) OR
                                                                                                                             x!2 = b")
                                                    (("2"
                                                      (replace 1 3)
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (typepred
                                                           "inf[real](image[real,real](LAMBDA (x: real): -f!1(x), part_set_of(P!1)(x!2)))")
                                                          (("2"
                                                            (name-replace
                                                             "INF"
                                                             "inf[real](image[real,real](LAMBDA (x: real): -f!1(x), part_set_of(P!1)(x!2)))")
                                                            (("2"
                                                              (typepred
                                                               "sup[real](image[real,real](f!1, part_set_of(P!1)(x!2)))")
                                                              (("2"
                                                                (name-replace
                                                                 "SUP"
                                                                 "sup[real](image[real,real](f!1, part_set_of(P!1)(x!2)))")
                                                                (("2"
                                                                  (expand
                                                                   "greatest_lower_bound")
                                                                  (("2"
                                                                    (expand
                                                                     "least_upper_bound")
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (inst
                                                                         -2
                                                                         "-INF")
                                                                        (("2"
                                                                          (split
                                                                           -2)
                                                                          (("1"
                                                                            (inst
                                                                             -4
                                                                             "-SUP")
                                                                            (("1"
                                                                              (split
                                                                               -4)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (propax)
                                                                                nil
                                                                                nil)
                                                                               ("3"
                                                                                (expand
                                                                                 "lower_bound"
                                                                                 1)
                                                                                (("3"
                                                                                  (skosimp)
                                                                                  (("3"
                                                                                    (typepred
                                                                                     "z!1")
                                                                                    (("3"
                                                                                      (expand
                                                                                       "image"
                                                                                       -1)
                                                                                      (("3"
                                                                                        (skosimp)
                                                                                        (("3"
                                                                                          (expand
                                                                                           "upper_bound"
                                                                                           -3)
                                                                                          (("3"
                                                                                            (inst
                                                                                             -3
                                                                                             "-z!1")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand
                                                                                               "image")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 1
                                                                                                 "x!3")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("3"
                                                                            (expand
                                                                             "upper_bound"
                                                                             1)
                                                                            (("3"
                                                                              (skosimp)
                                                                              (("3"
                                                                                (typepred
                                                                                 "z!1")
                                                                                (("3"
                                                                                  (expand
                                                                                   "image"
                                                                                   -1)
                                                                                  (("3"
                                                                                    (skosimp)
                                                                                    (("3"
                                                                                      (expand
                                                                                       "lower_bound"
                                                                                       -3)
                                                                                      (("3"
                                                                                        (inst
                                                                                         -3
                                                                                         "-z!1")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "image")
                                                                                          (("2"
                                                                                            (inst
                                                                                             1
                                                                                             "x!3")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skosimp)
                              (("2"
                                (lemma
                                 "riemann_lebesgue_step_integrable"
                                 ("phi" "upper_step(f!1)(PS!1(x!1))"))
                                (("2" (flatten) nil nil))
                                nil))
                              nil)
                             ("3" (skosimp)
                              (("3"
                                (lemma
                                 "riemann_lebesgue_step_integrable"
                                 ("phi" "lower_step(-f!1)(PS!1(x!1))"))
                                (("3" (flatten) nil nil))
                                nil))
                              nil)
                             ("4" (typepred "f!1")
                              (("4"
                                (expand "zeroed_bounded?")
                                (("4"
                                  (flatten)
                                  (("4"
                                    (expand "bounded?")
                                    (("4"
                                      (skosimp)
                                      (("4"
                                        (hide -2)
                                        (("4"
                                          (expand "-")
                                          (("4"
                                            (use
                                             "zeroed_bounded_neg_fun")
                                            (("4"
                                              (expand
                                               "zeroed_bounded?")
                                              (("4"
                                                (expand "-")
                                                (("4"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (skosimp)
                          (("3"
                            (lemma "riemann_lebesgue_step_integrable"
                             ("phi" "upper_step(f!1)(PS!1(x!1))"))
                            (("3" (flatten) nil nil)) nil))
                          nil)
                         ("4" (skosimp)
                          (("4"
                            (lemma "riemann_lebesgue_step_integrable"
                             ("phi" "lower_step(-f!1)(PS!1(x!1))"))
                            (("4" (flatten) nil nil)) nil))
                          nil)
                         ("5" (hide -1 2)
                          (("5" (typepred "f!1")
                            (("5" (use "zeroed_bounded_neg_fun") nil
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1)
                    (("2" (expand "upper_riemann_integral")
                      (("2" (expand "lower_riemann_integral")
                        (("2"
                          (typepred
                           "sup({z | EXISTS phi: phi <= -f!1 AND z = integral(phi)})")
                          (("1"
                            (name-replace "LHS"
                             "sup({z | EXISTS phi: phi <= -f!1 AND z = integral(phi)})")
                            (("1"
                              (typepred
                               "inf({z | EXISTS psi: f!1 <= psi AND z = integral(psi)})")
                              (("1"
                                (name-replace
                                 "RHS"
                                 "inf({z | EXISTS psi: f!1 <= psi AND z = integral(psi)})")
                                (("1"
                                  (expand "greatest_lower_bound")
                                  (("1"
                                    (expand "least_upper_bound")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (inst -4 "-RHS")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (split -4)
                                            (("1"
                                              (inst -3 "-LHS")
                                              (("1"
                                                (split -3)
                                                (("1" (assert) nil nil)
                                                 ("2" (assert) nil nil)
                                                 ("3"
                                                  (expand
                                                   "lower_bound"
                                                   1)
                                                  (("3"
                                                    (skosimp)
                                                    (("3"
                                                      (typepred "z!1")
                                                      (("3"
                                                        (skosimp)
                                                        (("3"
                                                          (expand
                                                           "upper_bound")
                                                          (("3"
                                                            (inst
                                                             -5
                                                             "-z!1")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (inst
                                                               +
                                                               "-psi!1")
                                                              (("1"
                                                                (split
                                                                 1)
                                                                (("1"
                                                                  (hide-all-but
                                                                   (-1
                                                                    1))
                                                                  (("1"
                                                                    (expand
                                                                     "<=")
                                                                    (("1"
                                                                      (skosimp)
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "x!1")
                                                                        (("1"
                                                                          (expand
                                                                           "-")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (rewrite
                                                                   "integral_opp")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 (1))
                                                                (("2"
                                                                  (typepred
                                                                   "psi!1")
                                                                  (("2"
                                                                    (expand
                                                                     "step?")
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (split)
                                                                        (("1"
                                                                          (expand
                                                                           "step_function?")
                                                                          (("1"
                                                                            (skosimp)
                                                                            (("1"
                                                                              (inst
                                                                               +
                                                                               "P!1")
                                                                              (("1"
                                                                                (expand
                                                                                 "step_function_on?")
                                                                                (("1"
                                                                                  (skosimp)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "ii!1")
                                                                                    (("1"
                                                                                      (skosimp)
                                                                                      (("1"
                                                                                        (inst
                                                                                         +
                                                                                         "-fv!1")
                                                                                        (("1"
                                                                                          (skosimp)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -
                                                                                             "x!1")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "-")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           -1)
                                                                          (("2"
                                                                            (expand
                                                                             "zeroed?")
                                                                            (("2"
                                                                              (skosimp)
                                                                              (("2"
                                                                                (inst
                                                                                 -
                                                                                 "x!1")
                                                                                (("2"
                                                                                  (expand
                                                                                   "-")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "upper_bound" 1)
                                              (("2"
                                                (skosimp)
                                                (("2"
                                                  (typepred "z!1")
                                                  (("2"
                                                    (skosimp)
                                                    (("2"
                                                      (expand
                                                       "lower_bound"
                                                       -3)
                                                      (("2"
                                                        (inst
                                                         -3
                                                         "-z!1")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (inst
                                                           +
                                                           "-phi!1")
                                                          (("1"
                                                            (split)
                                                            (("1"
                                                              (hide-all-but
                                                               (-1 1))
                                                              (("1"
                                                                (expand
                                                                 "<=")
                                                                (("1"
                                                                  (skosimp)
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "x!1")
                                                                    (("1"
                                                                      (expand
                                                                       "-")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (rewrite
                                                               "integral_opp"
                                                               1)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (typepred
                                                               "phi!1")
                                                              (("2"
                                                                (expand
                                                                 "step?")
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (split)
                                                                    (("1"
                                                                      (hide
                                                                       -2)
                                                                      (("1"
                                                                        (expand
                                                                         "step_function?")
                                                                        (("1"
                                                                          (skosimp)
                                                                          (("1"
                                                                            (inst
                                                                             +
                                                                             "P!1")
                                                                            (("1"
                                                                              (expand
                                                                               "step_function_on?")
                                                                              (("1"
                                                                                (skosimp)
                                                                                (("1"
                                                                                  (inst
                                                                                   -
                                                                                   "ii!1")
                                                                                  (("1"
                                                                                    (skosimp)
                                                                                    (("1"
                                                                                      (inst
                                                                                       +
                                                                                       "-fv!1")
                                                                                      (("1"
                                                                                        (skosimp)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "x!1")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "-")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       -1)
                                                                      (("2"
                                                                        (expand
                                                                         "zeroed?")
                                                                        (("2"
                                                                          (skosimp)
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "x!1")
                                                                            (("2"
                                                                              (expand
                                                                               "-")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide -1 2)
                                (("2"
                                  (lemma
                                   "upper_riemann_integral_TCC2"
                                   ("f" "f!1"))
                                  (("2" (propax) nil nil))
                                  nil))
                                nil)
                               ("3"
                                (skosimp)
                                (("3"
                                  (lemma
                                   "riemann_lebesgue_step_integrable"
                                   ("phi" "psi!1"))
                                  (("3" (flatten) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2"
                            (lemma "lower_riemann_integral_TCC2"
                             ("f" "-f!1"))
                            (("1" (propax) nil nil)
                             ("2" (hide 2 3)
                              (("2"
                                (typepred "f!1")
                                (("2"
                                  (use "zeroed_bounded_neg_fun")
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide 2)
                            (("3" (skosimp)
                              (("3"
                                (lemma
                                 "riemann_lebesgue_step_integrable"
                                 ("phi" "phi!1"))
                                (("3" (flatten) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "f!1")
                (("2" (hide-all-but (-1 1))
                  (("2" (use "zeroed_bounded_neg_fun") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (skosimp)
          (("2" (rewrite "metric_convergence_def")
            (("1" (rewrite "metric_convergence_def")
              (("1"
                (case "forall epsilon: exists n: forall (i:nat): i >= n => integral(lower_step(f!1)(PS!1(i))) > lower_riemann_integral(f!1)-epsilon")
                (("1" (expand "metric_converges_to")
                  (("1" (skosimp)
                    (("1" (expand "member")
                      (("1" (expand "o ")
                        (("1" (inst - "r!1")
                          (("1" (skosimp)
                            (("1" (inst + "n!1")
                              (("1"
                                (skosimp)
                                (("1"
                                  (inst - "i!1")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide -2)
                                      (("1"
                                        (expand "ball")
                                        (("1"
                                          (lemma
                                           "lower_riemann_prop2"
                                           ("phi"
                                            "lower_step(f!1)(PS!1(i!1))"
                                            "f"
                                            "f!1"))
                                          (("1"
                                            (lemma
                                             "lower_step_prop"
                                             ("f"
                                              "f!1"
                                              "P"
                                              "PS!1(i!1)"))
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand
                                                 "lower_step"
                                                 -2
                                                 1)
                                                (("1"
                                                  (expand "abs")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (skosimp)
                    (("2" (expand "metric_converges_to")
                      (("2"
                        (lemma "lower_riemann_prop1"
                         ("f" "f!1" "epsilon" "epsilon!1/2"))
                        (("2" (skosimp)
                          (("2"
                            (name-replace "LOWER_RIEMANN"
                             "lower_riemann_integral(f!1)")
                            (("2" (expand "member")
                              (("2"
                                (typepred "phi!1")
                                (("2"
                                  (expand "step?")
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (expand "step_function?")
                                      (("2"
                                        (skosimp)
                                        (("2"
                                          (hide -2)
                                          (("2"
                                            (name
                                             "phi!2"
                                             "lower_step(f!1,P!1)")
                                            (("2"
                                              (case "phi!1 <= phi!2")
                                              (("1"
                                                (case
                                                 "phi!2 <= f!1 & integral(phi!2) > LOWER_RIEMANN - epsilon!1 / 2")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (hide -3 -5 -6 -7)
                                                    (("1"
                                                      (lemma
                                                       "lower_step_error"
                                                       ("phi"
                                                        "phi!2"
                                                        "f"
                                                        "f!1"
                                                        "P1"
                                                        "P!1"))
                                                      (("1"
                                                        (replace -4)
                                                        (("1"
                                                          (case-replace
                                                           "length(P!1)=2")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst
                                                               +
                                                               "0")
                                                              (("1"
                                                                (skosimp)
                                                                (("1"
                                                                  (expand
                                                                   "lower_step"
                                                                   1)
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "PS!1(i!1)"
                                                                     "lower_step(f!1, PS!1(i!1))")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (case
                                                             "length(P!1)-2>=1")
                                                            (("1"
                                                              (hide 1)
                                                              (("1"
                                                                (typepred
                                                                 "sup_norm(f!1)")
                                                                (("1"
                                                                  (expand
                                                                   ">="
                                                                   -1)
                                                                  (("1"
                                                                    (expand
                                                                     "<="
                                                                     -1)
                                                                    (("1"
                                                                      (split)
                                                                      (("1"
                                                                        (lemma
                                                                         "posreal_times_posreal_is_posreal"
                                                                         ("px"
                                                                          "2"
                                                                          "py"
                                                                          "sup_norm(f!1)"))
                                                                        (("1"
                                                                          (lemma
                                                                           "posreal_times_posreal_is_posreal"
                                                                           ("px"
                                                                            "length(P!1)-2"
                                                                            "py"
                                                                            "2 * sup_norm(f!1)"))
                                                                          (("1"
                                                                            (name-replace
                                                                             "KK"
                                                                             "(length(P!1) - 2) * (2 * sup_norm(f!1))")
                                                                            (("1"
                                                                              (hide
                                                                               -2
                                                                               -3)
                                                                              (("1"
                                                                                (lemma
                                                                                 "posreal_div_posreal_is_posreal"
                                                                                 ("px"
                                                                                  "epsilon!1"
                                                                                  "py"
                                                                                  "KK*2"))
                                                                                (("1"
                                                                                  (inst
                                                                                   -8
                                                                                   "epsilon!1 / (KK * 2)")
                                                                                  (("1"
                                                                                    (skosimp)
                                                                                    (("1"
                                                                                      (inst
                                                                                       +
                                                                                       "n!1")
                                                                                      (("1"
                                                                                        (skosimp)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -9
                                                                                           "i!1")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "lower_step"
                                                                                             1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "ball"
                                                                                                 -9)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "o")
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     "abs_mult"
                                                                                                     -9)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "abs"
                                                                                                       -9)
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "one_times")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -4
                                                                                                           "PS!1(i!1)"
                                                                                                           "lower_step(f!1,PS!1(i!1))")
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "both_sides_times_pos_lt1"
                                                                                                             ("pz"
                                                                                                              "KK"
                                                                                                              "x"
                                                                                                              "part_norm(PS!1(i!1))"
                                                                                                              "y"
                                                                                                              "epsilon!1 / (2 * KK)"))
                                                                                                            (("1"
                                                                                                              (case-replace
                                                                                                               "epsilon!1 / (2 * KK) * KK=epsilon!1/2")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (propax)
                                                                            nil
                                                                            nil)
                                                                           ("3"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (replace
                                                                         -1
                                                                         *
                                                                         rl)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (inst
                                                                             +
                                                                             "0")
                                                                            (("2"
                                                                              (skosimp)
                                                                              (("2"
                                                                                (expand
                                                                                 "lower_step"
                                                                                 1)
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "PS!1(i!1)"
                                                                                   "lower_step(f!1, PS!1(i!1))")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (split)
                                                  (("1"
                                                    (lemma
                                                     "lower_step_prop"
                                                     ("f"
                                                      "f!1"
                                                      "P"
                                                      "P!1"))
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide -6 2)
                                                    (("2"
                                                      (lemma
                                                       "integral_ae_le"
                                                       ("f1"
                                                        "phi!1"
                                                        "f2"
                                                        "phi!2"))
                                                      (("2"
                                                        (split)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (-1 1))
                                                          (("2"
                                                            (expand
                                                             "ae_le?")
                                                            (("2"
                                                              (expand
                                                               "pointwise_ae?")
                                                              (("2"
                                                                (expand
                                                                 "ae?")
                                                                (("2"
                                                                  (expand
                                                                   "fullset")
                                                                  (("2"
                                                                    (expand
                                                                     "ae_in?")
                                                                    (("2"
                                                                      (inst
                                                                       +
                                                                       " emptyset[real]")
                                                                      (("2"
                                                                        (skosimp)
                                                                        (("2"
                                                                          (expand
                                                                           "<="
                                                                           -1)
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "x!1")
                                                                            (("2"
                                                                              (expand
                                                                               "member")
                                                                              (("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (flatten)
                                                  (("3"
                                                    (lemma
                                                     "riemann_lebesgue_step_integrable"
                                                     ("phi" "phi!2"))
                                                    (("3"
                                                      (flatten)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide -4 -5 2)
                                                (("2"
                                                  (expand "<=")
                                                  (("2"
                                                    (skosimp)
                                                    (("2"
                                                      (replace -1 1 rl)
                                                      (("2"
                                                        (hide -1)
                                                        (("2"
                                                          (expand
                                                           "lower_step")
                                                          (("2"
                                                            (typepred
                                                             "phi!1")
                                                            (("2"
                                                              (expand
                                                               "step?")
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (hide
                                                                   -1)
                                                                  (("2"
                                                                    (expand
                                                                     "zeroed?")
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "x!1")
                                                                      (("2"
                                                                        (case-replace
                                                                         "x!1 < a OR b < x!1")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (replace
                                                                             1)
                                                                            (("2"
                                                                              (case-replace
                                                                               "(EXISTS (ii: below(length(P!1) - 1)): x!1 = seq(P!1)(ii)) OR
                                                                                                                           x!1 = b")
                                                                              (("1"
                                                                                (inst
                                                                                 -3
                                                                                 "x!1")
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (replace
                                                                                 1
                                                                                 3)
                                                                                (("2"
                                                                                  (typepred
                                                                                   "inf(image(f!1, part_set_of(P!1)(x!1)))")
                                                                                  (("2"
                                                                                    (name-replace
                                                                                     "INF"
                                                                                     "inf(image(f!1, part_set_of(P!1)(x!1)))")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "greatest_lower_bound")
                                                                                      (("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "lower_bound")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -2
                                                                                             "phi!1(x!1)")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (skosimp)
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "z!1")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "image")
                                                                                                    (("2"
                                                                                                      (skosimp)
                                                                                                      (("2"
                                                                                                        (typepred
                                                                                                         "x!2")
                                                                                                        (("2"
                                                                                                          (lemma
                                                                                                           "part_set_of_prop"
                                                                                                           ("x"
                                                                                                            "x!1"
                                                                                                            "P"
                                                                                                            "P!1"))
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (replace
                                                                                                               2
                                                                                                               -1)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "part_set_of")
                                                                                                                (("2"
                                                                                                                  (flatten)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "step_function_on?")
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -7
                                                                                                                       "ii_of_x(P!1)(x!1)")
                                                                                                                      (("2"
                                                                                                                        (skosimp)
                                                                                                                        (("2"
                                                                                                                          (inst-cp
                                                                                                                           -7
                                                                                                                           "x!1")
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             -7
                                                                                                                             "x!2")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (replace
                                                                                                                                 -8)
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -9
                                                                                                                                   "x!2")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (skosimp)
                  (("3"
                    (lemma "riemann_lebesgue_step_integrable"
                     ("phi" "lower_step(f!1)(PS!1(i!1))"))
                    (("3" (flatten) nil nil)) nil))
                  nil))
                nil)
               ("2" (skosimp) (("2" (assert) nil nil)) nil)
               ("3" (rewrite "abs_of_sub_metric") nil nil))
              nil)
             ("2" (skosimp) (("2" (assert) nil nil)) nil)
             ("3" (rewrite "abs_of_sub_metric") nil nil))
            nil))
          nil))
        nil)
       ("3" (hide 2)
        (("3" (skosimp) (("3" (skosimp) (("3" (assert) nil nil)) nil))
          nil))
        nil)
       ("4" (hide 2) (("4" (skosimp*) (("4" (assert) nil nil)) nil))
        nil)
       ("5" (hide 2)
        (("5" (skosimp*)
          (("5" (assert)
            (("5"
              (lemma "riemann_lebesgue_step_integrable"
               ("phi" "lower_step(f!1)(x1!1)"))
              (("5" (flatten) nil nil)) nil))
            nil))
          nil))
        nil)
       ("6" (hide 2) (("6" (skosimp*) (("6" (assert) nil nil)) nil))
        nil)
       ("7" (hide 2) (("7" (skosimp*) (("7" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((lower_step_prop formula-decl nil riemann_scaf nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lower_riemann_prop2 formula-decl nil riemann_scaf nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (lower_riemann_prop1 formula-decl nil riemann_scaf nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (x!2 skolem-const-decl "(part_set_of(P!1)(x!1))" riemann_scaf nil)
    (x!1 skolem-const-decl "real" riemann_scaf nil)
    (P!1 skolem-const-decl "partition[real](a, b)" riemann_scaf nil)
    (ii_of_x const-decl "below(length(P) - 1)" riemann_scaf nil)
    (part_set_of_prop formula-decl nil riemann_scaf nil)
    (bounded nonempty-type-eq-decl nil sup_norm "measure_integration/")
    (sup_norm const-decl "nnreal" sup_norm "measure_integration/")
    (posreal_times_posreal_is_posreal judgement-tcc nil real_types nil)
    (posreal_div_posreal_is_posreal judgement-tcc nil real_types nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (abs_mult formula-decl nil real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (one_times formula-decl nil extra_tegies nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (KK skolem-const-decl "real" riemann_scaf nil)
    (epsilon!1 skolem-const-decl "posreal" riemann_scaf nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (lower_step_error formula-decl nil riemann_scaf nil)
    (ae_le? const-decl "bool" measure_theory "measure_integration/")
    (subset_algebra_fullset name-judgement "(lebesgue_measurable)"
     real_lebesgue_scaf nil)
    (subset_algebra_fullset name-judgement "(induced_sigma_algebra)"
     real_lebesgue_scaf nil)
    (real_is_complete name-judgement "metric_complete" real_topology
     "metric_space/")
    (subset_algebra_fullset name-judgement "(cal_M)" lebesgue_def nil)
    (measurable_fullset name-judgement "measurable_set[real, cal_M]"
     lebesgue_def nil)
    (fullset_is_clopen name-judgement "clopen" convergence_aux
     "metric_space/")
    (ae? const-decl "bool" measure_theory "measure_integration/")
    (ae_in? const-decl "bool" measure_theory "measure_integration/")
    (TRUE const-decl "bool" booleans nil)
    (negligible_set? const-decl "bool" measure_theory
     "measure_integration/")
    (negligible nonempty-type-eq-decl nil measure_theory
     "measure_integration/")
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" countable_setofsets
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set" countable_props
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set[T]" step_fun_props
     "analysis/")
    (finite_emptyset name-judgement "finite_set" bounded_nats
     "orders/")
    (finite_emptyset name-judgement "finite_set" sigma_countable
     "sigma_set/")
    (subset_algebra_emptyset name-judgement "(S)" real_lebesgue_scaf
     nil)
    (subset_algebra_emptyset name-judgement "(S)" real_lebesgue_scaf
     nil)
    (outer_negligible_emptyset name-judgement "outer_negligible"
     real_lebesgue_scaf nil)
    (subset_algebra_emptyset name-judgement "(S)" lebesgue_def nil)
    (finite_emptyset name-judgement "finite_set[real]" integral_def
     "analysis/")
    (emptyset_is_clopen name-judgement "clopen" convergence_aux
     "metric_space/")
    (emptyset_is_compact name-judgement "compact" convergence_aux
     "metric_space/")
    (fullset const-decl "set" sets nil)
    (pointwise_ae? const-decl "bool" measure_theory
     "measure_integration/")
    (integral_ae_le formula-decl nil integral "measure_integration/")
    (lower_riemann_integral_TCC2 subtype-tcc nil riemann_scaf nil)
    (upper_riemann_integral_TCC2 subtype-tcc nil riemann_scaf nil)
    (z!1 skolem-const-decl
     "({z | EXISTS psi: f!1 <= psi AND z = integral(psi)})"
     riemann_scaf nil)
    (step_function_on? const-decl "bool" step_fun_def "analysis/")
    (open_interval type-eq-decl nil intervals_real "reals/")
    (step_function? const-decl "bool" step_fun_def "analysis/")
    (zeroed? const-decl "bool" riemann_scaf nil)
    (psi!1 skolem-const-decl "step" riemann_scaf nil)
    (z!1 skolem-const-decl
     "({z | EXISTS phi: phi <= -f!1 AND z = integral(phi)})"
     riemann_scaf nil)
    (phi!1 skolem-const-decl "step" riemann_scaf nil)
    (<= const-decl "bool" real_fun_orders "reals/")
    (upper_step const-decl "step" riemann_scaf nil)
    (metric_convergence_def formula-decl nil metric_space
     "metric_space/")
    (abs_of_sub_metric formula-decl nil riemann_scaf nil)
    (riemann_lebesgue_step_integrable formula-decl nil riemann_scaf
     nil)
    (metric_converges_to const-decl "bool" metric_space_def
     "metric_space/")
    (ball const-decl "set[T]" metric_space_def "metric_space/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member const-decl "bool" sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ball_is_metric_open application-judgement "metric_open"
     convergence_aux "metric_space/")
    (metric? const-decl "bool" metric_def "metric_space/")
    (PS!1 skolem-const-decl "sequence[partition[real](a, b)]"
     riemann_scaf nil)
    (simple_neg application-judgement "simple" lebesgue_def nil)
    (integral_opp formula-decl nil integral "measure_integration/")
    (lower_step const-decl "step" riemann_scaf nil)
    (upper_step const-decl "step" riemann_scaf nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (z!1 skolem-const-decl
     "(image[real, real](f!1, part_set_of(P!1)(x!2)))" riemann_scaf
     nil)
    (lower_bound const-decl "bool" bound_defs "reals/")
    (P!1 skolem-const-decl "partition[real](a, b)" riemann_scaf nil)
    (x!2 skolem-const-decl "real" riemann_scaf nil)
    (z!1 skolem-const-decl
     "(image[real, real](LAMBDA (x: real): -f!1(x), part_set_of(P!1)(x!2)))"
     riemann_scaf nil)
    (upper_bound const-decl "bool" bound_defs "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sup const-decl "{x | least_upper_bound(<=)(x, Su)}" bounded_reals
         "reals/")
    (above_bounded const-decl "bool" bounded_reals "reals/")
    (sup_set type-eq-decl nil bounded_reals "reals/")
    (least_upper_bound const-decl "bool" bound_defs "reals/")
    (part_set_of const-decl "(nonempty?[real])" riemann_scaf nil)
    (image const-decl "set[R]" function_image nil)
    (inf const-decl "{x | greatest_lower_bound(<=)(x, Sl)}"
         bounded_reals "reals/")
    (below_bounded const-decl "bool" bounded_reals "reals/")
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (inf_set type-eq-decl nil bounded_reals "reals/")
    (greatest_lower_bound const-decl "bool" bound_defs "reals/")
    (pred type-eq-decl nil defined_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bounded? const-decl "bool" sup_norm "measure_integration/")
    (zeroed_bounded_neg_fun formula-decl nil riemann_scaf nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (upper_riemann_integral const-decl "real" riemann_scaf nil)
    (f!1 skolem-const-decl "bounded" riemann_scaf nil)
    (- const-decl "[T -> real]" real_fun_ops "reals/")
    (bounded_opp application-judgement "bounded" riemann_scaf nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (metric_space_is_hausdorff name-judgement "hausdorff"
     real_continuity "metric_space/")
    (metric_induced_topology_is_second_countable name-judgement
     "second_countable" real_topology "metric_space/")
    (metric_space_is_hausdorff name-judgement "hausdorff"
     convergence_aux "metric_space/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (zeroed_bounded? const-decl "bool" riemann_scaf nil)
    (bounded nonempty-type-eq-decl nil riemann_scaf nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (metric_induced_topology const-decl "setofsets[T]" metric_space_def
     "metric_space/")
    (convergence? const-decl "bool" topological_convergence
     "topology/")
    (below type-eq-decl nil nat_types nil)
    (<= const-decl "bool" reals nil)
    (a formal-const-decl "real" riemann_scaf nil)
    (< const-decl "bool" reals nil)
    (b formal-const-decl "{x: real | a < x}" riemann_scaf nil)
    (closed_interval type-eq-decl nil intervals_real "reals/")
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (partition type-eq-decl nil integral_def "analysis/")
    (posreal nonempty-type-eq-decl nil real_types nil)
    (O const-decl "T3" function_props nil)
    (part_norm const-decl "posreal" riemann_scaf nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def
     "measure_integration/")
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     "measure_integration/")
    (cal_M const-decl "sigma_algebra" lebesgue_def nil)
    (nnreal type-eq-decl nil real_types nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     "extended_nnreal/")
    (complete_sigma_finite? const-decl "bool" measure_def
     "measure_integration/")
    (complete_sigma_finite type-eq-decl nil measure_def
     "measure_integration/")
    (lambda_ const-decl "complete_sigma_finite[real, cal_M]"
     lebesgue_def nil)
    (integrable? const-decl "bool" integral "measure_integration/")
    (integrable nonempty-type-eq-decl nil integral
     "measure_integration/")
    (integral const-decl "real" integral "measure_integration/")
    (step? const-decl "bool" riemann_scaf nil)
    (step nonempty-type-eq-decl nil riemann_scaf nil)
    (lower_step const-decl "step" riemann_scaf nil)
    (lower_riemann_integral const-decl "real" riemann_scaf nil))
   nil))
 (part_refines?_TCC1 0
  (part_refines?_TCC1-1 nil 3450954728 ("" (subtype-tcc) nil nil) nil
   nil (part_refines? subtype "riemann_scaf.jj" "below[P2`length]")))
 (part_refines?_TCC2 0
  (part_refines?_TCC2-1 nil 3450954728 ("" (subtype-tcc) nil nil) nil
   nil
   (part_refines? subtype "(number_fields.+)(riemann_scaf.ii, 1)"
    "below[P1`length]")))
 (part_refines?_TCC3 0
  (part_refines?_TCC3-1 nil 3450954728 ("" (subtype-tcc) nil nil) nil
   nil
   (part_refines? subtype "(number_fields.+)(riemann_scaf.jj, 1)"
    "below[P2`length]")))
 (partition_2n_TCC1 0
  (partition_2n_TCC1-1 nil 3451712419
   ("" (skosimp)
    (("" (lemma "real_expt_int_rew" ("x" "2" "i" "n!1"))
      (("" (replace -1) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_expt_int_rew formula-decl nil real_expt "power/")
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   nil
   (partition_2n subtype
    "(number_fields.+)(real_expt.^(2, riemann_scaf.n), 1)"
    "integers.above(1)")))
 (part_norm_partition_2n_TCC1 0
  (part_norm_partition_2n_TCC1-1 nil 3451712419
   ("" (skosimp)
    (("" (lemma "real_expt_pos" ("px" "2" "a" "n!1"))
      (("" (assert) nil nil)) nil))
    nil)
   ((posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_expt_pos formula-decl nil real_expt "power/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (part_norm_partition_2n subtype "real_expt.^(2, riemann_scaf.n)"
    "nznum")))
 (part_norm_partition_2n 0
  (part_norm_partition_2n-1 nil 3451712690
   ("" (skosimp)
    (("" (expand "part_norm")
      (("" (expand "partition_2n")
        (("" (lemma "width_eq_part" ("a" "a" "b" "b" "N" "1+2^n!1"))
          (("1" (assert) nil nil)
           ("2" (hide 2)
            (("2" (lemma "real_expt_int_rew" ("x" "2" "i" "n!1"))
              (("2" (assert)
                (("2" (replace -1) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((part_norm const-decl "posreal" riemann_scaf nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (b formal-const-decl "{x: real | a < x}" riemann_scaf nil)
    (< const-decl "bool" reals nil)
    (a formal-const-decl "real" riemann_scaf nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (^ const-decl "nnreal" real_expt "power/")
    (>= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nnreal type-eq-decl nil real_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (width_eq_part formula-decl nil integral_def "analysis/")
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_expt_int_rew formula-decl nil real_expt "power/")
    (/= const-decl "boolean" notequal nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (partition_2n const-decl "partition(a, b)" riemann_scaf nil))
   shostak))
 (partion_2n_refines 0
  (partion_2n_refines-1 nil 3451713712
   ("" (skosimp)
    (("" (expand "part_refines?")
      (("" (skosimp)
        (("" (expand "<=" -1)
          (("" (split)
            (("1" (typepred "ii!1")
              (("1" (expand "partition_2n" -1)
                (("1" (expand "eq_partition" -1)
                  (("1" (name "JJ" "floor(ii!1/2^(m!1-n!1))")
                    (("1"
                      (lemma "real_expt_pos" ("px" "2" "a" "m!1-n!1"))
                      (("1"
                        (lemma "both_sides_div_pos_le1"
                         ("x" "0" "y" "ii!1" "pz" "2 ^ (m!1 - n!1)"))
                        (("1" (assert)
                          (("1" (rewrite "div_def" -1)
                            (("1" (rewrite "zero_times1")
                              (("1"
                                (typepred
                                 "floor(ii!1 / 2 ^ (m!1 - n!1))")
                                (("1"
                                  (replace -5)
                                  (("1"
                                    (case "JJ<2^n!1")
                                    (("1"
                                      (inst + "JJ")
                                      (("1"
                                        (expand "partition_2n")
                                        (("1"
                                          (expand "eq_partition")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (rewrite
                                               "div_mult_pos_le2"
                                               -2)
                                              (("1"
                                                (rewrite
                                                 "div_mult_pos_lt1"
                                                 -3)
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (lemma
                                                       "posreal_div_posreal_is_posreal"
                                                       ("px"
                                                        "b-a"
                                                        "py"
                                                        "2^m!1"))
                                                      (("1"
                                                        (lemma
                                                         "both_sides_times_pos_le1"
                                                         ("x"
                                                          "JJ * 2 ^ (m!1 - n!1)"
                                                          "y"
                                                          "ii!1"
                                                          "pz"
                                                          "(b-a)/2^m!1"))
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (name-replace
                                                             "RHS"
                                                             "ii!1 * ((b - a) / 2 ^ m!1)")
                                                            (("1"
                                                              (case-replace
                                                               "2 ^ (m!1 - n!1) * ((b - a) / 2 ^ m!1) = (b - a) / 2 ^ n!1")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (lemma
                                                                 "real_expt_minus"
                                                                 ("px"
                                                                  "2"
                                                                  "a"
                                                                  "m!1"
                                                                  "b"
                                                                  "n!1"))
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     "both_sides_times_pos_le1"
                                                     ("pz"
                                                      "b-a"
                                                      "x"
                                                      "(ii!1+1)/2^m!1"
                                                      "y"
                                                      "(JJ+1)/2^n!1"))
                                                    (("2"
                                                      (flatten -1)
                                                      (("2"
                                                        (hide -1)
                                                        (("2"
                                                          (split)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (rewrite
                                                               "div_mult_pos_le1"
                                                               1)
                                                              (("2"
                                                                (case-replace
                                                                 "(1 + JJ) / 2 ^ n!1 * 2 ^ m!1=(1+JJ)*2^(m!1-n!1)")
                                                                (("1"
                                                                  (case
                                                                   "forall (i,j:int): i < j => i+1 <= j")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "ii!1"
                                                                     "(1 + JJ) * 2 ^ (m!1 - n!1)")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (rewrite
                                                                       "real_expt_int_rew")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "^"
                                                                           1)
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (rewrite
                                                                     "real_expt_minus"
                                                                     1)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "partition_2n")
                                        (("2"
                                          (expand "eq_partition")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (lemma
                                         "both_sides_div_pos_lt1"
                                         ("x"
                                          "ii!1"
                                          "y"
                                          "2^m!1"
                                          "pz"
                                          "2 ^ (m!1 - n!1)"))
                                        (("2"
                                          (lemma
                                           "real_expt_minus"
                                           ("px"
                                            "2"
                                            "a"
                                            "m!1"
                                            "b"
                                            "m!1-n!1"))
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (propax) nil nil))
                        nil))
                      nil)
                     ("2" (rewrite "real_expt_int_rew")
                      (("2" (rewrite "real_expt_int_rew")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (inst + "ii!1")
              (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((part_refines? const-decl "bool" riemann_scaf nil)
    (<= const-decl "bool" reals nil)
    (partition_2n const-decl "partition(a, b)" riemann_scaf nil)
    (partition type-eq-decl nil integral_def "analysis/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (closed_interval type-eq-decl nil intervals_real "reals/")
    (b formal-const-decl "{x: real | a < x}" riemann_scaf nil)
    (a formal-const-decl "real" riemann_scaf nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (eq_partition const-decl "partition(a, b)" integral_def
     "analysis/")
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_expt_pos formula-decl nil real_expt "power/")
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (zero_times1 formula-decl nil real_props nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (posreal_div_posreal_is_posreal judgement-tcc nil real_types nil)
    (real_expt_minus formula-decl nil real_expt "power/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_expt_int_rew formula-decl nil real_expt "power/")
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (div_def formula-decl nil number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nnreal type-eq-decl nil real_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "nnreal" real_expt "power/"))
   shostak))
 (lower_refines 0
  (lower_refines-1 nil 3451713903
   ("" (skosimp)
    (("" (expand "<=" 1)
      (("" (skosimp)
        (("" (expand "lower_step" 1 2)
          (("" (case-replace "x!1 < a OR b < x!1")
            (("1" (expand "lower_step")
              (("1" (assert)
                (("1" (replace -1) (("1" (assert) nil nil)) nil)) nil))
              nil)
             ("2" (replace 1)
              (("2" (case-replace "x!1=b")
                (("1" (expand "lower_step") (("1" (assert) nil nil))
                  nil)
                 ("2" (replace 1)
                  (("2"
                    (case-replace
                     "EXISTS (ii: below(length(P2!1) - 1)): x!1 = seq(P2!1)(ii)")
                    (("1"
                      (lemma "lower_step_prop" ("f" "f!1" "P" "P1!1"))
                      (("1" (expand "<=" -1)
                        (("1" (inst - "x!1") nil nil)) nil))
                      nil)
                     ("2" (replace 1)
                      (("2" (expand "lower_step")
                        (("2" (replace 3)
                          (("2" (replace 2)
                            (("2"
                              (case-replace
                               "EXISTS (ii: below(length(P1!1) - 1)): x!1 = seq(P1!1)(ii)")
                              (("1"
                                (skosimp)
                                (("1"
                                  (hide 5)
                                  (("1"
                                    (expand "part_refines?")
                                    (("1"
                                      (name "II" "ii_of_x(P2!1)(x!1)")
                                      (("1"
                                        (inst - "II")
                                        (("1"
                                          (skosimp)
                                          (("1"
                                            (case-replace "jj!1=ii!1")
                                            (("1"
                                              (inst + "II")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (rewrite
                                                   "ii_of_x_def"
                                                   -2)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (rewrite
                                               "ii_of_x_def"
                                               -1)
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (expand "<=" -1)
                                                  (("2"
                                                    (split)
                                                    (("1"
                                                      (lemma
                                                       "part_not_in"
                                                       ("a"
                                                        "a"
                                                        "b"
                                                        "b"
                                                        "x"
                                                        "x!1"))
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst
                                                           -
                                                           "P1!1")
                                                          (("1"
                                                            (inst
                                                             -
                                                             "jj!1"
                                                             "ii!1")
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("3"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (inst + "II")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (replace 1)
                                (("2"
                                  (hide 1 2)
                                  (("2"
                                    (typepred
                                     "inf(image(f!1, part_set_of(P1!1)(x!1)))")
                                    (("2"
                                      (name-replace
                                       "INF1"
                                       "inf(image(f!1, part_set_of(P1!1)(x!1)))")
                                      (("2"
                                        (typepred
                                         "inf(image(f!1, part_set_of(P2!1)(x!1)))")
                                        (("2"
                                          (name-replace
                                           "INF2"
                                           "inf(image(f!1, part_set_of(P2!1)(x!1)))")
                                          (("2"
                                            (expand
                                             "greatest_lower_bound")
                                            (("2"
                                              (expand "lower_bound")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (inst -2 "INF1")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (skosimp)
                                                      (("2"
                                                        (typepred
                                                         "z!1")
                                                        (("2"
                                                          (expand
                                                           "image")
                                                          (("2"
                                                            (skosimp)
                                                            (("2"
                                                              (typepred
                                                               "x!2")
                                                              (("2"
                                                                (expand
                                                                 "part_refines?")
                                                                (("2"
                                                                  (expand
                                                                   "part_set_of")
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (name
                                                                       "II"
                                                                       "ii_of_x(P2!1)(x!1)")
                                                                      (("2"
                                                                        (replace
                                                                         -1)
                                                                        (("2"
                                                                          (inst
                                                                           -8
                                                                           "II")
                                                                          (("2"
                                                                            (skosimp)
                                                                            (("2"
                                                                              (inst
                                                                               -6
                                                                               "f!1(x!2)")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "image")
                                                                                (("2"
                                                                                  (inst
                                                                                   +
                                                                                   "x!2")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "part_set_of")
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "ii_of_x_def"
                                                                                       ("P"
                                                                                        "P1!1"
                                                                                        "x"
                                                                                        "x!1"
                                                                                        "ii"
                                                                                        "ii_of_x(P1!1)(x!1)"))
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (case-replace
                                                                                             "ii_of_x(P1!1)(x!1)=jj!1")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide
                                                                                               2)
                                                                                              (("2"
                                                                                                (rewrite
                                                                                                 "ii_of_x_def"
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (rewrite
                                                                                                     "ii_of_x_def"
                                                                                                     -3)
                                                                                                    (("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((<= const-decl "bool" real_fun_orders "reals/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (ii_of_x const-decl "below(length(P) - 1)" riemann_scaf nil)
    (part_not_in formula-decl nil integral_def "analysis/")
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (ii_of_x_def formula-decl nil riemann_scaf nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (part_refines? const-decl "bool" riemann_scaf nil)
    (lower_bound const-decl "bool" bound_defs "reals/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (greatest_lower_bound const-decl "bool" bound_defs "reals/")
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (setof type-eq-decl nil defined_types nil)
    (below_bounded const-decl "bool" bounded_reals "reals/")
    (inf_set type-eq-decl nil bounded_reals "reals/")
    (inf const-decl "{x | greatest_lower_bound(<=)(x, Sl)}"
         bounded_reals "reals/")
    (part_set_of const-decl "(nonempty?[real])" riemann_scaf nil)
    (bounded nonempty-type-eq-decl nil riemann_scaf nil)
    (zeroed_bounded? const-decl "bool" riemann_scaf nil)
    (lower_step_prop formula-decl nil riemann_scaf nil)
    (partition type-eq-decl nil integral_def "analysis/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (closed_interval type-eq-decl nil intervals_real "reals/")
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (b formal-const-decl "{x: real | a < x}" riemann_scaf nil)
    (a formal-const-decl "real" riemann_scaf nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (upper_refines 0
  (upper_refines-1 nil 3451718804
   ("" (skosimp)
    (("" (lemma "lower_refines" ("P1" "P1!1" "P2" "P2!1" "f" "-f!1"))
      (("1" (assert)
        (("1"
          (case "forall P: lower_step(-f!1, P) = -upper_step(f!1, P)")
          (("1" (inst-cp - "P1!1")
            (("1" (inst - "P2!1")
              (("1" (assert)
                (("1" (replace -1)
                  (("1" (replace -2)
                    (("1" (hide-all-but (1 -3))
                      (("1" (expand "-")
                        (("1" (expand "<=")
                          (("1" (skosimp)
                            (("1" (inst - "x!1")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide-all-but 1)
            (("2" (skosimp)
              (("2" (apply-extensionality :hide? t)
                (("2" (expand "lower_step")
                  (("2" (expand "upper_step")
                    (("2" (case-replace "x!1 < a OR b < x!1")
                      (("1" (expand "-")
                        (("1" (assert)
                          (("1" (replace -1) (("1" (propax) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "-" 2 1)
                        (("2" (expand "-" 2 3)
                          (("2" (replace 1)
                            (("2"
                              (case-replace
                               "(EXISTS (ii: below(length(P!1) - 1)): x!1 = seq(P!1)(ii)) OR
          x!1 = b")
                              (("2"
                                (replace 1)
                                (("2"
                                  (typepred
                                   "sup(image(f!1, part_set_of(P!1)(x!1)))")
                                  (("2"
                                    (name-replace
                                     "RHS"
                                     "sup(image(f!1, part_set_of(P!1)(x!1)))")
                                    (("2"
                                      (typepred
                                       "inf(image(-f!1, part_set_of(P!1)(x!1)))")
                                      (("2"
                                        (name-replace
                                         "LHS"
                                         "inf(image(-f!1, part_set_of(P!1)(x!1)))")
                                        (("2"
                                          (expand
                                           "greatest_lower_bound")
                                          (("2"
                                            (expand
                                             "least_upper_bound")
                                            (("2"
                                              (expand "upper_bound")
                                              (("2"
                                                (expand "lower_bound")
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (inst -2 "-RHS")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (split -2)
                                                        (("1"
                                                          (inst
                                                           -4
                                                           "-LHS")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (skosimp)
                                                              (("1"
                                                                (typepred
                                                                 "z!1")
                                                                (("1"
                                                                  (expand
                                                                   "image")
                                                                  (("1"
                                                                    (skosimp)
                                                                    (("1"
                                                                      (typepred
                                                                       "x!2")
                                                                      (("1"
                                                                        (inst
                                                                         -4
                                                                         "-z!1")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "image")
                                                                          (("2"
                                                                            (inst
                                                                             1
                                                                             "x!2")
                                                                            (("2"
                                                                              (expand
                                                                               "-")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skosimp)
                                                          (("2"
                                                            (typepred
                                                             "z!1")
                                                            (("2"
                                                              (expand
                                                               "image")
                                                              (("2"
                                                                (skosimp)
                                                                (("2"
                                                                  (expand
                                                                   "-"
                                                                   -1)
                                                                  (("2"
                                                                    (inst
                                                                     -3
                                                                     "f!1(x!2)")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "image")
                                                                      (("2"
                                                                        (inst
                                                                         +
                                                                         "x!2")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide -1 2)
        (("2" (typepred "f!1")
          (("2" (use "zeroed_bounded_neg_fun") nil nil)) nil))
        nil))
      nil))
    nil)
   ((zeroed_bounded_neg_fun formula-decl nil riemann_scaf nil)
    (lower_bound const-decl "bool" bound_defs "reals/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (f!1 skolem-const-decl "bounded" riemann_scaf nil)
    (P!1 skolem-const-decl "partition[real](a, b)" riemann_scaf nil)
    (x!1 skolem-const-decl "real" riemann_scaf nil)
    (z!1 skolem-const-decl "(image(f!1, part_set_of(P!1)(x!1)))"
     riemann_scaf nil)
    (x!2 skolem-const-decl "(part_set_of(P!1)(x!1))" riemann_scaf nil)
    (upper_bound const-decl "bool" bound_defs "reals/")
    (inf const-decl "{x | greatest_lower_bound(<=)(x, Sl)}"
         bounded_reals "reals/")
    (below_bounded const-decl "bool" bounded_reals "reals/")
    (inf_set type-eq-decl nil bounded_reals "reals/")
    (greatest_lower_bound const-decl "bool" bound_defs "reals/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (least_upper_bound const-decl "bool" bound_defs "reals/")
    (sup_set type-eq-decl nil bounded_reals "reals/")
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (setof type-eq-decl nil defined_types nil)
    (above_bounded const-decl "bool" bounded_reals "reals/")
    (sup const-decl "{x | least_upper_bound(<=)(x, Su)}" bounded_reals
         "reals/")
    (image const-decl "set[R]" function_image nil)
    (part_set_of const-decl "(nonempty?[real])" riemann_scaf nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<= const-decl "bool" real_fun_orders "reals/")
    (simple_neg application-judgement "simple" lebesgue_def nil)
    (step? const-decl "bool" riemann_scaf nil)
    (step nonempty-type-eq-decl nil riemann_scaf nil)
    (lower_step const-decl "step" riemann_scaf nil)
    (upper_step const-decl "step" riemann_scaf nil)
    (bounded_opp application-judgement "bounded" riemann_scaf nil)
    (lower_refines formula-decl nil riemann_scaf nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (a formal-const-decl "real" riemann_scaf nil)
    (< const-decl "bool" reals nil)
    (b formal-const-decl "{x: real | a < x}" riemann_scaf nil)
    (closed_interval type-eq-decl nil intervals_real "reals/")
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (partition type-eq-decl nil integral_def "analysis/")
    (zeroed_bounded? const-decl "bool" riemann_scaf nil)
    (bounded nonempty-type-eq-decl nil riemann_scaf nil)
    (- const-decl "[T -> real]" real_fun_ops "reals/"))
   shostak))
 (continuous_step 0
  (continuous_step-1 nil 3451756442
   ("" (skosimp)
    (("" (rewrite "metric_continuous_at_def")
      (("" (expand "metric_continuous_at?")
        (("" (expand "member")
          (("" (expand "ball")
            (("" (inst - "epsilon!1/2")
              (("" (skosimp)
                (("" (lemma "part_norm_partition_2n")
                  ((""
                    (lemma "posreal_div_posreal_is_posreal"
                     ("px" "b-a" "py" "delta!1"))
                    (("1" (name "ll" "log(2)((b - a) / delta!1)")
                      (("1" (name "M" "ceiling(ll)")
                        (("1" (lemma "ceiling_def" ("x" "ll"))
                          (("1" (flatten)
                            (("1" (name "N" "max(0,M)")
                              (("1"
                                (case "(b - a) / delta!1 <= 2^N")
                                (("1"
                                  (hide -3 -4 -5 -6)
                                  (("1"
                                    (inst + "N")
                                    (("1"
                                      (expand "lower_step")
                                      (("1"
                                        (typepred "f!1")
                                        (("1"
                                          (expand "zeroed_bounded?")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "zeroed?")
                                              (("1"
                                                (inst - "x!1")
                                                (("1"
                                                  (case-replace
                                                   "x!1 < a OR b < x!1")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (case-replace
                                                     "(EXISTS (ii: below(length(partition_2n(N)) - 1)):
                x!1 = seq(partition_2n(N))(ii))
              OR x!1 = b")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replace 1)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (replace 1)
                                                      (("2"
                                                        (replace 2)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (typepred
                                                             "inf(image(f!1, part_set_of(partition_2n(N))(x!1)))")
                                                            (("1"
                                                              (name-replace
                                                               "RHS"
                                                               "inf(image(f!1, part_set_of(partition_2n(N))(x!1)))")
                                                              (("1"
                                                                (expand
                                                                 "greatest_lower_bound")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (expand
                                                                     "lower_bound")
                                                                    (("1"
                                                                      (inst
                                                                       -2
                                                                       "f!1(x!1) - epsilon!1")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (skosimp)
                                                                          (("1"
                                                                            (typepred
                                                                             "z!1")
                                                                            (("1"
                                                                              (expand
                                                                               "image")
                                                                              (("1"
                                                                                (skosimp)
                                                                                (("1"
                                                                                  (typepred
                                                                                   "x!2")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "part_set_of")
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (name
                                                                                         "II"
                                                                                         "ii_of_x(partition_2n(N))(x!1)")
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "ii_of_x_def"
                                                                                             -1)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "<="
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (split)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -5)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -12
                                                                                                       "x!2")
                                                                                                      (("1"
                                                                                                        (split
                                                                                                         -12)
                                                                                                        (("1"
                                                                                                          (hide-all-but
                                                                                                           (-1
                                                                                                            1))
                                                                                                          (("1"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (hide-all-but
                                                                                                           (-1
                                                                                                            -2
                                                                                                            -3
                                                                                                            -4
                                                                                                            -8
                                                                                                            1))
                                                                                                          (("2"
                                                                                                            (case
                                                                                                             "(b - a) / 2^N <= delta!1")
                                                                                                            (("1"
                                                                                                              (hide
                                                                                                               -6)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "partition_2n")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "eq_partition")
                                                                                                                  (("1"
                                                                                                                    (grind)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (hide-all-but
                                                                                                               (-5
                                                                                                                1))
                                                                                                              (("2"
                                                                                                                (rewrite
                                                                                                                 "div_mult_pos_le1")
                                                                                                                (("2"
                                                                                                                  (rewrite
                                                                                                                   "div_mult_pos_le1")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (inst
                                                                                                     2
                                                                                                     "II")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (skosimp)
                                                      (("3"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide -7 -8 2)
                                  (("2"
                                    (replace -4)
                                    (("2"
                                      (hide -4)
                                      (("2"
                                        (replace -4 -2 rl)
                                        (("2"
                                          (hide -4 -3)
                                          (("2"
                                            (lemma
                                             "both_sides_real_expt_gt1_le"
                                             ("gt1x"
                                              "2"
                                              "a"
                                              "log(2)((b - a) / delta!1)"
                                              "b"
                                              "M"))
                                            (("1"
                                              (rewrite "expt_log")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma
                                                   "both_sides_real_expt_gt1_le"
                                                   ("gt1x"
                                                    "2"
                                                    "a"
                                                    "M"
                                                    "b"
                                                    "N"))
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil)
                     ("2" (assert) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((metric_continuous_at_def formula-decl nil metric_continuity
     "metric_space/")
    (zeroed_bounded? const-decl "bool" riemann_scaf nil)
    (bounded nonempty-type-eq-decl nil riemann_scaf nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (member const-decl "bool" sets nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (part_norm_partition_2n formula-decl nil riemann_scaf nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ceiling_def formula-decl nil floor_ceil nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (int nonempty-type-eq-decl nil integers nil)
    (expt_log formula-decl nil log "power/")
    (both_sides_real_expt_gt1_le formula-decl nil real_expt "power/")
    (zeroed? const-decl "bool" riemann_scaf nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (eq_partition const-decl "partition(a, b)" integral_def
     "analysis/")
    (minus_real_is_real application-judgement "real" reals nil)
    (nnreal_expt const-decl "nnreal" nnreal_expt "power/")
    (nn_rational_expt const-decl "nnreal" nn_rational_expt "power/")
    (nn_root const-decl "nnreal" nn_root "power/")
    (inverse const-decl "D" function_inverse nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (numerator const-decl "int" rational_props_aux "power/")
    (denominator const-decl "posnat" rational_props_aux "power/")
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (ii_of_x_def formula-decl nil riemann_scaf nil)
    (ii_of_x const-decl "below(length(P) - 1)" riemann_scaf nil)
    (lower_bound const-decl "bool" bound_defs "reals/")
    (part_set_of const-decl "(nonempty?[real])" riemann_scaf nil)
    (inf const-decl "{x | greatest_lower_bound(<=)(x, Sl)}"
         bounded_reals "reals/")
    (inf_set type-eq-decl nil bounded_reals "reals/")
    (below_bounded const-decl "bool" bounded_reals "reals/")
    (setof type-eq-decl nil defined_types nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (greatest_lower_bound const-decl "bool" bound_defs "reals/")
    (pred type-eq-decl nil defined_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil nat_types nil)
    (closed_interval type-eq-decl nil intervals_real "reals/")
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil naturalnumbers nil)
    (partition type-eq-decl nil integral_def "analysis/")
    (partition_2n const-decl "partition(a, b)" riemann_scaf nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (^ const-decl "nnreal" real_expt "power/")
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nnreal type-eq-decl nil real_types nil)
    (ceiling const-decl "{i | x <= i & i < x + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (b formal-const-decl "{x: real | a < x}" riemann_scaf nil)
    (a formal-const-decl "real" riemann_scaf nil)
    (< const-decl "bool" reals nil)
    (posreal_div_posreal_is_posreal judgement-tcc nil real_types nil)
    (ball const-decl "set[T]" metric_space_def "metric_space/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (metric_continuous_at? const-decl "bool" metric_continuity
     "metric_space/"))
   shostak))
 (countable_2n_exterior 0
  (countable_2n_exterior-1 nil 3452159083
   (""
    (lemma "is_countable_cross[nat,nat]" ("X" "fullset" "Y" "fullset"))
    (("" (case-replace "is_countable[nat](fullset[nat])")
      (("1"
        (lemma "countable_image[[nat,nat],real]"
         ("S" "cross_product(fullset, fullset)" "f"
          "lambda (i,j:nat): ((b-a)*i)/2^j+a"))
        (("1" (assert)
          (("1" (lemma "countability.countable_subset")
            (("1"
              (inst - "partition_2n_exterior"
               "(image[[nat,nat],real](LAMBDA (i, j: nat): (i * b - i * a) / 2 ^ j + a)
                        (cross_product(fullset[nat], fullset[nat])))")
              (("1" (assert)
                (("1" (hide-all-but 1)
                  (("1" (expand "subset?")
                    (("1" (expand "member")
                      (("1" (expand "partition_2n_exterior")
                        (("1" (skosimp)
                          (("1" (expand "fullset")
                            (("1" (expand "cross_product")
                              (("1"
                                (expand "image")
                                (("1"
                                  (expand "image")
                                  (("1"
                                    (skosimp)
                                    (("1"
                                      (inst + "(n!1,m!1)")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skosimp)
                (("2" (lemma "real_expt_pos" ("px" "2" "a" "j!1"))
                  (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skosimp)
          (("2" (lemma "real_expt_pos" ("px" "2" "a" "j!1"))
            (("2" (assert) nil nil)) nil))
          nil))
        nil)
       ("2" (hide -1 2)
        (("2" (expand "fullset")
          (("2" (expand "is_countable")
            (("2" (inst + "lambda n: n")
              (("2" (expand "injective?") (("2" (skosimp) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((is_countable const-decl "bool" countability "sets_aux/")
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (countable_set nonempty-type-eq-decl nil countability "sets_aux/")
    (partition_2n_exterior const-decl "set[real]" riemann_scaf nil)
    (member const-decl "bool" sets nil)
    (TRUE const-decl "bool" booleans nil)
    (subset? const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (real_expt_pos formula-decl nil real_expt "power/")
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (countable_subset formula-decl nil countability "sets_aux/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (countable_image formula-decl nil countable_image "sets_aux/")
    (cross_product const-decl "set[[T1, T2]]" cross_product
     "topology/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (a formal-const-decl "real" riemann_scaf nil)
    (b formal-const-decl "{x: real | a < x}" riemann_scaf nil)
    (nnreal type-eq-decl nil real_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (^ const-decl "nnreal" real_expt "power/")
    (injective? const-decl "bool" functions nil)
    (is_countable_cross formula-decl nil countable_cross
     "metric_space/")
    (set type-eq-decl nil sets nil) (fullset const-decl "set" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   shostak))
 (partition_2n_ext_int_disjoint 0
  (partition_2n_ext_int_disjoint-1 nil 3452159593
   ("" (expand "disjoint?")
    (("" (expand "empty?")
      (("" (expand "intersection")
        (("" (expand "member")
          (("" (skosimp)
            (("" (expand "partition_2n_interior")
              (("" (expand "partition_2n_exterior")
                (("" (lemma "trich_lt" ("x" "a" "y" "x!1"))
                  (("" (split)
                    (("1" (assert)
                      (("1" (lemma "trich_lt" ("x" "x!1" "y" "b"))
                        (("1" (split)
                          (("1" (assert) nil nil)
                           ("2" (assert) nil nil)
                           ("3" (assert) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil) ("3" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (partition_2n_interior const-decl "set[real]" riemann_scaf nil)
    (trich_lt formula-decl nil real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (a formal-const-decl "real" riemann_scaf nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (b formal-const-decl "{x: real | a < x}" riemann_scaf nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (partition_2n_exterior const-decl "set[real]" riemann_scaf nil)
    (intersection const-decl "set" sets nil)
    (disjoint? const-decl "bool" sets nil))
   shostak))
 (partition_2n_ext_int_union_TCC1 0
  (partition_2n_ext_int_union_TCC1-1 nil 3452159795
   ("" (subtype-tcc) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (partition_2n_ext_int_union subtype "riemann_scaf.b"
    "{x | reals.<=(riemann_scaf.a, real_topology.x)}")))
 (partition_2n_ext_int_union 0
  (partition_2n_ext_int_union-1 nil 3452159796
   ("" (apply-extensionality 1 :hide? t)
    (("" (expand "union")
      (("" (expand "closed")
        (("" (expand "partition_2n_interior")
          (("" (expand "partition_2n_exterior")
            (("" (expand "member")
              (("" (expand "closed_ball")
                (("" (case-replace "a < x!1")
                  (("1" (case-replace "x!1<b")
                    (("1" (assert) (("1" (grind) nil nil)) nil)
                     ("2" (replace 1)
                      (("2" (assert)
                        (("2" (case-replace "x!1=b")
                          (("1" (assert)
                            (("1"
                              (case-replace
                               "abs((a + b) / 2 - b) <= (b - a) / 2")
                              (("1"
                                (inst + "1" "0")
                                (("1"
                                  (rewrite "real_expt_x0")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 3)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (case-replace "x!1=a")
                      (("1" (assert)
                        (("1"
                          (case-replace
                           "abs((a + b) / 2 - a) <= (b - a) / 2")
                          (("1" (inst + "0" "0")
                            (("1" (rewrite "real_expt_x0")
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (hide 3) (("2" (grind) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (member const-decl "bool" sets nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (real_expt_x0 formula-decl nil real_expt "power/")
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (closed_is_measurable application-judgement "measurable_set"
     lebesgue_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil) (union const-decl "set" sets nil)
    (partition_2n_interior const-decl "set[real]" riemann_scaf nil)
    (partition_2n_exterior const-decl "set[real]" riemann_scaf nil)
    (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (metric_induced_topology const-decl "setofsets[T]" metric_space_def
     "metric_space/")
    (closed? const-decl "bool" topology "topology/")
    (closed nonempty-type-eq-decl nil topology "topology/")
    (closed_ball const-decl "closed" real_topology "metric_space/")
    (closed_interval nonempty-type-eq-decl nil real_topology
     "metric_space/")
    (closed const-decl "closed_interval" real_topology "metric_space/")
    (a formal-const-decl "real" riemann_scaf nil)
    (< const-decl "bool" reals nil)
    (b formal-const-decl "{x: real | a < x}" riemann_scaf nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (lower_limit_n_TCC1 0
  (lower_limit_n_TCC1-1 nil 3451913382
   ("" (skosimp)
    (("" (assert)
      (("" (typepred "x!1")
        (("" (expand "partition_2n_interior")
          (("" (flatten) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (set type-eq-decl nil sets nil)
    (partition_2n_interior const-decl "set[real]" riemann_scaf nil))
   nil
   (lower_limit_n subtype "riemann_scaf.x"
    "{x | booleans.AND(reals.<=(riemann_scaf.a, riemann_scaf.x), reals.<(riemann_scaf.x, riemann_scaf.b))}")))
 (lower_limit_n_TCC2 0
  (lower_limit_n_TCC2-1 nil 3451913382
   ("" (skosimp)
    (("" (split)
      (("1" (expand "image")
        (("1" (expand "nonempty?")
          (("1" (expand "empty?")
            (("1" (expand "member")
              (("1" (inst - "f!1(x!1)")
                (("1" (inst + "x!1")
                  (("1"
                    (lemma "part_set_of_prop"
                     ("x" "x!1" "P" "partition_2n(n!1)"))
                    (("1" (expand "member")
                      (("1" (assert)
                        (("1" (hide 2)
                          (("1" (typepred "x!1")
                            (("1" (expand "partition_2n_interior")
                              (("1"
                                (flatten)
                                (("1"
                                  (assert)
                                  (("1"
                                    (skosimp)
                                    (("1"
                                      (expand "partition_2n")
                                      (("1"
                                        (expand "eq_partition")
                                        (("1"
                                          (inst + "ii!1" "n!1")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "image")
        (("2" (typepred "f!1")
          (("2" (expand "zeroed_bounded?")
            (("2" (flatten)
              (("2" (expand "bounded?")
                (("2" (skosimp)
                  (("2" (expand "below_bounded")
                    (("2" (inst + "-c!1")
                      (("2" (expand "lower_bound")
                        (("2" (skosimp)
                          (("2" (typepred "z!1")
                            (("2" (skosimp)
                              (("2"
                                (inst - "x!2")
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonempty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (a formal-const-decl "real" riemann_scaf nil)
    (< const-decl "bool" reals nil)
    (b formal-const-decl "{x: real | a < x}" riemann_scaf nil)
    (closed_interval type-eq-decl nil intervals_real "reals/")
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (partition type-eq-decl nil integral_def "analysis/")
    (part_set_of const-decl "(nonempty?[real])" riemann_scaf nil)
    (partition_2n const-decl "partition(a, b)" riemann_scaf nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (eq_partition const-decl "partition(a, b)" integral_def
     "analysis/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (part_set_of_prop formula-decl nil riemann_scaf nil)
    (partition_2n_interior const-decl "set[real]" riemann_scaf nil)
    (set type-eq-decl nil sets nil)
    (bounded nonempty-type-eq-decl nil riemann_scaf nil)
    (zeroed_bounded? const-decl "bool" riemann_scaf nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (empty? const-decl "bool" sets nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (zeroed? const-decl "bool" riemann_scaf nil)
    (lower_bound const-decl "bool" bound_defs "reals/")
    (below_bounded const-decl "bool" bounded_reals "reals/")
    (bounded? const-decl "bool" sup_norm "measure_integration/"))
   nil
   (lower_limit_n subtype
    "function_image[real, real].image(riemann_scaf.f, riemann_scaf.part_set_of(riemann_scaf.partition_2n(riemann_scaf.n))(riemann_scaf.x))"
    "inf_set[real]")))
 (upper_limit_n_TCC1 0
  (upper_limit_n_TCC1-1 nil 3451914254
   ("" (skosimp)
    (("" (split)
      (("1" (expand "image")
        (("1" (expand "nonempty?")
          (("1" (expand "empty?")
            (("1" (expand "member")
              (("1" (inst - "f!1(x!1)")
                (("1" (inst + "x!1")
                  (("1"
                    (lemma "part_set_of_prop"
                     ("x" "x!1" "P" "partition_2n(n!1)"))
                    (("1" (assert)
                      (("1" (hide 2)
                        (("1" (typepred "x!1")
                          (("1" (expand "partition_2n_interior")
                            (("1" (flatten)
                              (("1"
                                (assert)
                                (("1"
                                  (skosimp)
                                  (("1"
                                    (expand "partition_2n")
                                    (("1"
                                      (expand "eq_partition")
                                      (("1"
                                        (inst + "ii!1" "n!1")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred "f!1")
        (("2" (expand "zeroed_bounded?")
          (("2" (flatten)
            (("2" (expand "bounded?")
              (("2" (skosimp)
                (("2" (expand "above_bounded")
                  (("2" (inst + "c!1")
                    (("2" (expand "image")
                      (("2" (expand "upper_bound")
                        (("2" (skosimp)
                          (("2" (typepred "z!1")
                            (("2" (skosimp)
                              (("2"
                                (inst - "x!2")
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonempty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (a formal-const-decl "real" riemann_scaf nil)
    (< const-decl "bool" reals nil)
    (b formal-const-decl "{x: real | a < x}" riemann_scaf nil)
    (closed_interval type-eq-decl nil intervals_real "reals/")
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (partition type-eq-decl nil integral_def "analysis/")
    (part_set_of const-decl "(nonempty?[real])" riemann_scaf nil)
    (partition_2n const-decl "partition(a, b)" riemann_scaf nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (eq_partition const-decl "partition(a, b)" integral_def
     "analysis/")
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (part_set_of_prop formula-decl nil riemann_scaf nil)
    (partition_2n_interior const-decl "set[real]" riemann_scaf nil)
    (set type-eq-decl nil sets nil)
    (bounded nonempty-type-eq-decl nil riemann_scaf nil)
    (zeroed_bounded? const-decl "bool" riemann_scaf nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (empty? const-decl "bool" sets nil)
    (bounded? const-decl "bool" sup_norm "measure_integration/")
    (above_bounded const-decl "bool" bounded_reals "reals/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (zeroed? const-decl "bool" riemann_scaf nil)
    (upper_bound const-decl "bool" bound_defs "reals/")
    (nnreal type-eq-decl nil real_types nil))
   nil
   (upper_limit_n subtype
    "function_image[real, real].image(riemann_scaf.f, riemann_scaf.part_set_of(riemann_scaf.partition_2n(riemann_scaf.n))(riemann_scaf.x))"
    "sup_set[real]")))
 (lower_limit_n_prop 0
  (lower_limit_n_prop-1 nil 3451925464
   ("" (skosimp)
    (("" (expand "lower_step")
      (("" (expand "lower_limit_n")
        (("" (expand "partition_2n_interior")
          (("" (flatten)
            (("" (assert)
              ((""
                (case-replace
                 "EXISTS (ii: below(length(partition_2n(n!1)) - 1)):
            x!1 = seq(partition_2n(n!1))(ii)")
                (("1" (skosimp)
                  (("1" (expand "partition_2n")
                    (("1" (expand "eq_partition")
                      (("1" (inst + "ii!1" "n!1") nil nil)) nil))
                    nil))
                  nil)
                 ("2" (replace 1) (("2" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (partition_2n_interior const-decl "set[real]" riemann_scaf nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (eq_partition const-decl "partition(a, b)" integral_def
     "analysis/")
    (partition_2n const-decl "partition(a, b)" riemann_scaf nil)
    (partition type-eq-decl nil integral_def "analysis/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (closed_interval type-eq-decl nil intervals_real "reals/")
    (b formal-const-decl "{x: real | a < x}" riemann_scaf nil)
    (a formal-const-decl "real" riemann_scaf nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (lower_limit_n const-decl "real" riemann_scaf nil))
   shostak))
 (upper_limit_n_prop 0
  (upper_limit_n_prop-1 nil 3451925558
   ("" (skosimp)
    (("" (expand "upper_limit_n")
      (("" (expand "upper_step")
        (("" (expand "partition_2n_interior")
          (("" (flatten)
            (("" (assert)
              ((""
                (case-replace
                 "EXISTS (ii: below(length(partition_2n(n!1)) - 1)):
            x!1 = seq(partition_2n(n!1))(ii)")
                (("1" (skosimp)
                  (("1" (expand "partition_2n")
                    (("1" (expand "eq_partition")
                      (("1" (inst + "ii!1" "n!1") nil nil)) nil))
                    nil))
                  nil)
                 ("2" (replace 1) (("2" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((upper_limit_n const-decl "real" riemann_scaf nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (partition_2n_interior const-decl "set[real]" riemann_scaf nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (eq_partition const-decl "partition(a, b)" integral_def
     "analysis/")
    (partition_2n const-decl "partition(a, b)" riemann_scaf nil)
    (partition type-eq-decl nil integral_def "analysis/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (closed_interval type-eq-decl nil intervals_real "reals/")
    (b formal-const-decl "{x: real | a < x}" riemann_scaf nil)
    (a formal-const-decl "real" riemann_scaf nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (lower_limit_TCC1 0
  (lower_limit_TCC1-1 nil 3451913726
   ("" (skosimp)
    (("" (split)
      (("1" (expand "fullset")
        (("1" (expand "image")
          (("1" (expand "nonempty?")
            (("1" (expand "empty?")
              (("1" (expand "member")
                (("1" (inst - "lower_limit_n(f!1, x!1)(0)")
                  (("1" (inst + "0") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "above_bounded")
        (("2" (inst + "f!1(x!1)")
          (("2" (expand "fullset")
            (("2" (expand "image")
              (("2" (expand "upper_bound")
                (("2" (skosimp)
                  (("2" (typepred "z!1")
                    (("2" (skolem - "n!1")
                      (("2"
                        (lemma "lower_limit_n_prop"
                         ("f" "f!1" "x" "x!1" "n" "n!1"))
                        (("2"
                          (lemma "lower_step_prop"
                           ("f" "f!1" "P" "partition_2n(n!1)"))
                          (("2" (expand "<=" -1)
                            (("2" (inst - "x!1")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((empty? const-decl "bool" sets nil)
    (partition_2n_interior const-decl "set[real]" riemann_scaf nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (zeroed_bounded? const-decl "bool" riemann_scaf nil)
    (bounded nonempty-type-eq-decl nil riemann_scaf nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (lower_limit_n const-decl "real" riemann_scaf nil)
    (TRUE const-decl "bool" booleans nil)
    (member const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (fullset const-decl "set" sets nil)
    (partition_2n const-decl "partition(a, b)" riemann_scaf nil)
    (partition type-eq-decl nil integral_def "analysis/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (closed_interval type-eq-decl nil intervals_real "reals/")
    (b formal-const-decl "{x: real | a < x}" riemann_scaf nil)
    (< const-decl "bool" reals nil)
    (a formal-const-decl "real" riemann_scaf nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (lower_step_prop formula-decl nil riemann_scaf nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<= const-decl "bool" real_fun_orders "reals/")
    (lower_limit_n_prop formula-decl nil riemann_scaf nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (upper_bound const-decl "bool" bound_defs "reals/")
    (above_bounded const-decl "bool" bounded_reals "reals/"))
   nil
   (lower_limit subtype
    "function_image[nat, real].image(riemann_scaf.lower_limit_n(riemann_scaf.f, riemann_scaf.x), sets[nat].fullset)"
    "sup_set[real]")))
 (upper_limit_TCC1 0
  (upper_limit_TCC1-1 nil 3451914254
   ("" (skosimp)
    (("" (split)
      (("1" (expand "fullset")
        (("1" (expand "image")
          (("1" (expand "nonempty?")
            (("1" (expand "empty?")
              (("1" (expand "member")
                (("1" (inst - "upper_limit_n(f!1, x!1)(0)")
                  (("1" (inst + "0") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "below_bounded")
        (("2" (inst + "f!1(x!1)")
          (("2" (expand "fullset")
            (("2" (expand "image")
              (("2" (expand "lower_bound")
                (("2" (skosimp)
                  (("2" (typepred "z!1")
                    (("2" (skolem - "n!1")
                      (("2"
                        (lemma "upper_limit_n_prop"
                         ("f" "f!1" "x" "x!1" "n" "n!1"))
                        (("2" (assert)
                          (("2"
                            (lemma "upper_step_prop"
                             ("f" "f!1" "P" "partition_2n(n!1)"))
                            (("2" (expand "<=" -1)
                              (("2"
                                (inst - "x!1")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((empty? const-decl "bool" sets nil)
    (partition_2n_interior const-decl "set[real]" riemann_scaf nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (zeroed_bounded? const-decl "bool" riemann_scaf nil)
    (bounded nonempty-type-eq-decl nil riemann_scaf nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (upper_limit_n const-decl "real" riemann_scaf nil)
    (TRUE const-decl "bool" booleans nil)
    (member const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (fullset const-decl "set" sets nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<= const-decl "bool" real_fun_orders "reals/")
    (upper_step_prop formula-decl nil riemann_scaf nil)
    (below type-eq-decl nil nat_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (a formal-const-decl "real" riemann_scaf nil)
    (< const-decl "bool" reals nil)
    (b formal-const-decl "{x: real | a < x}" riemann_scaf nil)
    (closed_interval type-eq-decl nil intervals_real "reals/")
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (partition type-eq-decl nil integral_def "analysis/")
    (partition_2n const-decl "partition(a, b)" riemann_scaf nil)
    (upper_limit_n_prop formula-decl nil riemann_scaf nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (lower_bound const-decl "bool" bound_defs "reals/")
    (below_bounded const-decl "bool" bounded_reals "reals/"))
   nil
   (upper_limit subtype
    "function_image[nat, real].image(riemann_scaf.upper_limit_n(riemann_scaf.f, riemann_scaf.x), sets[nat].fullset)"
    "inf_set[real]")))
 (lower_limit_prop 0
  (lower_limit_prop-1 nil 3451915336
   ("" (skosimp)
    (("" (expand "lower_limit")
      (("" (case-replace "partition_2n_interior(x!1)")
        (("1"
          (typepred
           "sup(image(lower_limit_n(f!1, x!1), fullset[nat]))")
          (("1"
            (name-replace "SUP"
             "sup(image(lower_limit_n(f!1, x!1), fullset[nat]))")
            (("1" (expand "least_upper_bound")
              (("1" (expand "fullset")
                (("1" (expand "upper_bound")
                  (("1" (flatten)
                    (("1"
                      (inst -1
                       "lower_step(f!1, partition_2n(n!1))(x!1)")
                      (("1" (assert)
                        (("1" (inst -2 "f!1(x!1)")
                          (("1" (assert)
                            (("1" (skosimp)
                              (("1"
                                (typepred "z!1")
                                (("1"
                                  (expand "image")
                                  (("1"
                                    (skolem - "m!1")
                                    (("1"
                                      (lemma
                                       "lower_limit_n_prop"
                                       ("f" "f!1" "x" "x!1" "n" "m!1"))
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma
                                           "lower_step_prop"
                                           ("f"
                                            "f!1"
                                            "P"
                                            "partition_2n(m!1)"))
                                          (("1"
                                            (expand "<=" -1)
                                            (("1"
                                              (inst - "x!1")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "image")
                        (("2" (inst + "n!1")
                          (("2"
                            (lemma "lower_limit_n_prop"
                             ("f" "f!1" "x" "x!1" "n" "n!1"))
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (lemma "lower_limit_TCC1" ("f" "f!1" "x" "x!1"))
              (("2" (assert) nil nil)) nil))
            nil)
           ("3" (propax) nil nil))
          nil)
         ("2" (replace 1)
          (("2" (assert)
            (("2"
              (lemma "lower_step_prop"
               ("f" "f!1" "P" "partition_2n(n!1)"))
              (("2" (expand "<=" -1) (("2" (inst - "x!1") nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((lower_limit const-decl "real" riemann_scaf nil)
    (fullset const-decl "set" sets nil)
    (lower_limit_n const-decl "real" riemann_scaf nil)
    (bounded nonempty-type-eq-decl nil riemann_scaf nil)
    (zeroed_bounded? const-decl "bool" riemann_scaf nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (sup const-decl "{x | least_upper_bound(<=)(x, Su)}" bounded_reals
         "reals/")
    (sup_set type-eq-decl nil bounded_reals "reals/")
    (above_bounded const-decl "bool" bounded_reals "reals/")
    (setof type-eq-decl nil defined_types nil)
    (nonempty? const-decl "bool" sets nil)
    (<= const-decl "bool" reals nil)
    (least_upper_bound const-decl "bool" bound_defs "reals/")
    (pred type-eq-decl nil defined_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (upper_bound const-decl "bool" bound_defs "reals/")
    (partition_2n const-decl "partition(a, b)" riemann_scaf nil)
    (step nonempty-type-eq-decl nil riemann_scaf nil)
    (step? const-decl "bool" riemann_scaf nil)
    (partition type-eq-decl nil integral_def "analysis/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (closed_interval type-eq-decl nil intervals_real "reals/")
    (b formal-const-decl "{x: real | a < x}" riemann_scaf nil)
    (< const-decl "bool" reals nil)
    (a formal-const-decl "real" riemann_scaf nil)
    (below type-eq-decl nil nat_types nil)
    (TRUE const-decl "bool" booleans nil)
    (lower_limit_n_prop formula-decl nil riemann_scaf nil)
    (lower_step_prop formula-decl nil riemann_scaf nil)
    (<= const-decl "bool" real_fun_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (lower_limit_TCC1 subtype-tcc nil riemann_scaf nil)
    (partition_2n_interior const-decl "set[real]" riemann_scaf nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (upper_limit_prop 0
  (upper_limit_prop-1 nil 3451928656
   ("" (skosimp)
    (("" (expand "upper_limit")
      (("" (case-replace "partition_2n_interior(x!1)")
        (("1"
          (typepred
           "inf(image(upper_limit_n(f!1, x!1), fullset[nat]))")
          (("1"
            (name-replace "INF"
             "inf(image(upper_limit_n(f!1, x!1), fullset[nat]))")
            (("1" (expand "greatest_lower_bound")
              (("1" (expand "fullset")
                (("1" (expand "image")
                  (("1" (expand "lower_bound")
                    (("1" (flatten)
                      (("1" (inst - "upper_limit_n(f!1, x!1)(n!1)")
                        (("1"
                          (lemma "upper_limit_n_prop"
                           ("f" "f!1" "x" "x!1" "n" "n!1"))
                          (("1" (assert)
                            (("1" (inst -3 "f!1(x!1)")
                              (("1"
                                (assert)
                                (("1"
                                  (skosimp)
                                  (("1"
                                    (typepred "z!1")
                                    (("1"
                                      (skolem - "m!1")
                                      (("1"
                                        (lemma
                                         "upper_limit_n_prop"
                                         ("f"
                                          "f!1"
                                          "x"
                                          "x!1"
                                          "n"
                                          "m!1"))
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lemma
                                             "upper_step_prop"
                                             ("f"
                                              "f!1"
                                              "P"
                                              "partition_2n(m!1)"))
                                            (("1"
                                              (expand "<=" -1)
                                              (("1"
                                                (inst - "x!1")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (inst + "n!1") nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (lemma "upper_limit_TCC1" ("f" "f!1" "x" "x!1"))
            (("2" (assert) nil nil)) nil)
           ("3" (propax) nil nil))
          nil)
         ("2" (assert)
          (("2"
            (lemma "upper_step_prop"
             ("f" "f!1" "P" "partition_2n(n!1)"))
            (("2" (expand "<=" -1) (("2" (inst - "x!1") nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((upper_limit const-decl "real" riemann_scaf nil)
    (fullset const-decl "set" sets nil)
    (upper_limit_n const-decl "real" riemann_scaf nil)
    (bounded nonempty-type-eq-decl nil riemann_scaf nil)
    (zeroed_bounded? const-decl "bool" riemann_scaf nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (inf const-decl "{x | greatest_lower_bound(<=)(x, Sl)}"
         bounded_reals "reals/")
    (inf_set type-eq-decl nil bounded_reals "reals/")
    (below_bounded const-decl "bool" bounded_reals "reals/")
    (setof type-eq-decl nil defined_types nil)
    (nonempty? const-decl "bool" sets nil)
    (<= const-decl "bool" reals nil)
    (greatest_lower_bound const-decl "bool" bound_defs "reals/")
    (pred type-eq-decl nil defined_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (upper_limit_n_prop formula-decl nil riemann_scaf nil)
    (<= const-decl "bool" real_fun_orders "reals/")
    (partition_2n const-decl "partition(a, b)" riemann_scaf nil)
    (partition type-eq-decl nil integral_def "analysis/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (closed_interval type-eq-decl nil intervals_real "reals/")
    (b formal-const-decl "{x: real | a < x}" riemann_scaf nil)
    (< const-decl "bool" reals nil)
    (a formal-const-decl "real" riemann_scaf nil)
    (below type-eq-decl nil nat_types nil)
    (upper_step_prop formula-decl nil riemann_scaf nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (lower_bound const-decl "bool" bound_defs "reals/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (upper_limit_TCC1 subtype-tcc nil riemann_scaf nil)
    (partition_2n_interior const-decl "set[real]" riemann_scaf nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (continuous_at_prop 0
  (continuous_at_prop-1 nil 3451914905
   ("" (skosimp)
    ((""
      (case "lower_limit(f!1)(x!1) <= f!1(x!1) & f!1(x!1) <= upper_limit(f!1)(x!1)")
      (("1" (flatten)
        (("1" (expand "<=" -1)
          (("1" (split)
            (("1" (assert)
              (("1" (hide -2)
                (("1" (name "EPS" "(f!1(x!1)-lower_limit(f!1)(x!1))/2")
                  (("1" (case "EPS>0")
                    (("1"
                      (lemma "continuous_step"
                       ("f" "f!1" "x" "x!1" "epsilon" "EPS"))
                      (("1" (assert)
                        (("1" (skosimp)
                          (("1"
                            (lemma "lower_limit_prop"
                             ("x" "x!1" "f" "f!1" "n" "n!1"))
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "<=" -2)
              (("2" (split)
                (("1" (assert)
                  (("1" (hide -2)
                    (("1"
                      (name "EPS" "(upper_limit(f!1)(x!1)-f!1(x!1))/2")
                      (("1" (case "EPS>0")
                        (("1"
                          (lemma "continuous_step"
                           ("f" "-f!1" "x" "x!1" "epsilon" "EPS"))
                          (("1" (split)
                            (("1" (skosimp)
                              (("1"
                                (assert)
                                (("1"
                                  (rewrite "lower_step_neg")
                                  (("1"
                                    (expand "-" -1)
                                    (("1"
                                      (lemma
                                       "upper_limit_prop"
                                       ("f" "f!1" "x" "x!1" "n" "n!1"))
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but (-5 1))
                              (("2"
                                (rewrite "metric_continuous_at_def")
                                (("2"
                                  (rewrite "metric_continuous_at_def")
                                  (("1"
                                    (expand "-")
                                    (("1"
                                      (expand "metric_continuous_at?")
                                      (("1"
                                        (expand "member")
                                        (("1"
                                          (expand "ball")
                                          (("1"
                                            (skosimp)
                                            (("1"
                                              (inst - "epsilon!1")
                                              (("1"
                                                (skosimp)
                                                (("1"
                                                  (inst + "delta!1")
                                                  (("1"
                                                    (skosimp)
                                                    (("1"
                                                      (inst - "x!2")
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (rewrite "abs_of_sub_metric")
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2" (typepred "f!1")
                              (("2"
                                (use "zeroed_bounded_neg_fun")
                                nil
                                nil))
                              nil))
                            nil)
                           ("3" (assert) nil nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (rewrite "metric_continuous_at_def")
                    (("1" (expand "metric_continuous_at?")
                      (("1" (expand "member")
                        (("1" (expand "ball")
                          (("1" (skosimp)
                            (("1" (expand "lower_limit")
                              (("1"
                                (typepred
                                 "sup(image(lower_limit_n(f!1, x!1), fullset[nat]))")
                                (("1"
                                  (replace -3 *)
                                  (("1"
                                    (hide -3)
                                    (("1"
                                      (expand "least_upper_bound")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "fullset")
                                          (("1"
                                            (expand "image")
                                            (("1"
                                              (expand "upper_bound")
                                              (("1"
                                                (inst
                                                 -2
                                                 "f!1(x!1)-epsilon!1/3")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (skosimp)
                                                    (("1"
                                                      (typepred "z!1")
                                                      (("1"
                                                        (skolem
                                                         -1
                                                         "i!1")
                                                        (("1"
                                                          (case
                                                           "f!1(x!1) - lower_limit_n(f!1, x!1)(i!1) < epsilon!1/2")
                                                          (("1"
                                                            (hide -2 1)
                                                            (("1"
                                                              (hide -2)
                                                              (("1"
                                                                (expand
                                                                 "upper_limit")
                                                                (("1"
                                                                  (typepred
                                                                   "inf(image(upper_limit_n(f!1, x!1), fullset[nat]))")
                                                                  (("1"
                                                                    (replace
                                                                     -3
                                                                     -1
                                                                     rl)
                                                                    (("1"
                                                                      (hide
                                                                       -3)
                                                                      (("1"
                                                                        (expand
                                                                         "greatest_lower_bound")
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (expand
                                                                             "fullset")
                                                                            (("1"
                                                                              (expand
                                                                               "image")
                                                                              (("1"
                                                                                (inst
                                                                                 -2
                                                                                 "f!1(x!1)+epsilon!1/3")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "lower_bound")
                                                                                      (("1"
                                                                                        (skosimp)
                                                                                        (("1"
                                                                                          (typepred
                                                                                           "z!2")
                                                                                          (("1"
                                                                                            (skolem
                                                                                             -
                                                                                             "j!1")
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (case
                                                                                                   "upper_limit_n(f!1, x!1)(j!1)-f!1(x!1) <epsilon!1 / 2")
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "upper_limit_n_prop"
                                                                                                       ("x"
                                                                                                        "x!1"
                                                                                                        "f"
                                                                                                        "f!1"
                                                                                                        "n"
                                                                                                        "j!1"))
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "lower_limit_n_prop"
                                                                                                         ("x"
                                                                                                          "x!1"
                                                                                                          "f"
                                                                                                          "f!1"
                                                                                                          "n"
                                                                                                          "i!1"))
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -2)
                                                                                                              (("1"
                                                                                                                (hide
                                                                                                                 -1
                                                                                                                 -2)
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "partion_2n_refines"
                                                                                                                   ("n"
                                                                                                                    "i!1"
                                                                                                                    "m"
                                                                                                                    "i!1+j!1"))
                                                                                                                  (("1"
                                                                                                                    (lemma
                                                                                                                     "partion_2n_refines"
                                                                                                                     ("n"
                                                                                                                      "j!1"
                                                                                                                      "m"
                                                                                                                      "i!1+j!1"))
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (name
                                                                                                                         "N"
                                                                                                                         "i!1 + j!1")
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (lemma
                                                                                                                             "lower_refines"
                                                                                                                             ("f"
                                                                                                                              "f!1"
                                                                                                                              "P2"
                                                                                                                              "partition_2n(N)"
                                                                                                                              "P1"
                                                                                                                              "partition_2n(i!1)"))
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (lemma
                                                                                                                                 "upper_refines"
                                                                                                                                 ("f"
                                                                                                                                  "f!1"
                                                                                                                                  "P2"
                                                                                                                                  "partition_2n(N)"
                                                                                                                                  "P1"
                                                                                                                                  "partition_2n(j!1)"))
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (hide
                                                                                                                                     -4
                                                                                                                                     -5)
                                                                                                                                    (("1"
                                                                                                                                      (lemma
                                                                                                                                       "lower_step_prop"
                                                                                                                                       ("f"
                                                                                                                                        "f!1"
                                                                                                                                        "P"
                                                                                                                                        "partition_2n(N)"))
                                                                                                                                      (("1"
                                                                                                                                        (lemma
                                                                                                                                         "upper_step_prop"
                                                                                                                                         ("f"
                                                                                                                                          "f!1"
                                                                                                                                          "P"
                                                                                                                                          "partition_2n(N)"))
                                                                                                                                        (("1"
                                                                                                                                          (case
                                                                                                                                           "upper_step(f!1, partition_2n(N))(x!1) - f!1(x!1) < epsilon!1 / 2")
                                                                                                                                          (("1"
                                                                                                                                            (case
                                                                                                                                             "f!1(x!1) - lower_step(f!1, partition_2n(N))(x!1) < epsilon!1 / 2")
                                                                                                                                            (("1"
                                                                                                                                              (hide
                                                                                                                                               -5
                                                                                                                                               -6
                                                                                                                                               -8
                                                                                                                                               -9)
                                                                                                                                              (("1"
                                                                                                                                                (name
                                                                                                                                                 "II"
                                                                                                                                                 "ii_of_x(partition_2n(N))(x!1)")
                                                                                                                                                (("1"
                                                                                                                                                  (rewrite
                                                                                                                                                   "ii_of_x_def"
                                                                                                                                                   -1)
                                                                                                                                                  (("1"
                                                                                                                                                    (flatten)
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       "<="
                                                                                                                                                       -1)
                                                                                                                                                      (("1"
                                                                                                                                                        (split)
                                                                                                                                                        (("1"
                                                                                                                                                          (name
                                                                                                                                                           "DELTA"
                                                                                                                                                           "min(x!1-seq(partition_2n(N))(II),seq(partition_2n(N))(1 + II)-x!1)")
                                                                                                                                                          (("1"
                                                                                                                                                            (case
                                                                                                                                                             "DELTA>0")
                                                                                                                                                            (("1"
                                                                                                                                                              (inst
                                                                                                                                                               +
                                                                                                                                                               "DELTA")
                                                                                                                                                              (("1"
                                                                                                                                                                (skosimp)
                                                                                                                                                                (("1"
                                                                                                                                                                  (expand
                                                                                                                                                                   "<="
                                                                                                                                                                   (-7
                                                                                                                                                                    -8))
                                                                                                                                                                  (("1"
                                                                                                                                                                    (inst
                                                                                                                                                                     -7
                                                                                                                                                                     "x!2")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (inst
                                                                                                                                                                       -8
                                                                                                                                                                       "x!2")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (case
                                                                                                                                                                         "seq(partition_2n(N))(II) < x!2&x!2 < seq(partition_2n(N))(1 + II)")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (flatten)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (lemma
                                                                                                                                                                             "ii_of_x_def"
                                                                                                                                                                             ("P"
                                                                                                                                                                              "partition_2n(N)"
                                                                                                                                                                              "x"
                                                                                                                                                                              "x!2"
                                                                                                                                                                              "ii"
                                                                                                                                                                              "II"))
                                                                                                                                                                            (("1"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (case-replace
                                                                                                                                                                                 "lower_step(f!1, partition_2n(N))(x!2)=lower_step(f!1, partition_2n(N))(x!1)")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (hide
                                                                                                                                                                                   -1)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (name-replace
                                                                                                                                                                                     "LOW"
                                                                                                                                                                                     "lower_step(f!1, partition_2n(N))(x!1)")
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (case-replace
                                                                                                                                                                                       "upper_step(f!1, partition_2n(N))(x!2)=upper_step(f!1, partition_2n(N))(x!1)")
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (hide
                                                                                                                                                                                         -1)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (name-replace
                                                                                                                                                                                           "HIGH"
                                                                                                                                                                                           "upper_step(f!1, partition_2n(N))(x!1)")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (expand
                                                                                                                                                                                             "abs"
                                                                                                                                                                                             1)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (case-replace
                                                                                                                                                                                               "f!1(x!1) - f!1(x!2) < 0")
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                nil
                                                                                                                                                                                                nil)
                                                                                                                                                                                               ("2"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                nil
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil)
                                                                                                                                                                                       ("2"
                                                                                                                                                                                        (hide
                                                                                                                                                                                         2
                                                                                                                                                                                         -8
                                                                                                                                                                                         -9
                                                                                                                                                                                         -10
                                                                                                                                                                                         -11
                                                                                                                                                                                         -12)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (expand
                                                                                                                                                                                           "upper_step")
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (case-replace
                                                                                                                                                                                             "EXISTS (ii: below(length(partition_2n(N)) - 1)):
           x!2 = seq(partition_2n(N))(ii)")
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (skosimp)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (lemma
                                                                                                                                                                                                 "part_not_in"
                                                                                                                                                                                                 ("a"
                                                                                                                                                                                                  "a"
                                                                                                                                                                                                  "b"
                                                                                                                                                                                                  "b"
                                                                                                                                                                                                  "x"
                                                                                                                                                                                                  "x!2"))
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (inst
                                                                                                                                                                                                     -
                                                                                                                                                                                                     "partition_2n(N)")
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (inst
                                                                                                                                                                                                       -
                                                                                                                                                                                                       "II"
                                                                                                                                                                                                       "ii!1")
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                        nil
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil)
                                                                                                                                                                                             ("2"
                                                                                                                                                                                              (replace
                                                                                                                                                                                               1)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (hide
                                                                                                                                                                                                 1)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (case-replace
                                                                                                                                                                                                   "EXISTS (ii: below(length(partition_2n(N)) - 1)):
            x!1 = seq(partition_2n(N))(ii)")
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (skosimp)
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (lemma
                                                                                                                                                                                                       "part_not_in"
                                                                                                                                                                                                       ("a"
                                                                                                                                                                                                        "a"
                                                                                                                                                                                                        "b"
                                                                                                                                                                                                        "b"
                                                                                                                                                                                                        "x"
                                                                                                                                                                                                        "x!1"))
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (inst
                                                                                                                                                                                                           -
                                                                                                                                                                                                           "partition_2n(N)")
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (inst
                                                                                                                                                                                                             -
                                                                                                                                                                                                             "II"
                                                                                                                                                                                                             "ii!1")
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                              nil
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil)
                                                                                                                                                                                                   ("2"
                                                                                                                                                                                                    (replace
                                                                                                                                                                                                     1)
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (hide
                                                                                                                                                                                                       1)
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (lemma
                                                                                                                                                                                                         "ii_of_x_def"
                                                                                                                                                                                                         ("x"
                                                                                                                                                                                                          "x!1"
                                                                                                                                                                                                          "P"
                                                                                                                                                                                                          "partition_2n(N)"
                                                                                                                                                                                                          "ii"
                                                                                                                                                                                                          "II"))
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (expand
                                                                                                                                                                                                             "part_set_of")
                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                              (replace
                                                                                                                                                                                                               -1)
                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                (replace
                                                                                                                                                                                                                 -2)
                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                  (propax)
                                                                                                                                                                                                                  nil
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (hide
                                                                                                                                                                                   2
                                                                                                                                                                                   -8
                                                                                                                                                                                   -9
                                                                                                                                                                                   -10
                                                                                                                                                                                   -11)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "lower_step")
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (case-replace
                                                                                                                                                                                       "EXISTS (ii: below(length(partition_2n(N)) - 1)):
           x!2 = seq(partition_2n(N))(ii)")
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (skosimp)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (lemma
                                                                                                                                                                                           "part_not_in"
                                                                                                                                                                                           ("a"
                                                                                                                                                                                            "a"
                                                                                                                                                                                            "b"
                                                                                                                                                                                            "b"
                                                                                                                                                                                            "x"
                                                                                                                                                                                            "x!2"))
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (assert)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (inst
                                                                                                                                                                                               -
                                                                                                                                                                                               "partition_2n(N)")
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (inst
                                                                                                                                                                                                 -
                                                                                                                                                                                                 "II"
                                                                                                                                                                                                 "ii!1")
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  nil
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil)
                                                                                                                                                                                       ("2"
                                                                                                                                                                                        (replace
                                                                                                                                                                                         1)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (hide
                                                                                                                                                                                           1)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (case-replace
                                                                                                                                                                                             "EXISTS (ii: below(length(partition_2n(N)) - 1)):
            x!1 = seq(partition_2n(N))(ii)")
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (skosimp)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (lemma
                                                                                                                                                                                                 "part_not_in"
                                                                                                                                                                                                 ("a"
                                                                                                                                                                                                  "a"
                                                                                                                                                                                                  "b"
                                                                                                                                                                                                  "b"
                                                                                                                                                                                                  "x"
                                                                                                                                                                                                  "x!1"))
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (inst
                                                                                                                                                                                                     -
                                                                                                                                                                                                     "partition_2n(N)")
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (inst
                                                                                                                                                                                                       -
                                                                                                                                                                                                       "II"
                                                                                                                                                                                                       "ii!1")
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                        nil
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil)
                                                                                                                                                                                             ("2"
                                                                                                                                                                                              (replace
                                                                                                                                                                                               1)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (hide
                                                                                                                                                                                                 1)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (expand
                                                                                                                                                                                                   "part_set_of")
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (replace
                                                                                                                                                                                                     -1)
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (lemma
                                                                                                                                                                                                       "ii_of_x_def"
                                                                                                                                                                                                       ("x"
                                                                                                                                                                                                        "x!1"
                                                                                                                                                                                                        "P"
                                                                                                                                                                                                        "partition_2n(N)"
                                                                                                                                                                                                        "ii"
                                                                                                                                                                                                        "II"))
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (replace
                                                                                                                                                                                                           -1)
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (propax)
                                                                                                                                                                                                            nil
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil)
                                                                                                                                                                             ("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil)
                                                                                                                                                                         ("2"
                                                                                                                                                                          (hide-all-but
                                                                                                                                                                           (-1
                                                                                                                                                                            -2
                                                                                                                                                                            -3
                                                                                                                                                                            -4
                                                                                                                                                                            -11
                                                                                                                                                                            1))
                                                                                                                                                                          (("2"
                                                                                                                                                                            (expand
                                                                                                                                                                             "min")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (case-replace
                                                                                                                                                                               "x!1 - seq(partition_2n(N))(II) >
          seq(partition_2n(N))(1 + II) - x!1")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (assert)
                                                                                                                                                                                nil
                                                                                                                                                                                nil)
                                                                                                                                                                               ("2"
                                                                                                                                                                                (assert)
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (assert)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (assert)
                                                                                                                                                              (("2"
                                                                                                                                                                (hide-all-but
                                                                                                                                                                 (-1
                                                                                                                                                                  -2
                                                                                                                                                                  1))
                                                                                                                                                                (("2"
                                                                                                                                                                  (expand
                                                                                                                                                                   "min")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (case-replace
                                                                                                                                                                     "x!1 - seq(partition_2n(N))(II) >
          seq(partition_2n(N))(1 + II) - x!1")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil
                                                                                                                                                                      nil)
                                                                                                                                                                     ("2"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (hide
                                                                                                                                                           1)
                                                                                                                                                          (("2"
                                                                                                                                                            (expand
                                                                                                                                                             "partition_2n_interior")
                                                                                                                                                            (("2"
                                                                                                                                                              (flatten)
                                                                                                                                                              (("2"
                                                                                                                                                                (expand
                                                                                                                                                                 "partition_2n")
                                                                                                                                                                (("2"
                                                                                                                                                                  (expand
                                                                                                                                                                   "eq_partition")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (inst
                                                                                                                                                                     +
                                                                                                                                                                     "II"
                                                                                                                                                                     "N")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (expand
                                                                                                                                                   "partition_2n_interior")
                                                                                                                                                  (("2"
                                                                                                                                                    (flatten)
                                                                                                                                                    (("2"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (expand
                                                                                                                                               "<="
                                                                                                                                               -5)
                                                                                                                                              (("2"
                                                                                                                                                (inst
                                                                                                                                                 -5
                                                                                                                                                 "x!1")
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (expand
                                                                                                                                             "<="
                                                                                                                                             -3)
                                                                                                                                            (("2"
                                                                                                                                              (inst
                                                                                                                                               -3
                                                                                                                                               "x!1")
                                                                                                                                              (("2"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (rewrite "abs_of_sub_metric") nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (lemma "upper_limit_prop" ("f" "f!1" "x" "x!1" "n" "0"))
          (("2"
            (lemma "lower_limit_prop" ("f" "f!1" "x" "x!1" "n" "0"))
            (("2" (assert)
              (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((> const-decl "bool" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (lower_limit_prop formula-decl nil riemann_scaf nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (continuous_step formula-decl nil riemann_scaf nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (zeroed_bounded_neg_fun formula-decl nil riemann_scaf nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (upper_limit_prop formula-decl nil riemann_scaf nil)
    (simple_neg application-judgement "simple" lebesgue_def nil)
    (partition_2n const-decl "partition(a, b)" riemann_scaf nil)
    (partition type-eq-decl nil integral_def "analysis/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (closed_interval type-eq-decl nil intervals_real "reals/")
    (b formal-const-decl "{x: real | a < x}" riemann_scaf nil)
    (< const-decl "bool" reals nil)
    (a formal-const-decl "real" riemann_scaf nil)
    (below type-eq-decl nil nat_types nil)
    (lower_step_neg formula-decl nil riemann_scaf nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (metric_continuous_at_def formula-decl nil metric_continuity
     "metric_space/")
    (abs_of_sub_metric formula-decl nil riemann_scaf nil)
    (member const-decl "bool" sets nil)
    (metric_zero? const-decl "bool" metric_def "metric_space/")
    (metric_symmetric? const-decl "bool" metric_def "metric_space/")
    (metric_triangle? const-decl "bool" metric_def "metric_space/")
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (metric_space_is_hausdorff name-judgement "hausdorff"
     convergence_aux "metric_space/")
    (metric_induced_topology_is_second_countable name-judgement
     "second_countable" real_topology "metric_space/")
    (metric_space_is_hausdorff name-judgement "hausdorff"
     real_continuity "metric_space/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (ball const-decl "set[T]" metric_space_def "metric_space/")
    (metric_continuous_at? const-decl "bool" metric_continuity
     "metric_space/")
    (metric? const-decl "bool" metric_def "metric_space/")
    (nnreal type-eq-decl nil real_types nil)
    (- const-decl "[T -> real]" real_fun_ops "reals/")
    (bounded_opp application-judgement "bounded" riemann_scaf nil)
    (fullset const-decl "set" sets nil)
    (lower_limit_n const-decl "real" riemann_scaf nil)
    (partition_2n_interior const-decl "set[real]" riemann_scaf nil)
    (image const-decl "set[R]" function_image nil)
    (sup const-decl "{x | least_upper_bound(<=)(x, Su)}" bounded_reals
         "reals/")
    (above_bounded const-decl "bool" bounded_reals "reals/")
    (setof type-eq-decl nil defined_types nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (sup_set type-eq-decl nil bounded_reals "reals/")
    (least_upper_bound const-decl "bool" bound_defs "reals/")
    (pred type-eq-decl nil defined_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (lower_limit_n_prop formula-decl nil riemann_scaf nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (lower_refines formula-decl nil riemann_scaf nil)
    (upper_refines formula-decl nil riemann_scaf nil)
    (upper_step_prop formula-decl nil riemann_scaf nil)
    (lower_step const-decl "step" riemann_scaf nil)
    (ii_of_x const-decl "below(length(P) - 1)" riemann_scaf nil)
    (part_not_in formula-decl nil integral_def "analysis/")
    (part_set_of const-decl "(nonempty?[real])" riemann_scaf nil)
    (<= const-decl "bool" real_fun_orders "reals/")
    (DELTA skolem-const-decl "{p: real |
   p <= x!1 - seq(partition_2n(N))(II) AND
    p <= seq(partition_2n(N))(1 + II) - x!1}" riemann_scaf nil)
    (II skolem-const-decl "below(length(partition_2n(N)) - 1)"
     riemann_scaf nil)
    (N skolem-const-decl "nonneg_int" riemann_scaf nil)
    (x!1 skolem-const-decl "real" riemann_scaf nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (eq_partition const-decl "partition(a, b)" integral_def
     "analysis/")
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (ii_of_x_def formula-decl nil riemann_scaf nil)
    (upper_step const-decl "step" riemann_scaf nil)
    (step nonempty-type-eq-decl nil riemann_scaf nil)
    (step? const-decl "bool" riemann_scaf nil)
    (lower_step_prop formula-decl nil riemann_scaf nil)
    (partion_2n_refines formula-decl nil riemann_scaf nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (upper_limit_n_prop formula-decl nil riemann_scaf nil)
    (lower_bound const-decl "bool" bound_defs "reals/")
    (upper_limit_n const-decl "real" riemann_scaf nil)
    (inf const-decl "{x | greatest_lower_bound(<=)(x, Sl)}"
         bounded_reals "reals/")
    (below_bounded const-decl "bool" bounded_reals "reals/")
    (inf_set type-eq-decl nil bounded_reals "reals/")
    (greatest_lower_bound const-decl "bool" bound_defs "reals/")
    (TRUE const-decl "bool" booleans nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (upper_bound const-decl "bool" bound_defs "reals/")
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (zeroed_bounded? const-decl "bool" riemann_scaf nil)
    (bounded nonempty-type-eq-decl nil riemann_scaf nil)
    (lower_limit const-decl "real" riemann_scaf nil)
    (upper_limit const-decl "real" riemann_scaf nil))
   shostak))
 (lower_limit_integrable 0
  (lower_limit_integrable-3 nil 3722371378
   ("" (skosimp)
    (("" (lemma "darboux" ("PS" "partition_2n" "f" "f!1"))
      (("" (name-replace "RHS" "lower_riemann_integral(f!1)")
        (("" (split -1)
          (("1" (flatten)
            (("1" (hide -2)
              (("1"
                (lemma "monotone_convergence_complete"
                 ("F" "lambda n: lower_step(f!1,partition_2n(n))" "h"
                  "lower_limit(f!1)"))
                (("1" (split -1)
                  (("1" (flatten)
                    (("1" (expand "monotonic_converges?")
                      (("1" (flatten)
                        (("1" (replace -1)
                          (("1"
                            (name-replace "LHS"
                             "integral.integral(lower_limit(f!1))")
                            (("1" (hide -3)
                              (("1"
                                (expand "o")
                                (("1"
                                  (expand "lower_step" -3)
                                  (("1"
                                    (name-replace
                                     "FF"
                                     "lambda n: integral.integral(lower_step(f!1, partition_2n(n)))")
                                    (("1"
                                      (lemma
                                       "hausdorff_convergence.unique_limit"
                                       ("u"
                                        "FF"
                                        "l1"
                                        "LHS"
                                        "l2"
                                        "RHS"))
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (expand "RHS")
                      (("2" (expand "ae_monotonic_converges?")
                        (("2" (split)
                          (("1" (expand "ae_convergence?")
                            (("1" (expand "fullset")
                              (("1"
                                (expand "ae_convergence_in?")
                                (("1"
                                  (expand "ae_in?")
                                  (("1"
                                    (inst + "partition_2n_exterior")
                                    (("1"
                                      (skosimp)
                                      (("1"
                                        (expand "member")
                                        (("1"
                                          (lemma
                                           "partition_2n_ext_int_union")
                                          (("1"
                                            (case "a<=x!1&x!1<=b")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (case
                                                 "partition_2n_interior(x!1)")
                                                (("1"
                                                  (hide -4 1)
                                                  (("1"
                                                    (rewrite
                                                     "metric_convergence_def"
                                                     +)
                                                    (("1"
                                                      (expand
                                                       "metric_converges_to")
                                                      (("1"
                                                        (skosimp)
                                                        (("1"
                                                          (expand
                                                           "member")
                                                          (("1"
                                                            (expand
                                                             "ball")
                                                            (("1"
                                                              (expand
                                                               "lower_limit")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (typepred
                                                                   "sup(image(lower_limit_n(f!1, x!1), fullset[nat]))")
                                                                  (("1"
                                                                    (name-replace
                                                                     "SUP"
                                                                     "sup(image(lower_limit_n(f!1, x!1), fullset[nat]))")
                                                                    (("1"
                                                                      (expand
                                                                       "least_upper_bound")
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (expand
                                                                           "upper_bound")
                                                                          (("1"
                                                                            (inst
                                                                             -2
                                                                             "SUP-r!1/2")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (skosimp)
                                                                                (("1"
                                                                                  (typepred
                                                                                   "z!1")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "fullset")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "image")
                                                                                      (("1"
                                                                                        (skolem
                                                                                         -
                                                                                         "n!1")
                                                                                        (("1"
                                                                                          (case
                                                                                           "SUP-lower_limit_n(f!1, x!1)(n!1)<r!1/2")
                                                                                          (("1"
                                                                                            (hide
                                                                                             -2
                                                                                             1)
                                                                                            (("1"
                                                                                              (inst
                                                                                               +
                                                                                               "n!1")
                                                                                              (("1"
                                                                                                (skosimp)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "lower_limit_n_prop"
                                                                                                   ("x"
                                                                                                    "x!1"
                                                                                                    "f"
                                                                                                    "f!1"
                                                                                                    "n"
                                                                                                    "n!1"))
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "lower_limit_n_prop"
                                                                                                     ("x"
                                                                                                      "x!1"
                                                                                                      "f"
                                                                                                      "f!1"
                                                                                                      "n"
                                                                                                      "i!1"))
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -4
                                                                                                         "lower_limit_n(f!1, x!1)(i!1)")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "abs")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "partion_2n_refines"
                                                                                                               ("n"
                                                                                                                "n!1"
                                                                                                                "m"
                                                                                                                "i!1"))
                                                                                                              (("1"
                                                                                                                (lemma
                                                                                                                 "lower_refines"
                                                                                                                 ("f"
                                                                                                                  "f!1"
                                                                                                                  "P2"
                                                                                                                  "partition_2n(i!1)"
                                                                                                                  "P1"
                                                                                                                  "partition_2n(n!1)"))
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "<="
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -
                                                                                                                         "x!1")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (expand
                                                                                                           "fullset")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "image")
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               +
                                                                                                               "i!1")
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (lemma
                                                                     "lower_limit_TCC1"
                                                                     ("f"
                                                                      "f!1"
                                                                      "x"
                                                                      "x!1"))
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case-replace
                                                   "closed(a,b)(x!1)")
                                                  (("1"
                                                    (replace -4 -1 rl)
                                                    (("1"
                                                      (expand "union")
                                                      (("1"
                                                        (expand
                                                         "member")
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but
                                                     (-1 -2 1))
                                                    (("2"
                                                      (expand "closed")
                                                      (("2"
                                                        (expand
                                                         "closed_ball")
                                                        (("2"
                                                          (expand
                                                           "abs")
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (ground)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide -1 2)
                                              (("2"
                                                (rewrite
                                                 "metric_convergence_def")
                                                (("1"
                                                  (expand
                                                   "lower_limit")
                                                  (("1"
                                                    (expand
                                                     "lower_step")
                                                    (("1"
                                                      (case-replace
                                                       "x!1<a")
                                                      (("1"
                                                        (expand
                                                         "partition_2n_interior")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (typepred
                                                             "f!1")
                                                            (("1"
                                                              (expand
                                                               "zeroed_bounded?")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (expand
                                                                   "zeroed?")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "x!1")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (replace
                                                                         -2)
                                                                        (("1"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("1"
                                                                            (expand
                                                                             "metric_converges_to")
                                                                            (("1"
                                                                              (skosimp)
                                                                              (("1"
                                                                                (inst
                                                                                 +
                                                                                 "0")
                                                                                (("1"
                                                                                  (skosimp)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "ball")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "member")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "abs")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "partition_2n_interior")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (typepred
                                                             "f!1")
                                                            (("2"
                                                              (expand
                                                               "zeroed_bounded?")
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (expand
                                                                   "zeroed?")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "x!1")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (replace
                                                                         -2)
                                                                        (("2"
                                                                          (hide-all-but
                                                                           3)
                                                                          (("2"
                                                                            (expand
                                                                             "metric_converges_to")
                                                                            (("2"
                                                                              (skosimp)
                                                                              (("2"
                                                                                (inst
                                                                                 +
                                                                                 "0")
                                                                                (("2"
                                                                                  (skosimp)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "member")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "ball")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "abs")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (rewrite
                                                   "abs_of_sub_metric")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma "countable_is_null")
                                      (("2"
                                        (inst
                                         -
                                         "partition_2n_exterior")
                                        (("1"
                                          (rewrite
                                           "null_is_negligible")
                                          nil
                                          nil)
                                         ("2"
                                          (lemma
                                           "countable_2n_exterior")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (hide 2)
                              (("2"
                                (expand "ae_increasing?")
                                (("2"
                                  (inst + "emptyset[real]")
                                  (("2"
                                    (skosimp)
                                    (("2"
                                      (skosimp)
                                      (("2"
                                        (lemma
                                         "lower_refines"
                                         ("P2"
                                          "partition_2n(j!1)"
                                          "P1"
                                          "partition_2n(i!1)"
                                          "f"
                                          "f!1"))
                                        (("2"
                                          (lemma
                                           "partion_2n_refines"
                                           ("n" "i!1" "m" "j!1"))
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "<=" -2)
                                              (("2"
                                                (inst - "x!1")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide -1 2)
                    (("3" (expand "bounded?")
                      (("3" (split)
                        (("1" (expand "bounded_above?")
                          (("1"
                            (lemma "riemann_lebesgue_step_integrable"
                             ("phi" "upper_step(f!1,partition_2n(0))"))
                            (("1" (flatten)
                              (("1"
                                (inst
                                 +
                                 "integral(upper_step(f!1, partition_2n(0)))")
                                (("1"
                                  (skolem + "n!1")
                                  (("1"
                                    (expand "o ")
                                    (("1"
                                      (lemma
                                       "riemann_lebesgue_step_integrable"
                                       ("phi"
                                        "lower_step(f!1,partition_2n(n!1))"))
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (hide-all-but (-2 -5 1))
                                          (("1"
                                            (lemma
                                             "integral_ae_le"
                                             ("f1"
                                              "lower_step(f!1, partition_2n(n!1))"
                                              "f2"
                                              "upper_step(f!1, partition_2n(0))"))
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide-all-but 1)
                                                (("1"
                                                  (expand "ae_le?")
                                                  (("1"
                                                    (expand
                                                     "pointwise_ae?")
                                                    (("1"
                                                      (expand "ae?")
                                                      (("1"
                                                        (expand
                                                         "fullset")
                                                        (("1"
                                                          (expand
                                                           "ae_in?")
                                                          (("1"
                                                            (inst
                                                             +
                                                             "emptyset[real]")
                                                            (("1"
                                                              (skosimp)
                                                              (("1"
                                                                (expand
                                                                 "member")
                                                                (("1"
                                                                  (lemma
                                                                   "lower_step_prop"
                                                                   ("f"
                                                                    "f!1"
                                                                    "P"
                                                                    "partition_2n(n!1)"))
                                                                  (("1"
                                                                    (lemma
                                                                     "upper_step_prop"
                                                                     ("f"
                                                                      "f!1"
                                                                      "P"
                                                                      "partition_2n(0)"))
                                                                    (("1"
                                                                      (expand
                                                                       "<="
                                                                       (-1
                                                                        -2))
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "x!1")
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           "x!1")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "bounded_below?")
                          (("2"
                            (lemma "riemann_lebesgue_step_integrable"
                             ("phi"
                              "lower_step(f!1, partition_2n(0))"))
                            (("2" (flatten)
                              (("2"
                                (inst
                                 +
                                 "integral(lower_step(f!1, partition_2n(0)))")
                                (("2"
                                  (skolem + "n!1")
                                  (("2"
                                    (expand "o ")
                                    (("2"
                                      (lemma
                                       "riemann_lebesgue_step_integrable"
                                       ("phi"
                                        "lower_step(f!1, partition_2n(n!1))"))
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (hide-all-but (-2 -5 1))
                                          (("2"
                                            (lemma
                                             "integral_ae_le"
                                             ("f1"
                                              "lower_step(f!1, partition_2n(0))"
                                              "f2"
                                              "lower_step(f!1, partition_2n(n!1))"))
                                            (("2"
                                              (assert)
                                              (("2"
                                                (hide-all-but 1)
                                                (("2"
                                                  (expand "ae_le?")
                                                  (("2"
                                                    (expand
                                                     "pointwise_ae?")
                                                    (("2"
                                                      (expand "ae?")
                                                      (("2"
                                                        (expand
                                                         "fullset")
                                                        (("2"
                                                          (expand
                                                           "ae_in?")
                                                          (("2"
                                                            (expand
                                                             "member")
                                                            (("2"
                                                              (inst
                                                               +
                                                               "emptyset[real]")
                                                              (("2"
                                                                (skosimp)
                                                                (("2"
                                                                  (lemma
                                                                   "partion_2n_refines"
                                                                   ("n"
                                                                    "0"
                                                                    "m"
                                                                    "n!1"))
                                                                  (("2"
                                                                    (lemma
                                                                     "lower_refines"
                                                                     ("P2"
                                                                      "partition_2n(n!1)"
                                                                      "P1"
                                                                      "partition_2n(0)"
                                                                      "f"
                                                                      "f!1"))
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (replace
                                                                         -2
                                                                         -1)
                                                                        (("2"
                                                                          (expand
                                                                           "<="
                                                                           -1)
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "x!1")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2 -1)
                  (("2" (skosimp)
                    (("2"
                      (lemma "riemann_lebesgue_step_integrable"
                       ("phi" "lower_step(f!1, partition_2n(n!1))"))
                      (("2" (flatten) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (expand "o ")
              (("2" (rewrite "metric_convergence_def")
                (("1" (expand "metric_converges_to")
                  (("1" (lemma "part_norm_partition_2n")
                    (("1" (skosimp)
                      (("1" (expand "member")
                        (("1" (expand "ball")
                          (("1"
                            (lemma "posreal_div_posreal_is_posreal"
                             ("px" "b-a" "py" "r!1"))
                            (("1"
                              (name "N"
                                    "max(0,floor(log(2)((b - a) / r!1)))")
                              (("1"
                                (typepred
                                 "floor(log(2)((b - a) / r!1))")
                                (("1"
                                  (name-replace
                                   "FLOOR"
                                   "floor(log(2)((b - a) / r!1))")
                                  (("1"
                                    (inst + "N+1")
                                    (("1"
                                      (skosimp)
                                      (("1"
                                        (inst -5 "i!1")
                                        (("1"
                                          (rewrite "abs_mult")
                                          (("1"
                                            (expand "abs" 1)
                                            (("1"
                                              (rewrite "one_times")
                                              (("1"
                                                (replace -5)
                                                (("1"
                                                  (hide -5)
                                                  (("1"
                                                    (case
                                                     "(b - a)/r!1 < 2^i!1")
                                                    (("1"
                                                      (rewrite
                                                       "div_mult_pos_lt1"
                                                       -1)
                                                      (("1"
                                                        (rewrite
                                                         "div_mult_pos_lt1"
                                                         1)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (name-replace
                                                         "BAR"
                                                         "(b - a) / r!1")
                                                        (("2"
                                                          (lemma
                                                           "expt_log"
                                                           ("ne1x"
                                                            "2"
                                                            "y"
                                                            "BAR"))
                                                          (("1"
                                                            (lemma
                                                             "both_sides_real_expt_gt1_lt"
                                                             ("gt1x"
                                                              "2"
                                                              "a"
                                                              "log(2)(BAR)"
                                                              "b"
                                                              "i!1"))
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (typepred "b")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (rewrite "abs_of_sub_metric") nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((lower_riemann_integral const-decl "real" riemann_scaf nil)
    (part_norm const-decl "posreal" riemann_scaf nil)
    (part_norm_partition_2n formula-decl nil riemann_scaf nil)
    (posreal_div_posreal_is_posreal judgement-tcc nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "nnreal" real_expt "power/")
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (both_sides_real_expt_gt1_lt formula-decl nil real_expt "power/")
    (expt_log formula-decl nil log "power/")
    (one_times formula-decl nil extra_tegies nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (abs_mult formula-decl nil real_props nil)
    (log const-decl "real" log "power/")
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (integer nonempty-type-from-decl nil integers nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (lambda_ const-decl "complete_sigma_finite[real, cal_M]"
     lebesgue_def nil)
    (complete_sigma_finite type-eq-decl nil measure_def
     "measure_integration/")
    (complete_sigma_finite? const-decl "bool" measure_def
     "measure_integration/")
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     "extended_nnreal/")
    (nnreal type-eq-decl nil real_types nil)
    (cal_M const-decl "sigma_algebra" lebesgue_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     "measure_integration/")
    (sigma_algebra? const-decl "bool" subset_algebra_def
     "measure_integration/")
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (lower_limit const-decl "real" riemann_scaf nil)
    (lower_step const-decl "step" riemann_scaf nil)
    (step nonempty-type-eq-decl nil riemann_scaf nil)
    (step? const-decl "bool" riemann_scaf nil)
    (integrable nonempty-type-eq-decl nil integral
     "measure_integration/")
    (integrable? const-decl "bool" integral "measure_integration/")
    (monotone_convergence_complete formula-decl nil complete_integral
     "measure_integration/")
    (riemann_lebesgue_step_integrable formula-decl nil riemann_scaf
     nil)
    (upper_step const-decl "step" riemann_scaf nil)
    (integral_ae_le formula-decl nil integral "measure_integration/")
    (pointwise_ae? const-decl "bool" measure_theory
     "measure_integration/")
    (upper_step_prop formula-decl nil riemann_scaf nil)
    (lower_step_prop formula-decl nil riemann_scaf nil)
    (ae? const-decl "bool" measure_theory "measure_integration/")
    (fullset_is_clopen name-judgement "clopen" convergence_aux
     "metric_space/")
    (measurable_fullset name-judgement "measurable_set[real, cal_M]"
     lebesgue_def nil)
    (subset_algebra_fullset name-judgement "(cal_M)" lebesgue_def nil)
    (real_is_complete name-judgement "metric_complete" real_topology
     "metric_space/")
    (subset_algebra_fullset name-judgement "(induced_sigma_algebra)"
     real_lebesgue_scaf nil)
    (subset_algebra_fullset name-judgement "(lebesgue_measurable)"
     real_lebesgue_scaf nil)
    (ae_le? const-decl "bool" measure_theory "measure_integration/")
    (bounded_above? const-decl "bool" real_fun_preds "reals/")
    (bounded_below? const-decl "bool" real_fun_preds "reals/")
    (bounded? const-decl "bool" real_fun_preds "reals/")
    (ae_monotonic_converges? const-decl "bool" measure_theory
     "measure_integration/")
    (ae_increasing? const-decl "bool" measure_theory
     "measure_integration/")
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" countable_setofsets
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set" countable_props
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set[T]" step_fun_props
     "analysis/")
    (finite_emptyset name-judgement "finite_set" bounded_nats
     "orders/")
    (finite_emptyset name-judgement "finite_set" sigma_countable
     "sigma_set/")
    (subset_algebra_emptyset name-judgement "(S)" real_lebesgue_scaf
     nil)
    (subset_algebra_emptyset name-judgement "(S)" real_lebesgue_scaf
     nil)
    (outer_negligible_emptyset name-judgement "outer_negligible"
     real_lebesgue_scaf nil)
    (subset_algebra_emptyset name-judgement "(S)" lebesgue_def nil)
    (finite_emptyset name-judgement "finite_set[real]" integral_def
     "analysis/")
    (emptyset_is_clopen name-judgement "clopen" convergence_aux
     "metric_space/")
    (emptyset_is_compact name-judgement "compact" convergence_aux
     "metric_space/")
    (ae_convergence? const-decl "bool" measure_theory
     "measure_integration/")
    (ae_convergence_in? const-decl "bool" measure_theory
     "measure_integration/")
    (set type-eq-decl nil sets nil)
    (negligible_set? const-decl "bool" measure_theory
     "measure_integration/")
    (partition_2n_exterior const-decl "set[real]" riemann_scaf nil)
    (negligible nonempty-type-eq-decl nil measure_theory
     "measure_integration/")
    (member const-decl "bool" sets nil)
    (TRUE const-decl "bool" booleans nil)
    (partition_2n_interior const-decl "set[real]" riemann_scaf nil)
    (metric_convergence_def formula-decl nil metric_space
     "metric_space/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (ball const-decl "set[T]" metric_space_def "metric_space/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (lower_limit_TCC1 subtype-tcc nil riemann_scaf nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (f!1 skolem-const-decl "bounded" riemann_scaf nil)
    (x!1 skolem-const-decl "real" riemann_scaf nil)
    (i!1 skolem-const-decl "nat" riemann_scaf nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (lower_refines formula-decl nil riemann_scaf nil)
    (<= const-decl "bool" real_fun_orders "reals/")
    (partion_2n_refines formula-decl nil riemann_scaf nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (lower_limit_n_prop formula-decl nil riemann_scaf nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (upper_bound const-decl "bool" bound_defs "reals/")
    (lower_limit_n const-decl "real" riemann_scaf nil)
    (image const-decl "set[R]" function_image nil)
    (sup const-decl "{x | least_upper_bound(<=)(x, Su)}" bounded_reals
         "reals/")
    (above_bounded const-decl "bool" bounded_reals "reals/")
    (nonempty? const-decl "bool" sets nil)
    (sup_set type-eq-decl nil bounded_reals "reals/")
    (least_upper_bound const-decl "bool" bound_defs "reals/")
    (pred type-eq-decl nil defined_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (metric_converges_to const-decl "bool" metric_space_def
     "metric_space/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (union const-decl "set" sets nil)
    (closed? const-decl "bool" topology "topology/")
    (closed nonempty-type-eq-decl nil topology "topology/")
    (closed_ball const-decl "closed" real_topology "metric_space/")
    (closed_interval nonempty-type-eq-decl nil real_topology
     "metric_space/")
    (closed const-decl "closed_interval" real_topology "metric_space/")
    (metric? const-decl "bool" metric_def "metric_space/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (zeroed? const-decl "bool" riemann_scaf nil)
    (abs_of_sub_metric formula-decl nil riemann_scaf nil)
    (partition_2n_ext_int_union formula-decl nil riemann_scaf nil)
    (is_countable const-decl "bool" countability "sets_aux/")
    (countable_set nonempty-type-eq-decl nil countability "sets_aux/")
    (null_is_negligible judgement-tcc nil measure_theory
     "measure_integration/")
    (null_set? const-decl "bool" measure_theory "measure_integration/")
    (null_set nonempty-type-eq-decl nil measure_theory
     "measure_integration/")
    (countable_2n_exterior formula-decl nil riemann_scaf nil)
    (countable_is_null judgement-tcc nil lebesgue_def nil)
    (ae_in? const-decl "bool" measure_theory "measure_integration/")
    (fullset const-decl "set" sets nil)
    (RHS skolem-const-decl "real" riemann_scaf nil)
    (integral const-decl "real" integral "measure_integration/")
    (O const-decl "T3" function_props nil)
    (metric_induced_topology const-decl "setofsets[T]" metric_space_def
     "metric_space/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (unique_limit formula-decl nil hausdorff_convergence "topology/")
    (lower_step const-decl "step" riemann_scaf nil)
    (monotonic_converges? const-decl "bool" convergence_aux
     "metric_space/")
    (darboux formula-decl nil riemann_scaf nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (a formal-const-decl "real" riemann_scaf nil)
    (< const-decl "bool" reals nil)
    (b formal-const-decl "{x: real | a < x}" riemann_scaf nil)
    (closed_interval type-eq-decl nil intervals_real "reals/")
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (partition type-eq-decl nil integral_def "analysis/")
    (sequence type-eq-decl nil sequences nil)
    (partition_2n const-decl "partition(a, b)" riemann_scaf nil)
    (zeroed_bounded? const-decl "bool" riemann_scaf nil)
    (bounded nonempty-type-eq-decl nil riemann_scaf nil))
   nil))
 (upper_limit_integrable 0
  (upper_limit_integrable-2 nil 3722371475
   ("" (skosimp)
    (("" (lemma "darboux" ("PS" "partition_2n" "f" "f!1"))
      (("" (split -1)
        (("1" (flatten)
          (("1" (hide -1)
            (("1" (expand "upper_step" -1)
              (("1" (expand "o")
                (("1"
                  (name-replace "RHS" "upper_riemann_integral(f!1)")
                  (("1"
                    (lemma "monotone_convergence_complete"
                     ("F" "lambda n: upper_step(f!1,partition_2n(n))"
                      "h" "upper_limit(f!1)"))
                    (("1" (split -1)
                      (("1" (flatten)
                        (("1" (expand "o")
                          (("1"
                            (name-replace "LHS"
                             "integral.integral(upper_limit(f!1))")
                            (("1"
                              (name-replace "FF"
                               "lambda n: integral.integral(upper_step(f!1, partition_2n(n)))")
                              (("1"
                                (expand "monotonic_converges?")
                                (("1"
                                  (assert)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (hide -1 -3)
                                      (("1"
                                        (lemma
                                         "hausdorff_convergence.unique_limit"
                                         ("u"
                                          "FF"
                                          "l1"
                                          "LHS"
                                          "l2"
                                          "RHS"))
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (expand "RHS")
                          (("2" (expand "ae_monotonic_converges?")
                            (("2" (split)
                              (("1"
                                (hide -1)
                                (("1"
                                  (expand "ae_convergence?")
                                  (("1"
                                    (expand "fullset")
                                    (("1"
                                      (expand "ae_convergence_in?")
                                      (("1"
                                        (expand "ae_in?")
                                        (("1"
                                          (inst
                                           +
                                           "partition_2n_exterior")
                                          (("1"
                                            (skosimp)
                                            (("1"
                                              (case "a<=x!1& x!1<=b")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (expand "<=" -1)
                                                  (("1"
                                                    (split)
                                                    (("1"
                                                      (expand "<=" -2)
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (case
                                                           "partition_2n_interior(x!1)")
                                                          (("1"
                                                            (hide 1)
                                                            (("1"
                                                              (expand
                                                               "upper_limit")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (rewrite
                                                                   "metric_convergence_def")
                                                                  (("1"
                                                                    (expand
                                                                     "metric_converges_to")
                                                                    (("1"
                                                                      (expand
                                                                       "member")
                                                                      (("1"
                                                                        (expand
                                                                         "ball")
                                                                        (("1"
                                                                          (skosimp)
                                                                          (("1"
                                                                            (typepred
                                                                             "inf(image(upper_limit_n(f!1, x!1), fullset[nat]))")
                                                                            (("1"
                                                                              (name-replace
                                                                               "INF"
                                                                               "inf(image(upper_limit_n(f!1, x!1), fullset[nat]))")
                                                                              (("1"
                                                                                (expand
                                                                                 "greatest_lower_bound")
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "fullset")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "lower_bound")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -2
                                                                                         "INF+r!1/2")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (skosimp)
                                                                                            (("1"
                                                                                              (typepred
                                                                                               "z!1")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "image")
                                                                                                (("1"
                                                                                                  (skolem
                                                                                                   -
                                                                                                   "n!1")
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "upper_limit_n_prop"
                                                                                                     ("f"
                                                                                                      "f!1"
                                                                                                      "x"
                                                                                                      "x!1"
                                                                                                      "n"
                                                                                                      "n!1"))
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -2)
                                                                                                          (("1"
                                                                                                            (case
                                                                                                             "r!1 / 2 + INF > upper_step(f!1, partition_2n(n!1))(x!1)")
                                                                                                            (("1"
                                                                                                              (hide
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 +
                                                                                                                 "n!1")
                                                                                                                (("1"
                                                                                                                  (hide
                                                                                                                   -3)
                                                                                                                  (("1"
                                                                                                                    (skosimp)
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -3
                                                                                                                       "upper_limit_n(f!1, x!1)(i!1)")
                                                                                                                      (("1"
                                                                                                                        (case-replace
                                                                                                                         "upper_step(f!1, partition_2n(i!1))(x!1)-INF < r!1")
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "abs"
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (case-replace
                                                                                                                               "INF - upper_step(f!1, partition_2n(i!1))(x!1) < 0")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (lemma
                                                                                                                                   "upper_limit_n_prop"
                                                                                                                                   ("f"
                                                                                                                                    "f!1"
                                                                                                                                    "x"
                                                                                                                                    "x!1"
                                                                                                                                    "n"
                                                                                                                                    "i!1"))
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (hide
                                                                                                                             2)
                                                                                                                            (("2"
                                                                                                                              (lemma
                                                                                                                               "upper_limit_n_prop"
                                                                                                                               ("f"
                                                                                                                                "f!1"
                                                                                                                                "x"
                                                                                                                                "x!1"
                                                                                                                                "n"
                                                                                                                                "i!1"))
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (lemma
                                                                                                                                   "partion_2n_refines"
                                                                                                                                   ("n"
                                                                                                                                    "n!1"
                                                                                                                                    "m"
                                                                                                                                    "i!1"))
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (lemma
                                                                                                                                       "upper_refines"
                                                                                                                                       ("f"
                                                                                                                                        "f!1"
                                                                                                                                        "P2"
                                                                                                                                        "partition_2n(i!1)"
                                                                                                                                        "P1"
                                                                                                                                        "partition_2n(n!1)"))
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "<="
                                                                                                                                           -1)
                                                                                                                                          (("2"
                                                                                                                                            (inst
                                                                                                                                             -
                                                                                                                                             "x!1")
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (expand
                                                                                                                         "image")
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           +
                                                                                                                           "i!1")
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (lemma
                                                                               "upper_limit_TCC1"
                                                                               ("f"
                                                                                "f!1"
                                                                                "x"
                                                                                "x!1"))
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 3)
                                                            (("2"
                                                              (expand
                                                               "partition_2n_interior")
                                                              (("2"
                                                                (expand
                                                                 "partition_2n_exterior")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "partition_2n_exterior")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (inst
                                                               +
                                                               "1"
                                                               "0")
                                                              (("2"
                                                                (rewrite
                                                                 "real_expt_x0")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "partition_2n_exterior")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (inst
                                                           +
                                                           "0"
                                                           "0")
                                                          (("2"
                                                            (rewrite
                                                             "real_expt_x0")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case-replace
                                                 "upper_limit(f!1)(x!1)=0")
                                                (("1"
                                                  (expand "member")
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (case-replace
                                                         "(LAMBDA (n_1: nat):
                                     upper_step(f!1, partition_2n(n_1))(x!1))=lambda n: 0")
                                                        (("1"
                                                          (hide-all-but
                                                           3)
                                                          (("1"
                                                            (rewrite
                                                             "metric_convergence_def")
                                                            (("1"
                                                              (expand
                                                               "metric_converges_to")
                                                              (("1"
                                                                (skosimp)
                                                                (("1"
                                                                  (inst
                                                                   +
                                                                   " 0")
                                                                  (("1"
                                                                    (skosimp)
                                                                    (("1"
                                                                      (expand
                                                                       "ball")
                                                                      (("1"
                                                                        (expand
                                                                         "member")
                                                                        (("1"
                                                                          (expand
                                                                           "abs")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (rewrite
                                                               "abs_of_sub_metric")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (apply-extensionality
                                                           :hide?
                                                           t)
                                                          (("2"
                                                            (hide 4)
                                                            (("2"
                                                              (expand
                                                               "upper_step")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (lift-if
                                                                   1)
                                                                  (("2"
                                                                    (case-replace
                                                                     "x!1 < a")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (case-replace
                                                                         "b < x!1")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 4)
                                                  (("2"
                                                    (expand
                                                     "upper_limit")
                                                    (("2"
                                                      (expand
                                                       "partition_2n_interior")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (typepred
                                                           "f!1")
                                                          (("2"
                                                            (expand
                                                             "zeroed_bounded?")
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (expand
                                                                 "zeroed?")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "x!1")
                                                                  (("2"
                                                                    (hide
                                                                     -1
                                                                     3)
                                                                    (("2"
                                                                      (case-replace
                                                                       "a<x!1")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (case-replace
                                                                           "x!1<b")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (ground)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (lemma
                                             "countable_is_null"
                                             ("x"
                                              "partition_2n_exterior"))
                                            (("1"
                                              (rewrite
                                               "null_is_negligible")
                                              nil
                                              nil)
                                             ("2"
                                              (rewrite
                                               "countable_2n_exterior")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (hide -1 1)
                                  (("2"
                                    (expand "ae_decreasing?")
                                    (("2"
                                      (inst + "emptyset")
                                      (("2"
                                        (skosimp)
                                        (("2"
                                          (skosimp)
                                          (("2"
                                            (lemma
                                             "partion_2n_refines"
                                             ("n" "i!1" "m" "j!1"))
                                            (("2"
                                              (assert)
                                              (("2"
                                                (lemma
                                                 "upper_refines"
                                                 ("f"
                                                  "f!1"
                                                  "P2"
                                                  "partition_2n(j!1)"
                                                  "P1"
                                                  "partition_2n(i!1)"))
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "<=" -1)
                                                    (("2"
                                                      (inst - "x!1")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (hide -1 2)
                        (("3" (expand "o ")
                          (("3" (expand "bounded?")
                            (("3" (split)
                              (("1"
                                (lemma
                                 "riemann_lebesgue_step_integrable"
                                 ("phi"
                                  "upper_step(f!1,partition_2n(0))"))
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "bounded_above?")
                                    (("1"
                                      (inst
                                       +
                                       "integral(upper_step(f!1, partition_2n(0)))")
                                      (("1"
                                        (skolem + "n!1")
                                        (("1"
                                          (lemma
                                           "riemann_lebesgue_step_integrable"
                                           ("phi"
                                            "upper_step(f!1,partition_2n(n!1))"))
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (lemma
                                               "integral_ae_le"
                                               ("f1"
                                                "upper_step(f!1, partition_2n(n!1))"
                                                "f2"
                                                "upper_step(f!1, partition_2n(0))"))
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide-all-but 1)
                                                  (("1"
                                                    (expand "ae_le?")
                                                    (("1"
                                                      (expand
                                                       "pointwise_ae?")
                                                      (("1"
                                                        (expand "ae?")
                                                        (("1"
                                                          (expand
                                                           "fullset")
                                                          (("1"
                                                            (expand
                                                             "ae_in?")
                                                            (("1"
                                                              (inst
                                                               +
                                                               "emptyset")
                                                              (("1"
                                                                (skosimp)
                                                                (("1"
                                                                  (lemma
                                                                   "partion_2n_refines"
                                                                   ("n"
                                                                    "0"
                                                                    "m"
                                                                    "n!1"))
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (lemma
                                                                       "upper_refines"
                                                                       ("f"
                                                                        "f!1"
                                                                        "P2"
                                                                        "partition_2n(n!1)"
                                                                        "P1"
                                                                        "partition_2n(0)"))
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "<="
                                                                           -1)
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "x!1")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "bounded_below?")
                                (("2"
                                  (lemma
                                   "riemann_lebesgue_step_integrable"
                                   ("phi"
                                    "lower_step(f!1,partition_2n(0))"))
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (inst
                                       +
                                       "integral(lower_step(f!1, partition_2n(0)))")
                                      (("2"
                                        (skolem + "n!1")
                                        (("2"
                                          (lemma
                                           "riemann_lebesgue_step_integrable"
                                           ("phi"
                                            "upper_step(f!1,partition_2n(n!1))"))
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (lemma
                                               "integral_ae_le"
                                               ("f1"
                                                "lower_step(f!1, partition_2n(0))"
                                                "f2"
                                                "upper_step(f!1, partition_2n(n!1))"))
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (expand "ae_le?")
                                                    (("2"
                                                      (expand
                                                       "pointwise_ae?")
                                                      (("2"
                                                        (expand "ae?")
                                                        (("2"
                                                          (expand
                                                           "fullset")
                                                          (("2"
                                                            (expand
                                                             "ae_in?")
                                                            (("2"
                                                              (inst
                                                               +
                                                               "emptyset")
                                                              (("2"
                                                                (skosimp)
                                                                (("2"
                                                                  (lemma
                                                                   "lower_step_prop"
                                                                   ("f"
                                                                    "f!1"
                                                                    "P"
                                                                    "partition_2n(0)"))
                                                                  (("2"
                                                                    (lemma
                                                                     "upper_step_prop"
                                                                     ("f"
                                                                      "f!1"
                                                                      "P"
                                                                      "partition_2n(n!1)"))
                                                                    (("2"
                                                                      (expand
                                                                       "<="
                                                                       (-1
                                                                        -2))
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "x!1")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "x!1")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skosimp)
                      (("2"
                        (lemma "riemann_lebesgue_step_integrable"
                         ("phi" "upper_step(f!1, partition_2n(n!1))"))
                        (("2" (flatten) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (expand "o")
            (("2" (rewrite "metric_convergence_def")
              (("2" (expand "metric_converges_to")
                (("2" (skosimp)
                  (("2" (expand "member")
                    (("2" (expand "ball")
                      (("2" (lemma "part_norm_partition_2n")
                        (("2"
                          (lemma "posreal_div_posreal_is_posreal"
                           ("px" "b-a" "py" "r!1"))
                          (("1"
                            (name "N"
                                  "max(0,floor(log(2)((b - a) / r!1)))")
                            (("1" (inst + "N+1")
                              (("1"
                                (skosimp)
                                (("1"
                                  (inst - "i!1")
                                  (("1"
                                    (rewrite "abs_mult")
                                    (("1"
                                      (expand "abs" 1)
                                      (("1"
                                        (rewrite "one_times")
                                        (("1"
                                          (replace -3)
                                          (("1"
                                            (hide -3)
                                            (("1"
                                              (case
                                               "(b-a)/r!1 < 2^i!1")
                                              (("1"
                                                (rewrite
                                                 "div_mult_pos_lt1")
                                                (("1"
                                                  (rewrite
                                                   "div_mult_pos_lt1")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (typepred
                                                   "floor(log(2)((b - a) / r!1))")
                                                  (("1"
                                                    (name-replace
                                                     "FLOOR"
                                                     "floor(log(2)((b - a) / r!1))")
                                                    (("1"
                                                      (name-replace
                                                       "BAR"
                                                       "(b - a) / r!1")
                                                      (("1"
                                                        (lemma
                                                         "both_sides_real_expt_gt1_le"
                                                         ("gt1x"
                                                          "2"
                                                          "a"
                                                          "1+FLOOR"
                                                          "b"
                                                          "i!1"))
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lemma
                                                             "both_sides_real_expt_gt1_lt"
                                                             ("gt1x"
                                                              "2"
                                                              "a"
                                                              "log(2)(BAR)"
                                                              "b"
                                                              "1 + FLOOR"))
                                                            (("1"
                                                              (rewrite
                                                               "expt_log")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil)
                           ("2" (assert) (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((O const-decl "T3" function_props nil)
    (lambda_ const-decl "complete_sigma_finite[real, cal_M]"
     lebesgue_def nil)
    (complete_sigma_finite type-eq-decl nil measure_def
     "measure_integration/")
    (complete_sigma_finite? const-decl "bool" measure_def
     "measure_integration/")
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     "extended_nnreal/")
    (nnreal type-eq-decl nil real_types nil)
    (cal_M const-decl "sigma_algebra" lebesgue_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     "measure_integration/")
    (sigma_algebra? const-decl "bool" subset_algebra_def
     "measure_integration/")
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (upper_limit const-decl "real" riemann_scaf nil)
    (upper_step const-decl "step" riemann_scaf nil)
    (step nonempty-type-eq-decl nil riemann_scaf nil)
    (step? const-decl "bool" riemann_scaf nil)
    (integrable nonempty-type-eq-decl nil integral
     "measure_integration/")
    (integrable? const-decl "bool" integral "measure_integration/")
    (monotone_convergence_complete formula-decl nil complete_integral
     "measure_integration/")
    (bounded? const-decl "bool" real_fun_preds "reals/")
    (bounded_below? const-decl "bool" real_fun_preds "reals/")
    (upper_step_prop formula-decl nil riemann_scaf nil)
    (lower_step_prop formula-decl nil riemann_scaf nil)
    (lower_step const-decl "step" riemann_scaf nil)
    (riemann_lebesgue_step_integrable formula-decl nil riemann_scaf
     nil)
    (bounded_above? const-decl "bool" real_fun_preds "reals/")
    (ae_le? const-decl "bool" measure_theory "measure_integration/")
    (subset_algebra_fullset name-judgement "(lebesgue_measurable)"
     real_lebesgue_scaf nil)
    (subset_algebra_fullset name-judgement "(induced_sigma_algebra)"
     real_lebesgue_scaf nil)
    (real_is_complete name-judgement "metric_complete" real_topology
     "metric_space/")
    (subset_algebra_fullset name-judgement "(cal_M)" lebesgue_def nil)
    (measurable_fullset name-judgement "measurable_set[real, cal_M]"
     lebesgue_def nil)
    (fullset_is_clopen name-judgement "clopen" convergence_aux
     "metric_space/")
    (ae? const-decl "bool" measure_theory "measure_integration/")
    (pointwise_ae? const-decl "bool" measure_theory
     "measure_integration/")
    (integral_ae_le formula-decl nil integral "measure_integration/")
    (ae_monotonic_converges? const-decl "bool" measure_theory
     "measure_integration/")
    (ae_decreasing? const-decl "bool" measure_theory
     "measure_integration/")
    (FALSE const-decl "bool" booleans nil)
    (extend const-decl "R" extend nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" countable_setofsets
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set" countable_props
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set[T]" step_fun_props
     "analysis/")
    (finite_emptyset name-judgement "finite_set" bounded_nats
     "orders/")
    (finite_emptyset name-judgement "finite_set" sigma_countable
     "sigma_set/")
    (finite_emptyset name-judgement "finite_set" countability
     "sets_aux/")
    (finite_extend application-judgement "finite_set[T]"
     extend_set_props nil)
    (fullset const-decl "set" sets nil)
    (ae_in? const-decl "bool" measure_theory "measure_integration/")
    (countable_is_null judgement-tcc nil lebesgue_def nil)
    (is_countable const-decl "bool" countability "sets_aux/")
    (countable_set nonempty-type-eq-decl nil countability "sets_aux/")
    (null_is_negligible judgement-tcc nil measure_theory
     "measure_integration/")
    (null_set? const-decl "bool" measure_theory "measure_integration/")
    (null_set nonempty-type-eq-decl nil measure_theory
     "measure_integration/")
    (countable_2n_exterior formula-decl nil riemann_scaf nil)
    (metric? const-decl "bool" metric_def "metric_space/")
    (abs_of_sub_metric formula-decl nil riemann_scaf nil)
    (zeroed? const-decl "bool" riemann_scaf nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member const-decl "bool" sets nil)
    (metric_converges_to const-decl "bool" metric_space_def
     "metric_space/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (ball const-decl "set[T]" metric_space_def "metric_space/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (upper_limit_n_prop formula-decl nil riemann_scaf nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (<= const-decl "bool" real_fun_orders "reals/")
    (upper_refines formula-decl nil riemann_scaf nil)
    (partion_2n_refines formula-decl nil riemann_scaf nil)
    (i!1 skolem-const-decl "nat" riemann_scaf nil)
    (x!1 skolem-const-decl "real" riemann_scaf nil)
    (f!1 skolem-const-decl "bounded" riemann_scaf nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (lower_bound const-decl "bool" bound_defs "reals/")
    (upper_limit_TCC1 subtype-tcc nil riemann_scaf nil)
    (metric_convergence_def formula-decl nil metric_space
     "metric_space/")
    (inf_set type-eq-decl nil bounded_reals "reals/")
    (pred type-eq-decl nil defined_types nil)
    (greatest_lower_bound const-decl "bool" bound_defs "reals/")
    (nonempty? const-decl "bool" sets nil)
    (below_bounded const-decl "bool" bounded_reals "reals/")
    (inf const-decl "{x | greatest_lower_bound(<=)(x, Sl)}"
         bounded_reals "reals/")
    (image const-decl "set[R]" function_image nil)
    (upper_limit_n const-decl "real" riemann_scaf nil)
    (partition_2n_interior const-decl "set[real]" riemann_scaf nil)
    (real_expt_x0 formula-decl nil real_expt "power/")
    (TRUE const-decl "bool" booleans nil)
    (negligible nonempty-type-eq-decl nil measure_theory
     "measure_integration/")
    (partition_2n_exterior const-decl "set[real]" riemann_scaf nil)
    (negligible_set? const-decl "bool" measure_theory
     "measure_integration/")
    (set type-eq-decl nil sets nil)
    (ae_convergence_in? const-decl "bool" measure_theory
     "measure_integration/")
    (ae_convergence? const-decl "bool" measure_theory
     "measure_integration/")
    (RHS skolem-const-decl "real" riemann_scaf nil)
    (integral const-decl "real" integral "measure_integration/")
    (monotonic_converges? const-decl "bool" convergence_aux
     "metric_space/")
    (unique_limit formula-decl nil hausdorff_convergence "topology/")
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (metric_induced_topology const-decl "setofsets[T]" metric_space_def
     "metric_space/")
    (upper_riemann_integral const-decl "real" riemann_scaf nil)
    (upper_step const-decl "step" riemann_scaf nil)
    (part_norm_partition_2n formula-decl nil riemann_scaf nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (integer nonempty-type-from-decl nil integers nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (log const-decl "real" log "power/")
    (abs_mult formula-decl nil real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (one_times formula-decl nil extra_tegies nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (both_sides_real_expt_gt1_le formula-decl nil real_expt "power/")
    (both_sides_real_expt_gt1_lt formula-decl nil real_expt "power/")
    (expt_log formula-decl nil log "power/")
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (^ const-decl "nnreal" real_expt "power/")
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posreal_div_posreal_is_posreal judgement-tcc nil real_types nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (part_norm const-decl "posreal" riemann_scaf nil)
    (darboux formula-decl nil riemann_scaf nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (a formal-const-decl "real" riemann_scaf nil)
    (< const-decl "bool" reals nil)
    (b formal-const-decl "{x: real | a < x}" riemann_scaf nil)
    (closed_interval type-eq-decl nil intervals_real "reals/")
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (partition type-eq-decl nil integral_def "analysis/")
    (sequence type-eq-decl nil sequences nil)
    (partition_2n const-decl "partition(a, b)" riemann_scaf nil)
    (zeroed_bounded? const-decl "bool" riemann_scaf nil)
    (bounded nonempty-type-eq-decl nil riemann_scaf nil))
   nil))
 (ae_continuity_implies_integrable 0
  (ae_continuity_implies_integrable-1 nil 3451794829
   ("" (skosimp)
    (("" (name "F" "LAMBDA n: lower_step(f!1, partition_2n(n))")
      (("" (lemma "monotone_convergence_complete" ("F" "F" "h" "f!1"))
        (("1" (assert)
          (("1" (hide 2 -1)
            (("1" (split)
              (("1" (expand "ae_monotonic_converges?")
                (("1" (split)
                  (("1" (expand "ae_convergence?")
                    (("1" (expand "fullset")
                      (("1" (expand "ae_convergence_in?")
                        (("1" (expand "ae_in?")
                          (("1" (expand "ae_continuous?")
                            (("1"
                              (inst +
                               "{x | a < x AND x < b AND NOT continuous_at?(f!1, x)}")
                              (("1"
                                (skosimp)
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (typepred "f!1")
                                    (("1"
                                      (expand "F")
                                      (("1"
                                        (expand "member")
                                        (("1"
                                          (rewrite
                                           "metric_convergence_def")
                                          (("1"
                                            (expand
                                             "metric_converges_to")
                                            (("1"
                                              (expand "member")
                                              (("1"
                                                (expand "ball")
                                                (("1"
                                                  (skosimp)
                                                  (("1"
                                                    (lemma
                                                     "continuous_step"
                                                     ("f"
                                                      "f!1"
                                                      "x"
                                                      "x!1"
                                                      "epsilon"
                                                      "r!1/2"))
                                                    (("1"
                                                      (expand
                                                       "zeroed_bounded?")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (hide -2)
                                                          (("1"
                                                            (expand
                                                             "zeroed?")
                                                            (("1"
                                                              (inst-cp
                                                               -2
                                                               "x!1")
                                                              (("1"
                                                                (case-replace
                                                                 "a<x!1")
                                                                (("1"
                                                                  (case-replace
                                                                   "x!1<b")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (hide
                                                                       -5
                                                                       -6)
                                                                      (("1"
                                                                        (skosimp)
                                                                        (("1"
                                                                          (inst
                                                                           +
                                                                           "n!1")
                                                                          (("1"
                                                                            (skosimp)
                                                                            (("1"
                                                                              (lemma
                                                                               "partion_2n_refines"
                                                                               ("n"
                                                                                "n!1"
                                                                                "m"
                                                                                "i!1"))
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "lower_refines"
                                                                                   ("P2"
                                                                                    "partition_2n(i!1)"
                                                                                    "P1"
                                                                                    "partition_2n(n!1)"
                                                                                    "f"
                                                                                    "f!1"))
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (hide
                                                                                       -2)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "lower_step_prop"
                                                                                         ("f"
                                                                                          "f!1"
                                                                                          "P"
                                                                                          "partition_2n(i!1)"))
                                                                                        (("1"
                                                                                          (name-replace
                                                                                           "PHI"
                                                                                           "lower_step(f!1, partition_2n(n!1))")
                                                                                          (("1"
                                                                                            (name-replace
                                                                                             "PSI"
                                                                                             "lower_step(f!1, partition_2n(i!1))")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "<="
                                                                                               (-1
                                                                                                -2))
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -
                                                                                                 "x!1")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "x!1")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "abs")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (case-replace
                                                                       "x!1=b")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (hide
                                                                           1
                                                                           -3
                                                                           -5
                                                                           -4)
                                                                          (("1"
                                                                            (expand
                                                                             "lower_step")
                                                                            (("1"
                                                                              (expand
                                                                               "abs")
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (replace
                                                                           -4)
                                                                          (("2"
                                                                            (expand
                                                                             "lower_step")
                                                                            (("2"
                                                                              (expand
                                                                               "abs")
                                                                              (("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (case-replace
                                                                   "x!1=a")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (hide
                                                                       -2
                                                                       -1
                                                                       -4
                                                                       1)
                                                                      (("1"
                                                                        (expand
                                                                         "lower_step")
                                                                        (("1"
                                                                          (inst
                                                                           +
                                                                           "0")
                                                                          (("1"
                                                                            (skosimp)
                                                                            (("1"
                                                                              (case-replace
                                                                               "EXISTS (ii: below(length(partition_2n(i!1)) - 1)):
           a = seq(partition_2n(i!1))(ii)")
                                                                              (("1"
                                                                                (expand
                                                                                 "abs")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (inst
                                                                                 +
                                                                                 "0")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (replace
                                                                       -3)
                                                                      (("2"
                                                                        (hide
                                                                         -1
                                                                         -2)
                                                                        (("2"
                                                                          (inst
                                                                           +
                                                                           "0")
                                                                          (("2"
                                                                            (skosimp)
                                                                            (("2"
                                                                              (expand
                                                                               "lower_step")
                                                                              (("2"
                                                                                (expand
                                                                                 "abs")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (rewrite "null_is_negligible")
                                nil
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (hide 2 -1)
                      (("2" (expand "ae_increasing?")
                        (("2" (inst + "emptyset[real]")
                          (("2" (skosimp)
                            (("2" (hide 1)
                              (("2"
                                (skosimp)
                                (("2"
                                  (expand "F")
                                  (("2"
                                    (lemma
                                     "partion_2n_refines"
                                     ("n" "i!1" "m" "j!1"))
                                    (("2"
                                      (assert)
                                      (("2"
                                        (lemma
                                         "lower_refines"
                                         ("f"
                                          "f!1"
                                          "P2"
                                          "partition_2n(j!1)"
                                          "P1"
                                          "partition_2n(i!1)"))
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "<=" -1)
                                            (("2"
                                              (inst - "x!1")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -1)
                (("2" (typepred "f!1")
                  (("2" (expand "zeroed_bounded?")
                    (("2" (flatten)
                      (("2" (expand "bounded?" -1)
                        (("2" (skosimp)
                          (("2"
                            (lemma "integrable_phi_closed"
                             ("a" "a" "b" "b"))
                            (("2"
                              (lemma "integral_phi_closed"
                               ("a" "a" "b" "b"))
                              (("2"
                                (lemma
                                 "integrable_scal"
                                 ("c" "c!1" "f" "phi(closed(a, b))"))
                                (("2"
                                  (lemma
                                   "integral_scal"
                                   ("c" "c!1" "f" "phi(closed(a, b))"))
                                  (("2"
                                    (lemma
                                     "integral_scal"
                                     ("c"
                                      "-c!1"
                                      "f"
                                      "phi(closed(a, b))"))
                                    (("2"
                                      (lemma
                                       "integrable_scal"
                                       ("c"
                                        "-c!1"
                                        "f"
                                        "phi(closed(a, b))"))
                                      (("2"
                                        (replace -5)
                                        (("2"
                                          (expand "bounded?")
                                          (("2"
                                            (split)
                                            (("1"
                                              (expand "bounded_above?")
                                              (("1"
                                                (inst
                                                 +
                                                 "c!1 * (b - a)")
                                                (("1"
                                                  (skolem + "n!1")
                                                  (("1"
                                                    (expand "o")
                                                    (("1"
                                                      (lemma
                                                       "riemann_lebesgue_step_integrable"
                                                       ("phi"
                                                        "F(n!1)"))
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (lemma
                                                           "integral_ae_le"
                                                           ("f1"
                                                            "F(n!1)"
                                                            "f2"
                                                            "c!1 * phi(closed(a, b))"))
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (hide 2)
                                                              (("1"
                                                                (expand
                                                                 "ae_le?")
                                                                (("1"
                                                                  (expand
                                                                   "pointwise_ae?")
                                                                  (("1"
                                                                    (expand
                                                                     "ae?")
                                                                    (("1"
                                                                      (expand
                                                                       "fullset")
                                                                      (("1"
                                                                        (expand
                                                                         "ae_in?")
                                                                        (("1"
                                                                          (inst
                                                                           +
                                                                           "emptyset[real]")
                                                                          (("1"
                                                                            (skosimp)
                                                                            (("1"
                                                                              (expand
                                                                               "F")
                                                                              (("1"
                                                                                (hide-all-but
                                                                                 (-10
                                                                                  -11
                                                                                  2))
                                                                                (("1"
                                                                                  (lemma
                                                                                   "lower_step_prop"
                                                                                   ("f"
                                                                                    "f!1"
                                                                                    "P"
                                                                                    "partition_2n(n!1)"))
                                                                                  (("1"
                                                                                    (expand
                                                                                     "<="
                                                                                     -1)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "x!1")
                                                                                      (("1"
                                                                                        (name-replace
                                                                                         "LHS"
                                                                                         "lower_step(f!1, partition_2n(n!1))(x!1)")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "*")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "phi")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "member")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "zeroed?")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "x!1")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "x!1")
                                                                                                    (("1"
                                                                                                      (case-replace
                                                                                                       "closed(a, b)(x!1)")
                                                                                                      (("1"
                                                                                                        (case
                                                                                                         "a<=x!1&x!1<=b")
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "lower_step_prop"
                                                                                                             ("f"
                                                                                                              "f!1"
                                                                                                              "P"
                                                                                                              "partition_2n(n!1)"))
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "<="
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 "x!1")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (hide-all-but
                                                                                                           (-1
                                                                                                            1))
                                                                                                          (("2"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (replace
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (case-replace
                                                                                                           "x!1 < a OR b < x!1")
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "lower_step_prop"
                                                                                                             ("f"
                                                                                                              "f!1"
                                                                                                              "P"
                                                                                                              "partition_2n(n!1)"))
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "<="
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 "x!1")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (hide-all-but
                                                                                                             (1
                                                                                                              2))
                                                                                                            (("2"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "bounded_below?")
                                              (("2"
                                                (expand "o" 1)
                                                (("2"
                                                  (inst
                                                   +
                                                   "-c!1 * (b - a)")
                                                  (("2"
                                                    (skolem + "n!1")
                                                    (("2"
                                                      (hide -3 -4)
                                                      (("2"
                                                        (lemma
                                                         "integral_ae_le"
                                                         ("f1"
                                                          "*[real](-c!1, phi(closed(a, b)))"
                                                          "f2"
                                                          "F(n!1)"))
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (hide-all-but
                                                             (-5 -6 1))
                                                            (("2"
                                                              (expand
                                                               "ae_le?")
                                                              (("2"
                                                                (expand
                                                                 "pointwise_ae?")
                                                                (("2"
                                                                  (expand
                                                                   "ae?")
                                                                  (("2"
                                                                    (expand
                                                                     "fullset")
                                                                    (("2"
                                                                      (expand
                                                                       "ae_in?")
                                                                      (("2"
                                                                        (inst
                                                                         +
                                                                         "emptyset[real]")
                                                                        (("2"
                                                                          (skosimp)
                                                                          (("2"
                                                                            (expand
                                                                             "*")
                                                                            (("2"
                                                                              (expand
                                                                               "phi")
                                                                              (("2"
                                                                                (expand
                                                                                 "member")
                                                                                (("2"
                                                                                  (typepred
                                                                                   "F(n!1)")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "step?")
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (hide
                                                                                         -1)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "zeroed?")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -
                                                                                             "x!1")
                                                                                            (("2"
                                                                                              (case-replace
                                                                                               "x!1 < a OR b < x!1")
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -2)
                                                                                                (("1"
                                                                                                  (hide-all-but
                                                                                                   (-1
                                                                                                    2))
                                                                                                  (("1"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (replace
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (case-replace
                                                                                                   "closed(a, b)(x!1)")
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     2)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "F")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "lower_step")
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (case-replace
                                                                                                               "(EXISTS (ii: below(length(partition_2n(n!1)) - 1)):
              x!1 = seq(partition_2n(n!1))(ii))
            OR x!1 = b")
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 "x!1")
                                                                                                                (("1"
                                                                                                                  (hide-all-but
                                                                                                                   (-2
                                                                                                                    2))
                                                                                                                  (("1"
                                                                                                                    (grind)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (replace
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (flatten)
                                                                                                                  (("2"
                                                                                                                    (typepred
                                                                                                                     "inf(image(f!1, part_set_of(partition_2n(n!1))(x!1)))")
                                                                                                                    (("2"
                                                                                                                      (name-replace
                                                                                                                       "INF"
                                                                                                                       "inf(image(f!1, part_set_of(partition_2n(n!1))(x!1)))")
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "greatest_lower_bound")
                                                                                                                        (("2"
                                                                                                                          (flatten)
                                                                                                                          (("2"
                                                                                                                            (inst
                                                                                                                             -
                                                                                                                             "-c!1")
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (hide
                                                                                                                                 -1)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "lower_bound")
                                                                                                                                  (("2"
                                                                                                                                    (skosimp)
                                                                                                                                    (("2"
                                                                                                                                      (typepred
                                                                                                                                       "z!1")
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "image")
                                                                                                                                        (("2"
                                                                                                                                          (skosimp)
                                                                                                                                          (("2"
                                                                                                                                            (replace
                                                                                                                                             -1)
                                                                                                                                            (("2"
                                                                                                                                              (inst
                                                                                                                                               -2
                                                                                                                                               "x!2")
                                                                                                                                              (("2"
                                                                                                                                                (hide-all-but
                                                                                                                                                 (-2
                                                                                                                                                  1))
                                                                                                                                                (("2"
                                                                                                                                                  (grind)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide-all-but
                                                                                                     (1
                                                                                                      2))
                                                                                                    (("2"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2 -2)
          (("2" (skolem + "n!1")
            (("2" (hide -1)
              (("2" (expand "F")
                (("2"
                  (lemma "riemann_lebesgue_step_integrable"
                   ("phi" "lower_step(f!1, partition_2n(n!1))"))
                  (("2" (flatten) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((monotone_convergence_complete formula-decl nil complete_integral
     "measure_integration/")
    (integrable? const-decl "bool" integral "measure_integration/")
    (integrable nonempty-type-eq-decl nil integral
     "measure_integration/")
    (sequence type-eq-decl nil sequences nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (sigma_algebra? const-decl "bool" subset_algebra_def
     "measure_integration/")
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     "measure_integration/")
    (cal_M const-decl "sigma_algebra" lebesgue_def nil)
    (nnreal type-eq-decl nil real_types nil)
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     "extended_nnreal/")
    (complete_sigma_finite? const-decl "bool" measure_def
     "measure_integration/")
    (complete_sigma_finite type-eq-decl nil measure_def
     "measure_integration/")
    (lambda_ const-decl "complete_sigma_finite[real, cal_M]"
     lebesgue_def nil)
    (bounded? const-decl "bool" sup_norm "measure_integration/")
    (integrable_phi_closed formula-decl nil lebesgue_def nil)
    (integrable_scal judgement-tcc nil integral "measure_integration/")
    (phi const-decl "nat" measure_space "measure_integration/")
    (closed? const-decl "bool" topology "topology/")
    (closed nonempty-type-eq-decl nil topology "topology/")
    (closed_ball const-decl "closed" real_topology "metric_space/")
    (closed_interval nonempty-type-eq-decl nil real_topology
     "metric_space/")
    (closed const-decl "closed_interval" real_topology "metric_space/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (O const-decl "T3" function_props nil)
    (closed_is_measurable application-judgement "measurable_set"
     lebesgue_def nil)
    (ae_le? const-decl "bool" measure_theory "measure_integration/")
    (subset_algebra_fullset name-judgement "(lebesgue_measurable)"
     real_lebesgue_scaf nil)
    (subset_algebra_fullset name-judgement "(induced_sigma_algebra)"
     real_lebesgue_scaf nil)
    (real_is_complete name-judgement "metric_complete" real_topology
     "metric_space/")
    (subset_algebra_fullset name-judgement "(cal_M)" lebesgue_def nil)
    (measurable_fullset name-judgement "measurable_set[real, cal_M]"
     lebesgue_def nil)
    (fullset_is_clopen name-judgement "clopen" convergence_aux
     "metric_space/")
    (ae? const-decl "bool" measure_theory "measure_integration/")
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (pointwise_ae? const-decl "bool" measure_theory
     "measure_integration/")
    (* const-decl "[T -> real]" real_fun_ops "reals/")
    (integral_ae_le formula-decl nil integral "measure_integration/")
    (riemann_lebesgue_step_integrable formula-decl nil riemann_scaf
     nil)
    (bounded_above? const-decl "bool" real_fun_preds "reals/")
    (pred type-eq-decl nil defined_types nil)
    (greatest_lower_bound const-decl "bool" bound_defs "reals/")
    (inf_set type-eq-decl nil bounded_reals "reals/")
    (nonempty? const-decl "bool" sets nil)
    (below_bounded const-decl "bool" bounded_reals "reals/")
    (inf const-decl "{x | greatest_lower_bound(<=)(x, Sl)}"
         bounded_reals "reals/")
    (image const-decl "set[R]" function_image nil)
    (part_set_of const-decl "(nonempty?[real])" riemann_scaf nil)
    (lower_bound const-decl "bool" bound_defs "reals/")
    (bounded_below? const-decl "bool" real_fun_preds "reals/")
    (bounded? const-decl "bool" real_fun_preds "reals/")
    (integral_scal formula-decl nil integral "measure_integration/")
    (integral_phi_closed formula-decl nil lebesgue_def nil)
    (ae_monotonic_converges? const-decl "bool" measure_theory
     "measure_integration/")
    (ae_increasing? const-decl "bool" measure_theory
     "measure_integration/")
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" countable_setofsets
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set" countable_props
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set[T]" step_fun_props
     "analysis/")
    (finite_emptyset name-judgement "finite_set" bounded_nats
     "orders/")
    (finite_emptyset name-judgement "finite_set" sigma_countable
     "sigma_set/")
    (subset_algebra_emptyset name-judgement "(S)" real_lebesgue_scaf
     nil)
    (subset_algebra_emptyset name-judgement "(S)" real_lebesgue_scaf
     nil)
    (outer_negligible_emptyset name-judgement "outer_negligible"
     real_lebesgue_scaf nil)
    (subset_algebra_emptyset name-judgement "(S)" lebesgue_def nil)
    (finite_emptyset name-judgement "finite_set[real]" integral_def
     "analysis/")
    (emptyset_is_clopen name-judgement "clopen" convergence_aux
     "metric_space/")
    (emptyset_is_compact name-judgement "compact" convergence_aux
     "metric_space/")
    (ae_convergence? const-decl "bool" measure_theory
     "measure_integration/")
    (ae_convergence_in? const-decl "bool" measure_theory
     "measure_integration/")
    (ae_continuous? const-decl "bool" ae_continuous_def nil)
    (null_set nonempty-type-eq-decl nil measure_theory
     "measure_integration/")
    (null_set? const-decl "bool" measure_theory "measure_integration/")
    (null_is_negligible judgement-tcc nil measure_theory
     "measure_integration/")
    (member const-decl "bool" sets nil)
    (metric_converges_to const-decl "bool" metric_space_def
     "metric_space/")
    (ball const-decl "set[T]" metric_space_def "metric_space/")
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (continuous_step formula-decl nil riemann_scaf nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (zeroed? const-decl "bool" riemann_scaf nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (lower_step_prop formula-decl nil riemann_scaf nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (<= const-decl "bool" real_fun_orders "reals/")
    (lower_refines formula-decl nil riemann_scaf nil)
    (partion_2n_refines formula-decl nil riemann_scaf nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (i!1 skolem-const-decl "nat" riemann_scaf nil)
    (metric_convergence_def formula-decl nil metric_space
     "metric_space/")
    (TRUE const-decl "bool" booleans nil)
    (F skolem-const-decl "[nat -> step]" riemann_scaf nil)
    (negligible nonempty-type-eq-decl nil measure_theory
     "measure_integration/")
    (f!1 skolem-const-decl "bounded" riemann_scaf nil)
    (continuous_at? const-decl "bool" continuity_def "topology/")
    (metric_induced_topology const-decl "setofsets[T]" metric_space_def
     "metric_space/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (negligible_set? const-decl "bool" measure_theory
     "measure_integration/")
    (set type-eq-decl nil sets nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (metric_space_is_hausdorff name-judgement "hausdorff"
     real_continuity "metric_space/")
    (metric_induced_topology_is_second_countable name-judgement
     "second_countable" real_topology "metric_space/")
    (metric_space_is_hausdorff name-judgement "hausdorff"
     convergence_aux "metric_space/")
    (ae_in? const-decl "bool" measure_theory "measure_integration/")
    (fullset const-decl "set" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (step? const-decl "bool" riemann_scaf nil)
    (step nonempty-type-eq-decl nil riemann_scaf nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (zeroed_bounded? const-decl "bool" riemann_scaf nil)
    (bounded nonempty-type-eq-decl nil riemann_scaf nil)
    (below type-eq-decl nil nat_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (a formal-const-decl "real" riemann_scaf nil)
    (< const-decl "bool" reals nil)
    (b formal-const-decl "{x: real | a < x}" riemann_scaf nil)
    (closed_interval type-eq-decl nil intervals_real "reals/")
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (partition type-eq-decl nil integral_def "analysis/")
    (lower_step const-decl "step" riemann_scaf nil)
    (partition_2n const-decl "partition(a, b)" riemann_scaf nil))
   shostak))
 (ae_continuity_implies_Integrable 0
  (ae_continuity_implies_Integrable-2 nil 3722371580
   ("" (skosimp)
    (("" (lemma "ae_continuity_implies_integrable" ("f" "f!1"))
      (("" (assert)
        ((""
          (lemma "riemann_sequence"
           ("f" "f!1" "Phi" "lower_step(f!1) o partition_2n" "Psi"
            "upper_step(f!1) o partition_2n"))
          (("1" (split -1)
            (("1" (skosimp) nil nil)
             ("2" (hide-all-but 1)
              (("2" (skosimp)
                (("2" (expand "o ")
                  (("2" (expand "lower_step")
                    (("2" (expand "upper_step")
                      (("2" (rewrite "lower_step_prop")
                        (("2" (rewrite "upper_step_prop") nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (hide 2)
              (("3" (expand "o ")
                (("3" (expand "-")
                  (("3" (expand "upper_step")
                    (("3" (expand "lower_step")
                      (("3"
                        (lemma "monotone_convergence_complete"
                         ("F"
                          "lambda n: upper_step(f!1, partition_2n(n))"
                          "h" "f!1"))
                        (("1" (split)
                          (("1" (flatten)
                            (("1"
                              (lemma "monotone_convergence_complete"
                               ("F"
                                "lambda n: lower_step(f!1, partition_2n(n))"
                                "h"
                                "f!1"))
                              (("1"
                                (split)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "monotonic_converges?")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (hide -3 -6)
                                        (("1"
                                          (expand "o")
                                          (("1"
                                            (hide -1 -3)
                                            (("1"
                                              (rewrite
                                               "metric_convergence_def")
                                              (("1"
                                                (rewrite
                                                 "metric_convergence_def")
                                                (("1"
                                                  (rewrite
                                                   "metric_convergence_def")
                                                  (("1"
                                                    (hide -3 -4)
                                                    (("1"
                                                      (expand
                                                       "metric_converges_to")
                                                      (("1"
                                                        (skosimp)
                                                        (("1"
                                                          (inst
                                                           -
                                                           "r!1/2")
                                                          (("1"
                                                            (inst
                                                             -
                                                             "r!1/2")
                                                            (("1"
                                                              (skosimp*)
                                                              (("1"
                                                                (inst
                                                                 +
                                                                 "n!1+n!2")
                                                                (("1"
                                                                  (skosimp)
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "i!1")
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "i!1")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "ball")
                                                                          (("1"
                                                                            (rewrite
                                                                             "abs_mult"
                                                                             1)
                                                                            (("1"
                                                                              (rewrite
                                                                               "integral_diff"
                                                                               1)
                                                                              (("1"
                                                                                (name-replace
                                                                                 "DRL1"
                                                                                 "integral.integral(lower_step(f!1, partition_2n(i!1)))")
                                                                                (("1"
                                                                                  (name-replace
                                                                                   "DRL2"
                                                                                   "integral.integral(upper_step(f!1, partition_2n(i!1)))")
                                                                                  (("1"
                                                                                    (name-replace
                                                                                     "DRL3"
                                                                                     "integral.integral(f!1)")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "abs")
                                                                                      (("1"
                                                                                        (grind-reals)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (skosimp)
                                                    (("2"
                                                      (rewrite
                                                       "integrable_diff"
                                                       1)
                                                      (("1"
                                                        (lemma
                                                         "riemann_lebesgue_step_integrable"
                                                         ("phi"
                                                          "lower_step(f!1, partition_2n(x!1))"))
                                                        (("1"
                                                          (flatten)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         "riemann_lebesgue_step_integrable"
                                                         ("phi"
                                                          "upper_step(f!1, partition_2n(x!1))"))
                                                        (("2"
                                                          (flatten)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (rewrite
                                                     "abs_of_sub_metric")
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (rewrite
                                                   "abs_of_sub_metric")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2 -2 -1)
                                  (("2"
                                    (expand "ae_monotonic_converges?")
                                    (("2"
                                      (split)
                                      (("1"
                                        (expand "ae_convergence?")
                                        (("1"
                                          (expand "fullset")
                                          (("1"
                                            (expand
                                             "ae_convergence_in?")
                                            (("1"
                                              (expand "ae_in?")
                                              (("1"
                                                (expand
                                                 "ae_continuous?")
                                                (("1"
                                                  (inst
                                                   +
                                                   "{x | a < x AND x < b AND NOT continuous_at?(f!1, x)}")
                                                  (("1"
                                                    (skosimp)
                                                    (("1"
                                                      (hide -2)
                                                      (("1"
                                                        (expand
                                                         "member")
                                                        (("1"
                                                          (typepred
                                                           "f!1")
                                                          (("1"
                                                            (expand
                                                             "zeroed_bounded?")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (hide
                                                                 -1)
                                                                (("1"
                                                                  (expand
                                                                   "zeroed?")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "x!1")
                                                                    (("1"
                                                                      (case-replace
                                                                       "a<x!1")
                                                                      (("1"
                                                                        (case-replace
                                                                         "x!1<b")
                                                                        (("1"
                                                                          (rewrite
                                                                           "metric_convergence_def")
                                                                          (("1"
                                                                            (expand
                                                                             "metric_converges_to")
                                                                            (("1"
                                                                              (skosimp)
                                                                              (("1"
                                                                                (expand
                                                                                 "ball")
                                                                                (("1"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (hide
                                                                                       -3)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "continuous_step"
                                                                                         ("f"
                                                                                          "f!1"
                                                                                          "x"
                                                                                          "x!1"
                                                                                          "epsilon"
                                                                                          "r!1/2"))
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (skosimp)
                                                                                            (("1"
                                                                                              (inst
                                                                                               +
                                                                                               "n!1")
                                                                                              (("1"
                                                                                                (skosimp)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "lower_step_prop"
                                                                                                   ("f"
                                                                                                    "f!1"
                                                                                                    "P"
                                                                                                    "partition_2n(i!1)"))
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "<="
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "x!1")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "abs")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "partion_2n_refines"
                                                                                                             ("n"
                                                                                                              "n!1"
                                                                                                              "m"
                                                                                                              "i!1"))
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (lemma
                                                                                                                 "lower_refines"
                                                                                                                 ("P2"
                                                                                                                  "partition_2n(i!1)"
                                                                                                                  "P1"
                                                                                                                  "partition_2n(n!1)"
                                                                                                                  "f"
                                                                                                                  "f!1"))
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "<="
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -
                                                                                                                       "x!1")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (rewrite
                                                                             "abs_of_sub_metric")
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (case-replace
                                                                           "x!1=b")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "lower_step")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (hide-all-but
                                                                                   3)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "metric_convergence_def")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "metric_converges_to")
                                                                                      (("1"
                                                                                        (skosimp)
                                                                                        (("1"
                                                                                          (inst
                                                                                           +
                                                                                           "0")
                                                                                          (("1"
                                                                                            (skosimp)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "ball")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "member")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "abs")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (rewrite
                                                                                       "abs_of_sub_metric")
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (replace
                                                                               -2)
                                                                              (("2"
                                                                                (expand
                                                                                 "lower_step")
                                                                                (("2"
                                                                                  (rewrite
                                                                                   "metric_convergence_def")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "metric_converges_to")
                                                                                    (("1"
                                                                                      (skosimp)
                                                                                      (("1"
                                                                                        (inst
                                                                                         +
                                                                                         "0")
                                                                                        (("1"
                                                                                          (skosimp)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "member")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "ball")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "abs")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (rewrite
                                                                                     "abs_of_sub_metric")
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (case-replace
                                                                           "x!1=a")
                                                                          (("1"
                                                                            (expand
                                                                             "lower_step")
                                                                            (("1"
                                                                              (rewrite
                                                                               "metric_convergence_def")
                                                                              (("1"
                                                                                (expand
                                                                                 "metric_converges_to")
                                                                                (("1"
                                                                                  (skosimp)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "member")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "ball")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "abs"
                                                                                         2
                                                                                         1)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -1
                                                                                           -2
                                                                                           -3
                                                                                           1)
                                                                                          (("1"
                                                                                            (inst
                                                                                             +
                                                                                             "0")
                                                                                            (("1"
                                                                                              (skosimp)
                                                                                              (("1"
                                                                                                (prop)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   +
                                                                                                   "0")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (skosimp)
                                                                                (("2"
                                                                                  (inst
                                                                                   +
                                                                                   "0")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (rewrite
                                                                                 "abs_of_sub_metric")
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (replace
                                                                               -1)
                                                                              (("2"
                                                                                (expand
                                                                                 "lower_step")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     "metric_convergence_def")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "metric_converges_to")
                                                                                      (("1"
                                                                                        (skosimp)
                                                                                        (("1"
                                                                                          (inst
                                                                                           +
                                                                                           "0")
                                                                                          (("1"
                                                                                            (skosimp)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "member")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "ball")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "abs")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (rewrite
                                                                                       "abs_of_sub_metric")
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (rewrite
                                                     "null_is_negligible")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (hide 2)
                                          (("2"
                                            (expand "ae_increasing?")
                                            (("2"
                                              (inst + "emptyset[real]")
                                              (("2"
                                                (skosimp)
                                                (("2"
                                                  (skosimp)
                                                  (("2"
                                                    (lemma
                                                     "partion_2n_refines"
                                                     ("n"
                                                      "i!1"
                                                      "m"
                                                      "j!1"))
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (lemma
                                                         "lower_refines"
                                                         ("f"
                                                          "f!1"
                                                          "P2"
                                                          "partition_2n(j!1)"
                                                          "P1"
                                                          "partition_2n(i!1)"))
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "<="
                                                             -1)
                                                            (("2"
                                                              (inst
                                                               -
                                                               "x!1")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (hide-all-but 1)
                                  (("3"
                                    (expand "o ")
                                    (("3"
                                      (expand "bounded?")
                                      (("3"
                                        (split)
                                        (("1"
                                          (expand "bounded_above?")
                                          (("1"
                                            (lemma
                                             "riemann_lebesgue_step_integrable"
                                             ("phi"
                                              "upper_step(f!1,partition_2n(0))"))
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (hide -1 -3)
                                                (("1"
                                                  (inst
                                                   +
                                                   "integral(upper_step(f!1, partition_2n(0)))")
                                                  (("1"
                                                    (skolem + "n!1")
                                                    (("1"
                                                      (lemma
                                                       "integral_ae_le"
                                                       ("f1"
                                                        "lower_step(f!1, partition_2n(n!1))"
                                                        "f2"
                                                        "upper_step(f!1, partition_2n(0))"))
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide-all-but
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "ae_le?")
                                                            (("1"
                                                              (expand
                                                               "pointwise_ae?")
                                                              (("1"
                                                                (expand
                                                                 "ae?")
                                                                (("1"
                                                                  (expand
                                                                   "fullset")
                                                                  (("1"
                                                                    (expand
                                                                     "ae_in?")
                                                                    (("1"
                                                                      (inst
                                                                       +
                                                                       " emptyset[real]")
                                                                      (("1"
                                                                        (skosimp)
                                                                        (("1"
                                                                          (lemma
                                                                           "lower_step_prop"
                                                                           ("f"
                                                                            "f!1"
                                                                            "P"
                                                                            "partition_2n(n!1)"))
                                                                          (("1"
                                                                            (lemma
                                                                             "upper_step_prop"
                                                                             ("f"
                                                                              "f!1"
                                                                              "P"
                                                                              "partition_2n(0)"))
                                                                            (("1"
                                                                              (expand
                                                                               "<="
                                                                               (-1
                                                                                -2))
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "x!1")
                                                                                (("1"
                                                                                  (inst
                                                                                   -
                                                                                   "x!1")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "bounded_below?")
                                          (("2"
                                            (lemma
                                             "riemann_lebesgue_step_integrable"
                                             ("phi"
                                              "lower_step(f!1, partition_2n(0))"))
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (hide -1 -3)
                                                (("2"
                                                  (inst
                                                   +
                                                   "integral(lower_step(f!1, partition_2n(0)))")
                                                  (("2"
                                                    (skolem + "n!1")
                                                    (("2"
                                                      (lemma
                                                       "partion_2n_refines"
                                                       ("n"
                                                        "0"
                                                        "m"
                                                        "n!1"))
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (lemma
                                                           "lower_refines"
                                                           ("f"
                                                            "f!1"
                                                            "P2"
                                                            "partition_2n(n!1)"
                                                            "P1"
                                                            "partition_2n(0)"))
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "<="
                                                               -1)
                                                              (("2"
                                                                (hide
                                                                 -2)
                                                                (("2"
                                                                  (lemma
                                                                   "integral_ae_le"
                                                                   ("f1"
                                                                    "lower_step(f!1, partition_2n(0))"
                                                                    "f2"
                                                                    "lower_step(f!1, partition_2n(n!1))"))
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (hide
                                                                       -2
                                                                       2)
                                                                      (("2"
                                                                        (expand
                                                                         "ae_le?")
                                                                        (("2"
                                                                          (expand
                                                                           "pointwise_ae?")
                                                                          (("2"
                                                                            (expand
                                                                             "ae?")
                                                                            (("2"
                                                                              (expand
                                                                               "fullset")
                                                                              (("2"
                                                                                (expand
                                                                                 "ae_in?")
                                                                                (("2"
                                                                                  (inst
                                                                                   +
                                                                                   "emptyset[real]")
                                                                                  (("2"
                                                                                    (skosimp)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -
                                                                                       "x!1")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "member")
                                                                                        (("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skosimp)
                                (("2"
                                  (lemma
                                   "riemann_lebesgue_step_integrable"
                                   ("phi"
                                    "lower_step(f!1, partition_2n(n!1))"))
                                  (("2" (flatten) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (expand "ae_monotonic_converges?")
                              (("2"
                                (split)
                                (("1"
                                  (expand "ae_convergence?")
                                  (("1"
                                    (expand "fullset")
                                    (("1"
                                      (expand "ae_convergence_in?")
                                      (("1"
                                        (expand "ae_in?")
                                        (("1"
                                          (expand "ae_continuous?")
                                          (("1"
                                            (inst
                                             +
                                             "{x | a < x AND x < b AND NOT continuous_at?(f!1, x)}")
                                            (("1"
                                              (skosimp)
                                              (("1"
                                                (typepred "f!1")
                                                (("1"
                                                  (expand
                                                   "zeroed_bounded?")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (hide -1 -3 -4)
                                                      (("1"
                                                        (expand
                                                         "zeroed?")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "x!1")
                                                          (("1"
                                                            (expand
                                                             "member")
                                                            (("1"
                                                              (case-replace
                                                               "a < x!1")
                                                              (("1"
                                                                (case-replace
                                                                 "x!1<b")
                                                                (("1"
                                                                  (rewrite
                                                                   "metric_convergence_def")
                                                                  (("1"
                                                                    (expand
                                                                     "metric_converges_to")
                                                                    (("1"
                                                                      (skosimp)
                                                                      (("1"
                                                                        (expand
                                                                         "member")
                                                                        (("1"
                                                                          (expand
                                                                           "ball")
                                                                          (("1"
                                                                            (lemma
                                                                             "continuous_step"
                                                                             ("f"
                                                                              "-f!1"
                                                                              "x"
                                                                              "x!1"
                                                                              "epsilon"
                                                                              "r!1/2"))
                                                                            (("1"
                                                                              (split
                                                                               -1)
                                                                              (("1"
                                                                                (skosimp)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "lower_step_neg"
                                                                                     ("f"
                                                                                      "f!1"
                                                                                      "P"
                                                                                      "partition_2n(n!1)"))
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("1"
                                                                                        (hide
                                                                                         -1)
                                                                                        (("1"
                                                                                          (inst
                                                                                           +
                                                                                           "n!1")
                                                                                          (("1"
                                                                                            (skosimp)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "partion_2n_refines"
                                                                                               ("n"
                                                                                                "n!1"
                                                                                                "m"
                                                                                                "i!1"))
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "upper_refines"
                                                                                                   ("P2"
                                                                                                    "partition_2n(i!1)"
                                                                                                    "P1"
                                                                                                    "partition_2n(n!1)"
                                                                                                    "f"
                                                                                                    "f!1"))
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "<="
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "x!1")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "-"
                                                                                                           -3)
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "upper_step_prop"
                                                                                                             ("f"
                                                                                                              "f!1"
                                                                                                              "P"
                                                                                                              "partition_2n(i!1)"))
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "<="
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 "x!1")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "abs"
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "<="
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (split
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 (-4
                                                                                  1))
                                                                                (("2"
                                                                                  (rewrite
                                                                                   "metric_continuous_at_def")
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     "metric_continuous_at_def")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "metric_continuous_at?")
                                                                                      (("1"
                                                                                        (skosimp)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "epsilon!1")
                                                                                          (("1"
                                                                                            (skosimp)
                                                                                            (("1"
                                                                                              (inst
                                                                                               +
                                                                                               "delta!1")
                                                                                              (("1"
                                                                                                (skosimp)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "x!2")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "member")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "-")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "ball")
                                                                                                          (("1"
                                                                                                            (hide
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "abs")
                                                                                                              (("1"
                                                                                                                (grind-reals)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (rewrite
                                                                                       "abs_of_sub_metric")
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (typepred
                                                                               "f!1")
                                                                              (("2"
                                                                                (hide-all-but
                                                                                 (-1
                                                                                  1))
                                                                                (("2"
                                                                                  (use
                                                                                   "zeroed_bounded_neg_fun")
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (rewrite
                                                                     "abs_of_sub_metric")
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (case-replace
                                                                   "x!1=b")
                                                                  (("1"
                                                                    (expand
                                                                     "upper_step")
                                                                    (("1"
                                                                      (hide-all-but
                                                                       3)
                                                                      (("1"
                                                                        (rewrite
                                                                         "metric_convergence_def")
                                                                        (("1"
                                                                          (expand
                                                                           "metric_converges_to")
                                                                          (("1"
                                                                            (skosimp)
                                                                            (("1"
                                                                              (inst
                                                                               +
                                                                               "0")
                                                                              (("1"
                                                                                (skosimp)
                                                                                (("1"
                                                                                  (expand
                                                                                   "ball")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "member")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "abs")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (rewrite
                                                                           "abs_of_sub_metric")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "upper_step")
                                                                      (("2"
                                                                        (replace
                                                                         -2)
                                                                        (("2"
                                                                          (rewrite
                                                                           "metric_convergence_def")
                                                                          (("1"
                                                                            (expand
                                                                             "metric_converges_to")
                                                                            (("1"
                                                                              (skosimp)
                                                                              (("1"
                                                                                (inst
                                                                                 +
                                                                                 "0")
                                                                                (("1"
                                                                                  (skosimp)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "member")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "ball")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "abs")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (rewrite
                                                                             "abs_of_sub_metric")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (case-replace
                                                                   "x!1=a")
                                                                  (("1"
                                                                    (expand
                                                                     "upper_step")
                                                                    (("1"
                                                                      (rewrite
                                                                       "metric_convergence_def")
                                                                      (("1"
                                                                        (expand
                                                                         "metric_converges_to")
                                                                        (("1"
                                                                          (skosimp)
                                                                          (("1"
                                                                            (expand
                                                                             "member")
                                                                            (("1"
                                                                              (expand
                                                                               "ball")
                                                                              (("1"
                                                                                (expand
                                                                                 "abs"
                                                                                 2
                                                                                 1)
                                                                                (("1"
                                                                                  (inst
                                                                                   +
                                                                                   "0")
                                                                                  (("1"
                                                                                    (skosimp)
                                                                                    (("1"
                                                                                      (prop)
                                                                                      (("1"
                                                                                        (inst
                                                                                         +
                                                                                         "0")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (inst
                                                                                         +
                                                                                         "0")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (skosimp)
                                                                        (("2"
                                                                          (inst
                                                                           +
                                                                           "0")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (rewrite
                                                                         "abs_of_sub_metric")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (replace
                                                                       -1)
                                                                      (("2"
                                                                        (expand
                                                                         "upper_step")
                                                                        (("2"
                                                                          (rewrite
                                                                           "metric_convergence_def")
                                                                          (("1"
                                                                            (expand
                                                                             "metric_converges_to")
                                                                            (("1"
                                                                              (skosimp)
                                                                              (("1"
                                                                                (inst
                                                                                 +
                                                                                 "0")
                                                                                (("1"
                                                                                  (skosimp)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "member")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "ball")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "abs")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (rewrite
                                                                             "abs_of_sub_metric")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (rewrite
                                               "null_is_negligible")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (hide -1 -2 1)
                                    (("2"
                                      (expand "ae_decreasing?")
                                      (("2"
                                        (inst + "emptyset[real]")
                                        (("2"
                                          (skosimp)
                                          (("2"
                                            (skosimp)
                                            (("2"
                                              (lemma
                                               "partion_2n_refines"
                                               ("n" "i!1" "m" "j!1"))
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (lemma
                                                   "upper_refines"
                                                   ("f"
                                                    "f!1"
                                                    "P2"
                                                    "partition_2n(j!1)"
                                                    "P1"
                                                    "partition_2n(i!1)"))
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand "<=" -1)
                                                      (("2"
                                                        (inst - "x!1")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide-all-but 1)
                            (("3" (expand "o ")
                              (("3"
                                (expand "bounded?")
                                (("3"
                                  (split)
                                  (("1"
                                    (expand "bounded_above?")
                                    (("1"
                                      (lemma
                                       "riemann_lebesgue_step_integrable"
                                       ("phi"
                                        "upper_step(f!1, partition_2n(0))"))
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (hide -1 -3)
                                          (("1"
                                            (inst
                                             +
                                             "integral(upper_step(f!1, partition_2n(0)))")
                                            (("1"
                                              (skolem + "n!1")
                                              (("1"
                                                (lemma
                                                 "integral_ae_le"
                                                 ("f1"
                                                  "upper_step(f!1, partition_2n(n!1))"
                                                  "f2"
                                                  "upper_step(f!1, partition_2n(0))"))
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide -1 2)
                                                    (("1"
                                                      (expand "ae_le?")
                                                      (("1"
                                                        (expand
                                                         "pointwise_ae?")
                                                        (("1"
                                                          (expand
                                                           "ae?")
                                                          (("1"
                                                            (expand
                                                             "fullset")
                                                            (("1"
                                                              (expand
                                                               "ae_in?")
                                                              (("1"
                                                                (inst
                                                                 +
                                                                 "emptyset[real]")
                                                                (("1"
                                                                  (skosimp)
                                                                  (("1"
                                                                    (lemma
                                                                     "partion_2n_refines"
                                                                     ("n"
                                                                      "0"
                                                                      "m"
                                                                      "n!1"))
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (lemma
                                                                         "upper_refines"
                                                                         ("f"
                                                                          "f!1"
                                                                          "P2"
                                                                          "partition_2n(n!1)"
                                                                          "P1"
                                                                          "partition_2n(0)"))
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "<="
                                                                             -1)
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "x!1")
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "bounded_below?")
                                    (("2"
                                      (lemma
                                       "riemann_lebesgue_step_integrable"
                                       ("phi"
                                        "lower_step(f!1, partition_2n(0))"))
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (inst
                                           +
                                           "integral(lower_step(f!1, partition_2n(0)))")
                                          (("2"
                                            (skolem + "n!1")
                                            (("2"
                                              (lemma
                                               "integral_ae_le"
                                               ("f1"
                                                "lower_step(f!1, partition_2n(0))"
                                                "f2"
                                                "upper_step(f!1, partition_2n(n!1))"))
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (expand "ae_le?")
                                                    (("2"
                                                      (expand
                                                       "pointwise_ae?")
                                                      (("2"
                                                        (expand "ae?")
                                                        (("2"
                                                          (expand
                                                           "fullset")
                                                          (("2"
                                                            (expand
                                                             "ae_in?")
                                                            (("2"
                                                              (inst
                                                               +
                                                               "emptyset[real]")
                                                              (("2"
                                                                (skosimp)
                                                                (("2"
                                                                  (lemma
                                                                   "lower_step_prop"
                                                                   ("f"
                                                                    "f!1"
                                                                    "P"
                                                                    "partition_2n(0)"))
                                                                  (("2"
                                                                    (lemma
                                                                     "upper_step_prop"
                                                                     ("f"
                                                                      "f!1"
                                                                      "P"
                                                                      "partition_2n(n!1)"))
                                                                    (("2"
                                                                      (expand
                                                                       "<="
                                                                       (-1
                                                                        -2))
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "x!1")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "x!1")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skosimp)
                          (("2"
                            (lemma "riemann_lebesgue_step_integrable"
                             ("phi"
                              "upper_step(f!1, partition_2n(n!1))"))
                            (("2" (flatten) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide-all-but 1)
            (("2" (expand "decreasing?")
              (("2" (expand "restrict")
                (("2" (expand "o")
                  (("2" (skolem + ("i!1" "j!1"))
                    (("2" (flatten)
                      (("2" (expand "upper_step")
                        (("2"
                          (lemma "partion_2n_refines"
                           ("n" "i!1" "m" "j!1"))
                          (("2" (assert)
                            (("2"
                              (lemma "upper_refines"
                               ("f"
                                "f!1"
                                "P2"
                                "partition_2n(j!1)"
                                "P1"
                                "partition_2n(i!1)"))
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (hide-all-but 1)
            (("3" (expand "increasing?")
              (("3" (expand "restrict")
                (("3" (expand "o")
                  (("3" (skolem + ("i!1" "j!1"))
                    (("3" (flatten)
                      (("3"
                        (lemma "lower_refines"
                         ("f" "f!1" "P2" "partition_2n(j!1)" "P1"
                          "partition_2n(i!1)"))
                        (("3"
                          (lemma "partion_2n_refines"
                           ("n" "i!1" "m" "j!1"))
                          (("3" (assert)
                            (("3" (assert)
                              (("3"
                                (expand "lower_step" 1)
                                (("3" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("4" (skosimp) (("4" (assert) nil nil)) nil)
           ("5" (skosimp) (("5" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lower_step_prop formula-decl nil riemann_scaf nil)
    (upper_step_prop formula-decl nil riemann_scaf nil)
    (lambda_ const-decl "complete_sigma_finite[real, cal_M]"
     lebesgue_def nil)
    (complete_sigma_finite type-eq-decl nil measure_def
     "measure_integration/")
    (complete_sigma_finite? const-decl "bool" measure_def
     "measure_integration/")
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     "extended_nnreal/")
    (nnreal type-eq-decl nil real_types nil)
    (cal_M const-decl "sigma_algebra" lebesgue_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     "measure_integration/")
    (sigma_algebra? const-decl "bool" subset_algebra_def
     "measure_integration/")
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (upper_step const-decl "step" riemann_scaf nil)
    (sequence type-eq-decl nil sequences nil)
    (integrable nonempty-type-eq-decl nil integral
     "measure_integration/")
    (integrable? const-decl "bool" integral "measure_integration/")
    (monotone_convergence_complete formula-decl nil complete_integral
     "measure_integration/")
    (n!1 skolem-const-decl "nat" riemann_scaf nil)
    (i!1 skolem-const-decl "nat" riemann_scaf nil)
    (sup_set type-eq-decl nil bounded_reals "reals/")
    (least_upper_bound const-decl "bool" bound_defs "reals/")
    (above_bounded const-decl "bool" bounded_reals "reals/")
    (sup const-decl "{x | least_upper_bound(<=)(x, Su)}" bounded_reals
         "reals/")
    (bounded_opp application-judgement "bounded" riemann_scaf nil)
    (- const-decl "[T -> real]" real_fun_ops "reals/")
    (metric_continuous_at? const-decl "bool" metric_continuity
     "metric_space/")
    (metric_continuous_at_def formula-decl nil metric_continuity
     "metric_space/")
    (lower_step_neg formula-decl nil riemann_scaf nil)
    (simple_neg application-judgement "simple" lebesgue_def nil)
    (upper_refines formula-decl nil riemann_scaf nil)
    (zeroed_bounded_neg_fun formula-decl nil riemann_scaf nil)
    (ae_decreasing? const-decl "bool" measure_theory
     "measure_integration/")
    (monotonic_converges? const-decl "bool" convergence_aux
     "metric_space/")
    (metric? const-decl "bool" metric_def "metric_space/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (abs_of_sub_metric formula-decl nil riemann_scaf nil)
    (riemann_lebesgue_step_integrable formula-decl nil riemann_scaf
     nil)
    (integrable_diff judgement-tcc nil integral "measure_integration/")
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (ball_is_metric_open application-judgement "metric_open"
     convergence_aux "metric_space/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (member const-decl "bool" sets nil)
    (abs_mult formula-decl nil real_props nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (neg_times_neg formula-decl nil real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (integral_diff formula-decl nil integral "measure_integration/")
    (ball const-decl "set[T]" metric_space_def "metric_space/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (metric_converges_to const-decl "bool" metric_space_def
     "metric_space/")
    (simple_diff application-judgement "simple" lebesgue_def nil)
    (- const-decl "[T -> real]" real_fun_ops "reals/")
    (metric_convergence_def formula-decl nil metric_space
     "metric_space/")
    (integral const-decl "real" integral "measure_integration/")
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (ae_monotonic_converges? const-decl "bool" measure_theory
     "measure_integration/")
    (ae_increasing? const-decl "bool" measure_theory
     "measure_integration/")
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" countable_setofsets
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set" countable_props
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set[T]" step_fun_props
     "analysis/")
    (finite_emptyset name-judgement "finite_set" bounded_nats
     "orders/")
    (finite_emptyset name-judgement "finite_set" sigma_countable
     "sigma_set/")
    (subset_algebra_emptyset name-judgement "(S)" real_lebesgue_scaf
     nil)
    (subset_algebra_emptyset name-judgement "(S)" real_lebesgue_scaf
     nil)
    (outer_negligible_emptyset name-judgement "outer_negligible"
     real_lebesgue_scaf nil)
    (subset_algebra_emptyset name-judgement "(S)" lebesgue_def nil)
    (finite_emptyset name-judgement "finite_set[real]" integral_def
     "analysis/")
    (emptyset_is_clopen name-judgement "clopen" convergence_aux
     "metric_space/")
    (emptyset_is_compact name-judgement "compact" convergence_aux
     "metric_space/")
    (ae_convergence? const-decl "bool" measure_theory
     "measure_integration/")
    (ae_convergence_in? const-decl "bool" measure_theory
     "measure_integration/")
    (ae_continuous? const-decl "bool" ae_continuous_def nil)
    (null_set nonempty-type-eq-decl nil measure_theory
     "measure_integration/")
    (null_set? const-decl "bool" measure_theory "measure_integration/")
    (null_is_negligible judgement-tcc nil measure_theory
     "measure_integration/")
    (TRUE const-decl "bool" booleans nil)
    (n!1 skolem-const-decl "nat" riemann_scaf nil)
    (i!1 skolem-const-decl "nat" riemann_scaf nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (inf_set type-eq-decl nil bounded_reals "reals/")
    (pred type-eq-decl nil defined_types nil)
    (greatest_lower_bound const-decl "bool" bound_defs "reals/")
    (nonempty? const-decl "bool" sets nil)
    (below_bounded const-decl "bool" bounded_reals "reals/")
    (inf const-decl "{x | greatest_lower_bound(<=)(x, Sl)}"
         bounded_reals "reals/")
    (image const-decl "set[R]" function_image nil)
    (part_set_of const-decl "(nonempty?[real])" riemann_scaf nil)
    (continuous_step formula-decl nil riemann_scaf nil)
    (partion_2n_refines formula-decl nil riemann_scaf nil)
    (lower_refines formula-decl nil riemann_scaf nil)
    (zeroed? const-decl "bool" riemann_scaf nil)
    (negligible nonempty-type-eq-decl nil measure_theory
     "measure_integration/")
    (f!1 skolem-const-decl "bounded" riemann_scaf nil)
    (continuous_at? const-decl "bool" continuity_def "topology/")
    (metric_induced_topology const-decl "setofsets[T]" metric_space_def
     "metric_space/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (negligible_set? const-decl "bool" measure_theory
     "measure_integration/")
    (set type-eq-decl nil sets nil)
    (metric_space_is_hausdorff name-judgement "hausdorff"
     real_continuity "metric_space/")
    (metric_induced_topology_is_second_countable name-judgement
     "second_countable" real_topology "metric_space/")
    (metric_space_is_hausdorff name-judgement "hausdorff"
     convergence_aux "metric_space/")
    (ae_in? const-decl "bool" measure_theory "measure_integration/")
    (fullset const-decl "set" sets nil)
    (ae_le? const-decl "bool" measure_theory "measure_integration/")
    (subset_algebra_fullset name-judgement "(lebesgue_measurable)"
     real_lebesgue_scaf nil)
    (subset_algebra_fullset name-judgement "(induced_sigma_algebra)"
     real_lebesgue_scaf nil)
    (real_is_complete name-judgement "metric_complete" real_topology
     "metric_space/")
    (subset_algebra_fullset name-judgement "(cal_M)" lebesgue_def nil)
    (measurable_fullset name-judgement "measurable_set[real, cal_M]"
     lebesgue_def nil)
    (fullset_is_clopen name-judgement "clopen" convergence_aux
     "metric_space/")
    (ae? const-decl "bool" measure_theory "measure_integration/")
    (pointwise_ae? const-decl "bool" measure_theory
     "measure_integration/")
    (integral_ae_le formula-decl nil integral "measure_integration/")
    (bounded_above? const-decl "bool" real_fun_preds "reals/")
    (bounded_below? const-decl "bool" real_fun_preds "reals/")
    (bounded? const-decl "bool" real_fun_preds "reals/")
    (lower_step const-decl "step" riemann_scaf nil)
    (- const-decl "sequence[[T -> real]]" pointwise_convergence
       "measure_integration/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (riemann_sequence formula-decl nil riemann_scaf nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (step? const-decl "bool" riemann_scaf nil)
    (step nonempty-type-eq-decl nil riemann_scaf nil)
    (restrict const-decl "R" restrict nil)
    (<= const-decl "bool" reals nil)
    (<= const-decl "bool" real_fun_orders "reals/")
    (increasing? const-decl "bool" fun_preds_partial "structures/")
    (below type-eq-decl nil nat_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (a formal-const-decl "real" riemann_scaf nil)
    (< const-decl "bool" reals nil)
    (b formal-const-decl "{x: real | a < x}" riemann_scaf nil)
    (closed_interval type-eq-decl nil intervals_real "reals/")
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (partition type-eq-decl nil integral_def "analysis/")
    (O const-decl "T3" function_props nil)
    (lower_step const-decl "step" riemann_scaf nil)
    (partition_2n const-decl "partition(a, b)" riemann_scaf nil)
    (decreasing? const-decl "bool" fun_preds_partial "structures/")
    (upper_step const-decl "step" riemann_scaf nil)
    (ae_continuity_implies_integrable formula-decl nil riemann_scaf
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (zeroed_bounded? const-decl "bool" riemann_scaf nil)
    (bounded nonempty-type-eq-decl nil riemann_scaf nil))
   nil))
 (Integrable_implies_ae_continuity 0
  (Integrable_implies_ae_continuity-1 nil 3451876651
   ("" (skosimp)
    (("" (rewrite "riemann_integrable_def1")
      (("" (lemma "lower_limit_integrable" ("f" "f!1"))
        (("" (lemma "upper_limit_integrable" ("f" "f!1"))
          (("" (flatten)
            ((""
              (lemma "integral_abs_0"
               ("f" "upper_limit(f!1)-lower_limit(f!1)"))
              (("1" (split -1)
                (("1" (hide-all-but (-1 1))
                  (("1" (expand "ae_0?")
                    (("1" (expand "restrict")
                      (("1" (expand "ae_continuous?")
                        (("1" (expand "pointwise_ae?")
                          (("1" (expand "ae?")
                            (("1" (expand "fullset")
                              (("1"
                                (expand "ae_in?")
                                (("1"
                                  (skosimp)
                                  (("1"
                                    (typepred "E!1")
                                    (("1"
                                      (lemma
                                       "null_is_negligible"
                                       ("X" "E!1"))
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide -2)
                                          (("1"
                                            (lemma
                                             "countable_is_null"
                                             ("x"
                                              "partition_2n_exterior"))
                                            (("1"
                                              (lemma
                                               "null_union"
                                               ("N1"
                                                "E!1"
                                                "N2"
                                                "partition_2n_exterior"))
                                              (("1"
                                                (hide -2 -3)
                                                (("1"
                                                  (lemma
                                                   "null_subset"
                                                   ("N"
                                                    "union[real](E!1, partition_2n_exterior)"
                                                    "X"
                                                    "{x | a < x AND x < b AND NOT continuous_at?(f!1, x)}"))
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (hide -1 2)
                                                      (("1"
                                                        (expand
                                                         "subset?")
                                                        (("1"
                                                          (expand
                                                           "member")
                                                          (("1"
                                                            (skosimp)
                                                            (("1"
                                                              (expand
                                                               "union")
                                                              (("1"
                                                                (expand
                                                                 "member")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (lemma
                                                                     "partition_2n_ext_int_disjoint")
                                                                    (("1"
                                                                      (expand
                                                                       "disjoint?")
                                                                      (("1"
                                                                        (expand
                                                                         "empty?")
                                                                        (("1"
                                                                          (expand
                                                                           "intersection")
                                                                          (("1"
                                                                            (expand
                                                                             "member")
                                                                            (("1"
                                                                              (case
                                                                               "partition_2n_interior(x!1)")
                                                                              (("1"
                                                                                (hide
                                                                                 3)
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "continuous_at_prop"
                                                                                   1)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -5
                                                                                     "x!1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "-")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 (1
                                                                                  4
                                                                                  -2
                                                                                  -3))
                                                                                (("2"
                                                                                  (expand
                                                                                   "partition_2n_interior")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "partition_2n_exterior")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (propax) nil nil))
                                              nil)
                                             ("2"
                                              (rewrite
                                               "countable_2n_exterior")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2"
                  (case-replace
                   "abs(upper_limit(f!1) - lower_limit(f!1))=upper_limit(f!1) - lower_limit(f!1)")
                  (("1" (hide -1)
                    (("1" (rewrite "integral_diff")
                      (("1" (assert) nil nil)) nil))
                    nil)
                   ("2" (hide-all-but 1)
                    (("2" (apply-extensionality :hide? t)
                      (("1" (expand "abs" 1)
                        (("1" (expand "-" 1)
                          (("1"
                            (lemma "lower_limit_prop"
                             ("f" "f!1" "x" "x!1"))
                            (("1" (inst - "0")
                              (("1"
                                (flatten)
                                (("1"
                                  (lemma
                                   "upper_limit_prop"
                                   ("f" "f!1" "x" "x!1" "n" "0"))
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "abs")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skosimp)
                        (("2" (expand "-")
                          (("2"
                            (lemma "upper_limit_prop"
                             ("f" "f!1" "x" "x1!1" "n" "0"))
                            (("2"
                              (lemma "lower_limit_prop"
                               ("f" "f!1" "x" "x1!1" "n" "0"))
                              (("2"
                                (flatten)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (rewrite "integrable_diff" 1) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((riemann_integrable_def1 formula-decl nil riemann_scaf nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (zeroed_bounded? const-decl "bool" riemann_scaf nil)
    (bounded nonempty-type-eq-decl nil riemann_scaf nil)
    (upper_limit_integrable formula-decl nil riemann_scaf nil)
    (lambda_ const-decl "complete_sigma_finite[real, cal_M]"
     lebesgue_def nil)
    (complete_sigma_finite type-eq-decl nil measure_def
     "measure_integration/")
    (complete_sigma_finite? const-decl "bool" measure_def
     "measure_integration/")
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     "extended_nnreal/")
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (cal_M const-decl "sigma_algebra" lebesgue_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     "measure_integration/")
    (sigma_algebra? const-decl "bool" subset_algebra_def
     "measure_integration/")
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (lower_limit const-decl "real" riemann_scaf nil)
    (upper_limit const-decl "real" riemann_scaf nil)
    (integrable nonempty-type-eq-decl nil integral
     "measure_integration/")
    (integrable? const-decl "bool" integral "measure_integration/")
    (integral_abs_0 formula-decl nil integral "measure_integration/")
    (abs const-decl "[T -> nonneg_real]" real_fun_ops "reals/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (integral_diff formula-decl nil integral "measure_integration/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (upper_limit_prop formula-decl nil riemann_scaf nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (lower_limit_prop formula-decl nil riemann_scaf nil)
    (restrict const-decl "R" restrict nil)
    (pointwise_ae? const-decl "bool" measure_theory
     "measure_integration/")
    (fullset const-decl "set" sets nil)
    (null_is_negligible formula-decl nil complete_measure_theory
     "measure_integration/")
    (countable_2n_exterior formula-decl nil riemann_scaf nil)
    (null_union judgement-tcc nil measure_theory
     "measure_integration/")
    (null_set? const-decl "bool" measure_theory "measure_integration/")
    (null_set nonempty-type-eq-decl nil measure_theory
     "measure_integration/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (metric_induced_topology_is_second_countable name-judgement
     "second_countable" real_topology "metric_space/")
    (null_subset formula-decl nil complete_measure_theory
     "measure_integration/")
    (union const-decl "set" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (a formal-const-decl "real" riemann_scaf nil)
    (b formal-const-decl "{x: real | a < x}" riemann_scaf nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (metric_induced_topology const-decl "setofsets[T]" metric_space_def
     "metric_space/")
    (continuous_at? const-decl "bool" continuity_def "topology/")
    (disjoint? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (partition_2n_interior const-decl "set[real]" riemann_scaf nil)
    (continuous_at_prop formula-decl nil riemann_scaf nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (empty? const-decl "bool" sets nil)
    (partition_2n_ext_int_disjoint formula-decl nil riemann_scaf nil)
    (subset? const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (partition_2n_exterior const-decl "set[real]" riemann_scaf nil)
    (countable_set nonempty-type-eq-decl nil countability "sets_aux/")
    (is_countable const-decl "bool" countability "sets_aux/")
    (countable_is_null judgement-tcc nil lebesgue_def nil)
    (member const-decl "bool" sets nil)
    (negligible nonempty-type-eq-decl nil measure_theory
     "measure_integration/")
    (negligible_set? const-decl "bool" measure_theory
     "measure_integration/")
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ae_in? const-decl "bool" measure_theory "measure_integration/")
    (ae_continuous? const-decl "bool" ae_continuous_def nil)
    (ae_0? const-decl "bool" measure_theory "measure_integration/")
    (integrable_diff judgement-tcc nil integral "measure_integration/")
    (lower_limit_integrable formula-decl nil riemann_scaf nil))
   shostak))
 (ae_continuity_implies_integrals_TCC1 0
  (ae_continuity_implies_integrals_TCC1-1 nil 3451800769
   ("" (skosimp)
    (("" (rewrite "ae_continuity_implies_integrable") nil nil)) nil)
   ((ae_continuity_implies_integrable formula-decl nil riemann_scaf
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (zeroed_bounded? const-decl "bool" riemann_scaf nil)
    (bounded nonempty-type-eq-decl nil riemann_scaf nil))
   nil
   (ae_continuity_implies_integrals subtype "riemann_scaf.f"
    "integrable[real, cal_M, lambda_]")))
 (ae_continuity_implies_integrals_TCC2 0
  (ae_continuity_implies_integrals_TCC2-1 nil 3451800769
   ("" (skosimp)
    (("" (rewrite "ae_continuity_implies_Integrable") nil nil)) nil)
   ((ae_continuity_implies_Integrable formula-decl nil riemann_scaf
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (zeroed_bounded? const-decl "bool" riemann_scaf nil)
    (bounded nonempty-type-eq-decl nil riemann_scaf nil))
   nil
   (ae_continuity_implies_integrals subtype "riemann_scaf.f"
    "integral_def[real].Integrable_funs(riemann_scaf.a, riemann_scaf.b)")))
 (ae_continuity_implies_integrals 0
  (ae_continuity_implies_integrals-3 nil 3722371796
   ("" (skosimp)
    (("" (lemma "ae_continuity_implies_integrable" ("f" "f!1"))
      (("" (assert)
        (("" (lemma "ae_continuity_implies_Integrable" ("f" "f!1"))
          (("" (assert)
            (("" (lemma "riemann_integrable_def2" ("f" "f!1"))
              (("" (assert)
                (("" (replace -1)
                  (("" (rewrite "riemann_integrable_def1")
                    (("" (hide -1)
                      ((""
                        (lemma "darboux"
                         ("f" "f!1" "PS" "partition_2n"))
                        ((""
                          (name "LIMIT" "lower_riemann_integral(f!1)")
                          (("" (replace -1 1)
                            ((""
                              (case-replace
                               "convergence?(part_norm o partition_2n, 0)")
                              (("1"
                                (flatten)
                                (("1"
                                  (lemma
                                   "monotone_convergence_complete"
                                   ("F"
                                    "lower_step(f!1) o partition_2n"
                                    "h"
                                    "f!1"))
                                  (("1"
                                    (split -1)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (expand "monotonic_converges?")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (hide -3)
                                            (("1"
                                              (expand "o" (-2 -5))
                                              (("1"
                                                (lemma
                                                 "hausdorff_convergence.unique_limit"
                                                 ("u"
                                                  "LAMBDA (x_1: nat):
                                       integral.integral(lower_step(f!1)(partition_2n(x_1)))"
                                                  "l1"
                                                  "integral.integral(f!1)"
                                                  "l2"
                                                  "LIMIT"))
                                                (("1"
                                                  (replace -3)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skolem + "n!1")
                                                  (("2"
                                                    (expand
                                                     "lower_step")
                                                    (("2"
                                                      (lemma
                                                       "riemann_lebesgue_step_integrable"
                                                       ("phi"
                                                        "lower_step(f!1, partition_2n(n!1))"))
                                                      (("2"
                                                        (flatten)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2 -4)
                                      (("2"
                                        (expand
                                         "ae_monotonic_converges?")
                                        (("2"
                                          (expand "o ")
                                          (("2"
                                            (expand "lower_step")
                                            (("2"
                                              (split)
                                              (("1"
                                                (expand
                                                 "ae_convergence?")
                                                (("1"
                                                  (expand "fullset")
                                                  (("1"
                                                    (expand
                                                     "ae_convergence_in?")
                                                    (("1"
                                                      (expand "ae_in?")
                                                      (("1"
                                                        (hide
                                                         -1
                                                         -2
                                                         -3
                                                         -4
                                                         -5)
                                                        (("1"
                                                          (expand
                                                           "ae_continuous?")
                                                          (("1"
                                                            (inst
                                                             +
                                                             "{x | a < x AND x < b AND NOT continuous_at?(f!1, x)}")
                                                            (("1"
                                                              (skosimp)
                                                              (("1"
                                                                (hide
                                                                 -1)
                                                                (("1"
                                                                  (typepred
                                                                   "f!1")
                                                                  (("1"
                                                                    (expand
                                                                     "zeroed_bounded?")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (hide
                                                                         -1)
                                                                        (("1"
                                                                          (expand
                                                                           "zeroed?")
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "x!1")
                                                                            (("1"
                                                                              (expand
                                                                               "member")
                                                                              (("1"
                                                                                (case-replace
                                                                                 "a<x!1")
                                                                                (("1"
                                                                                  (case-replace
                                                                                   "x!1<b")
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "metric_convergence_def")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "metric_converges_to")
                                                                                      (("1"
                                                                                        (skosimp)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "member")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "ball")
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "continuous_step"
                                                                                               ("f"
                                                                                                "f!1"
                                                                                                "x"
                                                                                                "x!1"
                                                                                                "epsilon"
                                                                                                "r!1/2"))
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (skosimp)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     +
                                                                                                     "n!1")
                                                                                                    (("1"
                                                                                                      (skosimp)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "lower_step_prop"
                                                                                                         ("f"
                                                                                                          "f!1"
                                                                                                          "P"
                                                                                                          "partition_2n(i!1)"))
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "<="
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "x!1")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "abs"
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "partion_2n_refines"
                                                                                                                   ("n"
                                                                                                                    "n!1"
                                                                                                                    "m"
                                                                                                                    "i!1"))
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (lemma
                                                                                                                       "lower_refines"
                                                                                                                       ("P2"
                                                                                                                        "partition_2n(i!1)"
                                                                                                                        "P1"
                                                                                                                        "partition_2n(n!1)"
                                                                                                                        "f"
                                                                                                                        "f!1"))
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "<="
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             -
                                                                                                                             "x!1")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (case-replace
                                                                                       "x!1=b")
                                                                                      (("1"
                                                                                        (hide
                                                                                         -1
                                                                                         -3
                                                                                         1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "lower_step")
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "metric_convergence_def")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "metric_converges_to")
                                                                                              (("1"
                                                                                                (skosimp)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   +
                                                                                                   "0")
                                                                                                  (("1"
                                                                                                    (skosimp)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "member")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "ball")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "abs")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (rewrite
                                                                                               "abs_of_sub_metric")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (replace
                                                                                           -2)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "lower_step")
                                                                                            (("2"
                                                                                              (rewrite
                                                                                               "metric_convergence_def")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "metric_converges_to")
                                                                                                (("1"
                                                                                                  (skosimp)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     +
                                                                                                     "0")
                                                                                                    (("1"
                                                                                                      (skosimp)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "member")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "ball")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (rewrite
                                                                                                 "abs_of_sub_metric")
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (case-replace
                                                                                     "x!1=a")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "lower_step")
                                                                                      (("1"
                                                                                        (hide-all-but
                                                                                         2)
                                                                                        (("1"
                                                                                          (case-replace
                                                                                           "(LAMBDA n:
                                                     IF EXISTS (ii: below(length(partition_2n(n)) - 1)):
                                                          a = seq(partition_2n(n))(ii)
                                                       THEN f!1(a)
                                                     ELSE inf(image(f!1,
                                                                    part_set_of
                                                                    (partition_2n(n))(a))) ENDIF) = lambda n: f!1(a)")
                                                                                          (("1"
                                                                                            (hide
                                                                                             -1)
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "metric_convergence_def")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "metric_converges_to")
                                                                                                (("1"
                                                                                                  (skosimp)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     +
                                                                                                     "0")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (skosimp)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "ball")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "abs")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (rewrite
                                                                                                 "abs_of_sub_metric")
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (apply-extensionality
                                                                                             :hide?
                                                                                             t)
                                                                                            (("1"
                                                                                              (lift-if
                                                                                               1)
                                                                                              (("1"
                                                                                                (case-replace
                                                                                                 "EXISTS (ii: below(length(partition_2n(x!2)) - 1)):
                                                   a = seq(partition_2n(x!2))(ii)")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   +
                                                                                                   "0")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (skosimp)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 +
                                                                                                 "0")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (skosimp)
                                                                                            (("3"
                                                                                              (inst
                                                                                               +
                                                                                               "0")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "lower_step")
                                                                                          (("2"
                                                                                            (rewrite
                                                                                             "metric_convergence_def")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "metric_converges_to")
                                                                                              (("1"
                                                                                                (skosimp)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   +
                                                                                                   " 0")
                                                                                                  (("1"
                                                                                                    (skosimp)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "member")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "ball")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "abs")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (rewrite
                                                                                               "abs_of_sub_metric")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (rewrite
                                                               "null_is_negligible")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (hide 2)
                                                  (("2"
                                                    (expand
                                                     "ae_increasing?")
                                                    (("2"
                                                      (inst
                                                       +
                                                       "emptyset[real]")
                                                      (("2"
                                                        (skosimp)
                                                        (("2"
                                                          (hide 1)
                                                          (("2"
                                                            (skosimp)
                                                            (("2"
                                                              (hide-all-but
                                                               (-1 1))
                                                              (("2"
                                                                (lemma
                                                                 "partion_2n_refines"
                                                                 ("n"
                                                                  "i!1"
                                                                  "m"
                                                                  "j!1"))
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (lemma
                                                                     "lower_refines"
                                                                     ("f"
                                                                      "f!1"
                                                                      "P2"
                                                                      "partition_2n(j!1)"
                                                                      "P1"
                                                                      "partition_2n(i!1)"))
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "<="
                                                                         -1)
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "x!1")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (hide-all-but 1)
                                      (("3"
                                        (expand "o ")
                                        (("3"
                                          (expand "lower_step")
                                          (("3"
                                            (expand "bounded?")
                                            (("3"
                                              (split)
                                              (("1"
                                                (expand
                                                 "bounded_above?")
                                                (("1"
                                                  (lemma
                                                   "riemann_lebesgue_step_integrable"
                                                   ("phi"
                                                    "upper_step(f!1, partition_2n(0))"))
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (hide -1 -3)
                                                      (("1"
                                                        (lemma
                                                         "upper_step_prop"
                                                         ("f"
                                                          "f!1"
                                                          "P"
                                                          "partition_2n(0)"))
                                                        (("1"
                                                          (inst
                                                           +
                                                           "integral(upper_step(f!1, partition_2n(0)))")
                                                          (("1"
                                                            (skolem
                                                             +
                                                             "n!1")
                                                            (("1"
                                                              (lemma
                                                               "lower_step_prop"
                                                               ("f"
                                                                "f!1"
                                                                "P"
                                                                "partition_2n(n!1)"))
                                                              (("1"
                                                                (lemma
                                                                 "integral_ae_le"
                                                                 ("f1"
                                                                  "lower_step(f!1, partition_2n(n!1))"
                                                                  "f2"
                                                                  "upper_step(f!1, partition_2n(0))"))
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (hide
                                                                     2
                                                                     -3)
                                                                    (("1"
                                                                      (expand
                                                                       "ae_le?")
                                                                      (("1"
                                                                        (expand
                                                                         "pointwise_ae?")
                                                                        (("1"
                                                                          (expand
                                                                           "ae?")
                                                                          (("1"
                                                                            (expand
                                                                             "fullset")
                                                                            (("1"
                                                                              (expand
                                                                               "ae_in?")
                                                                              (("1"
                                                                                (inst
                                                                                 +
                                                                                 "emptyset[real]")
                                                                                (("1"
                                                                                  (skosimp)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "<="
                                                                                     (-1
                                                                                      -2))
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "x!1")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "x!1")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand
                                                 "bounded_below?")
                                                (("2"
                                                  (lemma
                                                   "lower_step_prop"
                                                   ("f"
                                                    "f!1"
                                                    "P"
                                                    "partition_2n(0)"))
                                                  (("2"
                                                    (lemma
                                                     "riemann_lebesgue_step_integrable"
                                                     ("phi"
                                                      "lower_step(f!1, partition_2n(0))"))
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (hide -1 -3)
                                                        (("2"
                                                          (inst
                                                           +
                                                           "integral(lower_step(f!1, partition_2n(0)))")
                                                          (("2"
                                                            (skolem
                                                             +
                                                             "n!1")
                                                            (("2"
                                                              (lemma
                                                               "upper_step_prop"
                                                               ("f"
                                                                "f!1"
                                                                "P"
                                                                "partition_2n(n!1)"))
                                                              (("2"
                                                                (expand
                                                                 "<="
                                                                 (-1
                                                                  -3))
                                                                (("2"
                                                                  (lemma
                                                                   "integral_ae_le"
                                                                   ("f1"
                                                                    "lower_step(f!1, partition_2n(0))"
                                                                    "f2"
                                                                    "lower_step(f!1, partition_2n(n!1))"))
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (hide
                                                                       2
                                                                       -2)
                                                                      (("2"
                                                                        (expand
                                                                         "ae_le?")
                                                                        (("2"
                                                                          (expand
                                                                           "pointwise_ae?")
                                                                          (("2"
                                                                            (expand
                                                                             "ae?")
                                                                            (("2"
                                                                              (expand
                                                                               "fullset")
                                                                              (("2"
                                                                                (expand
                                                                                 "ae_in?")
                                                                                (("2"
                                                                                  (inst
                                                                                   +
                                                                                   "emptyset[real]")
                                                                                  (("2"
                                                                                    (skosimp)
                                                                                    (("2"
                                                                                      (hide
                                                                                       -1
                                                                                       -2)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "partion_2n_refines"
                                                                                         ("n"
                                                                                          "0"
                                                                                          "m"
                                                                                          "n!1"))
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (lemma
                                                                                             "lower_refines"
                                                                                             ("f"
                                                                                              "f!1"
                                                                                              "P2"
                                                                                              "partition_2n(n!1)"
                                                                                              "P1"
                                                                                              "partition_2n(0)"))
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "<="
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "x!1")
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (skolem + "n!1")
                                      (("2"
                                        (expand "o")
                                        (("2"
                                          (expand "lower_step" 1)
                                          (("2"
                                            (lemma
                                             "riemann_lebesgue_step_integrable"
                                             ("phi"
                                              "lower_step(f!1, partition_2n(n!1))"))
                                            (("2" (flatten) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (skosimp)
                                    (("3" (assert) nil nil))
                                    nil)
                                   ("4"
                                    (skosimp)
                                    (("4" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide -2 2)
                                (("2"
                                  (rewrite "metric_convergence_def")
                                  (("1"
                                    (expand "metric_converges_to")
                                    (("1"
                                      (skosimp)
                                      (("1"
                                        (expand "member")
                                        (("1"
                                          (expand "o ")
                                          (("1"
                                            (expand "ball")
                                            (("1"
                                              (hide-all-but 1)
                                              (("1"
                                                (lemma
                                                 "part_norm_partition_2n")
                                                (("1"
                                                  (lemma
                                                   "posreal_div_posreal_is_posreal"
                                                   ("px"
                                                    "b-a"
                                                    "py"
                                                    "r!1"))
                                                  (("1"
                                                    (name
                                                     "R"
                                                     "(b - a) / r!1")
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (lemma
                                                         "ceiling_def"
                                                         ("x"
                                                          "log(2)(R)"))
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (name
                                                             "CEIL"
                                                             "ceiling(log(2)(R))")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (lemma
                                                                 "both_sides_real_expt_gt1_le"
                                                                 ("gt1x"
                                                                  "2"
                                                                  "a"
                                                                  "log(2)(R)"
                                                                  "b"
                                                                  "CEIL"))
                                                                (("1"
                                                                  (rewrite
                                                                   "expt_log")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (name
                                                                       "N"
                                                                       "max(0,CEIL)")
                                                                      (("1"
                                                                        (case
                                                                         "N>=0&CEIL<=N")
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (lemma
                                                                             "both_sides_real_expt_gt1_le"
                                                                             ("gt1x"
                                                                              "2"
                                                                              "a"
                                                                              "CEIL"
                                                                              "b"
                                                                              "N"))
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst
                                                                                 +
                                                                                 "N+1")
                                                                                (("1"
                                                                                  (skosimp)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -11
                                                                                     "i!1")
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "abs_mult")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "abs")
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "one_times")
                                                                                          (("1"
                                                                                            (replace
                                                                                             -11)
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "div_mult_pos_lt1"
                                                                                               1)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "div_mult_pos_lt1"
                                                                                                 ("z"
                                                                                                  "b-a"
                                                                                                  "py"
                                                                                                  "r!1"
                                                                                                  "x"
                                                                                                  "2^i!1"))
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1
                                                                                                   1
                                                                                                   rl)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -10)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "both_sides_real_expt_gt1_lt"
                                                                                                       ("gt1x"
                                                                                                        "2"
                                                                                                        "a"
                                                                                                        "N"
                                                                                                        "b"
                                                                                                        "i!1"))
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (rewrite
                                                                                                 "real_expt_pos"
                                                                                                 1)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           (-1
                                                                            1))
                                                                          (("2"
                                                                            (expand
                                                                             "max")
                                                                            (("2"
                                                                              (lift-if)
                                                                              (("2"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skosimp)
                                    (("2" (assert) nil nil))
                                    nil)
                                   ("3"
                                    (skosimp)
                                    (("3" (assert) nil nil))
                                    nil)
                                   ("4"
                                    (rewrite "abs_of_sub_metric")
                                    nil
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (skosimp)
                                (("3" (assert) nil nil))
                                nil)
                               ("4"
                                (skosimp)
                                (("4" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((riemann_integrable_def1 formula-decl nil riemann_scaf nil)
    (partition_2n const-decl "partition(a, b)" riemann_scaf nil)
    (sequence type-eq-decl nil sequences nil)
    (partition type-eq-decl nil integral_def "analysis/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (closed_interval type-eq-decl nil intervals_real "reals/")
    (b formal-const-decl "{x: real | a < x}" riemann_scaf nil)
    (< const-decl "bool" reals nil)
    (a formal-const-decl "real" riemann_scaf nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (darboux formula-decl nil riemann_scaf nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (part_norm_partition_2n formula-decl nil riemann_scaf nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (ceiling_def formula-decl nil floor_ceil nil)
    (log const-decl "real" log "power/")
    (integer nonempty-type-from-decl nil integers nil)
    (ceiling const-decl "{i | x <= i & i < x + 1}" floor_ceil nil)
    (both_sides_real_expt_gt1_le formula-decl nil real_expt "power/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_expt_pos formula-decl nil real_expt "power/")
    (both_sides_real_expt_gt1_lt formula-decl nil real_expt "power/")
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "nnreal" real_expt "power/")
    (one_times formula-decl nil extra_tegies nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (abs_mult formula-decl nil real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (expt_log formula-decl nil log "power/")
    (posreal_div_posreal_is_posreal judgement-tcc nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (monotonic_converges? const-decl "bool" convergence_aux
     "metric_space/")
    (unique_limit formula-decl nil hausdorff_convergence "topology/")
    (integral const-decl "real" integral "measure_integration/")
    (lower_step const-decl "step" riemann_scaf nil)
    (riemann_lebesgue_step_integrable formula-decl nil riemann_scaf
     nil)
    (ae_monotonic_converges? const-decl "bool" measure_theory
     "measure_integration/")
    (ae_increasing? const-decl "bool" measure_theory
     "measure_integration/")
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set" countable_setofsets
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set" countable_props
     "sets_aux/")
    (finite_emptyset name-judgement "finite_set[T]" step_fun_props
     "analysis/")
    (finite_emptyset name-judgement "finite_set" bounded_nats
     "orders/")
    (finite_emptyset name-judgement "finite_set" sigma_countable
     "sigma_set/")
    (subset_algebra_emptyset name-judgement "(S)" real_lebesgue_scaf
     nil)
    (subset_algebra_emptyset name-judgement "(S)" real_lebesgue_scaf
     nil)
    (outer_negligible_emptyset name-judgement "outer_negligible"
     real_lebesgue_scaf nil)
    (subset_algebra_emptyset name-judgement "(S)" lebesgue_def nil)
    (finite_emptyset name-judgement "finite_set[real]" integral_def
     "analysis/")
    (emptyset_is_clopen name-judgement "clopen" convergence_aux
     "metric_space/")
    (emptyset_is_compact name-judgement "compact" convergence_aux
     "metric_space/")
    (ae_convergence? const-decl "bool" measure_theory
     "measure_integration/")
    (ae_convergence_in? const-decl "bool" measure_theory
     "measure_integration/")
    (set type-eq-decl nil sets nil)
    (negligible_set? const-decl "bool" measure_theory
     "measure_integration/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (continuous_at? const-decl "bool" continuity_def "topology/")
    (f!1 skolem-const-decl "bounded" riemann_scaf nil)
    (negligible nonempty-type-eq-decl nil measure_theory
     "measure_integration/")
    (TRUE const-decl "bool" booleans nil)
    (abs_0 formula-decl nil abs_lems "reals/")
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (metric? const-decl "bool" metric_def "metric_space/")
    (abs_of_sub_metric formula-decl nil riemann_scaf nil)
    (metric_convergence_def formula-decl nil metric_space
     "metric_space/")
    (ball const-decl "set[T]" metric_space_def "metric_space/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lower_step_prop formula-decl nil riemann_scaf nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (lower_refines formula-decl nil riemann_scaf nil)
    (partion_2n_refines formula-decl nil riemann_scaf nil)
    (<= const-decl "bool" real_fun_orders "reals/")
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (continuous_step formula-decl nil riemann_scaf nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (metric_converges_to const-decl "bool" metric_space_def
     "metric_space/")
    (n!1 skolem-const-decl "nat" riemann_scaf nil)
    (x!2 skolem-const-decl "nat" riemann_scaf nil)
    (n!1 skolem-const-decl "nat" riemann_scaf nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (inf_set type-eq-decl nil bounded_reals "reals/")
    (pred type-eq-decl nil defined_types nil)
    (greatest_lower_bound const-decl "bool" bound_defs "reals/")
    (nonempty? const-decl "bool" sets nil)
    (below_bounded const-decl "bool" bounded_reals "reals/")
    (inf const-decl "{x | greatest_lower_bound(<=)(x, Sl)}"
         bounded_reals "reals/")
    (image const-decl "set[R]" function_image nil)
    (part_set_of const-decl "(nonempty?[real])" riemann_scaf nil)
    (member const-decl "bool" sets nil)
    (zeroed? const-decl "bool" riemann_scaf nil)
    (null_is_negligible judgement-tcc nil measure_theory
     "measure_integration/")
    (null_set? const-decl "bool" measure_theory "measure_integration/")
    (null_set nonempty-type-eq-decl nil measure_theory
     "measure_integration/")
    (ae_continuous? const-decl "bool" ae_continuous_def nil)
    (ae_in? const-decl "bool" measure_theory "measure_integration/")
    (fullset const-decl "set" sets nil)
    (bounded? const-decl "bool" real_fun_preds "reals/")
    (bounded_below? const-decl "bool" real_fun_preds "reals/")
    (bounded_above? const-decl "bool" real_fun_preds "reals/")
    (upper_step_prop formula-decl nil riemann_scaf nil)
    (integral_ae_le formula-decl nil integral "measure_integration/")
    (pointwise_ae? const-decl "bool" measure_theory
     "measure_integration/")
    (ae? const-decl "bool" measure_theory "measure_integration/")
    (fullset_is_clopen name-judgement "clopen" convergence_aux
     "metric_space/")
    (measurable_fullset name-judgement "measurable_set[real, cal_M]"
     lebesgue_def nil)
    (subset_algebra_fullset name-judgement "(cal_M)" lebesgue_def nil)
    (real_is_complete name-judgement "metric_complete" real_topology
     "metric_space/")
    (subset_algebra_fullset name-judgement "(induced_sigma_algebra)"
     real_lebesgue_scaf nil)
    (subset_algebra_fullset name-judgement "(lebesgue_measurable)"
     real_lebesgue_scaf nil)
    (ae_le? const-decl "bool" measure_theory "measure_integration/")
    (upper_step const-decl "step" riemann_scaf nil)
    (lambda_ const-decl "complete_sigma_finite[real, cal_M]"
     lebesgue_def nil)
    (complete_sigma_finite type-eq-decl nil measure_def
     "measure_integration/")
    (complete_sigma_finite? const-decl "bool" measure_def
     "measure_integration/")
    (extended_nnreal nonempty-type-eq-decl nil extended_nnreal
     "extended_nnreal/")
    (nnreal type-eq-decl nil real_types nil)
    (cal_M const-decl "sigma_algebra" lebesgue_def nil)
    (sigma_algebra nonempty-type-eq-decl nil subset_algebra_def
     "measure_integration/")
    (sigma_algebra? const-decl "bool" subset_algebra_def
     "measure_integration/")
    (lower_step const-decl "step" riemann_scaf nil)
    (step nonempty-type-eq-decl nil riemann_scaf nil)
    (step? const-decl "bool" riemann_scaf nil)
    (integrable nonempty-type-eq-decl nil integral
     "measure_integration/")
    (integrable? const-decl "bool" integral "measure_integration/")
    (monotone_convergence_complete formula-decl nil complete_integral
     "measure_integration/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (metric_space_is_hausdorff name-judgement "hausdorff"
     real_continuity "metric_space/")
    (metric_induced_topology_is_second_countable name-judgement
     "second_countable" real_topology "metric_space/")
    (metric_space_is_hausdorff name-judgement "hausdorff"
     convergence_aux "metric_space/")
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (metric_induced_topology const-decl "setofsets[T]" metric_space_def
     "metric_space/")
    (convergence? const-decl "bool" topological_convergence
     "topology/")
    (posreal nonempty-type-eq-decl nil real_types nil)
    (O const-decl "T3" function_props nil)
    (part_norm const-decl "posreal" riemann_scaf nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (lower_riemann_integral const-decl "real" riemann_scaf nil)
    (riemann_integrable_def2 formula-decl nil riemann_scaf nil)
    (ae_continuity_implies_Integrable formula-decl nil riemann_scaf
     nil)
    (ae_continuity_implies_integrable formula-decl nil riemann_scaf
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (zeroed_bounded? const-decl "bool" riemann_scaf nil)
    (bounded nonempty-type-eq-decl nil riemann_scaf nil))
   nil)))


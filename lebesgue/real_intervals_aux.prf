(real_intervals_aux
 (bounded_open_interval_def 0
  (bounded_open_interval_def-1 nil 3471584778
   ("" (skosimp)
    (("" (split)
      (("1" (flatten)
        (("1" (expand "bounded_open_interval?")
          (("1" (expand "bounded_interval?")
            (("1" (expand "bounded?")
              (("1" (flatten)
                (("1" (split -2)
                  (("1" (propax) nil nil)
                   ("2" (flatten)
                    (("2" (expand "empty?")
                      (("2" (skosimp)
                        (("2" (expand "member")
                          (("2" (name "LO" "inf(A!1)")
                            (("1" (name "HI" "sup(A!1)")
                              (("1" (typepred "sup(A!1)")
                                (("1" (typepred "inf(A!1)")
                                  (("1" (replace -3)
                                    (("1" (replace -4)
                                      (("1"
                                        (expand "least_upper_bound")
                                        (("1"
                                          (expand "greatest_lower_bound")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "lower_bound")
                                              (("1"
                                                (expand "upper_bound")
                                                (("1"
                                                  (hide -5 -6 -7 -8 -9)
                                                  (("1"
                                                    (case "LO<HI")
                                                    (("1"
                                                      (inst
                                                       +
                                                       "(HI+LO)/2"
                                                       "(HI-LO)/2")
                                                      (("1"
                                                        (apply-extensionality
                                                         :hide?
                                                         t)
                                                        (("1"
                                                          (case-replace
                                                           "A!1(x!2)")
                                                          (("1"
                                                            (hide -9)
                                                            (("1"
                                                              (expand
                                                               "metric_open?")
                                                              (("1"
                                                                (inst
                                                                 -8
                                                                 "x!2")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (skosimp)
                                                                    (("1"
                                                                      (expand
                                                                       "subset?")
                                                                      (("1"
                                                                        (inst-cp
                                                                         -8
                                                                         "x!2-r!1/2")
                                                                        (("1"
                                                                          (inst
                                                                           -8
                                                                           "x!2+r!1/2")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (split
                                                                               -8)
                                                                              (("1"
                                                                                (split
                                                                                 -9)
                                                                                (("1"
                                                                                  (inst
                                                                                   -5
                                                                                   "x!2 - r!1 / 2")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -7
                                                                                     "r!1 / 2 + x!2")
                                                                                    (("1"
                                                                                      (hide
                                                                                       -6
                                                                                       -8
                                                                                       -9)
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   1)
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (expand "ball")
                                                              (("2"
                                                                (case
                                                                 "LO<x!2 & x!2<HI")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (hide -3)
                                                                    (("1"
                                                                      (inst
                                                                       -5
                                                                       "x!2")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (skosimp)
                                                                          (("1"
                                                                            (typepred
                                                                             "z!1")
                                                                            (("1"
                                                                              (case
                                                                               "z!1<x!2")
                                                                              (("1"
                                                                                (hide
                                                                                 2)
                                                                                (("1"
                                                                                  (inst
                                                                                   -8
                                                                                   "x!2")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (skosimp)
                                                                                      (("1"
                                                                                        (case
                                                                                         "x!2<z!2")
                                                                                        (("1"
                                                                                          (hide
                                                                                           2)
                                                                                          (("1"
                                                                                            (typepred
                                                                                             "z!2")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "interval?")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -10
                                                                                                 "z!1"
                                                                                                 "z!2"
                                                                                                 "x!2")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (-1 -2 1))
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2" (assert) nil nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (expand
                                                         "metric_open?")
                                                        (("2"
                                                          (inst -6 "x!1")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (skosimp)
                                                              (("2"
                                                                (expand
                                                                 "subset?")
                                                                (("2"
                                                                  (inst
                                                                   -6
                                                                   "x!1+r!1/2")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (split
                                                                       -6)
                                                                      (("1"
                                                                        (inst
                                                                         -2
                                                                         "x!1")
                                                                        (("1"
                                                                          (inst
                                                                           -4
                                                                           "x!1+r!1/2")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (propax) nil nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "bounded_open_interval?")
          (("2" (expand "bounded_interval?")
            (("2" (expand "bounded?")
              (("2" (split -1)
                (("1" (assert)
                  (("1" (rewrite "emptyset_is_empty?")
                    (("1" (replace -1)
                      (("1" (hide -1)
                        (("1" (split)
                          (("1" (grind) nil nil)
                           ("2" (expand "metric_open?")
                            (("2" (expand "emptyset")
                              (("2" (expand "subset?")
                                (("2" (expand "member")
                                  (("2" (skosimp)
                                    (("2" (skosimp)
                                      (("2"
                                        (inst - "x!1")
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skosimp)
                  (("2" (split)
                    (("1" (replace -1)
                      (("1" (hide -1) (("1" (grind) nil nil)) nil)) nil)
                     ("2" (replace -1)
                      (("2" (hide -1)
                        (("2" (flatten)
                          (("2" (expand "nonempty?")
                            (("2" (assert)
                              (("2" (split)
                                (("1" (expand "above_bounded")
                                  (("1" (inst + "x!1+r!1")
                                    (("1" (grind) nil nil)) nil))
                                  nil)
                                 ("2" (expand "below_bounded")
                                  (("2" (inst + "x!1-r!1")
                                    (("2" (grind) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (replace -1)
                      (("3" (hide -1)
                        (("3" (lemma "metric_open_ball" ("x" "x!1" "r" "r!1"))
                          (("3" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bounded_open_interval? const-decl "bool" real_topology metric_space)
    (bounded? const-decl "bool" real_topology metric_space)
    (empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (sup_set type-eq-decl nil bounded_reals reals)
    (least_upper_bound const-decl "bool" bound_defs reals)
    (above_bounded const-decl "bool" bounded_reals reals)
    (sup const-decl "{x | least_upper_bound(<=)(x, Su)}" bounded_reals reals)
    (lower_bound const-decl "bool" bound_defs reals)
    (r!1 skolem-const-decl "posreal" real_intervals_aux nil)
    (x!1 skolem-const-decl "real" real_intervals_aux nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (>= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (A!1 skolem-const-decl "set[real]" real_intervals_aux nil)
    (HI skolem-const-decl "{x | least_upper_bound[real, real](<=)(x, A!1)}"
     real_intervals_aux nil)
    (LO skolem-const-decl "{x | greatest_lower_bound[real, real](<=)(x, A!1)}"
     real_intervals_aux nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (metric_open? const-decl "bool" metric_space_def metric_space)
    (subset? const-decl "bool" sets nil)
    (x!2 skolem-const-decl "real" real_intervals_aux nil)
    (r!1 skolem-const-decl "posreal" real_intervals_aux nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (interval? const-decl "bool" real_topology metric_space)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (ball_is_metric_open application-judgement
     "metric_open[real, (LAMBDA (x, y: real): abs(x - y))]" real_topology
     metric_space)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ball const-decl "set[T]" metric_space_def metric_space)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (upper_bound const-decl "bool" bound_defs reals)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (inf_set type-eq-decl nil bounded_reals reals)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (greatest_lower_bound const-decl "bool" bound_defs reals)
    (<= const-decl "bool" reals nil) (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (setof type-eq-decl nil defined_types nil)
    (below_bounded const-decl "bool" bounded_reals reals)
    (inf const-decl "{x | greatest_lower_bound(<=)(x, Sl)}" bounded_reals
         reals)
    (bounded_interval? const-decl "bool" real_topology metric_space)
    (metric_open_ball formula-decl nil metric_space metric_space)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set[T]" countable_setofsets
     sets_aux)
    (finite_emptyset name-judgement "finite_set[T]" countable_props sets_aux)
    (emptyset_is_clopen name-judgement
     "clopen[real, (metric_induced_topology)]" real_topology metric_space)
    (emptyset_is_compact name-judgement
     "compact[real, (metric_induced_topology)]" real_topology metric_space)
    (emptyset_is_empty? formula-decl nil sets_lemmas nil))
   shostak))
 (unbounded_open_interval_def 0
  (unbounded_open_interval_def-1 nil 3471587044
   ("" (skosimp)
    (("" (expand "unbounded?")
      (("" (split)
        (("1" (flatten)
          (("1" (expand "bounded?")
            (("1" (flatten)
              (("1" (expand "nonempty?")
                (("1" (assert)
                  (("1" (case-replace "above_bounded[real](A!1)")
                    (("1" (hide 4 3)
                      (("1" (typepred "sup(A!1)")
                        (("1" (name-replace "HI" "sup(A!1)")
                          (("1" (expand "least_upper_bound")
                            (("1" (flatten)
                              (("1" (expand "upper_bound")
                                (("1" (inst + "HI")
                                  (("1" (apply-extensionality 3 :hide? t)
                                    (("1" (expand "inf_open")
                                      (("1"
                                        (case-replace "A!1(x!1)")
                                        (("1"
                                          (expand "open_interval?")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "metric_open?")
                                              (("1"
                                                (inst -6 "x!1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (skosimp)
                                                    (("1"
                                                      (expand "subset?")
                                                      (("1"
                                                        (inst -6 "x!1+r!1/2")
                                                        (("1"
                                                          (split -6)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst
                                                               -3
                                                               "r!1 / 2 + x!1")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but 1)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (inst -3 "x!1")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (skosimp)
                                                (("2"
                                                  (case "x!1<z!1")
                                                  (("1"
                                                    (typepred "z!1")
                                                    (("1"
                                                      (hide 2)
                                                      (("1"
                                                        (expand
                                                         "below_bounded")
                                                        (("1"
                                                          (inst + "x!1")
                                                          (("1"
                                                            (expand
                                                             "lower_bound")
                                                            (("1"
                                                              (skosimp)
                                                              (("1"
                                                                (case
                                                                 "z!2<x!1")
                                                                (("1"
                                                                  (hide 3)
                                                                  (("1"
                                                                    (expand
                                                                     "open_interval?")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (expand
                                                                         "interval?")
                                                                        (("1"
                                                                          (inst
                                                                           -7
                                                                           "z!2"
                                                                           "z!1"
                                                                           "x!1")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "nonempty?") (("2" (propax) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (case-replace "below_bounded[real](A!1)")
                      (("1" (hide 3 6 4)
                        (("1" (typepred "inf(A!1)")
                          (("1" (name-replace "LO" "inf(A!1)")
                            (("1" (inst + "LO")
                              (("1" (expand "open_inf")
                                (("1" (expand "greatest_lower_bound")
                                  (("1" (expand "lower_bound")
                                    (("1" (apply-extensionality 3 :hide? t)
                                      (("1"
                                        (case-replace "A!1(x!1)")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand "open_interval?")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (expand "metric_open?")
                                                (("1"
                                                  (inst -6 "x!1")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (skosimp)
                                                      (("1"
                                                        (expand "subset?")
                                                        (("1"
                                                          (inst
                                                           -6
                                                           "x!1-r!1/2")
                                                          (("1"
                                                            (split -6)
                                                            (("1"
                                                              (expand
                                                               "member")
                                                              (("1"
                                                                (inst
                                                                 -3
                                                                 "x!1 - r!1 / 2")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (hide-all-but
                                                                     (-3 1))
                                                                    (("1"
                                                                      (typepred
                                                                       "r!1")
                                                                      (("1"
                                                                        (expand
                                                                         "<="
                                                                         -3)
                                                                        (("1"
                                                                          (split)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (typepred
                                                                               "reals.<")
                                                                              (("1"
                                                                                (expand
                                                                                 "strict_total_order?")
                                                                                (("1"
                                                                                  (expand
                                                                                   "strict_order?")
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "transitive?")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "LO"
                                                                                         "x!1 - r!1 / 2"
                                                                                         "x!1")
                                                                                        (("1"
                                                                                          (split
                                                                                           -2)
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil)
                                                                                           ("3"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but 1)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (inst -3 "x!1")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (skosimp)
                                                  (("2"
                                                    (typepred "z!1")
                                                    (("2"
                                                      (case "z!1<x!1")
                                                      (("1"
                                                        (hide 2)
                                                        (("1"
                                                          (expand
                                                           "above_bounded")
                                                          (("1"
                                                            (inst + "x!1")
                                                            (("1"
                                                              (expand
                                                               "upper_bound")
                                                              (("1"
                                                                (skosimp)
                                                                (("1"
                                                                  (case
                                                                   "x!1<z!2")
                                                                  (("1"
                                                                    (typepred
                                                                     "z!2")
                                                                    (("1"
                                                                      (expand
                                                                       "open_interval?")
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (expand
                                                                           "interval?")
                                                                          (("1"
                                                                            (inst
                                                                             -8
                                                                             "z!1"
                                                                             "z!2"
                                                                             "x!1")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "nonempty?") (("2" (propax) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 4 6 7)
                        (("2" (apply-extensionality 4 :hide? t)
                          (("2" (expand "fullset")
                            (("2" (expand "open_interval?")
                              (("2" (flatten)
                                (("2" (expand "below_bounded")
                                  (("2" (inst + "x!1")
                                    (("2" (expand "above_bounded")
                                      (("2"
                                        (inst + "x!1")
                                        (("2"
                                          (expand "upper_bound")
                                          (("2"
                                            (expand "lower_bound")
                                            (("2"
                                              (skosimp*)
                                              (("2"
                                                (case "z!1<x!1")
                                                (("1"
                                                  (case "x!1<z!2")
                                                  (("1"
                                                    (expand "interval?")
                                                    (("1"
                                                      (inst
                                                       -
                                                       "z!1"
                                                       "z!2"
                                                       "x!1")
                                                      (("1" (assert) nil nil))
                                                      nil))
                                                    nil)
                                                   ("2" (assert) nil nil))
                                                  nil)
                                                 ("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (split)
            (("1" (replace -1)
              (("1" (hide -1)
                (("1" (split)
                  (("1" (expand "bounded?")
                    (("1" (split)
                      (("1" (grind) nil nil)
                       ("2" (flatten)
                        (("2" (expand "above_bounded")
                          (("2" (skosimp)
                            (("2" (expand "upper_bound")
                              (("2" (inst - "n!1+1")
                                (("1" (assert) nil nil)
                                 ("2" (expand "fullset")
                                  (("2" (propax) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "open_interval?")
                    (("2" (split)
                      (("1" (grind) nil nil)
                       ("2" (expand "metric_open?")
                        (("2" (expand "fullset")
                          (("2" (expand "subset?")
                            (("2" (expand "member") (("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp)
              (("2" (replace -1)
                (("2" (hide -1)
                  (("2" (split)
                    (("1" (expand "bounded?")
                      (("1" (split)
                        (("1" (expand "open_inf")
                          (("1" (expand "empty?")
                            (("1" (expand "member")
                              (("1" (inst - "a!1+1") (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (expand "open_inf")
                            (("2" (expand "above_bounded")
                              (("2" (skosimp)
                                (("2" (expand "upper_bound")
                                  (("2" (inst - "max(a!1+1,n!1+1)")
                                    (("1" (grind) nil nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "open_inf")
                      (("2" (expand "open_interval?")
                        (("2" (split)
                          (("1" (grind) nil nil)
                           ("2" (expand "metric_open?")
                            (("2" (skosimp)
                              (("2" (expand "subset?")
                                (("2" (expand "member")
                                  (("2" (case-replace "a!1<x!1")
                                    (("1" (assert)
                                      (("1"
                                        (inst + "x!1-a!1")
                                        (("1"
                                          (skosimp)
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert)
                                      (("2"
                                        (skosimp)
                                        (("2"
                                          (inst - "x!1")
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (skosimp)
              (("3" (replace -1)
                (("3" (hide -1)
                  (("3" (assert)
                    (("3" (split)
                      (("1" (expand "inf_open")
                        (("1" (expand "bounded?")
                          (("1" (split)
                            (("1" (expand "empty?")
                              (("1" (expand "member")
                                (("1" (inst - "a!1-1")
                                  (("1" (assert) nil nil)) nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2" (expand "below_bounded")
                                (("2" (skosimp)
                                  (("2" (expand "lower_bound")
                                    (("2" (inst - "min(n!1-1,a!1-1)")
                                      (("1" (grind) nil nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "open_interval?")
                        (("2" (split)
                          (("1" (grind) nil nil)
                           ("2" (expand "inf_open")
                            (("2" (expand "metric_open?")
                              (("2" (skosimp)
                                (("2" (case-replace "x!1 < a!1")
                                  (("1" (assert)
                                    (("1" (expand "subset?")
                                      (("1"
                                        (expand "member")
                                        (("1"
                                          (inst + "a!1-x!1")
                                          (("1"
                                            (skosimp)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert)
                                    (("2" (skosimp)
                                      (("2"
                                        (expand "subset?")
                                        (("2"
                                          (expand "member")
                                          (("2"
                                            (inst - "x!1")
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((unbounded? const-decl "bool" real_topology metric_space)
    (a!1 skolem-const-decl "real" real_intervals_aux nil)
    (n!1 skolem-const-decl "real" real_intervals_aux nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (a!1 skolem-const-decl "real" real_intervals_aux nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (n!1 skolem-const-decl "real" real_intervals_aux nil)
    (empty? const-decl "bool" sets nil)
    (n!1 skolem-const-decl "real" real_intervals_aux nil)
    (real_is_complete name-judgement "metric_complete" real_topology
     metric_space)
    (fullset_is_clopen name-judgement
     "clopen[real, (metric_induced_topology)]" real_topology metric_space)
    (inf const-decl "{x | greatest_lower_bound(<=)(x, Sl)}" bounded_reals
         reals)
    (inf_set type-eq-decl nil bounded_reals reals)
    (greatest_lower_bound const-decl "bool" bound_defs reals)
    (strict_total_order? const-decl "bool" orders nil)
    (strict_order? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (r!1 skolem-const-decl "posreal" real_intervals_aux nil)
    (x!1 skolem-const-decl "real" real_intervals_aux nil)
    (A!1 skolem-const-decl "set[real]" real_intervals_aux nil)
    (open_inf const-decl "open" real_topology metric_space)
    (fullset const-decl "set" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil)
    (interval? const-decl "bool" real_topology metric_space)
    (lower_bound const-decl "bool" bound_defs reals)
    (below_bounded const-decl "bool" bounded_reals reals)
    (open_interval? const-decl "bool" real_intervals_aux nil)
    (metric_open? const-decl "bool" metric_space_def metric_space)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (subset? const-decl "bool" sets nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (member const-decl "bool" sets nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (ball const-decl "set[T]" metric_space_def metric_space)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (ball_is_metric_open application-judgement
     "metric_open[real, (LAMBDA (x, y: real): abs(x - y))]" real_topology
     metric_space)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (setofsets type-eq-decl nil sets nil) (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (metric_induced_topology const-decl "setofsets[T]" metric_space_def
     metric_space)
    (open? const-decl "bool" topology topology)
    (open nonempty-type-eq-decl nil topology topology)
    (inf_open const-decl "open" real_topology metric_space)
    (upper_bound const-decl "bool" bound_defs reals)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (least_upper_bound const-decl "bool" bound_defs reals)
    (<= const-decl "bool" reals nil)
    (sup_set type-eq-decl nil bounded_reals reals)
    (sup const-decl "{x | least_upper_bound(<=)(x, Su)}" bounded_reals reals)
    (set type-eq-decl nil sets nil)
    (above_bounded const-decl "bool" bounded_reals reals)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nonempty? const-decl "bool" sets nil)
    (bounded? const-decl "bool" real_topology metric_space))
   shostak))
 (length_TCC1 0
  (length_TCC1-1 nil 3453781861 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (set type-eq-decl nil sets nil)
    (bounded_interval? const-decl "bool" real_topology metric_space)
    (bounded_interval nonempty-type-eq-decl nil real_topology metric_space)
    (interval? const-decl "bool" real_topology metric_space)
    (lower_bound const-decl "bool" bound_defs reals)
    (below_bounded const-decl "bool" bounded_reals reals)
    (bounded? const-decl "bool" real_topology metric_space)
    (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (upper_bound const-decl "bool" bound_defs reals)
    (above_bounded const-decl "bool" bounded_reals reals))
   nil (length subtype "real_intervals_aux.b" "sup_set[real]")))
 (length_TCC2 0
  (length_TCC2-1 nil 3453781861 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (set type-eq-decl nil sets nil)
    (bounded_interval? const-decl "bool" real_topology metric_space)
    (bounded_interval nonempty-type-eq-decl nil real_topology metric_space)
    (interval? const-decl "bool" real_topology metric_space)
    (upper_bound const-decl "bool" bound_defs reals)
    (above_bounded const-decl "bool" bounded_reals reals)
    (bounded? const-decl "bool" real_topology metric_space)
    (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (lower_bound const-decl "bool" bound_defs reals)
    (below_bounded const-decl "bool" bounded_reals reals))
   nil (length subtype "real_intervals_aux.b" "inf_set[real]")))
 (length_TCC3 0
  (length_TCC3-1 nil 3453781861
   ("" (skosimp)
    (("" (typepred "b!1")
      (("" (expand "bounded_interval?")
        (("" (flatten)
          (("" (expand "bounded?")
            (("" (replace 1 -2)
              (("" (flatten)
                (("" (expand "empty?")
                  (("" (skosimp)
                    (("" (expand "member")
                      (("" (typepred "inf[real](b!1)")
                        (("" (typepred "sup[real](b!1)")
                          (("" (name-replace "INF" "inf[real](b!1)")
                            (("" (name-replace "SUP" "sup[real](b!1)")
                              (("" (expand "least_upper_bound")
                                (("" (expand "greatest_lower_bound")
                                  (("" (expand "upper_bound")
                                    (("" (expand "lower_bound")
                                      ((""
                                        (flatten)
                                        ((""
                                          (inst - "x!1")
                                          ((""
                                            (inst -3 "x!1")
                                            ((""
                                              (hide -2 -4)
                                              (("" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bounded_interval nonempty-type-eq-decl nil real_topology metric_space)
    (bounded_interval? const-decl "bool" real_topology metric_space)
    (set type-eq-decl nil sets nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (least_upper_bound const-decl "bool" bound_defs reals)
    (sup_set type-eq-decl nil bounded_reals reals)
    (above_bounded const-decl "bool" bounded_reals reals)
    (sup const-decl "{x | least_upper_bound(<=)(x, Su)}" bounded_reals reals)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (lower_bound const-decl "bool" bound_defs reals)
    (b!1 skolem-const-decl "bounded_interval" real_intervals_aux nil)
    (x!1 skolem-const-decl "real" real_intervals_aux nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (upper_bound const-decl "bool" bound_defs reals)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pred type-eq-decl nil defined_types nil)
    (greatest_lower_bound const-decl "bool" bound_defs reals)
    (<= const-decl "bool" reals nil)
    (inf_set type-eq-decl nil bounded_reals reals)
    (nonempty? const-decl "bool" sets nil)
    (setof type-eq-decl nil defined_types nil)
    (below_bounded const-decl "bool" bounded_reals reals)
    (inf const-decl "{x | greatest_lower_bound(<=)(x, Sl)}" bounded_reals
         reals)
    (bounded? const-decl "bool" real_topology metric_space))
   nil
   (length subtype
           "(number_fields.-)(bounded_reals[real].sup(real_intervals_aux.b), bounded_reals[real].inf(real_intervals_aux.b))"
           "nnreal")))
 (length_closed_TCC1 0
  (length_closed_TCC1-1 nil 3453781861 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (set type-eq-decl nil sets nil)
    (bounded_interval? const-decl "bool" real_topology metric_space)
    (bounded_interval nonempty-type-eq-decl nil real_topology metric_space)
    (interval? const-decl "bool" real_topology metric_space)
    (upper_bound const-decl "bool" bound_defs reals)
    (above_bounded const-decl "bool" bounded_reals reals)
    (bounded? const-decl "bool" real_topology metric_space)
    (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (lower_bound const-decl "bool" bound_defs reals)
    (below_bounded const-decl "bool" bounded_reals reals))
   nil (length_closed subtype "real_intervals_aux.b" "inf_set[real]")))
 (length_closed_TCC2 0
  (length_closed_TCC2-1 nil 3453781861 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (set type-eq-decl nil sets nil)
    (bounded_interval? const-decl "bool" real_topology metric_space)
    (bounded_interval nonempty-type-eq-decl nil real_topology metric_space)
    (x!2 skolem-const-decl "real" real_intervals_aux nil)
    (inf const-decl "{x | greatest_lower_bound(<=)(x, Sl)}" bounded_reals
         reals)
    (setof type-eq-decl nil defined_types nil)
    (<= const-decl "bool" reals nil)
    (greatest_lower_bound const-decl "bool" bound_defs reals)
    (pred type-eq-decl nil defined_types nil)
    (inf_set type-eq-decl nil bounded_reals reals)
    (b!1 skolem-const-decl "bounded_interval" real_intervals_aux nil)
    (bounded? const-decl "bool" real_topology metric_space)
    (below_bounded const-decl "bool" bounded_reals reals)
    (lower_bound const-decl "bool" bound_defs reals)
    (interval? const-decl "bool" real_topology metric_space)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (upper_bound const-decl "bool" bound_defs reals)
    (above_bounded const-decl "bool" bounded_reals reals))
   nil (length_closed subtype "real_intervals_aux.b" "sup_set[real]")))
 (length_closed_TCC3 0
  (length_closed_TCC3-1 nil 3453781861
   ("" (skosimp)
    (("" (expand "bounded_interval?")
      (("" (expand "bounded?")
        (("" (split)
          (("1" (grind) nil nil)
           ("2" (flatten)
            (("2" (expand "nonempty?")
              (("2" (typepred "b!1")
                (("2" (expand "bounded_interval?")
                  (("2" (expand "bounded?")
                    (("2" (replace 3)
                      (("2" (flatten)
                        (("2" (replace 1)
                          (("2" (hide 1 3)
                            (("2" (split)
                              (("1" (typepred "sup(b!1)")
                                (("1" (expand "least_upper_bound")
                                  (("1" (flatten)
                                    (("1" (expand "above_bounded")
                                      (("1"
                                        (inst + "sup(b!1)")
                                        (("1"
                                          (expand "upper_bound")
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil)
                               ("2" (typepred "inf(b!1)")
                                (("1" (expand "greatest_lower_bound")
                                  (("1" (flatten)
                                    (("1" (expand "below_bounded")
                                      (("1"
                                        (inst + "inf(b!1)")
                                        (("1"
                                          (expand "lower_bound")
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bounded_interval? const-decl "bool" real_topology metric_space)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (inf_set type-eq-decl nil bounded_reals reals)
    (pred type-eq-decl nil defined_types nil)
    (greatest_lower_bound const-decl "bool" bound_defs reals)
    (set type-eq-decl nil sets nil) (setof type-eq-decl nil defined_types nil)
    (below_bounded const-decl "bool" bounded_reals reals)
    (inf const-decl "{x | greatest_lower_bound(<=)(x, Sl)}" bounded_reals
         reals)
    (bounded_interval nonempty-type-eq-decl nil real_topology metric_space)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (sup_set type-eq-decl nil bounded_reals reals)
    (least_upper_bound const-decl "bool" bound_defs reals)
    (above_bounded const-decl "bool" bounded_reals reals)
    (sup const-decl "{x | least_upper_bound(<=)(x, Su)}" bounded_reals reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (interval? const-decl "bool" real_topology metric_space)
    (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (upper_bound const-decl "bool" bound_defs reals)
    (lower_bound const-decl "bool" bound_defs reals)
    (bounded? const-decl "bool" real_topology metric_space))
   nil
   (length_closed subtype
    "{x | booleans.AND(reals.<=(bounded_reals[real].inf(real_intervals_aux.b), real_intervals_aux.x), reals.<=(real_intervals_aux.x, bounded_reals[real].sup(real_intervals_aux.b)))}"
    "bounded_interval")))
 (length_closed 0
  (length_closed-1 nil 3453784437
   ("" (skosimp)
    (("" (expand "length" 1 1)
      (("" (copy -1)
        (("" (expand "nonempty?" -1)
          (("" (replace 1)
            (("" (typepred "b!1")
              (("" (expand "bounded_interval?")
                (("" (flatten)
                  (("" (expand "bounded?")
                    (("" (replace 1)
                      (("" (flatten)
                        (("" (hide -5)
                          (("" (typepred "inf(b!1)")
                            (("" (name-replace "INF" "inf(b!1)")
                              (("" (typepred "sup(b!1)")
                                (("" (name-replace "SUP" "sup(b!1)")
                                  (("" (expand "length")
                                    ((""
                                      (case-replace
                                       "empty?[real]({x | INF <= x AND x <= SUP})")
                                      (("1"
                                        (expand "empty?")
                                        (("1"
                                          (inst - "INF")
                                          (("1"
                                            (expand "member")
                                            (("1"
                                              (expand "least_upper_bound")
                                              (("1"
                                                (expand
                                                 "greatest_lower_bound")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (expand "lower_bound")
                                                    (("1"
                                                      (expand "upper_bound")
                                                      (("1"
                                                        (skosimp)
                                                        (("1"
                                                          (inst -1 "x!1")
                                                          (("1"
                                                            (inst -3 "x!1")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (replace 1)
                                        (("2"
                                          (typepred
                                           "sup({x | INF <= x AND x <= SUP})")
                                          (("1"
                                            (name-replace
                                             "SUP2"
                                             "sup({x | INF <= x AND x <= SUP})")
                                            (("1"
                                              (typepred
                                               "inf({x | INF <= x AND x <= SUP})")
                                              (("1"
                                                (name-replace
                                                 "INF2"
                                                 "inf({x | INF <= x AND x <= SUP})")
                                                (("1"
                                                  (hide -5 -6 -7 -8)
                                                  (("1"
                                                    (expand
                                                     "greatest_lower_bound")
                                                    (("1"
                                                      (expand
                                                       "least_upper_bound")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (expand
                                                           "lower_bound")
                                                          (("1"
                                                            (expand
                                                             "upper_bound")
                                                            (("1"
                                                              (case-replace
                                                               "INF2=INF")
                                                              (("1"
                                                                (case-replace
                                                                 "SUP2=SUP")
                                                                (("1"
                                                                  (inst
                                                                   -4
                                                                   "SUP")
                                                                  (("1"
                                                                    (inst
                                                                     -5
                                                                     "SUP")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "empty?"
                                                                     3)
                                                                    (("2"
                                                                      (skosimp)
                                                                      (("2"
                                                                        (expand
                                                                         "member")
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (inst - "INF")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "INF")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "empty?"
                                                                   3)
                                                                  (("2"
                                                                    (skosimp)
                                                                    (("2"
                                                                      (expand
                                                                       "member")
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "nonempty?")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "below_bounded")
                                                    (("2"
                                                      (inst + "INF")
                                                      (("2"
                                                        (expand "lower_bound")
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "nonempty?")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "above_bounded")
                                                (("2"
                                                  (inst + "SUP")
                                                  (("2"
                                                    (expand "upper_bound")
                                                    (("2" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((length const-decl "nnreal" real_intervals_aux nil)
    (nonempty? const-decl "bool" sets nil)
    (bounded_interval nonempty-type-eq-decl nil real_topology metric_space)
    (bounded_interval? const-decl "bool" real_topology metric_space)
    (set type-eq-decl nil sets nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (upper_bound const-decl "bool" bound_defs reals)
    (b!1 skolem-const-decl "bounded_interval" real_intervals_aux nil)
    (x!1 skolem-const-decl "real" real_intervals_aux nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (lower_bound const-decl "bool" bound_defs reals)
    (member const-decl "bool" sets nil)
    (INF skolem-const-decl
     "{x | greatest_lower_bound[real, real](<=)(x, b!1)}" real_intervals_aux
     nil)
    (SUP skolem-const-decl "{x | least_upper_bound[real, real](<=)(x, b!1)}"
     real_intervals_aux nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (sup const-decl "{x | least_upper_bound(<=)(x, Su)}" bounded_reals reals)
    (above_bounded const-decl "bool" bounded_reals reals)
    (sup_set type-eq-decl nil bounded_reals reals)
    (least_upper_bound const-decl "bool" bound_defs reals)
    (pred type-eq-decl nil defined_types nil)
    (greatest_lower_bound const-decl "bool" bound_defs reals)
    (<= const-decl "bool" reals nil)
    (inf_set type-eq-decl nil bounded_reals reals)
    (setof type-eq-decl nil defined_types nil)
    (below_bounded const-decl "bool" bounded_reals reals)
    (inf const-decl "{x | greatest_lower_bound(<=)(x, Sl)}" bounded_reals
         reals)
    (bounded? const-decl "bool" real_topology metric_space))
   shostak))
 (length_open_TCC1 0
  (length_open_TCC1-1 nil 3453781861 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (set type-eq-decl nil sets nil)
    (bounded_interval? const-decl "bool" real_topology metric_space)
    (bounded_interval nonempty-type-eq-decl nil real_topology metric_space)
    (b!1 skolem-const-decl "bounded_interval" real_intervals_aux nil)
    (x!2 skolem-const-decl "real" real_intervals_aux nil)
    (bounded? const-decl "bool" real_topology metric_space)
    (below_bounded const-decl "bool" bounded_reals reals)
    (lower_bound const-decl "bool" bound_defs reals)
    (interval? const-decl "bool" real_topology metric_space)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (upper_bound const-decl "bool" bound_defs reals)
    (above_bounded const-decl "bool" bounded_reals reals))
   nil (length_open subtype "real_intervals_aux.b" "sup_set[real]")))
 (length_open_TCC2 0
  (length_open_TCC2-1 nil 3453781861
   ("" (skosimp)
    (("" (typepred "b!1")
      (("" (expand "bounded_interval?")
        (("" (flatten)
          (("" (split)
            (("1" (expand "interval?")
              (("1" (skosimp)
                (("1" (typepred "x!1")
                  (("1" (typepred "y!1") (("1" (assert) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (expand "bounded?")
              (("2" (flatten)
                (("2" (expand "nonempty?" 2)
                  (("2" (assert)
                    (("2" (expand "empty?" 1)
                      (("2" (skosimp)
                        (("2" (expand "member")
                          (("2" (flatten)
                            (("2" (split -4)
                              (("1" (expand "nonempty?")
                                (("1" (propax) nil nil)) nil)
                               ("2" (flatten)
                                (("2" (typepred "inf[real](b!1)")
                                  (("2" (typepred "sup[real](b!1)")
                                    (("2"
                                      (name-replace "INF" "inf[real](b!1)")
                                      (("2"
                                        (name-replace "SUP" "sup[real](b!1)")
                                        (("2"
                                          (expand "least_upper_bound")
                                          (("2"
                                            (expand "greatest_lower_bound")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (expand "upper_bound")
                                                (("2"
                                                  (expand "lower_bound")
                                                  (("2"
                                                    (inst -4 "x!1")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (skosimp)
                                                        (("2"
                                                          (case "z!1<x!1")
                                                          (("1"
                                                            (hide 1)
                                                            (("1"
                                                              (typepred "z!1")
                                                              (("1"
                                                                (inst
                                                                 -4
                                                                 "x!1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (skosimp)
                                                                    (("1"
                                                                      (case
                                                                       "x!1<z!2")
                                                                      (("1"
                                                                        (typepred
                                                                         "z!2")
                                                                        (("1"
                                                                          (hide
                                                                           1)
                                                                          (("1"
                                                                            (hide
                                                                             -7
                                                                             -8)
                                                                            (("1"
                                                                              (split)
                                                                              (("1"
                                                                                (expand
                                                                                 "above_bounded")
                                                                                (("1"
                                                                                  (inst
                                                                                   +
                                                                                   "SUP")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "upper_bound")
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "below_bounded")
                                                                                (("2"
                                                                                  (inst
                                                                                   +
                                                                                   "INF")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "lower_bound")
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bounded_interval nonempty-type-eq-decl nil real_topology metric_space)
    (bounded_interval? const-decl "bool" real_topology metric_space)
    (set type-eq-decl nil sets nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bounded? const-decl "bool" real_topology metric_space)
    (empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (lower_bound const-decl "bool" bound_defs reals)
    (upper_bound const-decl "bool" bound_defs reals)
    (interval? const-decl "bool" real_topology metric_space)
    (sup const-decl "{x | least_upper_bound(<=)(x, Su)}" bounded_reals reals)
    (above_bounded const-decl "bool" bounded_reals reals)
    (least_upper_bound const-decl "bool" bound_defs reals)
    (sup_set type-eq-decl nil bounded_reals reals)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (inf const-decl "{x | greatest_lower_bound(<=)(x, Sl)}" bounded_reals
         reals)
    (below_bounded const-decl "bool" bounded_reals reals)
    (setof type-eq-decl nil defined_types nil)
    (nonempty? const-decl "bool" sets nil) (<= const-decl "bool" reals nil)
    (greatest_lower_bound const-decl "bool" bound_defs reals)
    (pred type-eq-decl nil defined_types nil)
    (inf_set type-eq-decl nil bounded_reals reals)
    (< const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (length_open subtype
    "{x | booleans.AND(reals.<(bounded_reals[real].inf(real_intervals_aux.b), real_intervals_aux.x), reals.<(real_intervals_aux.x, bounded_reals[real].sup(real_intervals_aux.b)))}"
    "bounded_interval")))
 (length_open 0
  (length_open-1 nil 3453786603
   ("" (skosimp)
    (("" (expand "length")
      (("" (typepred "b!1")
        (("" (expand "bounded_interval?")
          (("" (expand "bounded?")
            (("" (flatten)
              (("" (replace -3)
                (("" (split -2)
                  (("1" (expand "nonempty?") (("1" (propax) nil nil)) nil)
                   ("2" (flatten)
                    (("2" (case-replace "empty?[real](b!1)")
                      (("1" (expand "nonempty?") (("1" (propax) nil nil)) nil)
                       ("2" (replace 1)
                        (("2" (hide 1)
                          (("2" (typepred "sup(b!1)")
                            (("2" (name-replace "BB" "sup(b!1)")
                              (("2" (typepred "inf(b!1)")
                                (("2" (name-replace "AA" "inf(b!1)")
                                  (("2" (case "AA<=BB")
                                    (("1" (expand "<=" -1)
                                      (("1"
                                        (split)
                                        (("1"
                                          (case
                                           "nonempty?[real]({x | AA < x AND x < BB})")
                                          (("1"
                                            (copy -1)
                                            (("1"
                                              (expand "nonempty?" -1)
                                              (("1"
                                                (replace 1)
                                                (("1"
                                                  (hide 1)
                                                  (("1"
                                                    (case
                                                     "below_bounded[real]({x | AA < x AND x < BB})")
                                                    (("1"
                                                      (case
                                                       "above_bounded[real]({x | AA < x AND x < BB})")
                                                      (("1"
                                                        (typepred
                                                         "inf({x | AA < x AND x < BB})")
                                                        (("1"
                                                          (name-replace
                                                           "INF"
                                                           "inf({x | AA < x AND x < BB})")
                                                          (("1"
                                                            (case-replace
                                                             "INF=AA")
                                                            (("1"
                                                              (hide
                                                               -1
                                                               -2
                                                               -4
                                                               -7
                                                               -8
                                                               -9
                                                               -10
                                                               -11
                                                               -12)
                                                              (("1"
                                                                (typepred
                                                                 "sup({x | AA < x AND x < BB})")
                                                                (("1"
                                                                  (name-replace
                                                                   "SUP"
                                                                   "sup({x | AA < x AND x < BB})")
                                                                  (("1"
                                                                    (expand
                                                                     "least_upper_bound")
                                                                    (("1"
                                                                      (expand
                                                                       "upper_bound")
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (case-replace
                                                                           "SUP=BB")
                                                                          (("1"
                                                                            (hide
                                                                             2)
                                                                            (("1"
                                                                              (inst
                                                                               -2
                                                                               "BB")
                                                                              (("1"
                                                                                (split)
                                                                                (("1"
                                                                                  (expand
                                                                                   "<="
                                                                                   -1)
                                                                                  (("1"
                                                                                    (split)
                                                                                    (("1"
                                                                                      (inst-cp
                                                                                       -
                                                                                       "(AA+BB)/2")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "(SUP+BB)/2")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil)
                                                                                 ("3"
                                                                                  (skosimp)
                                                                                  (("3"
                                                                                    (inst
                                                                                     -
                                                                                     "z!1")
                                                                                    (("3"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (-1 -5 -4 1))
                                                              (("2"
                                                                (expand
                                                                 "greatest_lower_bound")
                                                                (("2"
                                                                  (expand
                                                                   "lower_bound")
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (inst-cp
                                                                       -1
                                                                       "(AA+BB)/2")
                                                                      (("1"
                                                                        (inst
                                                                         -3
                                                                         "AA")
                                                                        (("1"
                                                                          (split)
                                                                          (("1"
                                                                            (expand
                                                                             "<="
                                                                             -1)
                                                                            (("1"
                                                                              (split)
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "(INF+AA)/2")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (propax)
                                                                            nil
                                                                            nil)
                                                                           ("3"
                                                                            (skosimp)
                                                                            (("3"
                                                                              (inst
                                                                               -
                                                                               "z!1")
                                                                              (("3"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "above_bounded")
                                                        (("2"
                                                          (inst + "BB")
                                                          (("2"
                                                            (expand
                                                             "upper_bound")
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand "below_bounded")
                                                      (("2"
                                                        (inst + "AA")
                                                        (("2"
                                                          (expand
                                                           "lower_bound")
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "nonempty?")
                                            (("2"
                                              (replace -1)
                                              (("2"
                                                (expand "empty?")
                                                (("2"
                                                  (inst - "(AA+BB)/2")
                                                  (("2"
                                                    (assert)
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case-replace
                                           "empty?[real]({x | AA < x AND x < BB})")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (replace 1)
                                            (("2"
                                              (hide 2)
                                              (("2"
                                                (expand "empty?")
                                                (("2"
                                                  (skosimp)
                                                  (("2"
                                                    (expand "member")
                                                    (("2"
                                                      (flatten)
                                                      (("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (hide 2)
                                      (("2"
                                        (expand "nonempty?")
                                        (("2"
                                          (expand "empty?")
                                          (("2"
                                            (skosimp)
                                            (("2"
                                              (expand "member")
                                              (("2"
                                                (expand
                                                 "greatest_lower_bound")
                                                (("2"
                                                  (expand "least_upper_bound")
                                                  (("2"
                                                    (expand "lower_bound")
                                                    (("2"
                                                      (expand "upper_bound")
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (inst -1 "x!1")
                                                          (("2"
                                                            (inst -3 "x!1")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((length const-decl "nnreal" real_intervals_aux nil)
    (nonempty? const-decl "bool" sets nil) (empty? const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (x!1 skolem-const-decl "real" real_intervals_aux nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (lower_bound const-decl "bool" bound_defs reals)
    (INF skolem-const-decl
     "{x_1 | greatest_lower_bound[real, real](<=)(x_1, {x | AA < x AND x < BB})}"
     real_intervals_aux nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (upper_bound const-decl "bool" bound_defs reals)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (b!1 skolem-const-decl "bounded_interval" real_intervals_aux nil)
    (AA skolem-const-decl "{x | greatest_lower_bound[real, real](<=)(x, b!1)}"
     real_intervals_aux nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (BB skolem-const-decl "{x | least_upper_bound[real, real](<=)(x, b!1)}"
     real_intervals_aux nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (SUP skolem-const-decl
     "{x_1 | least_upper_bound[real, real](<=)(x_1, {x | AA < x AND x < BB})}"
     real_intervals_aux nil)
    (member const-decl "bool" sets nil)
    (inf const-decl "{x | greatest_lower_bound(<=)(x, Sl)}" bounded_reals
         reals)
    (below_bounded const-decl "bool" bounded_reals reals)
    (inf_set type-eq-decl nil bounded_reals reals)
    (greatest_lower_bound const-decl "bool" bound_defs reals)
    (pred type-eq-decl nil defined_types nil)
    (least_upper_bound const-decl "bool" bound_defs reals)
    (<= const-decl "bool" reals nil)
    (sup_set type-eq-decl nil bounded_reals reals)
    (setof type-eq-decl nil defined_types nil)
    (above_bounded const-decl "bool" bounded_reals reals)
    (sup const-decl "{x | least_upper_bound(<=)(x, Su)}" bounded_reals reals)
    (bounded? const-decl "bool" real_topology metric_space)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (set type-eq-decl nil sets nil)
    (bounded_interval? const-decl "bool" real_topology metric_space)
    (bounded_interval nonempty-type-eq-decl nil real_topology metric_space))
   shostak))
 (length_empty_rew_TCC1 0
  (length_empty_rew_TCC1-1 nil 3471444041 ("" (subtype-tcc) nil nil)
   ((set type-eq-decl nil sets nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (emptyset const-decl "set" sets nil)
    (interval? const-decl "bool" real_topology metric_space)
    (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (upper_bound const-decl "bool" bound_defs reals)
    (above_bounded const-decl "bool" bounded_reals reals)
    (lower_bound const-decl "bool" bound_defs reals)
    (below_bounded const-decl "bool" bounded_reals reals)
    (bounded? const-decl "bool" real_topology metric_space)
    (bounded_interval? const-decl "bool" real_topology metric_space)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set[T]" countable_setofsets
     sets_aux)
    (finite_emptyset name-judgement "finite_set[T]" countable_props sets_aux)
    (emptyset_is_clopen name-judgement
     "clopen[real, (metric_induced_topology)]" real_topology metric_space)
    (emptyset_is_compact name-judgement
     "compact[real, (metric_induced_topology)]" real_topology metric_space))
   nil (length_empty_rew subtype "sets[real].emptyset" "bounded_interval")))
 (length_empty_rew 0
  (length_empty_rew-1 nil 3453783100
   ("" (expand "length") (("" (rewrite "emptyset_is_empty?") nil nil)) nil)
   ((emptyset_is_empty? formula-decl nil sets_lemmas nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil) (emptyset const-decl "set" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (length const-decl "nnreal" real_intervals_aux nil)
    (emptyset_is_compact name-judgement
     "compact[real, (metric_induced_topology)]" real_topology metric_space)
    (emptyset_is_clopen name-judgement
     "clopen[real, (metric_induced_topology)]" real_topology metric_space)
    (finite_emptyset name-judgement "finite_set[T]" countable_props sets_aux)
    (finite_emptyset name-judgement "finite_set[T]" countable_setofsets
     sets_aux)
    (finite_emptyset name-judgement "finite_set" finite_sets nil))
   shostak))
 (length_closed_rew_TCC1 0
  (length_closed_rew_TCC1-1 nil 3453781861
   ("" (skosimp)
    (("" (expand "bounded_interval?")
      (("" (split)
        (("1" (grind) nil nil)
         ("2" (expand "bounded?")
          (("2" (flatten)
            (("2" (expand "nonempty?")
              (("2" (assert)
                (("2" (hide 1)
                  (("2" (split)
                    (("1" (expand "above_bounded")
                      (("1" (inst + "b!1") (("1" (grind) nil nil)) nil)) nil)
                     ("2" (expand "below_bounded")
                      (("2" (inst + "a!1") (("2" (grind) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bounded_interval? const-decl "bool" real_topology metric_space)
    (bounded? const-decl "bool" real_topology metric_space)
    (nonempty? const-decl "bool" sets nil)
    (below_bounded const-decl "bool" bounded_reals reals)
    (lower_bound const-decl "bool" bound_defs reals)
    (above_bounded const-decl "bool" bounded_reals reals)
    (upper_bound const-decl "bool" bound_defs reals)
    (interval? const-decl "bool" real_topology metric_space)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (length_closed_rew subtype
    "{x | booleans.AND(reals.<=(real_intervals_aux.a, real_intervals_aux.x), reals.<=(real_intervals_aux.x, real_intervals_aux.b))}"
    "bounded_interval")))
 (length_closed_rew 0
  (length_closed_rew-1 nil 3453783130
   ("" (skosimp)
    (("" (typepred "b!1")
      (("" (expand "length")
        (("" (case "nonempty?[real]({x | a!1 <= x AND x <= b!1})")
          (("1" (copy -1)
            (("1" (expand "nonempty?" -1)
              (("1" (replace 1 2)
                (("1"
                  (case "above_bounded[real]({x | a!1 <= x AND x <= b!1})")
                  (("1"
                    (case "below_bounded[real]({x | a!1 <= x AND x <= b!1})")
                    (("1" (typepred "inf({x | a!1 <= x AND x <= b!1})")
                      (("1"
                        (name-replace "INF"
                         "inf({x | a!1 <= x AND x <= b!1})")
                        (("1" (case-replace "INF=a!1")
                          (("1" (typepred "sup({x | a!1 <= x AND x <= b!1})")
                            (("1"
                              (name-replace "SUP"
                               "sup({x | a!1 <= x AND x <= b!1})")
                              (("1" (case-replace "SUP=b!1")
                                (("1" (expand "least_upper_bound")
                                  (("1" (hide-all-but (-1 1 2 -7))
                                    (("1" (expand "upper_bound")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (inst - "b!1")
                                          (("1"
                                            (inst - "b!1")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil)
                           ("2" (hide-all-but (-1 -5 2 1))
                            (("2" (expand "greatest_lower_bound")
                              (("2" (expand "lower_bound")
                                (("2" (flatten)
                                  (("2" (inst - "a!1")
                                    (("2" (inst - "a!1")
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil)
                     ("2" (expand "below_bounded")
                      (("2" (inst + "a!1")
                        (("2" (expand "lower_bound") (("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "above_bounded")
                    (("2" (inst + "b!1")
                      (("2" (expand "upper_bound") (("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "nonempty?")
            (("2" (expand "empty?")
              (("2" (inst - "a!1") (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (above_bounded const-decl "bool" bounded_reals reals)
    (inf const-decl "{x | greatest_lower_bound(<=)(x, Sl)}" bounded_reals
         reals)
    (inf_set type-eq-decl nil bounded_reals reals)
    (greatest_lower_bound const-decl "bool" bound_defs reals)
    (pred type-eq-decl nil defined_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (upper_bound const-decl "bool" bound_defs reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (sup const-decl "{x | least_upper_bound(<=)(x, Su)}" bounded_reals reals)
    (sup_set type-eq-decl nil bounded_reals reals)
    (least_upper_bound const-decl "bool" bound_defs reals)
    (lower_bound const-decl "bool" bound_defs reals)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below_bounded const-decl "bool" bounded_reals reals)
    (empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (length const-decl "nnreal" real_intervals_aux nil))
   shostak))
 (length_open_rew_TCC1 0
  (length_open_rew_TCC1-1 nil 3453781861
   ("" (skosimp)
    (("" (expand "bounded_interval?")
      (("" (split)
        (("1" (grind) nil nil)
         ("2" (expand "bounded?")
          (("2" (expand "nonempty?")
            (("2" (flatten)
              (("2" (assert)
                (("2" (hide 1)
                  (("2" (split)
                    (("1" (expand "above_bounded")
                      (("1" (inst + "b!1")
                        (("1" (expand "upper_bound") (("1" (propax) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "below_bounded")
                      (("2" (inst + "a!1") (("2" (grind) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bounded_interval? const-decl "bool" real_topology metric_space)
    (bounded? const-decl "bool" real_topology metric_space)
    (below_bounded const-decl "bool" bounded_reals reals)
    (lower_bound const-decl "bool" bound_defs reals)
    (above_bounded const-decl "bool" bounded_reals reals)
    (upper_bound const-decl "bool" bound_defs reals)
    (nonempty? const-decl "bool" sets nil)
    (interval? const-decl "bool" real_topology metric_space)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (length_open_rew subtype
    "{x | booleans.AND(reals.<(real_intervals_aux.a, real_intervals_aux.x), reals.<(real_intervals_aux.x, real_intervals_aux.b))}"
    "bounded_interval")))
 (length_open_rew 0
  (length_open_rew-1 nil 3453785868
   ("" (skosimp)
    (("" (typepred "b!1")
      (("" (expand "<=" -1)
        (("" (split)
          (("1" (expand "length")
            (("1" (case "nonempty?[real]({x | a!1 < x AND x < b!1})")
              (("1" (copy -1)
                (("1" (expand "nonempty?" -1)
                  (("1" (replace 1 2)
                    (("1" (case "above_bounded({x | a!1 < x AND x < b!1})")
                      (("1" (case "below_bounded({x | a!1 < x AND x < b!1})")
                        (("1" (typepred "inf({x | a!1 < x AND x < b!1})")
                          (("1"
                            (name-replace "INF"
                             "inf({x | a!1 < x AND x < b!1})")
                            (("1" (case-replace "INF=a!1")
                              (("1" (hide -1 -2 -3)
                                (("1"
                                  (typepred "sup({x | a!1 < x AND x < b!1})")
                                  (("1"
                                    (name-replace "SUP"
                                     "sup({x | a!1 < x AND x < b!1})")
                                    (("1" (case-replace "SUP=b!1")
                                      (("1"
                                        (hide -2 -3 3)
                                        (("1"
                                          (expand "least_upper_bound")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "upper_bound")
                                              (("1"
                                                (inst -2 "b!1")
                                                (("1"
                                                  (split -2)
                                                  (("1"
                                                    (expand "<=" -1)
                                                    (("1"
                                                      (split)
                                                      (("1"
                                                        (inst-cp
                                                         -
                                                         "(a!1+b!1)/2")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "(SUP+b!1)/2")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2" (propax) nil nil))
                                                      nil))
                                                    nil)
                                                   ("2" (propax) nil nil)
                                                   ("3"
                                                    (skosimp)
                                                    (("3"
                                                      (typepred "z!1")
                                                      (("3"
                                                        (inst - "z!1")
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil)
                               ("2" (expand "greatest_lower_bound")
                                (("2" (flatten)
                                  (("2" (expand "lower_bound")
                                    (("2" (inst -2 "a!1")
                                      (("2"
                                        (replace 1 -2)
                                        (("2"
                                          (split -2)
                                          (("1"
                                            (expand "<=" -1)
                                            (("1"
                                              (split)
                                              (("1"
                                                (inst
                                                 -
                                                 "(min(INF,b!1)+a!1)/2")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "min")
                                                    (("2"
                                                      (lift-if 1)
                                                      (("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skosimp)
                                            (("2"
                                              (typepred "z!1")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil)
                         ("2" (expand "below_bounded")
                          (("2" (inst + "a!1")
                            (("2" (expand "lower_bound")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "above_bounded")
                        (("2" (inst + "b!1")
                          (("2" (expand "upper_bound")
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (expand "nonempty?")
                  (("2" (expand "empty?")
                    (("2" (inst - "(a!1+b!1)/2") (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "length")
            (("2" (case-replace "empty?[real]({x | a!1 < x AND x < b!1})")
              (("1" (assert) nil nil)
               ("2" (hide 2)
                (("2" (expand "empty?")
                  (("2" (skosimp)
                    (("2" (expand "member")
                      (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (above_bounded const-decl "bool" bounded_reals reals)
    (inf const-decl "{x | greatest_lower_bound(<=)(x, Sl)}" bounded_reals
         reals)
    (inf_set type-eq-decl nil bounded_reals reals)
    (greatest_lower_bound const-decl "bool" bound_defs reals)
    (pred type-eq-decl nil defined_types nil)
    (least_upper_bound const-decl "bool" bound_defs reals)
    (sup_set type-eq-decl nil bounded_reals reals)
    (sup const-decl "{x | least_upper_bound(<=)(x, Su)}" bounded_reals reals)
    (upper_bound const-decl "bool" bound_defs reals)
    (SUP skolem-const-decl
     "{x_1 | least_upper_bound[real, real](<=)(x_1, {x | a!1 < x AND x < b!1})}"
     real_intervals_aux nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (b!1 skolem-const-decl "{x | a!1 <= x}" real_intervals_aux nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (a!1 skolem-const-decl "real" real_intervals_aux nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (INF skolem-const-decl
     "{x_1 | greatest_lower_bound[real, real](<=)(x_1, {x | a!1 < x AND x < b!1})}"
     real_intervals_aux nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (lower_bound const-decl "bool" bound_defs reals)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below_bounded const-decl "bool" bounded_reals reals)
    (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil)
    (length const-decl "nnreal" real_intervals_aux nil))
   shostak))
 (left_closed_right_open_interval_TCC1 0
  (left_closed_right_open_interval_TCC1-1 nil 3472290274
   ("" (expand "left_closed_right_open_interval?")
    (("" (expand "fullset")
      (("" (split)
        (("1" (expand "nonempty?")
          (("1" (expand "empty?")
            (("1" (inst - "0") (("1" (assert) nil nil)) nil)) nil))
          nil)
         ("2" (expand "interval?") (("2" (propax) nil nil)) nil)
         ("3" (expand "above_bounded")
          (("3" (skosimp)
            (("3" (expand "upper_bound")
              (("3" (inst - "n!1+1") (("3" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fullset const-decl "set" sets nil)
    (above_bounded const-decl "bool" bounded_reals reals)
    (upper_bound const-decl "bool" bound_defs reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (interval? const-decl "bool" real_topology metric_space)
    (nonempty? const-decl "bool" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil)
    (left_closed_right_open_interval? const-decl "bool" real_intervals_aux
     nil)
    (real_is_complete name-judgement "metric_complete" real_topology
     metric_space)
    (fullset_is_clopen name-judgement
     "clopen[real, (metric_induced_topology)]" real_topology metric_space))
   nil
   (left_closed_right_open_interval subtype "sets[real].fullset"
    "left_closed_right_open_interval")))
 (nonempty_interval_TCC1 0
  (nonempty_interval_TCC1-1 nil 3472290132
   ("" (expand "fullset")
    (("" (expand "nonempty_interval?")
      (("" (split)
        (("1" (expand "nonempty?")
          (("1" (expand "empty?")
            (("1" (inst - "0") (("1" (assert) nil nil)) nil)) nil))
          nil)
         ("2" (expand "interval?") (("2" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   ((nonempty_interval? const-decl "bool" real_intervals_aux nil)
    (interval? const-decl "bool" real_topology metric_space)
    (nonempty? const-decl "bool" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil)
    (fullset const-decl "set" sets nil))
   nil (nonempty_interval subtype "sets[real].fullset" "nonempty_interval"))))


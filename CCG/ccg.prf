(ccg
 (gte_mc?_TCC1 0
  (gte_mc?_TCC1-1 nil 3589197839 ("" (subtype-tcc) nil nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil))
   nil (gte_mc? subtype "ccg.i" "below[w`length]")))
 (gte_mc?_TCC2 0
  (gte_mc?_TCC2-1 nil 3589197839 ("" (subtype-tcc) nil nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil))
   nil (gte_mc? subtype "ccg.i" "below[length(mc)]")))
 (gte_mc?_TCC3 0
  (gte_mc?_TCC3-1 nil 3589197839 ("" (subtype-tcc) nil nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil))
   nil (gte_mc? subtype "(number_fields.+)(ccg.i, 1)" "below[length(mc)]")))
 (ccg_termination?_TCC1 0
  (ccg_termination?_TCC1-1 nil 3617653700 ("" (subtype-tcc) nil nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil))
   nil (ccg_termination? subtype "ccg.mc" "not_empty_seq[below[N]]")))
 (gt_to_gte 0
  (gt_to_gte-1 nil 3589197852
   ("" (auto-rewrite "finseq_appl")
    (("" (skeep) (("" (expand "gt_mc?") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (gt_mc? const-decl "bool" ccg nil))
   shostak))
 (gte_mc_comp_TCC1 0
  (gte_mc_comp_TCC1-1 nil 3590508528 ("" (subtype-tcc) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (N formal-const-decl "posnat" ccg nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (lt formal-const-decl "(well_founded?[MT])" ccg nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (MT formal-type-decl nil ccg nil) (NodeId formal-type-decl nil ccg nil)
    (Condition formal-type-decl nil ccg nil)
    (Expr formal-type-decl nil ccg nil) (Val formal-type-decl nil ccg nil)
    (le const-decl "bool" ccg_def nil) (ge const-decl "bool" ccg_def nil)
    (gt const-decl "bool" ccg nil) (gte_mc? const-decl "bool" ccg nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil))
   nil
   (gte_mc_comp subtype "ccg.w1"
    "not_empty_seq[CallingContext[Val, Expr, Condition, NodeId]]")))
 (gte_mc_comp_TCC2 0
  (gte_mc_comp_TCC2-1 nil 3590508528 ("" (subtype-tcc) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (N formal-const-decl "posnat" ccg nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (lt formal-const-decl "(well_founded?[MT])" ccg nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (MT formal-type-decl nil ccg nil) (NodeId formal-type-decl nil ccg nil)
    (Condition formal-type-decl nil ccg nil)
    (Expr formal-type-decl nil ccg nil) (Val formal-type-decl nil ccg nil)
    (le const-decl "bool" ccg_def nil) (ge const-decl "bool" ccg_def nil)
    (gt const-decl "bool" ccg nil) (gte_mc? const-decl "bool" ccg nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil))
   nil
   (gte_mc_comp subtype "ccg.w2"
    "not_empty_seq[CallingContext[Val, Expr, Condition, NodeId]]")))
 (gte_mc_comp_TCC3 0
  (gte_mc_comp_TCC3-1 nil 3590508528 ("" (subtype-tcc) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (CallingContext type-eq-decl nil cc_def nil)
    (Val formal-type-decl nil ccg nil) (NodeId formal-type-decl nil ccg nil)
    (Condition formal-type-decl nil ccg nil)
    (Expr formal-type-decl nil ccg nil)
    (last const-decl "T" seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (N formal-const-decl "posnat" ccg nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (lt formal-const-decl "(well_founded?[MT])" ccg nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (MT formal-type-decl nil ccg nil) (le const-decl "bool" ccg_def nil)
    (ge const-decl "bool" ccg_def nil) (gt const-decl "bool" ccg nil)
    (gte_mc? const-decl "bool" ccg nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil))
   nil (gte_mc_comp subtype "ccg.mc1" "not_empty_seq[below[N]]")))
 (gte_mc_comp_TCC4 0
  (gte_mc_comp_TCC4-1 nil 3590508528 ("" (subtype-tcc) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (CallingContext type-eq-decl nil cc_def nil)
    (Val formal-type-decl nil ccg nil) (NodeId formal-type-decl nil ccg nil)
    (Condition formal-type-decl nil ccg nil)
    (Expr formal-type-decl nil ccg nil)
    (last const-decl "T" seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (N formal-const-decl "posnat" ccg nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (lt formal-const-decl "(well_founded?[MT])" ccg nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (MT formal-type-decl nil ccg nil) (le const-decl "bool" ccg_def nil)
    (ge const-decl "bool" ccg_def nil) (gt const-decl "bool" ccg nil)
    (gte_mc? const-decl "bool" ccg nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil))
   nil (gte_mc_comp subtype "ccg.mc2" "not_empty_seq[below[N]]")))
 (gte_mc_comp_TCC5 0
  (gte_mc_comp_TCC5-1 nil 3590508528
   ("" (skeep)
    (("" (typepred "w1" "mc1" "w2" "mc2")
      (("" (hide-all-but (-3 -6 1))
        (("" (expand* "o" "rest" "^" "min" "empty_seq")
          (("" (replaces -1) (("" (replaces -1) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((measures_combination type-eq-decl nil ccg nil)
    (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Walk type-eq-decl nil walks_ digraphs) (CCG type-eq-decl nil ccg_def nil)
    (FunMeasures type-eq-decl nil ccg_def nil)
    (N formal-const-decl "posnat" ccg nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (lt formal-const-decl "(well_founded?[MT])" ccg nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (MT formal-type-decl nil ccg nil)
    (walk? const-decl "bool" walks_ digraphs)
    (prewalk type-eq-decl nil walks_ digraphs)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp digraphs)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp digraphs)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp digraphs)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]" c_digraphs_imp
     digraphs)
    (digraph_type type-eq-decl nil c_digraphs_imp digraphs)
    (cdigraph const-decl "bool" c_digraphs_def digraphs)
    (ComputableDigraph type-eq-decl nil c_digraphs_def digraphs)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (CallingContext type-eq-decl nil cc_def nil)
    (Val formal-type-decl nil ccg nil) (NodeId formal-type-decl nil ccg nil)
    (Condition formal-type-decl nil ccg nil)
    (Expr formal-type-decl nil ccg nil) (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (rest const-decl "finseq" seq_extras structures)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (^ const-decl "finseq" finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (gte_mc_comp subtype
    "finite_sequences[below[N]].o(ccg.mc1, seq_extras[below[N]].rest(ccg.mc2))"
    "ccg.measures_combination(finite_sequences[CallingContext[Val, Expr, Condition, NodeId]].o(ccg.w1, seq_extras[CallingContext[Val, Expr, Condition, NodeId]].rest(ccg.w2)))")))
 (gte_mc_comp_TCC6 0
  (gte_mc_comp_TCC6-1 nil 3590508528 ("" (subtype-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def digraphs)
    (cdigraph const-decl "bool" c_digraphs_def digraphs)
    (digraph_type type-eq-decl nil c_digraphs_imp digraphs)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]" c_digraphs_imp
     digraphs)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp digraphs)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp digraphs)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp digraphs)
    (prewalk type-eq-decl nil walks_ digraphs)
    (walk? const-decl "bool" walks_ digraphs)
    (FunMeasures type-eq-decl nil ccg_def nil)
    (CCG type-eq-decl nil ccg_def nil) (Walk type-eq-decl nil walks_ digraphs)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (measures_combination type-eq-decl nil ccg nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (edge? const-decl "bool" digraphs_ digraphs)
    (edges const-decl "bool" c_digraphs_def digraphs)
    (verts_in? const-decl "bool" walks_ digraphs)
    (vert const-decl "bool" c_digraphs_def digraphs)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (N formal-const-decl "posnat" ccg nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (lt formal-const-decl "(well_founded?[MT])" ccg nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (MT formal-type-decl nil ccg nil) (NodeId formal-type-decl nil ccg nil)
    (Condition formal-type-decl nil ccg nil)
    (Expr formal-type-decl nil ccg nil) (Val formal-type-decl nil ccg nil)
    (le const-decl "bool" ccg_def nil) (ge const-decl "bool" ccg_def nil)
    (gt const-decl "bool" ccg nil) (gte_mc? const-decl "bool" ccg nil)
    (CallingContext type-eq-decl nil cc_def nil)
    (last const-decl "T" seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (below type-eq-decl nil nat_types nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (rest const-decl "finseq" seq_extras structures)
    (O const-decl "finseq" finite_sequences nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil))
   nil
   (gte_mc_comp subtype
    "finite_sequences[CallingContext[Val, Expr, Condition, NodeId]].o(ccg.w1, seq_extras[CallingContext[Val, Expr, Condition, NodeId]].rest(ccg.w2))"
    "prewalk[CallingContext[Val, Expr, Condition, NodeId], digraph_type[CallingContext[Val, Expr, Condition, NodeId]], digraph_verts[CallingContext[Val, Expr, Condition, NodeId]], digraph_edges[CallingContext[Val, Expr, Condition, NodeId]], digraph_size[CallingContext[Val, Expr, Condition, NodeId]], digraph_make[CallingContext[Val, Expr, Condition, NodeId]]]")))
 (gte_mc_comp 0
  (gte_mc_comp-1 nil 3590508528
   ("" (auto-rewrite "finseq_appl")
    (("" (skeep*)
      (("" (expand "gte_mc?")
        (("" (assert)
          (("" (skeep)
            (("" (typepred "i")
              (("" (expand "o" -1)
                (("" (case "i < w1`length - 1")
                  (("1" (expand "o")
                    (("1" (assert) (("1" (inst -3 "i") nil nil)) nil)) nil)
                   ("2" (hide -2)
                    (("2" (case "length(w2) = 1")
                      (("1" (expand "rest" -2)
                        (("1" (expand "^" -2)
                          (("1" (assert)
                            (("1" (expand "empty_seq")
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (case "i = w1`length - 1")
                        (("1" (expand "o")
                          (("1" (assert)
                            (("1" (expand "rest")
                              (("1" (expand "^")
                                (("1" (expand* "last" "first")
                                  (("1" (assert)
                                    (("1" (typepred "mc1")
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (replace -2)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -5)
                                              (("1"
                                                (replace -6)
                                                (("1"
                                                  (inst -4 "0")
                                                  (("1" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "o")
                          (("2" (assert)
                            (("2" (expand "rest")
                              (("2" (expand "^")
                                (("2" (expand "min")
                                  (("2" (typepred "mc1")
                                    (("2" (replace -1)
                                      (("2"
                                        (inst -3 "1 - w1`length + i")
                                        (("1" (assert) nil nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (below type-eq-decl nil naturalnumbers nil)
    (rest const-decl "finseq" seq_extras structures)
    (Walk type-eq-decl nil walks_ digraphs) (CCG type-eq-decl nil ccg_def nil)
    (FunMeasures type-eq-decl nil ccg_def nil)
    (N formal-const-decl "posnat" ccg nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (lt formal-const-decl "(well_founded?[MT])" ccg nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (MT formal-type-decl nil ccg nil)
    (walk? const-decl "bool" walks_ digraphs)
    (prewalk type-eq-decl nil walks_ digraphs)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp digraphs)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp digraphs)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp digraphs)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]" c_digraphs_imp
     digraphs)
    (digraph_type type-eq-decl nil c_digraphs_imp digraphs)
    (cdigraph const-decl "bool" c_digraphs_def digraphs)
    (ComputableDigraph type-eq-decl nil c_digraphs_def digraphs)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (> const-decl "bool" reals nil)
    (O const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (CallingContext type-eq-decl nil cc_def nil)
    (Val formal-type-decl nil ccg nil) (NodeId formal-type-decl nil ccg nil)
    (Condition formal-type-decl nil ccg nil)
    (Expr formal-type-decl nil ccg nil) (below type-eq-decl nil nat_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (^ const-decl "finseq" finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (i skolem-const-decl "below(length(w1 o rest(w2)) - 1)" ccg nil)
    (w2 skolem-const-decl "Walk[CallingContext[Val, Expr, Condition, NodeId],
     digraph_type[CallingContext[Val, Expr, Condition, NodeId]],
     digraph_verts, digraph_edges, digraph_size, digraph_make](dg(G))" ccg
     nil)
    (w1 skolem-const-decl "Walk[CallingContext[Val, Expr, Condition, NodeId],
     digraph_type[CallingContext[Val, Expr, Condition, NodeId]],
     digraph_verts, digraph_edges, digraph_size, digraph_make](dg(G))" ccg
     nil)
    (G skolem-const-decl "CCG[Val, Expr, Condition, NodeId, MT, lt, N]" ccg
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (first const-decl "T" seq_extras structures)
    (last const-decl "T" seq_extras structures)
    (measures_combination type-eq-decl nil ccg nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}" real_defs
     nil)
    (gte_mc? const-decl "bool" ccg nil))
   nil))
 (gte_mc_sub_walk_TCC1 0
  (gte_mc_sub_walk_TCC1-1 nil 3611241472 ("" (subtype-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (CallingContext type-eq-decl nil cc_def nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def digraphs)
    (cdigraph const-decl "bool" c_digraphs_def digraphs)
    (digraph_type type-eq-decl nil c_digraphs_imp digraphs)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]" c_digraphs_imp
     digraphs)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp digraphs)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp digraphs)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp digraphs)
    (prewalk type-eq-decl nil walks_ digraphs)
    (walk? const-decl "bool" walks_ digraphs)
    (FunMeasures type-eq-decl nil ccg_def nil)
    (CCG type-eq-decl nil ccg_def nil) (Walk type-eq-decl nil walks_ digraphs)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (measures_combination type-eq-decl nil ccg nil)
    (vert const-decl "bool" c_digraphs_def digraphs)
    (verts_in? const-decl "bool" walks_ digraphs)
    (edges const-decl "bool" c_digraphs_def digraphs)
    (edge? const-decl "bool" digraphs_ digraphs)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^ const-decl "finseq" finite_sequences nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}" real_defs
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (N formal-const-decl "posnat" ccg nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (lt formal-const-decl "(well_founded?[MT])" ccg nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (MT formal-type-decl nil ccg nil) (NodeId formal-type-decl nil ccg nil)
    (Condition formal-type-decl nil ccg nil)
    (Expr formal-type-decl nil ccg nil) (Val formal-type-decl nil ccg nil)
    (le const-decl "bool" ccg_def nil) (ge const-decl "bool" ccg_def nil)
    (gt const-decl "bool" ccg nil) (gte_mc? const-decl "bool" ccg nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil))
   nil
   (gte_mc_sub_walk subtype
    "finite_sequences[below[N]].^(ccg.mc, (ccg.i, ccg.j))"
    "ccg.measures_combination(finite_sequences[CallingContext[Val, Expr, Condition, NodeId]].^(ccg.w, (ccg.i, ccg.j)))")))
 (gte_mc_sub_walk_TCC2 0
  (gte_mc_sub_walk_TCC2-1 nil 3611241472 ("" (subtype-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (CallingContext type-eq-decl nil cc_def nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def digraphs)
    (cdigraph const-decl "bool" c_digraphs_def digraphs)
    (digraph_type type-eq-decl nil c_digraphs_imp digraphs)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]" c_digraphs_imp
     digraphs)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp digraphs)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp digraphs)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp digraphs)
    (prewalk type-eq-decl nil walks_ digraphs)
    (walk? const-decl "bool" walks_ digraphs)
    (FunMeasures type-eq-decl nil ccg_def nil)
    (CCG type-eq-decl nil ccg_def nil) (Walk type-eq-decl nil walks_ digraphs)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (measures_combination type-eq-decl nil ccg nil)
    (vert const-decl "bool" c_digraphs_def digraphs)
    (verts_in? const-decl "bool" walks_ digraphs)
    (edges const-decl "bool" c_digraphs_def digraphs)
    (edge? const-decl "bool" digraphs_ digraphs)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^ const-decl "finseq" finite_sequences nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}" real_defs
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (N formal-const-decl "posnat" ccg nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (lt formal-const-decl "(well_founded?[MT])" ccg nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (MT formal-type-decl nil ccg nil) (NodeId formal-type-decl nil ccg nil)
    (Condition formal-type-decl nil ccg nil)
    (Expr formal-type-decl nil ccg nil) (Val formal-type-decl nil ccg nil)
    (le const-decl "bool" ccg_def nil) (ge const-decl "bool" ccg_def nil)
    (gt const-decl "bool" ccg nil) (gte_mc? const-decl "bool" ccg nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil))
   nil
   (gte_mc_sub_walk subtype
    "finite_sequences[CallingContext[Val, Expr, Condition, NodeId]].^(ccg.w, (ccg.i, ccg.j))"
    "prewalk[CallingContext[Val, Expr, Condition, NodeId], digraph_type[CallingContext[Val, Expr, Condition, NodeId]], digraph_verts[CallingContext[Val, Expr, Condition, NodeId]], digraph_edges[CallingContext[Val, Expr, Condition, NodeId]], digraph_size[CallingContext[Val, Expr, Condition, NodeId]], digraph_make[CallingContext[Val, Expr, Condition, NodeId]]]")))
 (gte_mc_sub_walk 0
  (gte_mc_sub_walk-1 nil 3611241638
   ("" (skeep)
    (("" (expand "gte_mc?")
      (("" (assert)
        (("" (expand "finseq_appl")
          (("" (skosimp)
            (("" (expand "^")
              (("" (inst -2 "i!1 + i")
                (("1" (assert) nil nil)
                 ("2" (typepred "i!1")
                  (("2" (expand "^" -1)
                    (("2" (expand "min")
                      (("2" (typepred "i" "j") (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((gte_mc? const-decl "bool" ccg nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (^ const-decl "finseq" finite_sequences nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil) (Expr formal-type-decl nil ccg nil)
    (Condition formal-type-decl nil ccg nil)
    (NodeId formal-type-decl nil ccg nil) (Val formal-type-decl nil ccg nil)
    (CallingContext type-eq-decl nil cc_def nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def digraphs)
    (cdigraph const-decl "bool" c_digraphs_def digraphs)
    (digraph_type type-eq-decl nil c_digraphs_imp digraphs)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]" c_digraphs_imp
     digraphs)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp digraphs)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp digraphs)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp digraphs)
    (prewalk type-eq-decl nil walks_ digraphs)
    (walk? const-decl "bool" walks_ digraphs)
    (MT formal-type-decl nil ccg nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (lt formal-const-decl "(well_founded?[MT])" ccg nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" ccg nil)
    (FunMeasures type-eq-decl nil ccg_def nil)
    (CCG type-eq-decl nil ccg_def nil)
    (G skolem-const-decl "CCG[Val, Expr, Condition, NodeId, MT, lt, N]" ccg
     nil)
    (Walk type-eq-decl nil walks_ digraphs)
    (w skolem-const-decl "Walk[CallingContext[Val, Expr, Condition, NodeId],
     digraph_type[CallingContext[Val, Expr, Condition, NodeId]],
     digraph_verts, digraph_edges, digraph_size, digraph_make](dg(G))" ccg
     nil)
    (below type-eq-decl nil naturalnumbers nil)
    (i skolem-const-decl "below(length(w))" ccg nil)
    (j skolem-const-decl "below(length(w))" ccg nil)
    (i!1 skolem-const-decl "below(length(w ^ (i, j)) - 1)" ccg nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   shostak))
 (gt_mc_comp 0
  (gt_mc_comp-2 "" 3790334963
   ("" (auto-rewrite "finseq_appl")
    (("" (skeep*)
      (("" (expand "gt_mc?" 1)
        (("" (assert)
          (("" (split 1)
            (("1" (hide -3 -4 -5)
              (("1" (lemma "gte_mc_comp")
                (("1" (inst -1 "G" "w1" "w2" "mc1" "mc2")
                  (("1" (assert) nil nil)) nil))
                nil))
              nil)
             ("2" (split)
              (("1" (expand "gt_mc?")
                (("1" (skeep)
                  (("1" (assert)
                    (("1" (typepred "i")
                      (("1" (inst 1 "i")
                        (("1" (expand "o") (("1" (propax) nil nil)) nil)
                         ("2" (expand "o")
                          (("2" (expand "rest")
                            (("2" (expand "^")
                              (("2" (assert)
                                (("2" (expand "min")
                                  (("2" (lift-if)
                                    (("2" (expand "empty_seq")
                                      (("2" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "gt_mc?")
                (("2" (skeep)
                  (("2" (assert)
                    (("2" (typepred "i")
                      (("2" (inst 1 "i + length(w1) - 1")
                        (("1" (expand "o")
                          (("1" (assert)
                            (("1" (case "i = 0")
                              (("1" (assert)
                                (("1" (replace -1)
                                  (("1" (assert)
                                    (("1" (expand* "first" "last")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -6)
                                          (("1"
                                            (typepred "mc1")
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (replace -8)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "rest")
                                                    (("1"
                                                      (expand "^")
                                                      (("1" (propax) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert)
                                (("2" (expand "rest")
                                  (("2" (expand "^")
                                    (("2" (typepred "mc1")
                                      (("2"
                                        (replace -1)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand* "o" "rest" "^" "min")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (gt_mc_comp-1 nil 3590517387
   ("" (auto-rewrite "finseq_appl")
    (("" (skeep*)
      (("" (expand "gt_mc?" 1)
        (("" (assert)
          (("" (split 1)
            (("1" (hide -3 -4 -5)
              (("1" (lemma "gte_mc_comp")
                (("1" (inst -1 "G" "w1" "w2" "mc1" "mc2")
                  (("1" (assert) nil nil)) nil))
                nil))
              nil)
             ("2" (split)
              (("1" (expand "gt_mc?")
                (("1" (skeep)
                  (("1" (assert)
                    (("1" (typepred "i")
                      (("1" (inst 1 "i")
                        (("1" (expand "o") (("1" (propax) nil nil)) nil)
                         ("2" (expand "o")
                          (("2" (expand "rest")
                            (("2" (expand "^")
                              (("2" (assert)
                                (("2" (expand "min")
                                  (("2" (assert)
                                    (("2" (lift-if)
                                      (("2"
                                        (expand "empty_seq")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "gt_mc?")
                (("2" (skeep)
                  (("2" (assert)
                    (("2" (typepred "i")
                      (("2" (inst 1 "i + length(w1) - 1")
                        (("1" (expand "o")
                          (("1" (assert)
                            (("1" (case "i = 0")
                              (("1" (assert)
                                (("1" (replace -1)
                                  (("1" (assert)
                                    (("1" (expand* "first" "last")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -6)
                                          (("1"
                                            (typepred "mc1")
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (replace -8)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "rest")
                                                    (("1"
                                                      (expand "^")
                                                      (("1" (propax) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert)
                                (("2" (expand "rest")
                                  (("2" (expand "^")
                                    (("2" (typepred "mc1")
                                      (("2"
                                        (replace -1)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand* "o" "rest" "^" "min")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (^ const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (w2 skolem-const-decl "Walk[CallingContext[Val, Expr, Condition, NodeId],
     digraph_type[CallingContext[Val, Expr, Condition, NodeId]],
     digraph_verts, digraph_edges, digraph_size, digraph_make](dg(G))" ccg
     nil)
    (rest const-decl "finseq" seq_extras structures)
    (O const-decl "finseq" finite_sequences nil)
    (i skolem-const-decl "below(length(w1) - 1)" ccg nil)
    (w1 skolem-const-decl "Walk[CallingContext[Val, Expr, Condition, NodeId],
     digraph_type[CallingContext[Val, Expr, Condition, NodeId]],
     digraph_verts, digraph_edges, digraph_size, digraph_make](dg(G))" ccg
     nil)
    (G skolem-const-decl "CCG[Val, Expr, Condition, NodeId, MT, lt, N]" ccg
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (last const-decl "T" seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (i skolem-const-decl "below(length(w2) - 1)" ccg nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Expr formal-type-decl nil ccg nil)
    (Condition formal-type-decl nil ccg nil)
    (NodeId formal-type-decl nil ccg nil) (Val formal-type-decl nil ccg nil)
    (CallingContext type-eq-decl nil cc_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def digraphs)
    (cdigraph const-decl "bool" c_digraphs_def digraphs)
    (MT formal-type-decl nil ccg nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (lt formal-const-decl "(well_founded?[MT])" ccg nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" ccg nil)
    (FunMeasures type-eq-decl nil ccg_def nil)
    (CCG type-eq-decl nil ccg_def nil) (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (digraph_type type-eq-decl nil c_digraphs_imp digraphs)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]" c_digraphs_imp
     digraphs)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp digraphs)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp digraphs)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp digraphs)
    (prewalk type-eq-decl nil walks_ digraphs)
    (walk? const-decl "bool" walks_ digraphs)
    (Walk type-eq-decl nil walks_ digraphs) (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (measures_combination type-eq-decl nil ccg nil)
    (gte_mc_comp formula-decl nil ccg nil) (gt_mc? const-decl "bool" ccg nil))
   shostak))
 (parext_TCC1 0
  (parext_TCC1-1 nil 3652118241 ("" (subtype-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (/= const-decl "boolean" notequal nil))
   nil (parext subtype "(ccg.i, ccg.j)" "(ccg.izzy)")))
 (parext 0
  (parext-1 nil 3652118260
   ("" (skoletin 1)
    (("" (skeep)
      ((""
        (inst + "LAMBDA (i,j:nat): IF i/=j THEN FF(i,j) ELSE FF(0,1) ENDIF")
        (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil))
        nil))
      nil))
    nil)
   ((IF const-decl "[boolean, T, T -> T]" if_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (izzy skolem-const-decl "[[nat, nat] -> boolean]" ccg nil)
    (below type-eq-decl nil nat_types nil) (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" ccg nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (ge_transitive 0
  (ge_transitive-1 nil 3652456670
   ("" (flatten)
    (("" (skeep)
      (("" (expand "transitive?")
        (("" (expand "ge")
          (("" (expand "le")
            (("" (ground)
              (("" (inst - "mt3" "mt2" "mt1") (("" (ground) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ge const-decl "bool" ccg_def nil) (MT formal-type-decl nil ccg nil)
    (le const-decl "bool" ccg_def nil)
    (transitive? const-decl "bool" relations nil))
   shostak))
 (ge_gt_transitive 0
  (ge_gt_transitive-1 nil 3652457631
   ("" (flatten)
    (("" (skeep)
      (("" (expand "ge")
        (("" (expand "gt")
          (("" (expand "le")
            (("" (ground)
              (("" (expand "transitive?")
                (("" (inst - "mt3" "mt2" "mt1") (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((gt const-decl "bool" ccg_def nil) (MT formal-type-decl nil ccg nil)
    (transitive? const-decl "bool" relations nil)
    (le const-decl "bool" ccg_def nil) (ge const-decl "bool" ccg_def nil))
   shostak))
 (gt_ge_transitive 0
  (gt_ge_transitive-1 nil 3652515639
   ("" (flatten)
    (("" (skeep)
      (("" (expand "ge")
        (("" (expand "gt")
          (("" (expand "le")
            (("" (ground)
              (("" (expand "transitive?")
                (("" (inst - "mt3" "mt2" "mt1") (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((gt const-decl "bool" ccg_def nil) (MT formal-type-decl nil ccg nil)
    (transitive? const-decl "bool" relations nil)
    (le const-decl "bool" ccg_def nil) (ge const-decl "bool" ccg_def nil))
   nil))
 (extract_infinite_descent 0
  (lostproof "help" 3652635789
   (""
    (case "NOT (FORALL (J: IncSub, F: [nat -> MT], K: nat):
               (FORALL (i: nat):
                  EXISTS (j: nat):
                    J(i) + j < J(i + 1) AND gt(F(J(i) + j), F(J(i) + j + 1)))
                AND (FORALL (i: nat): i >= K IMPLIES ge(F(i), F(i + 1)))
                IMPLIES
                (EXISTS (I: IncSub): FORALL (i: nat): gt(F(I(i)), F(I(i + 1)))))")
    (("1" (hide 2)
      (("1"
        (case "NOT FORALL (J: IncSub, F: [nat -> MT]):
                               (FORALL (i: nat):
                                  EXISTS (j: nat):
                                    J(i) + j < J(i + 1) AND gt(F(J(i) + j), F(J(i) + j + 1)))
                                AND (FORALL (i: nat): ge(F(i), F(i + 1)))
                                IMPLIES
                                (EXISTS (I: IncSub): FORALL (i: nat): gt(F(I(i)), F(I(i + 1))))")
        (("1" (hide 2)
          (("1" (skeep)
            (("1" (lemma "enum_natset")
              (("1" (name "P" "LAMBDA (i:nat): gt(F(i),F(i+1))")
                (("1" (inst - "P")
                  (("1"
                    (case "NOT (EXISTS (K: nat): FORALL (i:nat): i >= K IMPLIES NOT P(i))")
                    (("1" (assert)
                      (("1" (split -)
                        (("1" (propax) nil nil)
                         ("2" (assert)
                          (("2" (skolem - "II")
                            (("2" (inst 2 "II")
                              (("2" (skeep)
                                (("2" (inst-cp - "II(i)")
                                  (("2" (flatten)
                                    (("2" (hide -2)
                                      (("2"
                                        (split -)
                                        (("1"
                                          (expand "P" -1)
                                          (("1"
                                            (case "F(1+II(i)) = F(II(1+i))")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (typepred "II")
                                              (("2"
                                                (inst - "i" "i+1")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (case
                                                     "FORALL (k:nat): 1+II(i)+k <= II(1+i) IMPLIES F(1+II(i)) = F(1+II(i)+k)")
                                                    (("1"
                                                      (inst
                                                       -
                                                       "II(i+1)-II(i)-1")
                                                      (("1" (assert) nil nil))
                                                      nil)
                                                     ("2"
                                                      (induct "k")
                                                      (("1" (assert) nil nil)
                                                       ("2"
                                                        (skolem 1 "k")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (copy -8)
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "1+II(i)+k")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (case
                                                                     "NOT gt(F(1 + II(i) + k), F(2 + II(i) + k))")
                                                                    (("1"
                                                                      (expand
                                                                       "ge"
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         "gt"
                                                                         1)
                                                                        (("1"
                                                                          (expand
                                                                           "le"
                                                                           -1)
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       -2)
                                                                      (("2"
                                                                        (case
                                                                         "NOT P(1+II(i)+k)")
                                                                        (("1"
                                                                          (expand
                                                                           "P"
                                                                           1)
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (copy
                                                                           -7)
                                                                          (("2"
                                                                            (inst?
                                                                             -1)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (skeep
                                                                                 -)
                                                                                (("2"
                                                                                  (case
                                                                                   "j = 1+i")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (case
                                                                                     "j < 1+i")
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "II")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "j"
                                                                                         "i")
                                                                                        (("1"
                                                                                          (ground)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (case
                                                                                       "NOT j > 1+i")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         (1
                                                                                          2))
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "II")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -
                                                                                             "1+i"
                                                                                             "j")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (inst + "i") nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skeep -)
                      (("2" (case "J(K+1)>=K+1")
                        (("1" (inst -5 "K+1")
                          (("1" (assert)
                            (("1" (skeep -)
                              (("1" (inst - "j+J(1+K)")
                                (("1" (assert)
                                  (("1" (expand "P" 1)
                                    (("1" (propax) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1)
                          (("2" (case "FORALL (IJ:IncSub,jj:nat): IJ(jj)>=jj")
                            (("1" (inst?) nil nil)
                             ("2" (hide 2)
                              (("2" (induct "jj")
                                (("1" (grind) nil nil)
                                 ("2" (skeep)
                                  (("2" (skeep)
                                    (("2" (inst - "IJ")
                                      (("2"
                                        (typepred "IJ")
                                        (("2"
                                          (inst - "j" "1+j")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (inst - "LAMBDA (i:nat): J(i+K)-K" "LAMBDA (i:nat): F(i+K)")
            (("1" (split -)
              (("1" (skolem - "II")
                (("1" (inst + "LAMBDA (i:nat): II(i)+K")
                  (("1" (skosimp*)
                    (("1" (typepred "II")
                      (("1" (inst - "i!1" "j!1") (("1" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (skolem 1 "ii")
                  (("2" (inst - "ii+K")
                    (("2" (assert)
                      (("2" (skeep -)
                        (("2" (inst + "j") (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (skosimp*)
                (("3" (inst -2 "i!1+K") (("3" (assert) nil nil)) nil)) nil))
              nil)
             ("2" (hide-all-but 1)
              (("2" (typepred "J")
                (("2" (skosimp*)
                  (("2" (inst - "i!1+K" "j!1+K") (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (hide-all-but 1)
              (("3" (case "FORALL (mmm:nat): J(mmm)>=mmm")
                (("1" (skeep)
                  (("1" (inst - "i+K") (("1" (assert) nil nil)) nil)) nil)
                 ("2" (hide 2)
                  (("2" (induct "mmm")
                    (("1" (assert) nil nil)
                     ("2" (skeep)
                      (("2" (typepred "J")
                        (("2" (inst - "j" "j+1") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (insteep -)
        (("2" (replace -2)
          (("2" (replace -3)
            (("2" (hide -2)
              (("2" (hide -2)
                (("2" (skeep)
                  (("2" (typepred "lt")
                    (("2" (expand "well_founded?")
                      (("2"
                        (name "P"
                              "LAMBDA (mt:MT): EXISTS (i:nat): F(I!1(i)) = mt")
                        (("2" (inst - "P")
                          (("2" (split -)
                            (("1" (skeep)
                              (("1" (typepred "y")
                                (("1" (expand "P" -1)
                                  (("1" (skeep -)
                                    (("1" (replaces -1 :dir rl)
                                      (("1"
                                        (inst - "F(I!1(i+1))")
                                        (("1"
                                          (inst - "i")
                                          (("1"
                                            (expand "gt")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "P" 1)
                                          (("2" (inst?) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (inst + "F(I!1(0))")
                              (("2" (expand "P" 1) (("2" (inst?) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((P skolem-const-decl "[MT -> boolean]" ccg nil)
    (TRUE const-decl "bool" booleans nil) (i skolem-const-decl "nat" ccg nil)
    (I!1 skolem-const-decl "IncSub" ccg nil)
    (F skolem-const-decl "[nat -> MT]" ccg nil)
    (II skolem-const-decl "IncSub" ccg nil)
    (K skolem-const-decl "nat" ccg nil) (J skolem-const-decl "IncSub" ccg nil)
    (enum_natset formula-decl nil ramsey_graph ints)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (P skolem-const-decl "[nat -> bool]" ccg nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (le const-decl "bool" ccg_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (IncSub type-eq-decl nil ramsey_graph ints)
    (MT formal-type-decl nil ccg nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Val formal-type-decl nil ccg nil) (Expr formal-type-decl nil ccg nil)
    (Condition formal-type-decl nil ccg nil)
    (NodeId formal-type-decl nil ccg nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (lt formal-const-decl "(well_founded?[MT])" ccg nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" ccg nil) (gt const-decl "bool" ccg_def nil)
    (ge const-decl "bool" ccg_def nil))
   shostak)
  (extract_infinite_descent-1 nil 3652619806
   ("" (skeep)
    (("" (lemma "enum_natset")
      (("" (name "P" "LAMBDA (i:nat): gt(F(i),F(i+1))")
        (("" (inst - "P")
          ((""
            (case "NOT (EXISTS (K: nat): FORALL (i): i >= K IMPLIES NOT P(i))")
            (("1" (assert)
              (("1" (split -)
                (("1" (assert)
                  (("1" (hide-all-but (-1 1))
                    (("1" (skeep)
                      (("1" (inst + "K")
                        (("1" (skeep)
                          (("1" (inst - "i") (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (skolem - "II")
                    (("2" (inst 2 "II")
                      (("2" (skeep)
                        (("2" (inst-cp - "II(i)")
                          (("2" (flatten)
                            (("2" (hide -2)
                              (("2" (split -)
                                (("1" (expand "P" -1)
                                  (("1" (case "F(1+II(i)) = F(II(1+i))")
                                    (("1" (assert) nil nil)
                                     ("2" (typepred "II")
                                      (("2"
                                        (inst - "i" "i+1")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (case
                                             "FORALL (k:nat): 1+II(i)+k <= II(1+i) IMPLIES F(1+II(i)) = F(1+II(i)+k)")
                                            (("1"
                                              (inst - "II(i+1)-II(i)-1")
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (induct "k")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (skolem 1 "k")
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (copy -8)
                                                      (("2"
                                                        (inst - "1+II(i)+k")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (case
                                                             "NOT gt(F(1 + II(i) + k), F(2 + II(i) + k))")
                                                            (("1"
                                                              (expand "ge" -1)
                                                              (("1"
                                                                (expand
                                                                 "gt"
                                                                 1)
                                                                (("1"
                                                                  (expand
                                                                   "le"
                                                                   -1)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide -2)
                                                              (("2"
                                                                (case
                                                                 "NOT P(1+II(i)+k)")
                                                                (("1"
                                                                  (expand
                                                                   "P"
                                                                   1)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (copy -7)
                                                                  (("2"
                                                                    (inst? -1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (skeep
                                                                         -)
                                                                        (("2"
                                                                          (case
                                                                           "j = 1+i")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (case
                                                                             "j < 1+i")
                                                                            (("1"
                                                                              (typepred
                                                                               "II")
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "j"
                                                                                 "i")
                                                                                (("1"
                                                                                  (ground)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (case
                                                                               "NOT j > 1+i")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 (1
                                                                                  2))
                                                                                (("2"
                                                                                  (typepred
                                                                                   "II")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -
                                                                                     "1+i"
                                                                                     "j")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (inst + "i") nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep -)
              (("2" (case "J(K+1)>=K+1")
                (("1" (inst -5 "K+1")
                  (("1" (assert)
                    (("1" (skeep -)
                      (("1" (lemma "enum_natset") (("1" (postpone) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (postpone) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (build_infinite_descent_TCC1 0
  (build_infinite_descent_TCC1-1 nil 3652774369 ("" (subtype-tcc) nil nil)
   ((IncSub type-eq-decl nil ramsey_graph ints)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (N formal-const-decl "posnat" ccg nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (lt formal-const-decl "(well_founded?[MT])" ccg nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (MT formal-type-decl nil ccg nil) (NodeId formal-type-decl nil ccg nil)
    (Condition formal-type-decl nil ccg nil)
    (Expr formal-type-decl nil ccg nil) (Val formal-type-decl nil ccg nil)
    (gt const-decl "bool" ccg_def nil) (le const-decl "bool" ccg_def nil)
    (ge const-decl "bool" ccg_def nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   nil
   (build_infinite_descent subtype
    "(number_fields.-)(ccg.J((number_fields.+)(ccg.j, 1)), ccg.J(ccg.j))"
    "nat")))
 (build_infinite_descent 0
  (build_infinite_descent-2 nil 3652774532
   ("" (skeep)
    ((""
      (case "NOT EXISTS (ZZ:[nat->nat]): (FORALL (i,j:nat): J(0)<=i IMPLIES ( i<=j IMPLIES ZZ(i)<=ZZ(j))) AND FORALL (i:nat): J(0)<=i IMPLIES ( J(ZZ(i))<=i AND i<J(ZZ(i)+1))")
      (("1"
        (case "EXISTS (ZZ:[nat->nat]):  FORALL (i:nat): J(0)<=i IMPLIES (J(ZZ(i))<=i AND i<J(ZZ(i)+1))")
        (("1" (skeep)
          (("1" (inst + "ZZ")
            (("1" (replace -1)
              (("1" (skeep)
                (("1" (inst-cp - "i")
                  (("1" (inst - "j")
                    (("1" (assert)
                      (("1" (flatten)
                        (("1" (typepred "J")
                          (("1" (inst - "ZZ(j)+1" "ZZ(i)")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (hide -)
            (("2"
              (case "FORALL (i:nat): J(0)<=i IMPLIES EXISTS (j:nat): J(j)<=i AND i<J(j+1)")
              (("1"
                (name "FF"
                      "LAMBDA (i:nat): choose({j:nat|J(0)<=i IMPLIES (J(j)<=i AND i<J(j+1))})")
                (("1" (inst + "FF")
                  (("1" (skeep)
                    (("1" (typepred "FF(i)") (("1" (assert) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (expand "nonempty?")
                    (("2" (expand "empty?")
                      (("2" (expand "member")
                        (("2" (skeep)
                          (("2" (inst -2 "i")
                            (("2" (assert)
                              (("2" (case "J(0)<=i")
                                (("1" (assert)
                                  (("1" (skeep)
                                    (("1" (inst -2 "j")
                                      (("1" (assert) nil nil)) nil))
                                    nil))
                                  nil)
                                 ("2" (inst - "0") (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (induct "i")
                  (("1" (flatten)
                    (("1" (inst + "0")
                      (("1" (assert)
                        (("1" (typepred "J")
                          (("1" (inst - "0" "1") (("1" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skolem 1 "i")
                    (("2" (flatten)
                      (("2" (assert)
                        (("2" (case "EXISTS (k:nat): 1+i = J(k)")
                          (("1" (skeep -)
                            (("1" (inst + "k")
                              (("1" (assert)
                                (("1"
                                  (case "FORALL (ii,jj:nat): ii<jj IMPLIES J(ii)<J(jj)")
                                  (("1" (inst - "k" "1+k")
                                    (("1" (assert) nil nil)) nil)
                                   ("2" (hide-all-but 1)
                                    (("2" (typepred "J")
                                      (("2" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (inst-cp + "0")
                            (("2" (assert)
                              (("2" (skeep -)
                                (("2" (inst 3 "j")
                                  (("2" (assert)
                                    (("2" (inst + "1+j")
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2"
          (case "NOT FORALL (i,j:nat): J(j)<=i AND i<J(j+1) IMPLIES j = ZZ(i)")
          (("1" (hide-all-but (-2 1))
            (("1" (skeep)
              (("1" (case "NOT J(0)<=i")
                (("1" (ground)
                  (("1" (typepred "j")
                    (("1" (typepred "J")
                      (("1" (inst-cp - "0" "j") (("1" (ground) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (inst - "i")
                    (("2" (assert)
                      (("2" (flatten)
                        (("2" (case "j < ZZ(i)")
                          (("1" (typepred "J")
                            (("1" (inst-cp - "j+1" "ZZ(i)")
                              (("1" (ground) nil nil)) nil))
                            nil)
                           ("2" (typepred "J")
                            (("2" (inst-cp - "ZZ(i)+1" "j")
                              (("2" (ground) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (label "Zdef" -1)
            (("2"
              (name "D"
                    "LAMBDA (i:nat): IF i>=J(0) THEN F(ZZ(i))(i-J(ZZ(i)))(vals(i)) ELSE F(0)(0)(vals(0)) ENDIF")
              (("1" (lemma "extract_infinite_descent")
                (("1" (inst - "J" "D" "J(0)")
                  (("1" (split)
                    (("1" (skeep)
                      (("1" (inst -5 "i")
                        (("1" (flatten)
                          (("1" (copy -6)
                            (("1" (hide -7)
                              (("1" (skolem - "j")
                                (("1" (flatten)
                                  (("1" (inst + "j")
                                    (("1" (assert)
                                      (("1"
                                        (expand "D" +)
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (case "NOT J(i)+j>=J(0)")
                                                (("1"
                                                  (typepred "J")
                                                  (("1"
                                                    (inst - "0" "i")
                                                    (("1" (ground) nil nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (case "NOT ZZ(J(i)+j)=i")
                                                    (("1"
                                                      (inst
                                                       "Zdef"
                                                       "J(i)+j"
                                                       "i")
                                                      (("1" (assert) nil nil))
                                                      nil)
                                                     ("2"
                                                      (replace -1)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (case
                                                           "NOT j = J(i+1)-J(i)-1")
                                                          (("1"
                                                            (case
                                                             "NOT ZZ(1+J(i)+j) = i")
                                                            (("1"
                                                              (inst
                                                               "Zdef"
                                                               "J(i)+1+j"
                                                               "i")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (replace -1)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (replace -1 +)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (inst
                                                                   "Zdef"
                                                                   "J(i+1)"
                                                                   "i+1")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (typepred
                                                                       "J")
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "1+i"
                                                                         "2+i")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skeep)
                      (("2" (expand "D" +)
                        (("2" (lift-if)
                          (("2" (lift-if)
                            (("2" (assert)
                              (("2" (case "i+1 /= J(ZZ(1+i))")
                                (("1" (case "NOT ZZ(1+i) = ZZ(i)")
                                  (("1" (case "i+1<J(ZZ(i)+1)")
                                    (("1" (flatten)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst "Zdef" "i+1" "ZZ(i)")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst -5 "i")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (flatten)
                                      (("2"
                                        (typepred "J")
                                        (("2"
                                          (inst - "ZZ(i)" "ZZ(i+1)")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (split -)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (copy -6)
                                                  (("1"
                                                    (inst-cp - "i")
                                                    (("1"
                                                      (inst - "i+1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (typepred "J")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "ZZ(i)+1"
                                                                 "ZZ(i+1)")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case
                                                                     "ZZ(i)<=ZZ(1+i)")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (typepred
                                                                         "J")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "ZZ(1+i)"
                                                                           "ZZ(i)")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (case "ZZ(i)<=ZZ(1+i)")
                                                  (("1" (assert) nil nil)
                                                   ("2"
                                                    (typepred "J")
                                                    (("2"
                                                      (inst
                                                       -
                                                       "ZZ(1+i)"
                                                       "ZZ(i)")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (inst-cp -6 "i")
                                                          (("2"
                                                            (inst -6 "i+1")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (typepred
                                                                     "J")
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "ZZ(1+i)+1"
                                                                       "ZZ(i)")
                                                                      (("2"
                                                                        (ground)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert)
                                    (("2" (replace -1)
                                      (("2"
                                        (inst -7 "ZZ(i)")
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (inst -7 "i-J(ZZ(i))")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst -6 "i")
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (inst -6 "i")
                                                (("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (flatten)
                                  (("2" (case "NOT 1 - J(ZZ(1 + i)) + i = 0")
                                    (("1" (assert) nil nil)
                                     ("2" (replace -1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (case "ZZ(1+i) = ZZ(i)+1")
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst-cp -9 "ZZ(i)")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replace -12 1 :dir rl)
                                                      (("1"
                                                        (inst
                                                         -10
                                                         "i-J(ZZ(i))")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (copy "Zdef")
                                              (("2"
                                                (inst - "i+1" "ZZ(i)+1")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (copy -7)
                                                    (("2"
                                                      (inst - "i")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (case
                                                               "1+ZZ(i)<ZZ(i+1)")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (typepred
                                                                   "J")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "1+ZZ(i)"
                                                                     "ZZ(i+1)")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (case
                                                                 "1+ZZ(i)<=ZZ(i+1)")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (hide 2)
                                                                    (("2"
                                                                      (typepred
                                                                       "J")
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "ZZ(i+1)"
                                                                         "ZZ(i)")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep) (("2" (inst -4 "i") (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IncSub type-eq-decl nil ramsey_graph ints)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil) (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (MT formal-type-decl nil ccg nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (Val formal-type-decl nil ccg nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ZZ skolem-const-decl "[nat -> nat]" ccg nil)
    (J skolem-const-decl "IncSub" ccg nil) (i skolem-const-decl "nat" ccg nil)
    (/= const-decl "boolean" notequal nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (D skolem-const-decl "[nat -> MT]" ccg nil)
    (extract_infinite_descent formula-decl nil ccg nil))
   nil)
  (build_infinite_descent-1 nil 3652774406
   ("" (skeep) (("" (postpone) nil nil)) nil) nil shostak))
 (ccg_pigeonhole 0
  (ccg_pigeonhole-1 nil 3652530648
   ("" (skeep)
    (("" (lemma "VertexRamsey")
      (("" (use "vert_is_finite")
        (("" (split -1)
          (("1" (lemma "Card_bijection[CallingContext]")
            (("1" (inst?)
              (("1" (name "K" "Card(vert(dg))")
                (("1" (inst - "K")
                  (("1" (assert)
                    (("1" (copy -2)
                      (("1" (skeep -)
                        (("1" (case "K = 0")
                          (("1" (assert)
                            (("1" (typepred "ccs")
                              (("1" (inst - "0")
                                (("1" (flatten)
                                  (("1" (assert)
                                    (("1" (lemma "empty_card[CallingContext]")
                                      (("1"
                                        (lemma "card_def[CallingContext]")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "empty?")
                                                (("1"
                                                  (inst - "ccs(0)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "member")
                                                      (("1" (propax) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (inst - "K" "LAMBDA (j:nat): f(ccs(j))")
                            (("1" (lemma "enum_natset")
                              (("1" (skeep -6)
                                (("1"
                                  (name "P"
                                        "LAMBDA (i:nat): EXISTS (j:nat): J(j) = i")
                                  (("1" (inst - "P")
                                    (("1" (split -)
                                      (("1"
                                        (hide-all-but -1)
                                        (("1"
                                          (expand "P")
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (inst - "J(K!1)")
                                              (("1"
                                                (split -)
                                                (("1" (inst?) nil nil)
                                                 ("2"
                                                  (case
                                                   "NOT FORALL (jj:nat): J(jj)>=jj")
                                                  (("1"
                                                    (typepred "J")
                                                    (("1"
                                                      (induct "jj")
                                                      (("1" (assert) nil nil)
                                                       ("2"
                                                        (skeep)
                                                        (("2"
                                                          (inst - "j" "j+1")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2" (inst?) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skolem - "H")
                                        (("2"
                                          (inst + "H")
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (typepred "H")
                                              (("2"
                                                (inst - "i" "j")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (inst-cp - "H(i)")
                                                    (("2"
                                                      (inst - "H(j)")
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (hide -2)
                                                          (("2"
                                                            (hide -3)
                                                            (("2"
                                                              (split -)
                                                              (("1"
                                                                (split -)
                                                                (("1"
                                                                  (expand
                                                                   "P"
                                                                   (-1 -2))
                                                                  (("1"
                                                                    (skosimp*)
                                                                    (("1"
                                                                      (replaces
                                                                       -1
                                                                       :dir
                                                                       rl)
                                                                      (("1"
                                                                        (replaces
                                                                         -1
                                                                         :dir
                                                                         rl)
                                                                        (("1"
                                                                          (inst-cp
                                                                           -
                                                                           "j!1")
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "j!2")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "bijective?")
                                                                                (("1"
                                                                                  (expand
                                                                                   "injective?")
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "ccs(J(j!1))"
                                                                                       "ccs(J(j!2))")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (inst + "i")
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (inst + "j")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 3)
                              (("2" (typepred "ccs")
                                (("2" (skeep)
                                  (("2" (inst - "j") (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((VertexRamsey formula-decl nil ramsey_graph ints)
    (finite_set type-eq-decl nil finite_sets nil)
    (vert_finite formula-decl nil c_digraphs_def digraphs)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (edges const-decl "bool" c_digraphs_def digraphs)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Seq_cc type-eq-decl nil ccg nil)
    (empty_card formula-decl nil finite_sets nil)
    (member def-decl "bool" list_props nil)
    (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil)
    (card_def formula-decl nil finite_sets nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (enum_natset formula-decl nil ramsey_graph ints)
    (IncSub type-eq-decl nil ramsey_graph ints)
    (P skolem-const-decl "[nat -> boolean]" ccg nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (injective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (pred type-eq-decl nil defined_types nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil)
    (VertexColoring type-eq-decl nil ramsey_graph ints)
    (ccs skolem-const-decl "Seq_cc(dg)" ccg nil)
    (dg skolem-const-decl "(cdigraph)" ccg nil)
    (K skolem-const-decl "nat" ccg nil) (> const-decl "bool" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (vert const-decl "bool" c_digraphs_def digraphs)
    (c_digraph type-eq-decl nil c_digraphs_def digraphs)
    (Card const-decl "nat" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Card_bijection formula-decl nil finite_sets nil)
    (concretedigraph_implements_abstractdigraph formula-decl nil circuits_
     digraphs)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp digraphs)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp digraphs)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp digraphs)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]" c_digraphs_imp
     digraphs)
    (digraph_type type-eq-decl nil c_digraphs_imp digraphs)
    (cdigraph const-decl "bool" c_digraphs_def digraphs)
    (ComputableDigraph type-eq-decl nil c_digraphs_def digraphs)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (CallingContext type-eq-decl nil cc_def nil)
    (Val formal-type-decl nil ccg nil) (NodeId formal-type-decl nil ccg nil)
    (Condition formal-type-decl nil ccg nil)
    (Expr formal-type-decl nil ccg nil)
    (vert_is_finite formula-decl nil digraphs_abs digraphs))
   nil))
 (ccg_termination_and_trans_implies_scp 0
  (ccg_termination_and_trans_implies_scp-1 nil 3653083995
   ("" (flatten)
    (("" (label "tzzz" -1)
      (("" (hide -1)
        (("" (skeep)
          (("" (skeep)
            (("" (name "GG" "make_ccg(dg,fms)")
              (("" (expand "ccg_termination?")
                (("" (expand "scp_termination?")
                  (("" (copy 1)
                    (("" (skeep 1)
                      (("" (expand "infinite_seq_ccs" -1)
                        (("" (label "grg" -1)
                          ((""
                            (case "EXISTS (J:[nat->nat]): (FORALL (i,j:nat): i<j IMPLIES J(i)<J(j) AND ccs(J(i)) = ccs(J(j)))")
                            (("1" (label "prizey" -1)
                              (("1" (skeep -)
                                (("1"
                                  (name "CC"
                                        "LAMBDA (j:nat,p:nat): LET M = abs(J(j+p)-J(j))+1 IN (# length:=M,seq:=(LAMBDA (i:below[M]): ccs(J(j)+i)) #)")
                                  (("1"
                                    (case "NOT FORALL (j:nat,p:posnat): circuit?(dg(GG),CC(j,p))")
                                    (("1" (skeep)
                                      (("1"
                                        (expand "circuit?" 1)
                                        (("1"
                                          (hide 2)
                                          (("1"
                                            (split +)
                                            (("1"
                                              (expand "pre_circuit?")
                                              (("1"
                                                (split)
                                                (("1"
                                                  (expand "walk?")
                                                  (("1"
                                                    (split)
                                                    (("1"
                                                      (expand "verts_in?")
                                                      (("1"
                                                        (skosimp*)
                                                        (("1"
                                                          (typepred "i!1")
                                                          (("1"
                                                            (expand "CC" -1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "CC"
                                                                 1)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "GG"
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "make_ccg")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (typepred
                                                                           "ccs")
                                                                          (("1"
                                                                            (inst?)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (skeep)
                                                      (("2"
                                                        (expand "edge?" 1)
                                                        (("2"
                                                          (expand
                                                           "finseq_appl")
                                                          (("2"
                                                            (expand "GG" 1)
                                                            (("2"
                                                              (expand
                                                               "make_ccg")
                                                              (("2"
                                                                (expand
                                                                 "CC"
                                                                 1)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (typepred
                                                                     "ccs")
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "J(j)+n")
                                                                      (("2"
                                                                        (ground)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "finseq_appl")
                                                  (("2"
                                                    (expand "CC" 1)
                                                    (("2"
                                                      (inst - "j" "j+p")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "CC" 1)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (inst -2 "j" "j+p")
                                                  (("2" (grind) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (hide 1)
                                      (("2"
                                        (name
                                         "DD"
                                         "LAMBDA (i,j:nat): IF i<=j THEN CC(i,j-i) ELSE CC(j,i-j) ENDIF")
                                        (("1"
                                          (case
                                           "NOT EXISTS (MM:[[nat,nat]->finseq[below[N]]]):
                                                                                                                                                                                                                                                                                                                              FORALL (i,j:nat): i/=j IMPLIES length(MM(i,j))=length(DD(i,j)) AND first(MM(i,j)) = last(MM(i,j)) AND
                                                                                                                                                                                                                                                                                                                              gt_mc?(ms(GG),DD(i,j))(MM(i,j)) AND MM(i,j)=MM(j,i)")
                                          (("1"
                                            (name
                                             "izzy"
                                             "LAMBDA (ee:[nat,nat]): ee`1/=ee`2")
                                            (("1"
                                              (case
                                               "EXISTS (MM:[(izzy)->finseq[below[N]]]):
                                                                                                                                                                                                                                                                                                                                                          FORALL (i,j:nat): i/=j IMPLIES length(MM(i,j))=length(DD(i,j)) AND first(MM(i,j)) = last(MM(i,j)) AND
                                                                                                                                                                                                                                                                                                                                                          gt_mc?(ms(GG),DD(i,j))(MM(i,j)) AND MM(i,j)=MM(j,i)")
                                              (("1"
                                                (skeep -)
                                                (("1"
                                                  (lemma "parext")
                                                  (("1"
                                                    (replace -3)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst - "MM")
                                                        (("1"
                                                          (skeep -)
                                                          (("1"
                                                            (inst + "HH")
                                                            (("1"
                                                              (skeep)
                                                              (("1"
                                                                (inst-cp
                                                                 -
                                                                 "i"
                                                                 "j")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "j"
                                                                   "i")
                                                                  (("1"
                                                                    (inst-cp
                                                                     -
                                                                     "i"
                                                                     "j")
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "j"
                                                                       "i")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (inst
                                                   +
                                                   "LAMBDA (ee:(izzy)): LET (i,j) = (ee`1,ee`2) IN choose({mcs:finseq[below[N]]|length(mcs) = length(DD(i,j)) AND
                                                                                                                                                                                                                                                                                                 first(mcs) = last(mcs) AND gt_mc?(ms(GG), DD(i,j))(mcs)})")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (skosimp*)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (ground)
                                                          (("1"
                                                            (case
                                                             "DD(i!1,j!1) = DD(j!1,i!1)")
                                                            (("1"
                                                              (replaces -1)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (expand
                                                                 "DD"
                                                                 1)
                                                                (("2"
                                                                  (lift-if)
                                                                  (("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (lift-if)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (hide-all-but 1)
                                                              (("3"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (skeep)
                                                    (("2"
                                                      (case "i = j")
                                                      (("1"
                                                        (typepred "ee")
                                                        (("1"
                                                          (expand "izzy" -1)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide (-1 -2))
                                                        (("2"
                                                          (expand "nonempty?")
                                                          (("2"
                                                            (expand "empty?")
                                                            (("2"
                                                              (expand
                                                               "member")
                                                              (("2"
                                                                (inst
                                                                 -9
                                                                 "DD(i,j)")
                                                                (("1"
                                                                  (skeep)
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "mc")
                                                                    (("1"
                                                                      (ground)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (split +)
                                                                  (("1"
                                                                    (skeep)
                                                                    (("1"
                                                                      (expand
                                                                       "DD"
                                                                       1)
                                                                      (("1"
                                                                        (expand
                                                                         "CC"
                                                                         1)
                                                                        (("1"
                                                                          (lift-if)
                                                                          (("1"
                                                                            (hide
                                                                             -)
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "DD"
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "CC"
                                                                       1)
                                                                      (("2"
                                                                        (lift-if)
                                                                        (("2"
                                                                          (ground)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (expand
                                                                     "DD"
                                                                     +)
                                                                    (("3"
                                                                      (lift-if)
                                                                      (("3"
                                                                        (ground)
                                                                        (("1"
                                                                          (inst
                                                                           -5
                                                                           "i"
                                                                           "j-i")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (inst
                                                                           -4
                                                                           "j"
                                                                           "i-j")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (skeep*)
                                                    (("3"
                                                      (split +)
                                                      (("1"
                                                        (hide -)
                                                        (("1"
                                                          (expand "DD")
                                                          (("1"
                                                            (expand "CC")
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide -)
                                                        (("2"
                                                          (expand "DD")
                                                          (("2"
                                                            (expand "CC")
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("4"
                                                    (skeep*)
                                                    (("4" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (hide 2)
                                                (("3"
                                                  (skeep*)
                                                  (("3"
                                                    (hide -)
                                                    (("3"
                                                      (expand "izzy")
                                                      (("3" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("4"
                                                (hide -)
                                                (("4"
                                                  (hide 2)
                                                  (("4"
                                                    (skeep*)
                                                    (("4"
                                                      (expand "izzy")
                                                      (("4" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("5"
                                                (hide 2)
                                                (("5"
                                                  (skeep*)
                                                  (("5"
                                                    (assert)
                                                    (("5"
                                                      (hide -)
                                                      (("5"
                                                        (expand "DD")
                                                        (("5"
                                                          (expand "CC")
                                                          (("5"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("6"
                                                (hide 2)
                                                (("6"
                                                  (hide -)
                                                  (("6"
                                                    (skeep*)
                                                    (("6"
                                                      (expand "izzy")
                                                      (("6" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("7"
                                                (hide 2)
                                                (("7"
                                                  (hide -)
                                                  (("7"
                                                    (skeep)
                                                    (("7"
                                                      (replaces -2)
                                                      (("7"
                                                        (expand "DD")
                                                        (("7"
                                                          (expand "CC")
                                                          (("7"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("8"
                                                (hide 2)
                                                (("8"
                                                  (hide -)
                                                  (("8"
                                                    (skeep*)
                                                    (("8"
                                                      (expand "izzy")
                                                      (("8" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("9"
                                                (hide 2)
                                                (("9"
                                                  (expand "izzy")
                                                  (("9"
                                                    (hide -)
                                                    (("9" (grind) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (label "aulin" -1)
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (case
                                                 "NOT FORALL (i, j: nat): i /= j IMPLIES length(MM(i, j)) /= 0")
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (inst - "i" "j")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (replace -2 -1)
                                                          (("1"
                                                            (hide-all-but -1)
                                                            (("1"
                                                              (expand "DD")
                                                              (("1"
                                                                (expand "CC")
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (name
                                                   "EC"
                                                   "(LAMBDA (i,j:nat): IF i/=j THEN first(MM(i,j)) ELSE 0 ENDIF::below[N])")
                                                  (("1"
                                                    (lemma "EdgeRamsey")
                                                    (("1"
                                                      (inst - "N" "EC")
                                                      (("1"
                                                        (skolem - "JJ")
                                                        (("1"
                                                          (skeep)
                                                          (("1"
                                                            (case
                                                             "NOT FORALL (i,j:nat): i/=j IMPLIES first(MM(JJ(i),JJ(j))) = p")
                                                            (("1"
                                                              (skeep)
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "i"
                                                                 "j")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "EC"
                                                                     -1)
                                                                    (("1"
                                                                      (lift-if)
                                                                      (("1"
                                                                        (ground)
                                                                        (("1"
                                                                          (typepred
                                                                           "JJ")
                                                                          (("1"
                                                                            (inst-cp
                                                                             -
                                                                             "i"
                                                                             "j")
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "j"
                                                                               "i")
                                                                              (("1"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (label
                                                               "tarp"
                                                               -1)
                                                              (("2"
                                                                (name
                                                                 "P"
                                                                 "LAMBDA (mt:MT): EXISTS (j:nat): ms(GG)(first(MM(JJ(j),JJ(j+1))))(vals(J(JJ(j))))=mt")
                                                                (("1"
                                                                  (typepred
                                                                   "lt")
                                                                  (("1"
                                                                    (expand
                                                                     "well_founded?")
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "P")
                                                                      (("1"
                                                                        (split
                                                                         -)
                                                                        (("1"
                                                                          (skeep
                                                                           -)
                                                                          (("1"
                                                                            (typepred
                                                                             "y")
                                                                            (("1"
                                                                              (expand
                                                                               "P"
                                                                               -1)
                                                                              (("1"
                                                                                (skeep)
                                                                                (("1"
                                                                                  (name
                                                                                   "x"
                                                                                   "ms(GG)(first(MM(JJ(j+1), JJ(2 + j))))(vals(J(JJ(j+1))))")
                                                                                  (("1"
                                                                                    (case
                                                                                     "NOT P(x)")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "x"
                                                                                       +)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "P"
                                                                                         +)
                                                                                        (("1"
                                                                                          (inst
                                                                                           +
                                                                                           "j+1")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (inst
                                                                                       -
                                                                                       "x")
                                                                                      (("2"
                                                                                        (copy
                                                                                         -9)
                                                                                        (("2"
                                                                                          (replace
                                                                                           -3
                                                                                           1
                                                                                           :dir
                                                                                           rl)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -4
                                                                                             1
                                                                                             :dir
                                                                                             rl)
                                                                                            (("2"
                                                                                              (inst-cp
                                                                                               -6
                                                                                               "1+j"
                                                                                               "2+j")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (replaces
                                                                                                   -7)
                                                                                                  (("2"
                                                                                                    (inst-cp
                                                                                                     -6
                                                                                                     "j"
                                                                                                     "1+j")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (replaces
                                                                                                         -7)
                                                                                                        (("2"
                                                                                                          (inst-cp
                                                                                                           -
                                                                                                           "JJ(j)"
                                                                                                           "JJ(1+j)")
                                                                                                          (("2"
                                                                                                            (split
                                                                                                             -)
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (hide
                                                                                                                 -21)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "gt_mc?"
                                                                                                                   -3)
                                                                                                                  (("1"
                                                                                                                    (flatten)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "gte_mc?")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "finseq_appl")
                                                                                                                        (("1"
                                                                                                                          (typepred
                                                                                                                           "JJ")
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             -
                                                                                                                             "j"
                                                                                                                             "1+j")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "DD"
                                                                                                                                 (-4
                                                                                                                                  -5))
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "CC"
                                                                                                                                     (-4
                                                                                                                                      -5))
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "gt"
                                                                                                                                         (-4
                                                                                                                                          -5))
                                                                                                                                        (("1"
                                                                                                                                          (skolem
                                                                                                                                           -
                                                                                                                                           "W")
                                                                                                                                          (("1"
                                                                                                                                            (typepred
                                                                                                                                             "W")
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "DD"
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "CC"
                                                                                                                                                 -1)
                                                                                                                                                (("1"
                                                                                                                                                  (copy
                                                                                                                                                   "prizey")
                                                                                                                                                  (("1"
                                                                                                                                                    (inst
                                                                                                                                                     -
                                                                                                                                                     "JJ(j)"
                                                                                                                                                     "JJ(1+j)")
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      (("1"
                                                                                                                                                        (flatten)
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           "abs"
                                                                                                                                                           -3)
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (case
                                                                                                                                                               "NOT FORALL (i:nat): i<W IMPLIES ge(ms(GG)(MM(JJ(j), JJ(1 + j))`seq(0))(vals(J(JJ(j)))),
                                                                                                                                                                                                                                                                                                                                  ms(GG)(MM(JJ(j), JJ(1 + j))`seq(1 + i))(vals(J(JJ(j))+1+i)))")
                                                                                                                                                              (("1"
                                                                                                                                                                (induct
                                                                                                                                                                 "i")
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (flatten)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (inst
                                                                                                                                                                       -
                                                                                                                                                                       "0")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (inst
                                                                                                                                                                         -
                                                                                                                                                                         "vals(J(JJ(j)))"
                                                                                                                                                                         "vals(1+J(JJ(j)))")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (hide
                                                                                                                                                                             1)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (copy
                                                                                                                                                                               "grg")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (inst?
                                                                                                                                                                                 -1)
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (skolem
                                                                                                                                                                   1
                                                                                                                                                                   "i")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (flatten)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (hide
                                                                                                                                                                       -10)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (inst
                                                                                                                                                                           -
                                                                                                                                                                           "i+1")
                                                                                                                                                                          (("2"
                                                                                                                                                                            (inst
                                                                                                                                                                             -
                                                                                                                                                                             "vals(1 + J(JJ(j)) + i)"
                                                                                                                                                                             "vals(2 + J(JJ(j)) + i)")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (split
                                                                                                                                                                                 -)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (lemma
                                                                                                                                                                                   "ge_transitive")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (reveal
                                                                                                                                                                                     "tzzz")
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (hide
                                                                                                                                                                                         -1)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (inst
                                                                                                                                                                                           -
                                                                                                                                                                                           "ms(GG)(MM(JJ(j), JJ(1 + j))`seq(0))(vals(J(JJ(j))))"
                                                                                                                                                                                           "ms(GG)(MM(JJ(j), JJ(1 + j))`seq(1 + i))(vals(1 + J(JJ(j)) + i))"
                                                                                                                                                                                           "ms(GG)(MM(JJ(j), JJ(1 + j))`seq(2 + i))(vals(2 + J(JJ(j)) + i))")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (assert)
                                                                                                                                                                                            nil
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (copy
                                                                                                                                                                                   "grg")
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (inst?)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("3"
                                                                                                                                                                                  (copy
                                                                                                                                                                                   "grg")
                                                                                                                                                                                  (("3"
                                                                                                                                                                                    (inst?)
                                                                                                                                                                                    (("3"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil)
                                                                                                                                                                 ("3"
                                                                                                                                                                  (skeep)
                                                                                                                                                                  (("3"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil)
                                                                                                                                                                 ("4"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (case
                                                                                                                                                                 "NOT gt(ms(GG)(MM(JJ(j), JJ(1 + j))`seq(W))(vals(J(JJ(j))+W)),
                                                                                                                                                                                                                            ms(GG)(MM(JJ(j), JJ(1 + j))`seq(1 + W))(vals(J(JJ(j)) + 1 + W)))")
                                                                                                                                                                (("1"
                                                                                                                                                                  (inst
                                                                                                                                                                   -
                                                                                                                                                                   "vals(J(JJ(j))+W)"
                                                                                                                                                                   "vals(J(JJ(j))+1+W)")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (split
                                                                                                                                                                       -)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (hide-all-but
                                                                                                                                                                         (-1
                                                                                                                                                                          -2
                                                                                                                                                                          -3
                                                                                                                                                                          -4
                                                                                                                                                                          -5
                                                                                                                                                                          -6
                                                                                                                                                                          -7
                                                                                                                                                                          -8
                                                                                                                                                                          -9
                                                                                                                                                                          -10
                                                                                                                                                                          +))
                                                                                                                                                                        (("1"
                                                                                                                                                                          (expand
                                                                                                                                                                           "ge"
                                                                                                                                                                           -1)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (expand
                                                                                                                                                                             "le"
                                                                                                                                                                             -1)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (flatten)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (assert)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "gt"
                                                                                                                                                                                   +)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (propax)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil)
                                                                                                                                                                       ("2"
                                                                                                                                                                        (hide-all-but
                                                                                                                                                                         ("grg"
                                                                                                                                                                          +))
                                                                                                                                                                        (("2"
                                                                                                                                                                          (inst
                                                                                                                                                                           -
                                                                                                                                                                           "J(JJ(j))+W")
                                                                                                                                                                          (("2"
                                                                                                                                                                            (ground)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil)
                                                                                                                                                                       ("3"
                                                                                                                                                                        (hide-all-but
                                                                                                                                                                         ("grg"
                                                                                                                                                                          +))
                                                                                                                                                                        (("3"
                                                                                                                                                                          (inst
                                                                                                                                                                           -
                                                                                                                                                                           "J(JJ(j))+W")
                                                                                                                                                                          (("3"
                                                                                                                                                                            (ground)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (case
                                                                                                                                                                   "NOT FORALL (i:nat):W+1+i<length(DD(JJ(j), JJ(1 + j))) - 1 IMPLIES
                                                                                                                                                                                                       ge(ms(GG)(MM(JJ(j), JJ(1 + j))`seq(1 + W))(vals(J(JJ(j)) + 1 + W)),
                                                                                                                                                                                                       ms(GG)(MM(JJ(j), JJ(1 + j))`seq(1 + W+1+i))(vals(J(JJ(j)) + 1 + W+1+i)))")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (induct
                                                                                                                                                                     "i")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (flatten)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (inst
                                                                                                                                                                           -10
                                                                                                                                                                           "1+W")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (assert)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (inst
                                                                                                                                                                               -10
                                                                                                                                                                               "vals(1 + J(JJ(j)) + W)"
                                                                                                                                                                               "vals(2 + J(JJ(j)) + W)")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (assert)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (hide
                                                                                                                                                                                   1)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (hide-all-but
                                                                                                                                                                                     ("grg"
                                                                                                                                                                                      +))
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (inst
                                                                                                                                                                                       -
                                                                                                                                                                                       "1 + J(JJ(j)) + W")
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (ground)
                                                                                                                                                                                        nil
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("2"
                                                                                                                                                                      (skolem
                                                                                                                                                                       +
                                                                                                                                                                       "i")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (flatten)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (lemma
                                                                                                                                                                             "ge_transitive")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (reveal
                                                                                                                                                                               "tzzz")
                                                                                                                                                                              (("2"
                                                                                                                                                                                (assert)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (inst
                                                                                                                                                                                   -
                                                                                                                                                                                   "ms(GG)(MM(JJ(j), JJ(1 + j))`seq(1 + W))(vals(1 + J(JJ(j)) + W))"
                                                                                                                                                                                   "ms(GG)
                                                                                                                                                                                                                       (MM(JJ(j), JJ(1 + j))`seq(2 + W + i))
                                                                                                                                                                                                                       (vals(2 + J(JJ(j)) + W + i))"
                                                                                                                                                                                   "ms(GG)
                                                                                                                                                                                                                       (MM(JJ(j), JJ(1 + j))`seq(3 + W + i))
                                                                                                                                                                                                                       (vals(3 + J(JJ(j)) + W + i))")
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (hide
                                                                                                                                                                                       2)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (inst
                                                                                                                                                                                         -12
                                                                                                                                                                                         "2+W+i")
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (inst
                                                                                                                                                                                             -12
                                                                                                                                                                                             "vals(2 + J(JJ(j)) + W + i)"
                                                                                                                                                                                             "vals(3 + J(JJ(j)) + W + i)")
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (hide-all-but
                                                                                                                                                                                                 ("grg"
                                                                                                                                                                                                  +))
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (inst
                                                                                                                                                                                                   -
                                                                                                                                                                                                   "2 + J(JJ(j)) + W + i")
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (ground)
                                                                                                                                                                                                    nil
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("3"
                                                                                                                                                                      (skeep*)
                                                                                                                                                                      (("3"
                                                                                                                                                                        (assert)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("4"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("4"
                                                                                                                                                                        (skeep*)
                                                                                                                                                                        (("4"
                                                                                                                                                                          (assert)
                                                                                                                                                                          nil
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (reveal
                                                                                                                                                                     "tzzz")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (case
                                                                                                                                                                       "NOT length(DD(JJ(j), JJ(1 + j))) >=3")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (case
                                                                                                                                                                           "NOT length(DD(JJ(j), JJ(1 + j))) = 2")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (assert)
                                                                                                                                                                            nil
                                                                                                                                                                            nil)
                                                                                                                                                                           ("2"
                                                                                                                                                                            (expand
                                                                                                                                                                             "DD"
                                                                                                                                                                             -1)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (expand
                                                                                                                                                                               "CC"
                                                                                                                                                                               -1)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (expand
                                                                                                                                                                                 "abs"
                                                                                                                                                                                 -1)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (case
                                                                                                                                                                                     "NOT W = 0")
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil)
                                                                                                                                                                                     ("2"
                                                                                                                                                                                      (replaces
                                                                                                                                                                                       -1)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (case
                                                                                                                                                                                           "NOT vals(1 + J(JJ(j))) = vals(J(JJ(j+1)))")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (assert)
                                                                                                                                                                                            nil
                                                                                                                                                                                            nil)
                                                                                                                                                                                           ("2"
                                                                                                                                                                                            (replace
                                                                                                                                                                                             -1)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (copy
                                                                                                                                                                                                 "tarp")
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (inst
                                                                                                                                                                                                   -
                                                                                                                                                                                                   "j"
                                                                                                                                                                                                   "j+1")
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (split
                                                                                                                                                                                                     -)
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (copy
                                                                                                                                                                                                       "aulin")
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (inst
                                                                                                                                                                                                         -
                                                                                                                                                                                                         "JJ(j)"
                                                                                                                                                                                                         "JJ(1+j)")
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (split
                                                                                                                                                                                                           -)
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (flatten)
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (replace
                                                                                                                                                                                                                 -5)
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (expand
                                                                                                                                                                                                                   "first")
                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                    (expand
                                                                                                                                                                                                                     "last")
                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                      (expand
                                                                                                                                                                                                                       "finseq_appl")
                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                          (replace
                                                                                                                                                                                                                           -1)
                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                              (case
                                                                                                                                                                                                                               "NOT length(DD(JJ(j), JJ(1 + j))) = 2")
                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                                nil
                                                                                                                                                                                                                                nil)
                                                                                                                                                                                                                               ("2"
                                                                                                                                                                                                                                (replaces
                                                                                                                                                                                                                                 -1)
                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                    (replace
                                                                                                                                                                                                                                     -2
                                                                                                                                                                                                                                     :dir
                                                                                                                                                                                                                                     rl)
                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                      (replace
                                                                                                                                                                                                                                       -5)
                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                        (expand
                                                                                                                                                                                                                                         "gt")
                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                          (propax)
                                                                                                                                                                                                                                          nil
                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil)
                                                                                                                                                                                                           ("2"
                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                            nil
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil)
                                                                                                                                                                                                     ("2"
                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                      nil
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil)
                                                                                                                                                                       ("2"
                                                                                                                                                                        (case
                                                                                                                                                                         "W = 0")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (replace
                                                                                                                                                                           -1)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (lemma
                                                                                                                                                                             "gt_ge_transitive")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (inst
                                                                                                                                                                                 -
                                                                                                                                                                                 "ms(GG)(MM(JJ(j), JJ(1 + j))`seq(0))(vals(J(JJ(j)) + 0))"
                                                                                                                                                                                 "ms(GG)(MM(JJ(j), JJ(1 + j))`seq(1 + 0))(vals(J(JJ(j)) + 1 + 0))"
                                                                                                                                                                                 "ms(GG)(p)(vals(J(JJ(1 + j))))")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (split
                                                                                                                                                                                     -)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "gt"
                                                                                                                                                                                       -)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (copy
                                                                                                                                                                                           "tarp")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (inst
                                                                                                                                                                                             -
                                                                                                                                                                                             "j"
                                                                                                                                                                                             "j+1")
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (expand
                                                                                                                                                                                               "first"
                                                                                                                                                                                               -1)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (expand
                                                                                                                                                                                                   "finseq_appl")
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                    nil
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil)
                                                                                                                                                                                     ("2"
                                                                                                                                                                                      (inst
                                                                                                                                                                                       -
                                                                                                                                                                                       "length(DD(JJ(j), JJ(1 + j))) - 3")
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (expand
                                                                                                                                                                                           "DD"
                                                                                                                                                                                           -4)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (expand
                                                                                                                                                                                             "CC"
                                                                                                                                                                                             -4)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (expand
                                                                                                                                                                                                 "abs"
                                                                                                                                                                                                 -4)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (copy
                                                                                                                                                                                                     "tarp")
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (inst
                                                                                                                                                                                                       -
                                                                                                                                                                                                       "j"
                                                                                                                                                                                                       "j+1")
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (split
                                                                                                                                                                                                         -)
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (copy
                                                                                                                                                                                                             "aulin")
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (inst
                                                                                                                                                                                                               -
                                                                                                                                                                                                               "JJ(j)"
                                                                                                                                                                                                               "JJ(1+j)")
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (split
                                                                                                                                                                                                                 -1)
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (flatten)
                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                      (replace
                                                                                                                                                                                                                       -5)
                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                        (expand
                                                                                                                                                                                                                         "last"
                                                                                                                                                                                                                         -2)
                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                          (expand
                                                                                                                                                                                                                           "finseq_appl")
                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                            (replaces
                                                                                                                                                                                                                             -1)
                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                              (expand
                                                                                                                                                                                                                               "DD"
                                                                                                                                                                                                                               -1)
                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                (expand
                                                                                                                                                                                                                                 "CC"
                                                                                                                                                                                                                                 -1)
                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                  (expand
                                                                                                                                                                                                                                   "abs"
                                                                                                                                                                                                                                   -1)
                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                                                    nil
                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil)
                                                                                                                                                                                                                 ("2"
                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                  nil
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil)
                                                                                                                                                                                                         ("2"
                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                          nil
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil)
                                                                                                                                                                         ("2"
                                                                                                                                                                          (typepred
                                                                                                                                                                           "W")
                                                                                                                                                                          (("2"
                                                                                                                                                                            (case
                                                                                                                                                                             "W = length(DD(JJ(j), JJ(1 + j))) - 2")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (copy
                                                                                                                                                                                 -1)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "DD"
                                                                                                                                                                                   -1)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "CC"
                                                                                                                                                                                     -1)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "abs"
                                                                                                                                                                                         -1)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (inst
                                                                                                                                                                                           -8
                                                                                                                                                                                           "W-1")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (assert)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (hide
                                                                                                                                                                                               (-15
                                                                                                                                                                                                -16))
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (hide
                                                                                                                                                                                                 -6)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (copy
                                                                                                                                                                                                   "tarp")
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (inst
                                                                                                                                                                                                     -
                                                                                                                                                                                                     "j"
                                                                                                                                                                                                     "j+1")
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (split
                                                                                                                                                                                                       -)
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (copy
                                                                                                                                                                                                         "aulin")
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (inst
                                                                                                                                                                                                           -
                                                                                                                                                                                                           "JJ(j)"
                                                                                                                                                                                                           "JJ(1+j)")
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (split
                                                                                                                                                                                                             -)
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (flatten)
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (hide
                                                                                                                                                                                                                 (-3
                                                                                                                                                                                                                  -4))
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (replace
                                                                                                                                                                                                                   -3)
                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                    (expand
                                                                                                                                                                                                                     "last"
                                                                                                                                                                                                                     -2)
                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                      (expand
                                                                                                                                                                                                                       "first"
                                                                                                                                                                                                                       -3)
                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                        (expand
                                                                                                                                                                                                                         "finseq_appl")
                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                          (replace
                                                                                                                                                                                                                           -3)
                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                            (replace
                                                                                                                                                                                                                             -1)
                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                              (expand
                                                                                                                                                                                                                               "DD"
                                                                                                                                                                                                                               -2)
                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                (expand
                                                                                                                                                                                                                                 "CC"
                                                                                                                                                                                                                                 -2)
                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                  (expand
                                                                                                                                                                                                                                   "abs"
                                                                                                                                                                                                                                   -2)
                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                      (name
                                                                                                                                                                                                                                       "RR"
                                                                                                                                                                                                                                       "ms(GG)(MM(JJ(j), JJ(1 + j))`seq(W))(vals(J(JJ(j)) + W))")
                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                        (replace
                                                                                                                                                                                                                                         -1)
                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                          (replace
                                                                                                                                                                                                                                           -5
                                                                                                                                                                                                                                           -10)
                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                                              (replace
                                                                                                                                                                                                                                               -3
                                                                                                                                                                                                                                               :dir
                                                                                                                                                                                                                                               rl)
                                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                                (lemma
                                                                                                                                                                                                                                                 "ge_gt_transitive")
                                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                                    (inst
                                                                                                                                                                                                                                                     -
                                                                                                                                                                                                                                                     "ms(GG)(p)(vals(J(JJ(j))))"
                                                                                                                                                                                                                                                     "RR"
                                                                                                                                                                                                                                                     "ms(GG)(p)(vals(J(JJ(1 + j))))")
                                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                                        (expand
                                                                                                                                                                                                                                                         "gt"
                                                                                                                                                                                                                                                         -1)
                                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                                          (propax)
                                                                                                                                                                                                                                                          nil
                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil)
                                                                                                                                                                                                             ("2"
                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                              nil
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil)
                                                                                                                                                                                                       ("2"
                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                        nil
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil)
                                                                                                                                                                             ("2"
                                                                                                                                                                              (inst
                                                                                                                                                                               -6
                                                                                                                                                                               "W-1")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (assert)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (inst
                                                                                                                                                                                   -
                                                                                                                                                                                   "length(DD(JJ(j), JJ(1 + j))) - 3 - W")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "DD"
                                                                                                                                                                                       -4
                                                                                                                                                                                       2)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "CC"
                                                                                                                                                                                         -4)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (expand
                                                                                                                                                                                           "abs"
                                                                                                                                                                                           -4)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (assert)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (copy
                                                                                                                                                                                               "aulin")
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (inst
                                                                                                                                                                                                 -
                                                                                                                                                                                                 "JJ(j)"
                                                                                                                                                                                                 "JJ(j+1)")
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (split
                                                                                                                                                                                                   -)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (flatten)
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (copy
                                                                                                                                                                                                       "tarp")
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (inst
                                                                                                                                                                                                         -
                                                                                                                                                                                                         "j"
                                                                                                                                                                                                         "j+1")
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (split
                                                                                                                                                                                                           -)
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (replace
                                                                                                                                                                                                             -1)
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (expand
                                                                                                                                                                                                               "first"
                                                                                                                                                                                                               (-1
                                                                                                                                                                                                                -2
                                                                                                                                                                                                                -3))
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (expand
                                                                                                                                                                                                                 "last"
                                                                                                                                                                                                                 (-1
                                                                                                                                                                                                                  -2
                                                                                                                                                                                                                  -3))
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (expand
                                                                                                                                                                                                                   "finseq_appl")
                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                    (replace
                                                                                                                                                                                                                     -2)
                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                      (replace
                                                                                                                                                                                                                       -3
                                                                                                                                                                                                                       :dir
                                                                                                                                                                                                                       rl)
                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                        (replace
                                                                                                                                                                                                                         -1)
                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                          (name
                                                                                                                                                                                                                           "AB"
                                                                                                                                                                                                                           "ms(GG)(MM(JJ(j), JJ(1 + j))`seq(1 + W))(vals(1 + J(JJ(j)) + W))")
                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                            (replace
                                                                                                                                                                                                                             -1)
                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                              (name
                                                                                                                                                                                                                               "FF"
                                                                                                                                                                                                                               "ms(GG)(MM(JJ(j), JJ(1 + j))`seq(W))(vals(J(JJ(j)) + W))")
                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                (replace
                                                                                                                                                                                                                                 -1)
                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                  (name
                                                                                                                                                                                                                                   "ZIP"
                                                                                                                                                                                                                                   "ms(GG)(p)(vals(J(JJ(j))))")
                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                    (replace
                                                                                                                                                                                                                                     -1)
                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                      (name
                                                                                                                                                                                                                                       "ZAP"
                                                                                                                                                                                                                                       "ms(GG)(p)(vals(J(JJ(1 + j))))")
                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                        (replace
                                                                                                                                                                                                                                         -1)
                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                          (case
                                                                                                                                                                                                                                           "gt(ZIP,ZAP)")
                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                            (expand
                                                                                                                                                                                                                                             "gt"
                                                                                                                                                                                                                                             -1)
                                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                                              (propax)
                                                                                                                                                                                                                                              nil
                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                            nil)
                                                                                                                                                                                                                                           ("2"
                                                                                                                                                                                                                                            (lemma
                                                                                                                                                                                                                                             "ge_gt_transitive")
                                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                                              (hide
                                                                                                                                                                                                                                               (-23
                                                                                                                                                                                                                                                -24
                                                                                                                                                                                                                                                -26
                                                                                                                                                                                                                                                -30))
                                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                                  (inst
                                                                                                                                                                                                                                                   -
                                                                                                                                                                                                                                                   "ZIP"
                                                                                                                                                                                                                                                   "FF"
                                                                                                                                                                                                                                                   "AB")
                                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                                      (lemma
                                                                                                                                                                                                                                                       "gt_ge_transitive")
                                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                                          (inst
                                                                                                                                                                                                                                                           -
                                                                                                                                                                                                                                                           "ZIP"
                                                                                                                                                                                                                                                           "AB"
                                                                                                                                                                                                                                                           "ZAP")
                                                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                                                                            nil
                                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil)
                                                                                                                                                                                                           ("2"
                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                            nil
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil)
                                                                                                                                                                                                   ("2"
                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                    nil
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil)
                                                                                                                                                                               ("2"
                                                                                                                                                                                (assert)
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("3"
                                                                                                                                                                    (hide
                                                                                                                                                                     (-9
                                                                                                                                                                      -10
                                                                                                                                                                      -11
                                                                                                                                                                      -12
                                                                                                                                                                      -16))
                                                                                                                                                                    (("3"
                                                                                                                                                                      (skeep*)
                                                                                                                                                                      (("3"
                                                                                                                                                                        (assert)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil)
                                                                                                                                                               ("3"
                                                                                                                                                                (skeep*)
                                                                                                                                                                (("3"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (typepred
                                                                                                                 "JJ")
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -
                                                                                                                   "j"
                                                                                                                   "1+j")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (copy
                                                                                       "aulin")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -
                                                                                         "JJ(1+j)"
                                                                                         "JJ(2+j)")
                                                                                        (("2"
                                                                                          (split
                                                                                           -)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -2)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "DD"
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (hide-all-but
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "CC"
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (typepred
                                                                                             "JJ")
                                                                                            (("2"
                                                                                              (inst
                                                                                               -
                                                                                               "1+j"
                                                                                               "2+j")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (inst
                                                                           +
                                                                           "ms(GG)(first(MM(JJ(0), JJ(0 + 1))))(vals(J(JJ(0))))")
                                                                          (("1"
                                                                            (expand
                                                                             "P"
                                                                             1)
                                                                            (("1"
                                                                              (inst
                                                                               +
                                                                               "0")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (copy
                                                                             "aulin")
                                                                            (("2"
                                                                              (inst
                                                                               -
                                                                               "JJ(0)"
                                                                               "JJ(1)")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (split
                                                                                   -)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -5)
                                                                                      (("1"
                                                                                        (hide-all-but
                                                                                         -1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "DD")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "CC")
                                                                                            (("1"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (typepred
                                                                                     "JJ")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -
                                                                                       "0"
                                                                                       "1")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (copy
                                                                     "aulin")
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "JJ(j)"
                                                                       "JJ(j+1)")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (split
                                                                           -)
                                                                          (("1"
                                                                            (replace
                                                                             -2)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (hide-all-but
                                                                                 -1)
                                                                                (("1"
                                                                                  (expand
                                                                                   "DD")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "CC")
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (typepred
                                                                             "JJ")
                                                                            (("2"
                                                                              (inst
                                                                               -
                                                                               "j"
                                                                               "1+j")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (skeep)
                                                              (("3"
                                                                (copy "aulin")
                                                                (("3"
                                                                  (inst
                                                                   -
                                                                   "JJ(i)"
                                                                   "JJ(j)")
                                                                  (("3"
                                                                    (assert)
                                                                    (("3"
                                                                      (replace
                                                                       -2)
                                                                      (("3"
                                                                        (split
                                                                         -)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (hide-all-but
                                                                             -1)
                                                                            (("1"
                                                                              (expand
                                                                               "DD")
                                                                              (("1"
                                                                                (expand
                                                                                 "CC")
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (typepred
                                                                           "JJ")
                                                                          (("2"
                                                                            (inst-cp
                                                                             -
                                                                             "i"
                                                                             "j")
                                                                            (("2"
                                                                              (inst
                                                                               -
                                                                               "j"
                                                                               "i")
                                                                              (("2"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skeep)
                                                        (("2"
                                                          (expand "EC" +)
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (lift-if)
                                                              (("2"
                                                                (lift-if)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (inst
                                                                     -3
                                                                     "i"
                                                                     "j")
                                                                    (("2"
                                                                      (ground)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (skeep*)
                                                    (("2" (assert) nil nil))
                                                    nil)
                                                   ("3" (propax) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (hide -)
                                            (("3"
                                              (skeep*)
                                              (("3"
                                                (expand "DD" +)
                                                (("3"
                                                  (expand "CC" +)
                                                  (("3" (grind) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("4"
                                            (skeep*)
                                            (("4"
                                              (replaces -2)
                                              (("4"
                                                (hide-all-but -1)
                                                (("4"
                                                  (expand "DD")
                                                  (("4"
                                                    (expand "CC")
                                                    (("4" (grind) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide -)
                                          (("2" (grind) nil nil))
                                          nil)
                                         ("3"
                                          (hide -)
                                          (("3" (grind) nil nil))
                                          nil)
                                         ("4"
                                          (hide -)
                                          (("4" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3" (hide-all-but 1)
                                      (("3"
                                        (expand "CC")
                                        (("3" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide -)
                                    (("2" (hide 2) (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2" (lemma "ccg_pigeonhole")
                                (("2" (insteep -) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((make_ccg const-decl "CCG" ccg_def nil)
    (FunMeasure type-eq-decl nil ccg_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (CCG type-eq-decl nil ccg_def nil)
    (FunMeasures type-eq-decl nil ccg_def nil)
    (N formal-const-decl "posnat" ccg nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (lt formal-const-decl "(well_founded?[MT])" ccg nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (MT formal-type-decl nil ccg nil)
    (cdigraph const-decl "bool" c_digraphs_def digraphs)
    (ComputableDigraph type-eq-decl nil c_digraphs_def digraphs)
    (CallingContext type-eq-decl nil cc_def nil)
    (Val formal-type-decl nil ccg nil) (NodeId formal-type-decl nil ccg nil)
    (Condition formal-type-decl nil ccg nil)
    (Expr formal-type-decl nil ccg nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (scp_termination? const-decl "bool" scp nil)
    (ccg_pigeonhole formula-decl nil ccg nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (last const-decl "T" seq_extras structures)
    (measures_combination type-eq-decl nil ccg nil)
    (parext formula-decl nil ccg nil)
    (izzy skolem-const-decl "[[nat, nat] -> boolean]" ccg nil)
    (J skolem-const-decl "[nat -> nat]" ccg nil)
    (DD skolem-const-decl "[d: [nat, nat] ->
   [# length: posint,
      seq:
        [below[1 + abs(J(d`2) - J(d`1))] ->
           CallingContext[Val, Expr, Condition, NodeId]] #]]" ccg nil)
    (nonempty? const-decl "bool" sets nil) (choose const-decl "(p)" sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (member const-decl "bool" sets nil)
    (fms skolem-const-decl
     "FunMeasures[Val, Expr, Condition, NodeId, MT, lt, N]" ccg nil)
    (dg skolem-const-decl "(cdigraph)" ccg nil)
    (i skolem-const-decl "nat" ccg nil) (j skolem-const-decl "nat" ccg nil)
    (empty? const-decl "bool" sets nil) (TRUE const-decl "bool" booleans nil)
    (EC skolem-const-decl "[[nat, nat] -> below[N]]" ccg nil)
    (EdgeColoring type-eq-decl nil ramsey_graph ints)
    (P skolem-const-decl "[MT -> boolean]" ccg nil)
    (ge_transitive formula-decl nil ccg nil)
    (i!1 skolem-const-decl "nat" ccg nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (MM skolem-const-decl "[[nat, nat] -> finseq[below[N]]]" ccg nil)
    (W skolem-const-decl "below(length(DD(JJ(j), JJ(1 + j))) - 1)" ccg nil)
    (j skolem-const-decl "nat" ccg nil)
    (JJ skolem-const-decl "IncSub" ccg nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (ge_gt_transitive formula-decl nil ccg nil)
    (gt_ge_transitive formula-decl nil ccg nil)
    (gt const-decl "bool" ccg_def nil) (x skolem-const-decl "MT" ccg nil)
    (Seq_val type-eq-decl nil cc_def nil)
    (IncSub type-eq-decl nil ramsey_graph ints)
    (EdgeRamsey formula-decl nil ramsey_graph ints)
    (<= const-decl "bool" reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pre_circuit? const-decl "bool" circuits_ digraphs)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (gt_mc? const-decl "bool" ccg nil) (gte_mc? const-decl "bool" ccg nil)
    (gt const-decl "bool" ccg nil) (ge const-decl "bool" ccg_def nil)
    (le const-decl "bool" ccg_def nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (walk? const-decl "bool" walks_ digraphs)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (edge? const-decl "bool" digraphs_ digraphs)
    (verts_in? const-decl "bool" walks_ digraphs)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (GG skolem-const-decl "CCG[Val, Expr, Condition, NodeId, MT, lt, N]" ccg
     nil)
    (CC skolem-const-decl "[d: [nat, nat] ->
   [# length: posint,
      seq:
        [below[1 + abs(J(d`1 + d`2) - J(d`1))] ->
           CallingContext[Val, Expr, Condition, NodeId]] #]]" ccg nil)
    (circuit? const-decl "bool" circuits_ digraphs)
    (prewalk type-eq-decl nil walks_ digraphs)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp digraphs)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp digraphs)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp digraphs)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]" c_digraphs_imp
     digraphs)
    (finseq type-eq-decl nil finite_sequences nil)
    (digraph_type type-eq-decl nil c_digraphs_imp digraphs)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Seq_cc type-eq-decl nil ccg nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (edges const-decl "bool" c_digraphs_def digraphs)
    (vert const-decl "bool" c_digraphs_def digraphs)
    (c_digraph type-eq-decl nil c_digraphs_def digraphs)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (infinite_seq_ccs const-decl "bool" scp nil)
    (ccg_termination? const-decl "bool" ccg nil))
   nil))
 (ccg_termination_implies_scp 0
  (ccg_termination_implies_scp-1 nil 3653084086
   (""
    (case "NOT FORALL (III,JJJ:IncSub): FORALL (ii,jj:nat): ii<jj IMPLIES III(JJJ(ii))<III(JJJ(jj))")
    (("1" (hide 2)
      (("1" (skeep*)
        (("1" (typepred "JJJ")
          (("1" (inst - "ii" "jj")
            (("1" (assert)
              (("1" (typepred "III")
                (("1" (inst - "JJJ(ii)" "JJJ(jj)") (("1" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (label "hyp" -1)
      (("2" (hide "hyp")
        (("2" (skeep)
          (("2" (skeep)
            (("2" (name "GG" "make_ccg(dg,fms)")
              (("2" (expand "ccg_termination?")
                (("2" (expand "scp_termination?")
                  (("2" (copy 1)
                    (("2" (skeep 1)
                      (("2" (expand "infinite_seq_ccs" -1)
                        (("2" (label "grg" -1)
                          (("2"
                            (case "EXISTS (J:[nat->nat]): (FORALL (i,j:nat): i<j IMPLIES J(i)<J(j) AND ccs(J(i)) = ccs(J(j)))")
                            (("1" (label "prizey" -1)
                              (("1" (skeep -)
                                (("1"
                                  (name "CC"
                                        "LAMBDA (j:nat,p:nat): LET M = abs(J(j+p)-J(j))+1 IN (# length:=M,seq:=(LAMBDA (i:below[M]): ccs(J(j)+i)) #)")
                                  (("1"
                                    (case "NOT FORALL (j:nat,p:posnat): circuit?(dg(GG),CC(j,p))")
                                    (("1" (skeep)
                                      (("1"
                                        (expand "circuit?" 1)
                                        (("1"
                                          (hide 2)
                                          (("1"
                                            (split +)
                                            (("1"
                                              (expand "pre_circuit?")
                                              (("1"
                                                (split)
                                                (("1"
                                                  (expand "walk?")
                                                  (("1"
                                                    (split)
                                                    (("1"
                                                      (expand "verts_in?")
                                                      (("1"
                                                        (skosimp*)
                                                        (("1"
                                                          (typepred "i!1")
                                                          (("1"
                                                            (expand "CC" -1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "CC"
                                                                 1)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "GG"
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "make_ccg")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (typepred
                                                                           "ccs")
                                                                          (("1"
                                                                            (inst?)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (skeep)
                                                      (("2"
                                                        (expand "edge?" 1)
                                                        (("2"
                                                          (expand
                                                           "finseq_appl")
                                                          (("2"
                                                            (expand "GG" 1)
                                                            (("2"
                                                              (expand
                                                               "make_ccg")
                                                              (("2"
                                                                (expand
                                                                 "CC"
                                                                 1)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (typepred
                                                                     "ccs")
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "J(j)+n")
                                                                      (("2"
                                                                        (ground)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "finseq_appl")
                                                  (("2"
                                                    (expand "CC" 1)
                                                    (("2"
                                                      (inst - "j" "j+p")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "CC" 1)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (inst -2 "j" "j+p")
                                                  (("2" (grind) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (hide 1)
                                      (("2"
                                        (name
                                         "DD"
                                         "LAMBDA (i,j:nat): IF i<=j THEN CC(i,j-i) ELSE CC(j,i-j) ENDIF")
                                        (("1"
                                          (case
                                           "NOT EXISTS (MM:[[nat,nat]->finseq[below[N]]]):
i,j:nat): i/=j IMPLIES length(MM(i,j))=length(DD(i,j)) AND first(MM(i,j)) = last(MM(i,j)) AND
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              gt_mc?(ms(GG),DD(i,j))(MM(i,j)) AND MM(i,j)=MM(j,i)")
                                          (("1"
                                            (name
                                             "izzy"
                                             "LAMBDA (ee:[nat,nat]): ee`1/=ee`2")
                                            (("1"
                                              (case
                                               "EXISTS (MM:[(izzy)->finseq[below[N]]]):
i,j:nat): i/=j IMPLIES length(MM(i,j))=length(DD(i,j)) AND first(MM(i,j)) = last(MM(i,j)) AND
gt_mc?(ms(GG),DD(i,j))(MM(i,j)) AND MM(i,j)=MM(j,i)")
                                              (("1"
                                                (skeep -)
                                                (("1"
                                                  (lemma "parext")
                                                  (("1"
                                                    (replace -3)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst - "MM")
                                                        (("1"
                                                          (skeep -)
                                                          (("1"
                                                            (inst + "HH")
                                                            (("1"
                                                              (skeep)
                                                              (("1"
                                                                (inst-cp
                                                                 -
                                                                 "i"
                                                                 "j")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "j"
                                                                   "i")
                                                                  (("1"
                                                                    (inst-cp
                                                                     -
                                                                     "i"
                                                                     "j")
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "j"
                                                                       "i")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (inst
                                                   +
                                                   "LAMBDA (ee:(izzy)): LET (i,j) = (ee`1,ee`2) IN choose({mcs:finseq[below[N]]|length(mcs) = length(DD(i,j)) AND
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   first(mcs) = last(mcs) AND gt_mc?(ms(GG), DD(i,j))(mcs)})")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (skosimp*)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (ground)
                                                          (("1"
                                                            (case
                                                             "DD(i!1,j!1) = DD(j!1,i!1)")
                                                            (("1"
                                                              (replaces -1)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (expand
                                                                 "DD"
                                                                 1)
                                                                (("2"
                                                                  (lift-if)
                                                                  (("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (lift-if)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (hide-all-but 1)
                                                              (("3"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (skeep)
                                                    (("2"
                                                      (case "i = j")
                                                      (("1"
                                                        (typepred "ee")
                                                        (("1"
                                                          (expand "izzy" -1)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide (-1 -2))
                                                        (("2"
                                                          (expand "nonempty?")
                                                          (("2"
                                                            (expand "empty?")
                                                            (("2"
                                                              (expand
                                                               "member")
                                                              (("2"
                                                                (inst
                                                                 -9
                                                                 "DD(i,j)")
                                                                (("1"
                                                                  (skeep)
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "mc")
                                                                    (("1"
                                                                      (ground)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (split +)
                                                                  (("1"
                                                                    (skeep)
                                                                    (("1"
                                                                      (expand
                                                                       "DD"
                                                                       1)
                                                                      (("1"
                                                                        (expand
                                                                         "CC"
                                                                         1)
                                                                        (("1"
                                                                          (lift-if)
                                                                          (("1"
                                                                            (hide
                                                                             -)
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "DD"
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "CC"
                                                                       1)
                                                                      (("2"
                                                                        (lift-if)
                                                                        (("2"
                                                                          (ground)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (expand
                                                                     "DD"
                                                                     +)
                                                                    (("3"
                                                                      (lift-if)
                                                                      (("3"
                                                                        (ground)
                                                                        (("1"
                                                                          (inst
                                                                           -5
                                                                           "i"
                                                                           "j-i")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (inst
                                                                           -4
                                                                           "j"
                                                                           "i-j")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (skeep*)
                                                    (("3"
                                                      (split +)
                                                      (("1"
                                                        (hide -)
                                                        (("1"
                                                          (expand "DD")
                                                          (("1"
                                                            (expand "CC")
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide -)
                                                        (("2"
                                                          (expand "DD")
                                                          (("2"
                                                            (expand "CC")
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("4"
                                                    (skeep*)
                                                    (("4" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (hide 2)
                                                (("3"
                                                  (skeep*)
                                                  (("3"
                                                    (hide -)
                                                    (("3"
                                                      (expand "izzy")
                                                      (("3" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("4"
                                                (hide -)
                                                (("4"
                                                  (hide 2)
                                                  (("4"
                                                    (skeep*)
                                                    (("4"
                                                      (expand "izzy")
                                                      (("4" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("5"
                                                (hide 2)
                                                (("5"
                                                  (skeep*)
                                                  (("5"
                                                    (assert)
                                                    (("5"
                                                      (hide -)
                                                      (("5"
                                                        (expand "DD")
                                                        (("5"
                                                          (expand "CC")
                                                          (("5"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("6"
                                                (hide 2)
                                                (("6"
                                                  (hide -)
                                                  (("6"
                                                    (skeep*)
                                                    (("6"
                                                      (expand "izzy")
                                                      (("6" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("7"
                                                (hide 2)
                                                (("7"
                                                  (hide -)
                                                  (("7"
                                                    (skeep)
                                                    (("7"
                                                      (expand "DD")
                                                      (("7"
                                                        (expand "CC")
                                                        (("7"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("8"
                                                (hide 2)
                                                (("8"
                                                  (hide -)
                                                  (("8"
                                                    (skeep*)
                                                    (("8"
                                                      (expand "izzy")
                                                      (("8" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("9"
                                                (hide 2)
                                                (("9"
                                                  (expand "izzy")
                                                  (("9"
                                                    (hide -)
                                                    (("9" (grind) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (label "aulin" -1)
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (case
                                                 "NOT FORALL (i, j: nat): i /= j IMPLIES length(MM(i, j)) /= 0")
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (inst - "i" "j")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (replace -2 -1)
                                                          (("1"
                                                            (hide-all-but -1)
                                                            (("1"
                                                              (expand "DD")
                                                              (("1"
                                                                (expand "CC")
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (name
                                                   "EC"
                                                   "(LAMBDA (i,j:nat): IF i/=j THEN first(MM(i,j)) ELSE 0 ENDIF::below[N])")
                                                  (("1"
                                                    (lemma "EdgeRamsey")
                                                    (("1"
                                                      (inst - "N" "EC")
                                                      (("1"
                                                        (skolem - "JJ")
                                                        (("1"
                                                          (skeep)
                                                          (("1"
                                                            (case
                                                             "NOT FORALL (i,j:nat): i/=j IMPLIES first(MM(JJ(i),JJ(j))) = p")
                                                            (("1"
                                                              (skeep)
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "i"
                                                                 "j")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "EC"
                                                                     -1)
                                                                    (("1"
                                                                      (lift-if)
                                                                      (("1"
                                                                        (ground)
                                                                        (("1"
                                                                          (typepred
                                                                           "JJ")
                                                                          (("1"
                                                                            (inst-cp
                                                                             -
                                                                             "i"
                                                                             "j")
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "j"
                                                                               "i")
                                                                              (("1"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (lemma
                                                               "build_infinite_descent")
                                                              (("2"
                                                                (name
                                                                 "FF"
                                                                 "LAMBDA (j:nat): LAMBDA (i:nat): LAMBDA (val:Val): IF i<length(MM(JJ(j),JJ(j+1))) THEN ms(GG)(MM(JJ(j),JJ(j+1))`seq(i))(val) ELSE ms(GG)(p)(val) ENDIF")
                                                                (("1"
                                                                  (inst
                                                                   +
                                                                   "J o JJ"
                                                                   "FF"
                                                                   "vals")
                                                                  (("1"
                                                                    (expand
                                                                     "o")
                                                                    (("1"
                                                                      (skeep)
                                                                      (("1"
                                                                        (split
                                                                         +)
                                                                        (("1"
                                                                          (skeep)
                                                                          (("1"
                                                                            (expand
                                                                             "FF"
                                                                             1)
                                                                            (("1"
                                                                              (lift-if)
                                                                              (("1"
                                                                                (lift-if)
                                                                                (("1"
                                                                                  (lift-if)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (case
                                                                                       "NOT 1 + i < length(MM(JJ(j), JJ(1 + j)))")
                                                                                      (("1"
                                                                                        (hide
                                                                                         2)
                                                                                        (("1"
                                                                                          (inst
                                                                                           "aulin"
                                                                                           "JJ(j)"
                                                                                           "JJ(1+j)")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 "aulin"
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "DD"
                                                                                                   +)
                                                                                                  (("1"
                                                                                                    (typepred
                                                                                                     "JJ")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "j"
                                                                                                       "1+j")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "CC"
                                                                                                           +)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "abs")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (copy
                                                                                           "aulin")
                                                                                          (("2"
                                                                                            (hide
                                                                                             "aulin")
                                                                                            (("2"
                                                                                              (typepred
                                                                                               "JJ")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -
                                                                                                 "j"
                                                                                                 "1+j")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "JJ(j)"
                                                                                                     "JJ(1+j)")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "gt_mc?"
                                                                                                           -4)
                                                                                                          (("2"
                                                                                                            (flatten)
                                                                                                            (("2"
                                                                                                              (hide
                                                                                                               -5)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "gte_mc?")
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "finseq_appl")
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "gt"
                                                                                                                     -4)
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -
                                                                                                                       "i")
                                                                                                                      (("1"
                                                                                                                        (inst?)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (copy
                                                                                                                             "grg")
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "DD"
                                                                                                                               1)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "CC"
                                                                                                                                 1)
                                                                                                                                (("1"
                                                                                                                                  (inst?)
                                                                                                                                  (("1"
                                                                                                                                    (ground)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (expand
                                                                                                                         "DD"
                                                                                                                         1)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "CC"
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "abs"
                                                                                                                             1)
                                                                                                                            (("2"
                                                                                                                              (propax)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (hide
                                                                             -1)
                                                                            (("2"
                                                                              (copy
                                                                               "aulin")
                                                                              (("2"
                                                                                (hide
                                                                                 "aulin")
                                                                                (("2"
                                                                                  (typepred
                                                                                   "JJ")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -
                                                                                     "j"
                                                                                     "1+j")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -
                                                                                         "JJ(j)"
                                                                                         "JJ(1+j)")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "gt_mc?"
                                                                                               -4)
                                                                                              (("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (skeep
                                                                                                   -)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     +
                                                                                                     "i")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (typepred
                                                                                                         "i")
                                                                                                        (("2"
                                                                                                          (split
                                                                                                           +)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "DD"
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "CC"
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "abs"
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     "prizey"
                                                                                                                     "JJ(j)"
                                                                                                                     "JJ(1+j)")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (expand
                                                                                                             "finseq_appl")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "gt")
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 "vals(J(JJ(j)) + i)"
                                                                                                                 "vals(1 + J(JJ(j)) + i)")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (split
                                                                                                                     -)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "ge"
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "le"
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (flatten)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "FF"
                                                                                                                               +)
                                                                                                                              (("1"
                                                                                                                                (propax)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (copy
                                                                                                                       "grg")
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "DD"
                                                                                                                         1)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "CC"
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (inst?)
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("3"
                                                                                                                      (copy
                                                                                                                       "grg")
                                                                                                                      (("3"
                                                                                                                        (expand
                                                                                                                         "DD"
                                                                                                                         1)
                                                                                                                        (("3"
                                                                                                                          (expand
                                                                                                                           "CC"
                                                                                                                           1)
                                                                                                                          (("3"
                                                                                                                            (inst?)
                                                                                                                            (("3"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (decompose-equality
                                                                           +)
                                                                          (("1"
                                                                            (expand
                                                                             "FF"
                                                                             +)
                                                                            (("1"
                                                                              (lift-if)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (lift-if)
                                                                                  (("1"
                                                                                    (lift-if)
                                                                                    (("1"
                                                                                      (split
                                                                                       +)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (split
                                                                                           +)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (copy
                                                                                                 -4)
                                                                                                (("1"
                                                                                                  (typepred
                                                                                                   "JJ")
                                                                                                  (("1"
                                                                                                    (inst-cp
                                                                                                     -
                                                                                                     "j"
                                                                                                     "1+j")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "1+j"
                                                                                                       "2+j")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (inst-cp
                                                                                                           -
                                                                                                           "j"
                                                                                                           "1+j")
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "1+j"
                                                                                                             "2+j")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (copy
                                                                                                                 "aulin")
                                                                                                                (("1"
                                                                                                                  (hide
                                                                                                                   "aulin")
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "JJ(j)"
                                                                                                                     "JJ(1+j)")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -8)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "last"
                                                                                                                             -2)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "finseq_appl")
                                                                                                                              (("1"
                                                                                                                                (replace
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "DD"
                                                                                                                                   -2)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "CC"
                                                                                                                                     -2)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "abs"
                                                                                                                                       -2)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (inst
                                                                                                                                           "prizey"
                                                                                                                                           "JJ(j)"
                                                                                                                                           "JJ(1+j)")
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            (("1"
                                                                                                                                              (flatten)
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (replace
                                                                                                                                                   -2
                                                                                                                                                   :dir
                                                                                                                                                   rl)
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "first")
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      (("1"
                                                                                                                                                        (expand
                                                                                                                                                         "finseq_appl")
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (copy
                                                                                               "aulin")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -
                                                                                                 "JJ(1+j)"
                                                                                                 "JJ(2+j)")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (typepred
                                                                                                     "JJ")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "1+j"
                                                                                                       "2+j")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (replaces
                                                                                                             -2)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "DD"
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "CC"
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "abs"
                                                                                                                   +)
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     "prizey"
                                                                                                                     "JJ(1+j)"
                                                                                                                     "JJ(2+j)")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (flatten)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (split
                                                                                           +)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -2)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "1+j"
                                                                                                   "2+j")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "first")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "finseq_appl")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (typepred
                                                                             "JJ")
                                                                            (("2"
                                                                              (inst
                                                                               -
                                                                               "j"
                                                                               "j+1")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (inst
                                                                                   "prizey"
                                                                                   "JJ(j)"
                                                                                   "JJ(1+j)")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "o")
                                                                    (("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (typepred
                                                                         "JJ")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "i"
                                                                           "j")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (inst
                                                                               "prizey"
                                                                               "JJ(i)"
                                                                               "JJ(j)")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide 2)
                                                                  (("2"
                                                                    (skosimp*)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (skeep)
                                                              (("3"
                                                                (copy "aulin")
                                                                (("3"
                                                                  (inst
                                                                   -
                                                                   "JJ(i)"
                                                                   "JJ(j)")
                                                                  (("3"
                                                                    (assert)
                                                                    (("3"
                                                                      (case
                                                                       "JJ(i)/=JJ(j)")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (replace
                                                                             -5)
                                                                            (("1"
                                                                              (expand
                                                                               "DD"
                                                                               -1)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (case
                                                                                   "J(JJ(i))/=J(JJ(j))")
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "CC"
                                                                                       -1)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "abs"
                                                                                         -1)
                                                                                        (("1"
                                                                                          (lift-if)
                                                                                          (("1"
                                                                                            (ground)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (copy
                                                                                     "prizey")
                                                                                    (("2"
                                                                                      (inst-cp
                                                                                       -
                                                                                       "JJ(i)"
                                                                                       "JJ(j)")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -
                                                                                         "JJ(j)"
                                                                                         "JJ(i)")
                                                                                        (("2"
                                                                                          (ground)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         -1)
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (typepred
                                                                             "JJ")
                                                                            (("2"
                                                                              (inst-cp
                                                                               -
                                                                               "i"
                                                                               "j")
                                                                              (("2"
                                                                                (inst
                                                                                 -
                                                                                 "j"
                                                                                 "i")
                                                                                (("2"
                                                                                  (ground)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skeep)
                                                        (("2"
                                                          (expand "EC" +)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (inst
                                                               "aulin"
                                                               "i"
                                                               "j")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (skeep*)
                                                    (("2" (assert) nil nil))
                                                    nil)
                                                   ("3" (propax) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (skeep*)
                                            (("3"
                                              (expand "DD" +)
                                              (("3"
                                                (expand "CC" +)
                                                (("3"
                                                  (hide -)
                                                  (("3" (grind) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("4"
                                            (skeep*)
                                            (("4" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide -)
                                          (("2" (grind) nil nil))
                                          nil)
                                         ("3"
                                          (skeep*)
                                          (("3" (assert) nil nil))
                                          nil)
                                         ("4"
                                          (skeep)
                                          (("4" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3" (hide -)
                                      (("3"
                                        (hide 2)
                                        (("3"
                                          (expand "CC")
                                          (("3" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide-all-but 1)
                                    (("2" (grind) nil nil)) nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "ccg_pigeonhole")
                              (("2" (inst - "dg" "ccs") nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((make_ccg const-decl "CCG" ccg_def nil)
    (FunMeasure type-eq-decl nil ccg_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (CCG type-eq-decl nil ccg_def nil)
    (FunMeasures type-eq-decl nil ccg_def nil)
    (N formal-const-decl "posnat" ccg nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (lt formal-const-decl "(well_founded?[MT])" ccg nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (MT formal-type-decl nil ccg nil)
    (cdigraph const-decl "bool" c_digraphs_def digraphs)
    (ComputableDigraph type-eq-decl nil c_digraphs_def digraphs)
    (CallingContext type-eq-decl nil cc_def nil)
    (Val formal-type-decl nil ccg nil) (NodeId formal-type-decl nil ccg nil)
    (Condition formal-type-decl nil ccg nil)
    (Expr formal-type-decl nil ccg nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (scp_termination? const-decl "bool" scp nil)
    (ccg_pigeonhole formula-decl nil ccg nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (last const-decl "T" seq_extras structures)
    (measures_combination type-eq-decl nil ccg nil)
    (parext formula-decl nil ccg nil)
    (izzy skolem-const-decl "[[nat, nat] -> boolean]" ccg nil)
    (J skolem-const-decl "[nat -> nat]" ccg nil)
    (DD skolem-const-decl "[d: [nat, nat] ->
   [# length: posint,
      seq:
        [below[1 + abs(J(d`2) - J(d`1))] ->
           CallingContext[Val, Expr, Condition, NodeId]] #]]" ccg nil)
    (nonempty? const-decl "bool" sets nil) (choose const-decl "(p)" sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (member const-decl "bool" sets nil)
    (fms skolem-const-decl
     "FunMeasures[Val, Expr, Condition, NodeId, MT, lt, N]" ccg nil)
    (dg skolem-const-decl "(cdigraph)" ccg nil)
    (i skolem-const-decl "nat" ccg nil) (j skolem-const-decl "nat" ccg nil)
    (empty? const-decl "bool" sets nil)
    (EC skolem-const-decl "[[nat, nat] -> below[N]]" ccg nil)
    (EdgeColoring type-eq-decl nil ramsey_graph ints)
    (build_infinite_descent formula-decl nil ccg nil)
    (O const-decl "T3" function_props nil)
    (JJ skolem-const-decl "IncSub" ccg nil)
    (Seq_val type-eq-decl nil cc_def nil) (gt const-decl "bool" ccg_def nil)
    (i skolem-const-decl "nat" ccg nil) (j skolem-const-decl "nat" ccg nil)
    (FF skolem-const-decl "[nat -> [nat -> [Val -> MT]]]" ccg nil)
    (EdgeRamsey formula-decl nil ramsey_graph ints)
    (<= const-decl "bool" reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pre_circuit? const-decl "bool" circuits_ digraphs)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (gt_mc? const-decl "bool" ccg nil) (gte_mc? const-decl "bool" ccg nil)
    (gt const-decl "bool" ccg nil) (ge const-decl "bool" ccg_def nil)
    (le const-decl "bool" ccg_def nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (walk? const-decl "bool" walks_ digraphs)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (edge? const-decl "bool" digraphs_ digraphs)
    (verts_in? const-decl "bool" walks_ digraphs)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (GG skolem-const-decl "CCG[Val, Expr, Condition, NodeId, MT, lt, N]" ccg
     nil)
    (CC skolem-const-decl "[d: [nat, nat] ->
   [# length: posint,
      seq:
        [below[1 + abs(J(d`1 + d`2) - J(d`1))] ->
           CallingContext[Val, Expr, Condition, NodeId]] #]]" ccg nil)
    (circuit? const-decl "bool" circuits_ digraphs)
    (prewalk type-eq-decl nil walks_ digraphs)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp digraphs)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp digraphs)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp digraphs)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]" c_digraphs_imp
     digraphs)
    (finseq type-eq-decl nil finite_sequences nil)
    (digraph_type type-eq-decl nil c_digraphs_imp digraphs)
    (Seq_cc type-eq-decl nil ccg nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (edges const-decl "bool" c_digraphs_def digraphs)
    (vert const-decl "bool" c_digraphs_def digraphs)
    (c_digraph type-eq-decl nil c_digraphs_def digraphs)
    (infinite_seq_ccs const-decl "bool" scp nil)
    (ccg_termination? const-decl "bool" ccg nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (IncSub type-eq-decl nil ramsey_graph ints))
   nil)))


(scp
 (scp_termination 0
  (scp_termination-1 nil 3651143328
   ("" (skeep)
    (("" (expand "SCP")
      (("" (split 1)
        (("1" (flatten)
          (("1" (expand "scp_termination?")
            (("1" (skeep) (("1" (inst?) nil nil)) nil)) nil))
          nil)
         ("2" (flatten)
          (("2" (expand "scp_termination?")
            (("2" (skeep)
              (("2" (inst?)
                (("2" (assert)
                  (("2" (skeep)
                    (("2" (typepred "r")
                      (("2" (use "no_infinite_descending_sequence")
                        (("2" (assert)
                          (("2" (expand "empty?")
                            (("2" (inst -1 "vals")
                              (("2" (expand "member")
                                (("2" (expand "descending?")
                                  (("2" (propax) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((SCP const-decl "bool" scp nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (sequence type-eq-decl nil sequences nil)
    (descending? const-decl "bool" monotone_sequences orders)
    (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil)
    (no_infinite_descending_sequence formula-decl nil well_foundedness orders)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Expr formal-type-decl nil scp nil)
    (Condition formal-type-decl nil scp nil)
    (NodeId formal-type-decl nil scp nil) (Val formal-type-decl nil scp nil)
    (CallingContext type-eq-decl nil cc_def nil)
    (Seq_cc_pred const-decl
     "[[nat -> CallingContext[Val, Expr, Condition, NodeId]] -> boolean]" scp
     nil)
    (Seq_cc formal-subtype-decl nil scp nil)
    (Seq_val type-eq-decl nil cc_def nil)
    (scp_termination? const-decl "bool" scp nil))
   shostak)))


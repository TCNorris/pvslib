(scp_to_ccg_alt
 (R_wf 0
  (R_wf-1 nil 3651862882
   ("" (use "scp_termination")
    (("" (expand "scp_termination?")
      (("" (use "no_infinite_descending_sequence")
        (("" (assert)
          (("" (hide 2)
            (("" (expand "empty?")
              (("" (skolem 1 "vals")
                (("" (expand "member")
                  (("" (expand "descending?")
                    (("" (expand "R")
                      ((""
                        (name "ccs_seq" "LAMBDA(n: nat): epsilon({cc: (CCs) |

                                                                  eval_conds
                                                                            (cc`conds, vals(n))
                                                                   AND
                                                                   semantic_rel(cc`actuals, vals(n),
                                                                                     vals(1 + n))})")
                        (("1" (inst -3 "ccs_seq" "vals")
                          (("1" (expand "infinite_seq_ccs")
                            (("1" (skeep)
                              (("1" (replaces -1 :dir rl)
                                (("1" (assert)
                                  (("1" (inst -1 "i")
                                    (("1" (use "epsilon_ax[(CCs)]")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split -1)
                                          (("1" (propax) nil nil)
                                           ("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (inst -1 "0")
                          (("2" (skeep -1) (("2" (inst 1 "cc") nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((scp_termination? const-decl "bool" scp nil)
    (empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (Seq_val type-eq-decl nil cc_def nil)
    (epsilon_ax formula-decl nil epsilons nil)
    (infinite_seq_ccs const-decl "bool" scp nil)
    (TRUE const-decl "bool" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Expr formal-type-decl nil scp_to_ccg_alt nil)
    (Condition formal-type-decl nil scp_to_ccg_alt nil)
    (NodeId formal-type-decl nil scp_to_ccg_alt nil)
    (CallingContext type-eq-decl nil cc_def nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CCs formal-const-decl
     "finite_set[CallingContext[Val, Expr, Condition, NodeId]]" scp_to_ccg_alt
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (epsilon const-decl "T" epsilons nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (eval_conds formal-const-decl "PRED[[Condition, Val]]" scp_to_ccg_alt nil)
    (sequence type-eq-decl nil sequences nil)
    (semantic_rel formal-const-decl "PRED[[Expr, Val, Val]]" scp_to_ccg_alt
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (descending? const-decl "bool" monotone_sequences orders)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (R const-decl "bool" scp_to_ccg_alt nil)
    (Val formal-type-decl nil scp_to_ccg_alt nil)
    (no_infinite_descending_sequence formula-decl nil well_foundedness orders)
    (scp_termination formula-decl nil scp_to_ccg_alt nil))
   shostak))
 (R_no_desc_inf_branch 0
  (R_no_desc_inf_branch-1 nil 3651863381
   ("" (skeep)
    (("" (lemma "Union_finite")
      ((""
        (inst -1
         "{ s: set[Val] | EXISTS(cc: (CCs)): FORALL(v: Val): s(v) = (eval_conds(cc`conds,x) AND semantic_rel(cc`actuals,x,v))}")
        ((""
          (case "{y: Val | R(y, x)} = Union({s: set[Val] |
                         EXISTS (cc: (CCs)):
                           FORALL (v: Val):
                             s(v) =
                              (eval_conds(cc`conds, x) AND
                                semantic_rel(cc`actuals, x, v))})")
          (("1" (replaces -1)
            (("1" (assert)
              (("1" (hide 2)
                (("1" (split 1)
                  (("1" (use "surjection_from_finite_set[(CCs),set[Val]]")
                    (("1" (assert)
                      (("1" (hide 1)
                        (("1" (inst -1 "CCs")
                          (("1"
                            (inst 1
                             "LAMBDA(cc: (CCs)): {v: Val | eval_conds(cc`conds, x) AND
                              semantic_rel(cc`actuals, x, v)}")
                            (("1" (expand "surjective?")
                              (("1" (skeep 1 :preds? t)
                                (("1" (expand "restrict")
                                  (("1" (skeep -1)
                                    (("1" (inst 1 "cc")
                                      (("1"
                                        (apply-extensionality)
                                        (("1"
                                          (inst?)
                                          (("1" (replaces -1) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "restrict")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skeep :preds? t)
                              (("2" (inst 1 "x1") (("2" (skeep) nil nil))
                                nil))
                              nil)
                             ("3" (skeep :preds? t)
                              (("3" (inst?) (("3" (skeep :preds? t) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "every")
                    (("2" (skeep :preds? t)
                      (("2" (skeep -1)
                        (("2" (lemma "finite_subset[Val]")
                          (("2"
                            (inst -1
                             "{w: Val | semantic_rel(cc`actuals, x, w)}"
                             "x_1")
                            (("1" (assert)
                              (("1" (hide 2)
                                (("1" (expand "subset?")
                                  (("1" (skeep)
                                    (("1" (expand "member")
                                      (("1"
                                        (inst?)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (use "semantic_rel_finite_branch") nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide-all-but 1)
            (("2" (expand "Union")
              (("2" (apply-extensionality)
                (("2" (hide 2)
                  (("2" (expand "R")
                    (("2" (iff)
                      (("2" (split 1)
                        (("1" (flatten)
                          (("1" (skeep -1 :preds? t)
                            (("1"
                              (inst 1
                               "{w: Val | eval_conds(cc`conds, x) AND semantic_rel(cc`actuals, x, w) }")
                              (("1" (assert) nil nil)
                               ("2" (inst 1 "cc") (("2" (skeep) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (skeep -1 :preds? t)
                            (("2" (skeep -1 :preds? t)
                              (("2" (inst 1 "cc")
                                (("2" (inst -2 "x!1") (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Val formal-type-decl nil scp_to_ccg_alt nil)
    (Union_finite formula-decl nil finite_sets_of_sets nil)
    (Union const-decl "set" sets nil) (R const-decl "bool" scp_to_ccg_alt nil)
    (Union_surjective name-judgement "(surjective?[setofsets[T], set[T]])"
     sets_lemmas nil)
    (finite_restrict application-judgement "finite_set[S]" restrict_set_props
     nil)
    (restrict const-decl "R" restrict nil)
    (surjective? const-decl "bool" functions nil)
    (cc skolem-const-decl "(CCs)" scp_to_ccg_alt nil)
    (x skolem-const-decl "Val" scp_to_ccg_alt nil)
    (surjection_from_finite_set formula-decl nil finite_sets_eq finite_sets)
    (finite_subset formula-decl nil finite_sets nil)
    (semantic_rel_finite_branch formula-decl nil scp_to_ccg_alt nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (cc skolem-const-decl "(CCs)" scp_to_ccg_alt nil)
    (every const-decl "bool" sets nil) (TRUE const-decl "bool" booleans nil)
    (cc skolem-const-decl "(CCs)" scp_to_ccg_alt nil)
    (semantic_rel formal-const-decl "PRED[[Expr, Val, Val]]" scp_to_ccg_alt
     nil)
    (eval_conds formal-const-decl "PRED[[Condition, Val]]" scp_to_ccg_alt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (CCs formal-const-decl
     "finite_set[CallingContext[Val, Expr, Condition, NodeId]]" scp_to_ccg_alt
     nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (CallingContext type-eq-decl nil cc_def nil)
    (NodeId formal-type-decl nil scp_to_ccg_alt nil)
    (Condition formal-type-decl nil scp_to_ccg_alt nil)
    (Expr formal-type-decl nil scp_to_ccg_alt nil)
    (set type-eq-decl nil sets nil) (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (IMP_omega_TCC1 0
  (IMP_omega_TCC1-1 nil 3652797970 ("" (use "R_wf") nil nil)
   ((R_wf formula-decl nil scp_to_ccg_alt nil)) nil
   (IMP_omega subtype "scp_to_ccg_alt.R"
    "(orders[scp_to_ccg_alt.Val].well_founded?)")))
 (IMP_omega_TCC2 0
  (IMP_omega_TCC2-1 nil 3652798953 ("" (use "R_no_desc_inf_branch") nil nil)
   ((R_no_desc_inf_branch formula-decl nil scp_to_ccg_alt nil)) nil
   (IMP_omega assuming
    "orders@omega[scp_to_ccg_alt.Val, scp_to_ccg_alt.R].omega"
    "lt_no_desc_inf_branch: ASSUMPTION FORALL (x: omega.T): finite_sets[omega.T].is_finite({y: omega.T | omega.lt(y, x)})")))
 (IMP_ccg_TCC1 0
  (IMP_ccg_TCC1-2 nil 3661715310 ("" (use "wf_nat") nil nil)
   ((wf_nat formula-decl nil naturalnumbers nil)) nil
   (IMP_ccg subtype "LAMBDA (n, m: naturalnumbers.nat): reals.<(n, m)"
    "(orders[nat].well_founded?)"))
  (IMP_ccg_TCC1-1 nil 3661715261 ("" (subtype-tcc) nil nil) nil nil
   (IMP_ccg subtype "LAMBDA (n, m: naturalnumbers.nat): reals.<(n, m)"
    "(orders[nat].well_founded?)")))
 (scp_implies_ccg_termination 0
  (scp_implies_ccg_termination-1 nil 3651860076
   ("" (skeep)
    (("" (inst 1 "LAMBDA(i:below(1)): Omega")
      (("1" (expand "ccg_termination?")
        (("1" (skeep :preds? t :but (("c" "circuit")))
          (("1"
            (inst 1
             "(# length := length(circuit), seq := LAMBDA(i: below(length(circuit))): 0 #)")
            (("1" (expand "gt_mc?")
              (("1" (split 1)
                (("1" (expand "gte_mc?")
                  (("1" (skeep)
                    (("1" (expand "finseq_appl")
                      (("1" (expand "gt")
                        (("1" (skeep)
                          (("1" (expand "ge")
                            (("1" (expand "le")
                              (("1" (flatten)
                                (("1" (expand "make_ccg")
                                  (("1" (use "omega_increasing")
                                    (("1" (expand "R")
                                      (("1"
                                        (hide-all-but (-1 -2 1))
                                        (("1"
                                          (inst 1 "circuit(i_1)")
                                          (("1"
                                            (assert)
                                            (("1" (grind) nil nil))
                                            nil)
                                           ("2"
                                            (expand "finseq_appl")
                                            (("2"
                                              (typepred "dg")
                                              (("2"
                                                (typepred "circuit")
                                                (("2"
                                                  (expand "subset?")
                                                  (("2"
                                                    (expand "member")
                                                    (("2"
                                                      (inst?)
                                                      (("2" (grind) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "finseq_appl")
                  (("2" (expand "gt")
                    (("2" (inst 1 "0")
                      (("1" (skeep)
                        (("1" (expand "make_ccg")
                          (("1" (expand "ge")
                            (("1" (expand "le")
                              (("1" (use "omega_increasing")
                                (("1" (assert) nil nil)
                                 ("2" (expand "R")
                                  (("2" (hide-all-but (-1 -2 1))
                                    (("2" (inst 1 "circuit(0)")
                                      (("1" (grind) nil nil)
                                       ("2"
                                        (expand "finseq_appl")
                                        (("2"
                                          (typepred "dg")
                                          (("2"
                                            (expand "subset?")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "member")
                                                (("2"
                                                  (typepred "circuit")
                                                  (("2" (grind) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil)
       ("2" (skeep) (("2" (use "R_wf") nil nil)) nil))
      nil))
    nil)
   ((R const-decl "bool" scp_to_ccg_alt nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (Val formal-type-decl nil scp_to_ccg_alt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Expr formal-type-decl nil scp_to_ccg_alt nil)
    (Condition formal-type-decl nil scp_to_ccg_alt nil)
    (NodeId formal-type-decl nil scp_to_ccg_alt nil)
    (FunMeasure type-eq-decl nil ccg_def nil)
    (FunMeasures type-eq-decl nil ccg_def nil)
    (Omega const-decl "nat" omega orders) (gt_mc? const-decl "bool" ccg nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (length def-decl "nat" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (nth def-decl "T" list_props nil)
    (val2 skolem-const-decl "Val" scp_to_ccg_alt nil)
    (val1 skolem-const-decl "Val" scp_to_ccg_alt nil)
    (gte_mc? const-decl "bool" ccg nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (le const-decl "bool" ccg_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (i_1 skolem-const-decl "below(length(circuit) - 1)" scp_to_ccg_alt nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (verts_in? const-decl "bool" walks_ digraphs)
    (edges const-decl "bool" c_digraphs_def digraphs)
    (edge? const-decl "bool" digraphs_ digraphs)
    (walk? const-decl "bool" walks_ digraphs)
    (pre_circuit? const-decl "bool" circuits_ digraphs)
    (size const-decl "nat" c_digraphs_def digraphs)
    (list_of_idxs const-decl "bool" c_digraphs_def digraphs)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (member const-decl "bool" sets nil)
    (val2 skolem-const-decl "Val" scp_to_ccg_alt nil)
    (val1 skolem-const-decl "Val" scp_to_ccg_alt nil)
    (omega_increasing formula-decl nil omega orders)
    (ge const-decl "bool" ccg_def nil) (gt const-decl "bool" ccg nil)
    (measures_combination type-eq-decl nil ccg nil)
    (eval_conds formal-const-decl "PRED[[Condition, Val]]" scp_to_ccg_alt nil)
    (semantic_rel formal-const-decl "PRED[[Expr, Val, Val]]" scp_to_ccg_alt
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (CallingContext type-eq-decl nil cc_def nil)
    (> const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def digraphs)
    (cdigraph const-decl "bool" c_digraphs_def digraphs)
    (digraph_type type-eq-decl nil c_digraphs_imp digraphs)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]" c_digraphs_imp
     digraphs)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp digraphs)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp digraphs)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp digraphs)
    (prewalk type-eq-decl nil walks_ digraphs)
    (circuit? const-decl "bool" circuits_ digraphs)
    (CCG type-eq-decl nil ccg_def nil) (make_ccg const-decl "CCG" ccg_def nil)
    (subset? const-decl "bool" sets nil)
    (c_digraph type-eq-decl nil c_digraphs_def digraphs)
    (vert const-decl "bool" c_digraphs_def digraphs)
    (finite_set type-eq-decl nil finite_sets nil)
    (CCs formal-const-decl
     "finite_set[CallingContext[Val, Expr, Condition, NodeId]]" scp_to_ccg_alt
     nil)
    (Graph_cc type-eq-decl nil scp_to_ccg_alt nil)
    (dg skolem-const-decl "Graph_cc" scp_to_ccg_alt nil)
    (circuit skolem-const-decl "{c:
   prewalk
       [CallingContext[Val, Expr, Condition, NodeId],
        digraph_type[CallingContext[Val, Expr, Condition, NodeId]],
        digraph_verts, digraph_edges, digraph_size, digraph_make] |
   circuit?(dg(make_ccg(dg, LAMBDA (i: below(1)): Omega)), c)}" scp_to_ccg_alt
     nil)
    (last const-decl "T" seq_extras structures)
    (ccg_termination? const-decl "bool" ccg nil)
    (R_wf formula-decl nil scp_to_ccg_alt nil))
   shostak)))


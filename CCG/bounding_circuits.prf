(bounding_circuits
 (bounding_from_gl_termination 0
  (bounding_from_gl_termination-1 nil 3659352248
   ("" (skeep)
    (("" (expand "bounding_from_graph_lists")
      (("" (lemma "bounding_steps_iter_def")
        (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((bounding_from_graph_lists const-decl "bool" bounding_circuits_defs nil)
    (digraph_type type-eq-decl nil c_digraphs_imp digraphs)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def digraphs)
    (cdigraph const-decl "bool" c_digraphs_def digraphs)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign3 type-eq-decl nil sign3 reals)
    (length def-decl "nat" list_props nil)
    (listn type-eq-decl nil listn structures)
    (Measure_Matrix type-eq-decl nil measures nil)
    (* const-decl "Measure_Matrix" measures nil)
    (id const-decl "Measure_Matrix" measures nil)
    (all_edges_in_map? const-decl "bool" c_weighted_digraphs_def digraphs)
    (wdg type-eq-decl nil matrix_wdg nil) (<= const-decl "bool" reals nil)
    (CircBound const-decl "posnat" matrix_wdg nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]" c_digraphs_imp
     digraphs)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp digraphs)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp digraphs)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp digraphs)
    (vert? const-decl "bool" digraphs_ digraphs)
    (vert type-eq-decl nil digraphs_ digraphs)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks_ digraphs)
    (circuit_at? const-decl "bool" circuits_ digraphs)
    (cycle_at? const-decl "bool" cycles_ digraphs)
    (member def-decl "bool" list_props nil)
    (positive? const-decl "bool" measures nil)
    (<= const-decl "bool" measures nil)
    (wgd_type type-eq-decl nil c_weighted_digraphs_def digraphs)
    (walk? const-decl "bool" walks_ digraphs)
    (wgd_dg const-decl "[wgd_type -> digraph_type]" c_weighted_digraphs_def
     digraphs)
    (Walk type-eq-decl nil walks_ digraphs)
    (c_digraph type-eq-decl nil c_digraphs_def digraphs)
    (edges const-decl "bool" c_digraphs_def digraphs)
    (get_wgt const-decl "Weight" c_weighted_digraphs_def digraphs)
    (has_key? const-decl "bool" c_weighted_digraphs_def digraphs)
    (get_value def-decl "Weight" c_weighted_digraphs_def digraphs)
    (make_c_wdg const-decl "wgd_type" c_weighted_digraphs_def digraphs)
    (wgt_walk const-decl "Weight" weighted_digraphs_ digraphs)
    (BoundingSets type-eq-decl nil matrix_wdg nil)
    (VertList type-eq-decl nil digraphs_ digraphs)
    (CyclesAt type-eq-decl nil cycles_ digraphs)
    (VertCycles type-eq-decl nil cycles_ digraphs)
    (vert_list const-decl "bool" digraphs_ digraphs)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nth def-decl "T" list_props nil)
    (VCList type-eq-decl nil cycles_ digraphs)
    (start_bounding const-decl "BoundingSets(G)" bounding_circuits_defs nil)
    (BoundingStepsFun type-eq-decl nil matrix_wdg nil)
    (bound_circuits const-decl "BoundingSets(G)" bounding_circuits_defs nil)
    (bounding_steps_iter_def formula-decl nil matrix_wdg nil)
    (T formal-type-decl nil bounding_circuits nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" bounding_circuits nil))
   shostak))
 (c_bounding_from_gl_termination 0
  (c_bounding_from_gl_termination-1 nil 3661807247
   ("" (skeep)
    (("" (expand "bounding_from_graph")
      (("" (use "bounding_from_gl_termination") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((bounding_from_graph const-decl "bool" bounding_circuits nil)
    (T formal-type-decl nil bounding_circuits nil)
    (digraph_type type-eq-decl nil c_digraphs_imp digraphs)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def digraphs)
    (cdigraph const-decl "bool" c_digraphs_def digraphs)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign3 type-eq-decl nil sign3 reals)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" bounding_circuits nil)
    (listn type-eq-decl nil listn structures)
    (Measure_Matrix type-eq-decl nil measures nil)
    (* const-decl "Measure_Matrix" measures nil)
    (id const-decl "Measure_Matrix" measures nil)
    (all_edges_in_map? const-decl "bool" c_weighted_digraphs_def digraphs)
    (wdg type-eq-decl nil matrix_wdg nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]" c_digraphs_imp
     digraphs)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp digraphs)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp digraphs)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp digraphs)
    (vert? const-decl "bool" digraphs_ digraphs)
    (vert type-eq-decl nil digraphs_ digraphs)
    (vert_list const-decl "bool" digraphs_ digraphs)
    (VertList type-eq-decl nil digraphs_ digraphs)
    (VCList type-eq-decl nil cycles_ digraphs)
    (all_cycles_vl const-decl "[# vl: VertList(C), vc: VCList(C, vl) #]"
     cdigraph_all_cycles digraphs)
    (CyclesAt type-eq-decl nil cycles_ digraphs)
    (VertCycles type-eq-decl nil cycles_ digraphs)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil) (nth def-decl "T" list_props nil)
    (bounding_from_gl_termination formula-decl nil bounding_circuits nil))
   shostak)))


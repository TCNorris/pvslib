(measures
 (get_TCC1 0
  (get_TCC1-1 nil 3653416765 ("" (subtype-tcc) nil nil) nil nil
   (get subtype "measures.i" "below[length[listn[Sign3](N)](m)]")))
 (get_TCC2 0
  (get_TCC2-1 nil 3653416765 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" measures nil)
    (listn type-eq-decl nil listn "structures/")
    (Measure_Matrix type-eq-decl nil measures nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (get subtype "measures.j"
        "below[length[Sign3](nth[listn[Sign3](N)](m, i))]")))
 (form_matrix_TCC1 0
  (form_matrix_TCC1-1 nil 3653424979
   ("" (skeep)
    (("" (use "length_appendn[Sign3]") (("" (assert) nil nil)) nil))
    nil)
   ((length_appendn formula-decl nil more_list_props "structures/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (N formal-const-decl "posnat" measures nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length_singleton formula-decl nil more_list_props "structures/"))
   nil
   (form_matrix subtype
    "more_list_props[Sign3].^((: (number_fields.-)(1) :), measures.N)"
    "listn[Sign3].listn(measures.N)")))
 (form_matrix_TCC2 0
  (form_matrix_TCC2-1 nil 3653424979
   ("" (skeep)
    (("" (inst 1 "(: Undefined :)^N")
      (("" (use "length_appendn[Sign3]") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" measures nil)
    (listn type-eq-decl nil listn "structures/")
    (^ def-decl "list[T]" more_list_props "structures/")
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (length_singleton formula-decl nil more_list_props "structures/")
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length_appendn formula-decl nil more_list_props "structures/"))
   nil (form_matrix existence "" "listn[Sign3].listn(measures.N)")))
 (form_matrix_TCC3 0
  (form_matrix_TCC3-1 nil 3653424979
   ("" (expand "eq")
    (("" (skeep*)
      (("" (expand "get")
        (("" (invoke (typepred "%1") (! 1 1 1 1))
          (("1" (inst?)
            (("1" (replace -3 :dir rl :hide? t)
              (("1" (invoke (typepred "%1") (! 1 1 1))
                (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (inst 1 "(: Undefined :)^N")
              (("2" (use "length_appendn[Sign3]")
                (("2" (assert) nil nil)) nil))
              nil))
            nil)
           ("3" (skeep)
            (("3" (use "length_appendn[Sign3]")
              (("3" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" measures nil)
    (listn type-eq-decl nil listn "structures/")
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (array2list const-decl
     "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}"
     array2list "structures/")
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (Measure_Mat_Fn type-eq-decl nil measures nil)
    (^ def-decl "list[T]" more_list_props "structures/")
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (length_singleton formula-decl nil more_list_props "structures/")
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length_appendn formula-decl nil more_list_props "structures/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (get const-decl "Sign3" measures nil)
    (eq const-decl "bool" measures nil))
   nil
   (form_matrix subtype
    "array2list[listn[Sign3].listn(measures.N)].array2list(measures.N)(LAMBDA (k: naturalnumbers.nat): IF reals.<(k, measures.N) THEN array2list[Sign3].array2list(measures.N)(LAMBDA (p: naturalnumbers.nat): IF reals.<(p, measures.N) THEN measures.f(k)(p) ELSE (number_fields.-)(1) ENDIF) ELSE more_list_props[Sign3].^((: (number_fields.-)(1) :), measures.N) ENDIF)"
    "{m: measures.Measure_Matrix | measures.eq(m, measures.f)}")))
 (form_matfun_TCC1 0
  (form_matfun_TCC1-1 nil 3653468924 ("" (subtype-tcc) nil nil)
   ((get const-decl "Sign3" measures nil)
    (eq const-decl "bool" measures nil))
   nil
   (form_matfun subtype
    "LAMBDA (i) (j): measures.get(measures.m)(measures.i, measures.j)"
    "{f | measures.eq(measures.m, measures.f)}")))
 (matrix_fun_idemp 0
  (matrix_fun_idemp-2 nil 3653730861
   ("" (skeep)
    (("" (use "nth_extensionality[listn[Sign3](N)]")
      (("" (assert)
        (("" (hide 2)
          (("" (skolem 1 "i")
            (("" (use "nth_extensionality[Sign3]")
              (("" (assert)
                (("" (hide 2)
                  (("" (skolem 1 "j")
                    (("" (typepred "form_matrix(form_matfun(m))")
                      (("" (hide -1 -2)
                        (("" (expand "eq")
                          (("" (expand "get")
                            (("" (inst?)
                              ((""
                                (replace -1 :hide? t)
                                ((""
                                  (typepred "form_matfun(m)")
                                  ((""
                                    (expand "eq")
                                    ((""
                                      (expand "get")
                                      ((""
                                        (inst?)
                                        (("" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nth_extensionality formula-decl nil more_list_props "structures/")
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" measures nil)
    (listn type-eq-decl nil listn "structures/")
    (form_matfun const-decl "{f | eq(m, f)}" measures nil)
    (form_matrix const-decl "{m: Measure_Matrix | eq(m, f)}" measures
     nil)
    (eq const-decl "bool" measures nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Measure_Matrix type-eq-decl nil measures nil)
    (Measure_Mat_Fn type-eq-decl nil measures nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (get const-decl "Sign3" measures nil))
   nil)
  (matrix_fun_idemp-1 nil 3653470211
   ("" (skeep)
    (("" (use "nth_extensionality_1[listn[Sign3](N)]")
      (("" (assert)
        (("" (hide 2)
          (("" (skolem 1 "i")
            (("" (use "nth_extensionality_1[Sign3]")
              (("" (assert)
                (("" (hide 2)
                  (("" (skolem 1 "j")
                    (("" (typepred "form_matrix(form_matfun(m))")
                      (("" (hide -1 -2)
                        (("" (expand "eq")
                          (("" (expand "get")
                            (("" (inst?)
                              ((""
                                (replace -1 :hide? t)
                                ((""
                                  (typepred "form_matfun(m)")
                                  ((""
                                    (expand "eq")
                                    ((""
                                      (expand "get")
                                      ((""
                                        (inst?)
                                        (("" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Sign3 type-eq-decl nil sign3 "reals/")
    (listn type-eq-decl nil listn "structures/"))
   shostak))
 (fun_matrix_idemp 0
  (fun_matrix_idemp-1 nil 3653470500
   ("" (skeep)
    (("" (decompose-equality)
      (("" (decompose-equality)
        (("" (typepred "form_matfun(form_matrix(f))")
          (("" (expand "eq")
            (("" (expand "get")
              (("" (inst?)
                (("" (replace -1 :hide? t :dir rl)
                  (("" (typepred "form_matrix(f)")
                    (("" (hide -1 -2)
                      (("" (expand "eq")
                        (("" (expand "get") (("" (inst?) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Measure_Matrix type-eq-decl nil measures nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (listn type-eq-decl nil listn "structures/")
    (eq const-decl "bool" measures nil)
    (form_matfun const-decl "{f | eq(m, f)}" measures nil)
    (form_matrix const-decl "{m: Measure_Matrix | eq(m, f)}" measures
     nil)
    (Measure_Mat_Fn type-eq-decl nil measures nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" measures nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (get const-decl "Sign3" measures nil))
   shostak))
 (get_form_matrix 0
  (get_form_matrix-1 nil 3653837389
   ("" (skeep)
    (("" (typepred "form_matrix(f)")
      (("" (hide -1) (("" (expand "eq") (("" (inst?) nil nil)) nil))
        nil))
      nil))
    nil)
   ((form_matrix const-decl "{m: Measure_Matrix | eq(m, f)}" measures
     nil)
    (eq const-decl "bool" measures nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Measure_Matrix type-eq-decl nil measures nil)
    (listn type-eq-decl nil listn "structures/")
    (Measure_Mat_Fn type-eq-decl nil measures nil)
    (N formal-const-decl "posnat" measures nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (max__TCC1 0
  (max__TCC1-1 nil 3653480863 ("" (subtype-tcc) nil nil) nil nil
   (max_ subtype "0" "naturalnumbers.below(measures.n)")))
 (max__TCC2 0
  (max__TCC2-1 nil 3653480863
   ("" (skeep*)
    (("" (split 1)
      (("1" (skeep :preds? t) (("1" (grind) nil nil)) nil)
       ("2" (inst 1 "0") nil nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (max_ subtype "measures.f(0)"
    "{t: sign3.Sign3 | booleans.AND(FORALL (i: naturalnumbers.below(measures.n)): reals.<=(measures.f(i), t), EXISTS (j: naturalnumbers.below(measures.n)): measures.f(j) = t)}")))
 (max__TCC3 0
  (max__TCC3-1 nil 3653480863 ("" (subtype-tcc) nil nil) nil nil
   (max_ subtype "(number_fields.-)(measures.n, 1)"
    "naturalnumbers.below(measures.n)")))
 (max__TCC4 0
  (max__TCC4-1 nil 3653480863
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "next")
        (("" (split 2)
          (("1" (skeep 1 :preds? t)
            (("1" (case "i = n-1")
              (("1" (assert) nil nil)
               ("2" (assert) (("2" (grind) nil nil)) nil))
              nil))
            nil)
           ("2" (skeep -3) (("2" (inst?) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil))
   nil
   (max_ subtype "measures.next"
    "{t: sign3.Sign3 | booleans.AND(FORALL (i: naturalnumbers.below(measures.n)): reals.<=(measures.f(i), t), EXISTS (j: naturalnumbers.below(measures.n)): measures.f(j) = t)}")))
 (max__TCC5 0
  (max__TCC5-1 nil 3653480863
   ("" (skeep*)
    (("" (split 3)
      (("1" (typepred "next")
        (("1" (skeep 1 :preds? t)
          (("1" (case "i = n-1")
            (("1" (assert) nil nil)
             ("2" (inst -3 "i")
              (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (inst?) nil nil))
      nil))
    nil)
   ((n skolem-const-decl "posnat" measures nil)
    (i skolem-const-decl "below(n)" measures nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (max_ subtype "measures.f((number_fields.-)(measures.n, 1))"
    "{t: sign3.Sign3 | booleans.AND(FORALL (i: naturalnumbers.below(measures.n)): reals.<=(measures.f(i), t), EXISTS (j: naturalnumbers.below(measures.n)): measures.f(j) = t)}")))
 (max__TCC6 0
  (max__TCC6-1 nil 3653481754 ("" (subtype-tcc) nil nil) nil nil
   (max_ subtype "measures.i" "naturalnumbers.below(measures.n)")))
 (max__TCC7 0
  (max__TCC7-1 nil 3653481754 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (max_ subtype "(number_fields.-)(measures.n, 1)" "posnat")))
 (max__TCC8 0
  (max__TCC8-1 nil 3653481754 ("" (termination-tcc) nil nil) nil nil
   (max_ termination "measures.max_((number_fields.-)(measures.n, 1))"
    "nil")))
 (id_def 0
  (id_def-1 nil 3653837454
   ("" (skeep)
    (("" (expand "id")
      (("" (use "get_form_matrix")
        (("" (replaces -1)
          (("" (expand "id_fun") (("" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((id const-decl "Measure_Matrix" measures nil)
    (TRUE const-decl "bool" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" measures nil)
    (below type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (Measure_Mat_Fn type-eq-decl nil measures nil)
    (id_fun const-decl "Sign3" measures nil)
    (get_form_matrix formula-decl nil measures nil))
   shostak))
 (add_commute 0
  (add_commute-1 nil 3575740263 ("" (skeep) (("" (grind) nil nil)) nil)
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (Plus3 const-decl "Sign3" measures nil))
   shostak))
 (add_assoc 0
  (add_assoc-1 nil 3575739351 ("" (skeep) (("" (grind) nil nil)) nil)
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (Plus3 const-decl "Sign3" measures nil))
   shostak))
 (add_measures_positive 0
  (add_measures_positive-1 nil 3631552760 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (Plus3 const-decl "Sign3" measures nil))
   shostak))
 (id_on_measures 0
  (id_on_measures-1 nil 3588610057
   ("" (skeep)
    (("" (expand "Plus3")
      (("" (lift-if)
        (("" (ground)
          (("1" (typepred "x") (("1" (assert) nil nil)) nil)
           ("2" (typepred "x") (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((Plus3 const-decl "Sign3" measures nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign3 type-eq-decl nil sign3 "reals/"))
   shostak))
 (card_prep 0
  (card_prep-3 nil 3653730960
   ("" (expand "is_finite")
    (("" (inst 1 "(3^N)^N" "_")
      (("1" (lemma "funset_bijection")
        (("1"
          (case "EXISTS (g:[[below(N)->[below(N)->Sign3]]->below((3^N)^N)]): bijective?(g)")
          (("1" (skeep -1)
            (("1" (expand "bijective?" -1)
              (("1" (flatten)
                (("1"
                  (inst 1
                   "LAMBDA(M: (fullset[Measure_Matrix])): g(LAMBDA(i: below(N))(j: below(N)): get(M)(i,j))")
                  (("1" (expand "injective?")
                    (("1" (skeep)
                      (("1" (inst? -1 :where -4)
                        (("1" (assert)
                          (("1" (expand "get")
                            (("1" (hide-all-but (-1 1))
                              (("1"
                                (decompose-equality -1)
                                (("1"
                                  (use
                                   "nth_extensionality[listn[Sign3](N)]")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (inst -1 "n")
                                        (("1"
                                          (decompose-equality -1)
                                          (("1"
                                            (use
                                             "nth_extensionality[Sign3]")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (skeep)
                                                (("1" (inst?) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2"
              (case "EXISTS (h: [[below(N)-> Sign3]->below(3^N)]): bijective?(h)")
              (("1" (skeep -1)
                (("1"
                  (case "LET G = LAMBDA (gg:[below(N) -> [below(N) -> Sign3]]): LAMBDA (n:below(N)): h(gg(n)) IN bijective?(G) ")
                  (("1" (inst -3 "3^N" "N")
                    (("1" (skolem -3 "H")
                      (("1" (skoletin)
                        (("1" (inst 1 "H o G")
                          (("1"
                            (lemma
                             "composition_bijective[[below(N)->[below(N)->Sign3]],[below(N)->below(3^N)], below((3^N)^N)]")
                            (("1" (inst -1 "G" "H") nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (skoletin)
                      (("2" (expand "bijective?" 1)
                        (("2" (split 1)
                          (("1" (expand "injective?")
                            (("1" (skeep)
                              (("1"
                                (expand "G" -1)
                                (("1"
                                  (expand "bijective?")
                                  (("1"
                                    (expand "injective?")
                                    (("1"
                                      (decompose-equality 1)
                                      (("1"
                                        (typepred (x!1))
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (decompose-equality -2)
                                            (("1"
                                              (inst -1 "x!1")
                                              (("1"
                                                (inst
                                                 -4
                                                 "x1(x!1)"
                                                 "x2(x!1)")
                                                (("1"
                                                  (ground)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "surjective?")
                            (("2" (skeep)
                              (("2"
                                (lemma
                                 "bijective_inverse_exists[[below(N)->Sign3], below(3^N)]")
                                (("2"
                                  (inst -1 "h")
                                  (("2"
                                    (expand "exists1")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (skolem -1 "hh")
                                        (("2"
                                          (inst
                                           1
                                           "LAMBDA (n:below(N)): hh(y(n))")
                                          (("2"
                                            (decompose-equality 1)
                                            (("2"
                                              (expand "G")
                                              (("2"
                                                (expand "inverse?")
                                                (("2"
                                                  (inst -1 "y(x!1)")
                                                  (("2"
                                                    (ground)
                                                    (("2"
                                                      (expand
                                                       "bijective?")
                                                      (("2"
                                                        (expand
                                                         "surjective?")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (inst
                                                             -4
                                                             "y(x!1)")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2"
                  (case "LET (p: [below(3)-> Sign3]) = LAMBDA (s:below(3)): s-1 IN bijective?(p)")
                  (("1" (skoletin)
                    (("1" (inst -3 "3" "N")
                      (("1" (skeep)
                        (("1"
                          (case "LET (F:[[below(N)->below(3)]->[below(N)->Sign3]]) = LAMBDA (T:[below(N)->below(3)]): LAMBDA (s:below(N)): p(T(s))  IN bijective?(F)")
                          (("1"
                            (lemma
                             "bijective_inverse_exists[[below(N)->below(3)],[below(N)-> Sign3]]")
                            (("1" (skoletin)
                              (("1"
                                (inst -3 "F")
                                (("1"
                                  (lemma
                                   "bij_inv_is_bij_alt[[below(N)->below(3)],[below(N)-> Sign3]]")
                                  (("1"
                                    (expand "exists1")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (skolem -4 "FF")
                                        (("1"
                                          (inst -1 "F" "FF")
                                          (("1"
                                            (inst
                                             1
                                             "LAMBDA (row:[below(N)->Sign3]): f(FF(row))")
                                            (("1"
                                              (case
                                               "LET H = o(f,FF) in bijective?(H)")
                                              (("1"
                                                (expand "o")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (ground)
                                                (("2"
                                                  (lemma
                                                   "composition_bijective[[below(N)->Sign3],[below(N)->below(3)], below(3^N)]")
                                                  (("2"
                                                    (inst -1 "FF" "f")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (expand "bijective?" 1)
                              (("2"
                                (expand "injective?")
                                (("2"
                                  (expand "surjective?")
                                  (("2"
                                    (split)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (expand "bijective?")
                                        (("1"
                                          (expand "injective?")
                                          (("1"
                                            (decompose-equality 1)
                                            (("1"
                                              (decompose-equality -1)
                                              (("1"
                                                (inst -1 "x!1")
                                                (("1"
                                                  (inst
                                                   -2
                                                   "x1(x!1)"
                                                   "x2(x!1)")
                                                  (("1"
                                                    (ground)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skeep)
                                      (("2"
                                        (lemma
                                         "bijective_inverse_exists[below(3), Sign3]")
                                        (("2"
                                          (inst -1 "p")
                                          (("2"
                                            (expand "exists1")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (skolem -1 "q")
                                                (("2"
                                                  (inst
                                                   1
                                                   "LAMBDA(s:below(N)): q(y(s))")
                                                  (("2"
                                                    (expand "inverse?")
                                                    (("2"
                                                      (decompose-equality
                                                       1)
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "y(x!1)")
                                                        (("2"
                                                          (split -1)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "bijective?")
                                                            (("2"
                                                              (expand
                                                               "surjective?")
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (inst
                                                                   -3
                                                                   "y(x!1)")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (skeep)
                            (("3" (ground)
                              (("3"
                                (expand "p")
                                (("3" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (skoletin)
                      (("2" (expand "bijective?")
                        (("2" (expand "injective?")
                          (("2" (expand "surjective?")
                            (("2" (hide -2)
                              (("2"
                                (ground)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (ground)
                                    (("1"
                                      (expand "p")
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skeep)
                                  (("2"
                                    (inst
                                     1
                                     "IF y=-1 THEN 0 ELSIF y=0 THEN 1 ELSE 2 ENDIF")
                                    (("2"
                                      (expand "p")
                                      (("2"
                                        (ground)
                                        (("2"
                                          (lift-if 1)
                                          (("2"
                                            (ground)
                                            (("2"
                                              (typepred (y))
                                              (("2" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (skeep) (("3" (ground) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (skeep)
            (("3" (typepred (N)) (("3" (ground) nil nil)) nil)) nil))
          nil))
        nil)
       ("2" (typepred (N)) (("2" (ground) nil nil)) nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (N formal-const-decl "posnat" measures nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (^ const-decl "real" exponentiation nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (real nonempty-type-from-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (number nonempty-type-decl nil numbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (bijective? const-decl "bool" functions nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (listn type-eq-decl nil listn "structures/")
    (Measure_Matrix type-eq-decl nil measures nil)
    (set type-eq-decl nil sets nil) (fullset const-decl "set" sets nil)
    (below type-eq-decl nil nat_types nil)
    (get const-decl "Sign3" measures nil)
    (nth_extensionality formula-decl nil more_list_props "structures/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nth def-decl "T" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (injective? const-decl "bool" functions nil)
    (O const-decl "T3" function_props nil)
    (H skolem-const-decl
     "[[below[N] -> below[3 ^ N]] -> below[3 ^ N ^ N]]" measures nil)
    (G skolem-const-decl
     "[[below(N) -> [below(N) -> Sign3]] -> [below(N) -> below(3 ^ N)]]"
     measures nil)
    (composition_bijective judgement-tcc nil function_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (G skolem-const-decl
     "[[below(N) -> [below(N) -> Sign3]] -> [below(N) -> below(3 ^ N)]]"
     measures nil)
    (h skolem-const-decl "[[below(N) -> Sign3] -> below(3 ^ N)]"
     measures nil)
    (inverse? const-decl "bool" function_inverse_def nil)
    (exists1 const-decl "bool" exists1 nil)
    (bijective_inverse_exists formula-decl nil function_inverse_def
     nil)
    (surjective? const-decl "bool" functions nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bij_inv_is_bij_alt formula-decl nil function_inverse_def nil)
    (FF skolem-const-decl
     "[[below(N) -> Sign3] -> [below(N) -> below(3)]]" measures nil)
    (F skolem-const-decl
     "[[below(N) -> below(3)] -> [below(N) -> int]]" measures nil)
    (p skolem-const-decl "[below(3) -> int]" measures nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (p skolem-const-decl "[below(3) -> int]" measures nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (funset_bijection formula-decl nil fun_below_props "sets_aux/")
    (is_finite const-decl "bool" finite_sets nil))
   nil)
  (card_prep-2 nil 3631661261
   ("" (expand "is_finite")
    (("" (inst 1 "(3^N)^N" "_")
      (("1" (lemma "funset_bijection")
        (("1"
          (case "EXISTS (g:[[below(N)->[below(N)->Sign3]]->below((3^N)^N)]): bijective?(g)")
          (("1" (skeep -1)
            (("1" (expand "bijective?" -1)
              (("1" (flatten)
                (("1"
                  (inst 1
                   "LAMBDA(M: (fullset[Measure_Matrix])): g(LAMBDA(i: below(N))(j: below(N)): get(M)(i,j))")
                  (("1" (expand "injective?")
                    (("1" (skeep)
                      (("1" (inst? -1 :where -4)
                        (("1" (assert)
                          (("1" (expand "get")
                            (("1" (hide-all-but (-1 1))
                              (("1"
                                (decompose-equality -1)
                                (("1"
                                  (use
                                   "nth_extensionality_1[listn[Sign3](N)]")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (inst -1 "n")
                                        (("1"
                                          (decompose-equality -1)
                                          (("1"
                                            (use
                                             "nth_extensionality_1[Sign3]")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (skeep)
                                                (("1" (inst?) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2"
              (case "EXISTS (h: [[below(N)-> Sign3]->below(3^N)]): bijective?(h)")
              (("1" (skeep -1)
                (("1"
                  (case "LET G = LAMBDA (gg:[below(N) -> [below(N) -> Sign3]]): LAMBDA (n:below(N)): h(gg(n)) IN bijective?(G) ")
                  (("1" (inst -3 "3^N" "N")
                    (("1" (skolem -3 "H")
                      (("1" (skoletin)
                        (("1" (inst 1 "H o G")
                          (("1"
                            (lemma
                             "composition_bijective[[below(N)->[below(N)->Sign3]],[below(N)->below(3^N)], below((3^N)^N)]")
                            (("1" (inst -1 "G" "H") nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (skoletin)
                      (("2" (expand "bijective?" 1)
                        (("2" (split 1)
                          (("1" (expand "injective?")
                            (("1" (skeep)
                              (("1"
                                (expand "G" -1)
                                (("1"
                                  (expand "bijective?")
                                  (("1"
                                    (expand "injective?")
                                    (("1"
                                      (decompose-equality 1)
                                      (("1"
                                        (typepred (x!1))
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (decompose-equality -2)
                                            (("1"
                                              (inst -1 "x!1")
                                              (("1"
                                                (inst
                                                 -4
                                                 "x1(x!1)"
                                                 "x2(x!1)")
                                                (("1"
                                                  (ground)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "surjective?")
                            (("2" (skeep)
                              (("2"
                                (lemma
                                 "bijective_inverse_exists[[below(N)->Sign3], below(3^N)]")
                                (("2"
                                  (inst -1 "h")
                                  (("2"
                                    (expand "exists1")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (skolem -1 "hh")
                                        (("2"
                                          (inst
                                           1
                                           "LAMBDA (n:below(N)): hh(y(n))")
                                          (("2"
                                            (decompose-equality 1)
                                            (("2"
                                              (expand "G")
                                              (("2"
                                                (expand "inverse?")
                                                (("2"
                                                  (inst -1 "y(x!1)")
                                                  (("2"
                                                    (ground)
                                                    (("2"
                                                      (expand
                                                       "bijective?")
                                                      (("2"
                                                        (expand
                                                         "surjective?")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (inst
                                                             -4
                                                             "y(x!1)")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2"
                  (case "LET (p: [below(3)-> Sign3]) = LAMBDA (s:below(3)): s-1 IN bijective?(p)")
                  (("1" (skoletin)
                    (("1" (inst -3 "3" "N")
                      (("1" (skeep)
                        (("1"
                          (case "LET (F:[[below(N)->below(3)]->[below(N)->Sign3]]) = LAMBDA (T:[below(N)->below(3)]): LAMBDA (s:below(N)): p(T(s))  IN bijective?(F)")
                          (("1"
                            (lemma
                             "bijective_inverse_exists[[below(N)->below(3)],[below(N)-> Sign3]]")
                            (("1" (skoletin)
                              (("1"
                                (inst -3 "F")
                                (("1"
                                  (lemma
                                   "bij_inv_is_bij_alt[[below(N)->below(3)],[below(N)-> Sign3]]")
                                  (("1"
                                    (expand "exists1")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (skolem -4 "FF")
                                        (("1"
                                          (inst -1 "F" "FF")
                                          (("1"
                                            (inst
                                             1
                                             "LAMBDA (row:[below(N)->Sign3]): f(FF(row))")
                                            (("1"
                                              (case
                                               "LET H = o(f,FF) in bijective?(H)")
                                              (("1"
                                                (expand "o")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (ground)
                                                (("2"
                                                  (lemma
                                                   "composition_bijective[[below(N)->Sign3],[below(N)->below(3)], below(3^N)]")
                                                  (("2"
                                                    (inst -1 "FF" "f")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (expand "bijective?" 1)
                              (("2"
                                (expand "injective?")
                                (("2"
                                  (expand "surjective?")
                                  (("2"
                                    (split)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (expand "bijective?")
                                        (("1"
                                          (expand "injective?")
                                          (("1"
                                            (decompose-equality 1)
                                            (("1"
                                              (decompose-equality -1)
                                              (("1"
                                                (inst -1 "x!1")
                                                (("1"
                                                  (inst
                                                   -2
                                                   "x1(x!1)"
                                                   "x2(x!1)")
                                                  (("1"
                                                    (ground)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skeep)
                                      (("2"
                                        (lemma
                                         "bijective_inverse_exists[below(3), Sign3]")
                                        (("2"
                                          (inst -1 "p")
                                          (("2"
                                            (expand "exists1")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (skolem -1 "q")
                                                (("2"
                                                  (inst
                                                   1
                                                   "LAMBDA(s:below(N)): q(y(s))")
                                                  (("2"
                                                    (expand "inverse?")
                                                    (("2"
                                                      (decompose-equality
                                                       1)
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "y(x!1)")
                                                        (("2"
                                                          (split -1)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "bijective?")
                                                            (("2"
                                                              (expand
                                                               "surjective?")
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (inst
                                                                   -3
                                                                   "y(x!1)")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (skeep)
                            (("3" (ground)
                              (("3"
                                (expand "p")
                                (("3" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (skoletin)
                      (("2" (expand "bijective?")
                        (("2" (expand "injective?")
                          (("2" (expand "surjective?")
                            (("2" (hide -2)
                              (("2"
                                (ground)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (ground)
                                    (("1"
                                      (expand "p")
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skeep)
                                  (("2"
                                    (inst
                                     1
                                     "IF y=-1 THEN 0 ELSIF y=0 THEN 1 ELSE 2 ENDIF")
                                    (("2"
                                      (expand "p")
                                      (("2"
                                        (ground)
                                        (("2"
                                          (lift-if 1)
                                          (("2"
                                            (ground)
                                            (("2"
                                              (typepred (y))
                                              (("2" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (skeep) (("3" (ground) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (skeep)
            (("3" (typepred (N)) (("3" (ground) nil nil)) nil)) nil))
          nil))
        nil)
       ("2" (typepred (N)) (("2" (ground) nil nil)) nil))
      nil))
    nil)
   ((Sign3 type-eq-decl nil sign3 "reals/")
    (listn type-eq-decl nil listn "structures/")
    (funset_bijection formula-decl nil fun_below_props "sets_aux/"))
   nil)
  (card_prep-1 nil 3631015162
   ("" (expand "is_finite")
    (("" (inst 1 "(3^N)^N" "_")
      (("1" (lemma "funset_bijection")
        (("1"
          (case "EXISTS (g:[[below(N)->[below(N)->measures]]->below((3^N)^N)]): bijective?(g)")
          (("1" (skeep -1)
            (("1" (expand "bijective?" -1)
              (("1" (flatten)
                (("1" (inst 1 "g")
                  (("1" (expand "restrict")
                    (("1" (ground) (("1" (grind) nil nil)) nil)) nil)
                   ("2" (typepred (N)) (("2" (ground) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2"
              (case "EXISTS (h: [[below(N)-> measures]->below(3^N)]): bijective?(h)")
              (("1" (skeep -1)
                (("1"
                  (case "LET G = LAMBDA (gg:[below(N) -> [below(N) -> measures]]): LAMBDA (n:below(N)): h(gg(n)) IN bijective?(G) ")
                  (("1" (inst -3 "3^N" "N")
                    (("1" (skolem -3 "H")
                      (("1" (skoletin)
                        (("1" (inst 1 "H o G")
                          (("1"
                            (lemma
                             "composition_bijective[[below(N)->[below(N)->measures]],[below(N)->below(3^N)], below((3^N)^N)]")
                            (("1" (inst -1 "G" "H") nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (skoletin)
                      (("2" (expand "bijective?" 1)
                        (("2" (split 1)
                          (("1" (expand "injective?")
                            (("1" (skeep)
                              (("1"
                                (expand "G" -1)
                                (("1"
                                  (expand "bijective?")
                                  (("1"
                                    (expand "injective?")
                                    (("1"
                                      (decompose-equality 1)
                                      (("1"
                                        (typepred (x!1))
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (decompose-equality -2)
                                            (("1"
                                              (inst -1 "x!1")
                                              (("1"
                                                (inst
                                                 -4
                                                 "x1(x!1)"
                                                 "x2(x!1)")
                                                (("1"
                                                  (ground)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "surjective?")
                            (("2" (skeep)
                              (("2"
                                (lemma
                                 "bijective_inverse_exists[[below(N)->measures], below(3^N)]")
                                (("2"
                                  (inst -1 "h")
                                  (("2"
                                    (expand "exists1")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (skolem -1 "hh")
                                        (("2"
                                          (inst
                                           1
                                           "LAMBDA (n:below(N)): hh(y(n))")
                                          (("2"
                                            (decompose-equality 1)
                                            (("2"
                                              (expand "G")
                                              (("2"
                                                (expand "inverse?")
                                                (("2"
                                                  (inst -1 "y(x!1)")
                                                  (("2"
                                                    (ground)
                                                    (("2"
                                                      (expand
                                                       "bijective?")
                                                      (("2"
                                                        (expand
                                                         "surjective?")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (inst
                                                             -4
                                                             "y(x!1)")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2"
                  (case "LET (p: [below(3)-> measures]) = LAMBDA (s:below(3)): s-1 IN bijective?(p)")
                  (("1" (skoletin)
                    (("1" (inst -3 "3" "N")
                      (("1" (skeep)
                        (("1"
                          (case "LET (F:[[below(N)->below(3)]->[below(N)->measures]]) = LAMBDA (T:[below(N)->below(3)]): LAMBDA (s:below(N)): p(T(s))  IN bijective?(F)")
                          (("1"
                            (lemma
                             "bijective_inverse_exists[[below(N)->below(3)],[below(N)-> measures]]")
                            (("1" (skoletin)
                              (("1"
                                (inst -3 "F")
                                (("1"
                                  (lemma
                                   "bij_inv_is_bij_alt[[below(N)->below(3)],[below(N)-> measures]]")
                                  (("1"
                                    (expand "exists1")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (skolem -4 "FF")
                                        (("1"
                                          (inst -1 "F" "FF")
                                          (("1"
                                            (inst
                                             1
                                             "LAMBDA (row:[below(N)->measures]): f(FF(row))")
                                            (("1"
                                              (case
                                               "LET H = o(f,FF) in bijective?(H)")
                                              (("1"
                                                (expand "o")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (ground)
                                                (("2"
                                                  (lemma
                                                   "composition_bijective[[below(N)->measures],[below(N)->below(3)], below(3^N)]")
                                                  (("2"
                                                    (inst -1 "FF" "f")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (expand "bijective?" 1)
                              (("2"
                                (expand "injective?")
                                (("2"
                                  (expand "surjective?")
                                  (("2"
                                    (split)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (expand "bijective?")
                                        (("1"
                                          (expand "injective?")
                                          (("1"
                                            (decompose-equality 1)
                                            (("1"
                                              (decompose-equality -1)
                                              (("1"
                                                (inst -1 "x!1")
                                                (("1"
                                                  (inst
                                                   -2
                                                   "x1(x!1)"
                                                   "x2(x!1)")
                                                  (("1"
                                                    (ground)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skeep)
                                      (("2"
                                        (lemma
                                         "bijective_inverse_exists[below(3), measures]")
                                        (("2"
                                          (inst -1 "p")
                                          (("2"
                                            (expand "exists1")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (skolem -1 "q")
                                                (("2"
                                                  (inst
                                                   1
                                                   "LAMBDA(s:below(N)): q(y(s))")
                                                  (("2"
                                                    (expand "inverse?")
                                                    (("2"
                                                      (decompose-equality
                                                       1)
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "y(x!1)")
                                                        (("2"
                                                          (split -1)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "bijective?")
                                                            (("2"
                                                              (expand
                                                               "surjective?")
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (inst
                                                                   -3
                                                                   "y(x!1)")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (skeep)
                            (("3" (ground)
                              (("3"
                                (expand "p")
                                (("3" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (skoletin)
                      (("2" (expand "bijective?")
                        (("2" (expand "injective?")
                          (("2" (expand "surjective?")
                            (("2" (hide -2)
                              (("2"
                                (ground)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (ground)
                                    (("1"
                                      (expand "p")
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skeep)
                                  (("2"
                                    (inst
                                     1
                                     "IF y=-1 THEN 0 ELSIF y=0 THEN 1 ELSE 2 ENDIF")
                                    (("2"
                                      (expand "p")
                                      (("2"
                                        (ground)
                                        (("2"
                                          (lift-if 1)
                                          (("2"
                                            (ground)
                                            (("2"
                                              (typepred (y))
                                              (("2" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (skeep) (("3" (ground) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (skeep)
            (("3" (typepred (N)) (("3" (ground) nil nil)) nil)) nil))
          nil))
        nil)
       ("2" (typepred (N)) (("2" (ground) nil nil)) nil))
      nil))
    nil)
   ((funset_bijection formula-decl nil fun_below_props "sets_aux/"))
   shostak))
 (card_measure_matrices_TCC1 0
  (card_measure_matrices_TCC1-1 nil 3631015109
   ("" (lemma "card_prep") (("" (propax) nil nil)) nil)
   ((card_prep formula-decl nil measures nil)) nil
   (card_measure_matrices subtype "sets[Measure_Matrix].fullset"
    "finite_set[Measure_Matrix]")))
 (card_measure_matrices_TCC2 0
  (card_measure_matrices_TCC2-1 nil 3631015109
   ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil))
   nil
   (card_measure_matrices subtype "2"
    "{i: integers.int | booleans.OR(measures.N /= 0, reals.>=(i, 0))}")))
 (card_measure_matrices 0
  (card_measure_matrices-3 nil 3653731302
   ("" (rewrite "expt_x2")
    (("" (rewrite "expt_times")
      ((""
        (case "EXISTS (g:[[below(N)->[below(N)->Sign3]]->below((3^N)^N)]): bijective?(g)")
        (("1" (skeep)
          (("1" (lemma "card_bij[Measure_Matrix]")
            (("1" (inst -1 "(3^N)^N" "fullset[Measure_Matrix]")
              (("1" (flatten)
                (("1" (hide -1)
                  (("1"
                    (case "EXISTS (G: [(fullset[Measure_Matrix])->[below(N)->[below(N)->Sign3]]]): bijective?(G)")
                    (("1" (skeep -1)
                      (("1" (split -2)
                        (("1" (propax) nil nil)
                         ("2"
                          (lemma
                           "composition_bijective[(fullset[Measure_Matrix]),[below(N)->[below(N)->Sign3]], below((3^N)^N)]")
                          (("2" (inst -1 "G" "g")
                            (("2" (inst 1 "g o G") nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1)
                      (("2"
                        (inst 1
                         "LAMBDA(M: (fullset[Measure_Matrix])): LAMBDA(i:below(N))(j: below(N)): get(M)(i,j)")
                        (("2" (expand "bijective?")
                          (("2" (split 1)
                            (("1" (expand "injective?")
                              (("1"
                                (skolem 1 ("M1" "M2"))
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "get")
                                    (("1"
                                      (decompose-equality -1)
                                      (("1"
                                        (use
                                         "nth_extensionality[listn[Sign3](N)]")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (inst -1 "n")
                                              (("1"
                                                (decompose-equality -1)
                                                (("1"
                                                  (use
                                                   "nth_extensionality[Sign3]")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (inst?)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "surjective?")
                              (("2"
                                (skolem 1 "f_")
                                (("2"
                                  (inst
                                   1
                                   "array2list[listn[Sign3](N)](N)(LAMBDA (k:nat): IF k < N THEN
                                       array2list[Sign3](N)(LAMBDA (p:nat): IF p<N THEN f_(k)(p) ELSE Undefined ENDIF)
                         	      ELSE (:Undefined:)^N ENDIF)")
                                  (("1"
                                    (with-tccs (decompose-equality))
                                    (("1"
                                      (with-tccs (decompose-equality))
                                      (("1"
                                        (expand "get")
                                        (("1"
                                          (with-tccs
                                           (typepred
                                            "array2list[listn[Sign3](N)]
                                                            (N)
                                                            (LAMBDA (k: nat):
                                                               IF k < N
                                                                 THEN array2list[Sign3]
                                                                          (N)(LAMBDA (p: nat): IF p < N THEN f_(k)(p) ELSE -1 ENDIF)
                                                               ELSE (: -1 :) ^ N
                                                               ENDIF)"))
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (replace
                                               -3
                                               :dir
                                               rl
                                               :hide?
                                               t)
                                              (("1"
                                                (typepred
                                                 "array2list[Sign3](N)(LAMBDA (p: nat): IF p < N THEN f_(x!1)(p) ELSE -1 ENDIF)")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "fullset")
                                    (("2" (propax) nil nil))
                                    nil)
                                   ("3"
                                    (inst 1 "(: Undefined :)^N")
                                    (("3"
                                      (use "length_appendn[Sign3]")
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("4"
                                    (skeep)
                                    (("4"
                                      (use "length_appendn[Sign3]")
                                      (("4" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (lemma "funset_bijection")
            (("2"
              (case "EXISTS (h: [[below(N)-> Sign3]->below(3^N)]): bijective?(h)")
              (("1" (skeep -1)
                (("1"
                  (case "LET G = LAMBDA (gg:[below(N) -> [below(N) -> Sign3]]): LAMBDA (n:below(N)): h(gg(n)) IN bijective?(G) ")
                  (("1" (inst -3 "3^N" "N")
                    (("1" (skolem -3 "H")
                      (("1" (skoletin)
                        (("1" (inst 1 "H o G")
                          (("1"
                            (lemma
                             "composition_bijective[[below(N)->[below(N)->Sign3]],[below(N)->below(3^N)], below((3^N)^N)]")
                            (("1" (inst -1 "G" "H") nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (skoletin)
                      (("2" (expand "bijective?" 1)
                        (("2" (split 1)
                          (("1" (expand "injective?")
                            (("1" (skeep)
                              (("1"
                                (expand "G" -1)
                                (("1"
                                  (expand "bijective?")
                                  (("1"
                                    (expand "injective?")
                                    (("1"
                                      (decompose-equality 1)
                                      (("1"
                                        (typepred (x!1))
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (decompose-equality -2)
                                            (("1"
                                              (inst -1 "x!1")
                                              (("1"
                                                (inst
                                                 -4
                                                 "x1(x!1)"
                                                 "x2(x!1)")
                                                (("1"
                                                  (ground)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "surjective?")
                            (("2" (skeep)
                              (("2"
                                (lemma
                                 "bijective_inverse_exists[[below(N)->Sign3], below(3^N)]")
                                (("2"
                                  (inst -1 "h")
                                  (("2"
                                    (expand "exists1")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (skolem -1 "hh")
                                        (("2"
                                          (inst
                                           1
                                           "LAMBDA (n:below(N)): hh(y(n))")
                                          (("2"
                                            (decompose-equality 1)
                                            (("2"
                                              (expand "G")
                                              (("2"
                                                (expand "inverse?")
                                                (("2"
                                                  (inst -1 "y(x!1)")
                                                  (("2"
                                                    (ground)
                                                    (("2"
                                                      (expand
                                                       "bijective?")
                                                      (("2"
                                                        (expand
                                                         "surjective?")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (inst
                                                             -4
                                                             "y(x!1)")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2"
                  (case "LET (p: [below(3)-> Sign3]) = LAMBDA (s:below(3)): s-1 IN bijective?(p)")
                  (("1" (skoletin)
                    (("1" (inst -3 "3" "N")
                      (("1" (skeep)
                        (("1"
                          (case "LET (F:[[below(N)->below(3)]->[below(N)->Sign3]]) = LAMBDA (T:[below(N)->below(3)]): LAMBDA (s:below(N)): p(T(s))  IN bijective?(F)")
                          (("1"
                            (lemma
                             "bijective_inverse_exists[[below(N)->below(3)],[below(N)-> Sign3]]")
                            (("1" (skoletin)
                              (("1"
                                (inst -3 "F")
                                (("1"
                                  (lemma
                                   "bij_inv_is_bij_alt[[below(N)->below(3)],[below(N)-> Sign3]]")
                                  (("1"
                                    (expand "exists1")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (skolem -4 "FF")
                                        (("1"
                                          (inst -1 "F" "FF")
                                          (("1"
                                            (inst
                                             1
                                             "LAMBDA (row:[below(N)->Sign3]): f(FF(row))")
                                            (("1"
                                              (case
                                               "LET H = o(f,FF) in bijective?(H)")
                                              (("1"
                                                (expand "o")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (ground)
                                                (("2"
                                                  (lemma
                                                   "composition_bijective[[below(N)->Sign3],[below(N)->below(3)], below(3^N)]")
                                                  (("2"
                                                    (inst -1 "FF" "f")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (expand "bijective?" 1)
                              (("2"
                                (expand "injective?")
                                (("2"
                                  (expand "surjective?")
                                  (("2"
                                    (split)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (expand "bijective?")
                                        (("1"
                                          (expand "injective?")
                                          (("1"
                                            (decompose-equality 1)
                                            (("1"
                                              (decompose-equality -1)
                                              (("1"
                                                (inst -1 "x!1")
                                                (("1"
                                                  (inst
                                                   -2
                                                   "x1(x!1)"
                                                   "x2(x!1)")
                                                  (("1"
                                                    (ground)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skeep)
                                      (("2"
                                        (lemma
                                         "bijective_inverse_exists[below(3), Sign3]")
                                        (("2"
                                          (inst -1 "p")
                                          (("2"
                                            (expand "exists1")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (skolem -1 "q")
                                                (("2"
                                                  (inst
                                                   1
                                                   "LAMBDA(s:below(N)): q(y(s))")
                                                  (("2"
                                                    (expand "inverse?")
                                                    (("2"
                                                      (decompose-equality
                                                       1)
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "y(x!1)")
                                                        (("2"
                                                          (split -1)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "bijective?")
                                                            (("2"
                                                              (expand
                                                               "surjective?")
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (inst
                                                                   -3
                                                                   "y(x!1)")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (skeep)
                            (("3" (ground)
                              (("3"
                                (expand "p")
                                (("3" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (skoletin)
                      (("2" (expand "bijective?")
                        (("2" (expand "injective?")
                          (("2" (expand "surjective?")
                            (("2" (hide -2)
                              (("2"
                                (ground)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (ground)
                                    (("1"
                                      (expand "p")
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skeep)
                                  (("2"
                                    (inst
                                     1
                                     "IF y=-1 THEN 0 ELSIF y=0 THEN 1 ELSE 2 ENDIF")
                                    (("2"
                                      (expand "p")
                                      (("2"
                                        (ground)
                                        (("2"
                                          (lift-if 1)
                                          (("2"
                                            (ground)
                                            (("2"
                                              (typepred (y))
                                              (("2" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (skeep) (("3" (ground) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((expt_times formula-decl nil exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (H skolem-const-decl
     "[[below[N] -> below[3 ^ N]] -> below[3 ^ N ^ N]]" measures nil)
    (G skolem-const-decl
     "[[below(N) -> [below(N) -> Sign3]] -> [below(N) -> below(3 ^ N)]]"
     measures nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (G skolem-const-decl
     "[[below(N) -> [below(N) -> Sign3]] -> [below(N) -> below(3 ^ N)]]"
     measures nil)
    (h skolem-const-decl "[[below(N) -> Sign3] -> below(3 ^ N)]"
     measures nil)
    (inverse? const-decl "bool" function_inverse_def nil)
    (exists1 const-decl "bool" exists1 nil)
    (bijective_inverse_exists formula-decl nil function_inverse_def
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bij_inv_is_bij_alt formula-decl nil function_inverse_def nil)
    (FF skolem-const-decl
     "[[below(N) -> Sign3] -> [below(N) -> below(3)]]" measures nil)
    (F skolem-const-decl
     "[[below(N) -> below(3)] -> [below(N) -> int]]" measures nil)
    (p skolem-const-decl "[below(3) -> int]" measures nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (p skolem-const-decl "[below(3) -> int]" measures nil)
    (funset_bijection formula-decl nil fun_below_props "sets_aux/")
    (fullset const-decl "set" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (surjective? const-decl "bool" functions nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (^ def-decl "list[T]" more_list_props "structures/")
    (TRUE const-decl "bool" booleans nil)
    (f_ skolem-const-decl "[below(N) -> [below(N) -> Sign3]]" measures
     nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (array2list const-decl
     "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}"
     array2list "structures/")
    (id const-decl "(bijective?[T, T])" identity nil)
    (length_appendn formula-decl nil more_list_props "structures/")
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length_singleton formula-decl nil more_list_props "structures/")
    (injective? const-decl "bool" functions nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nth def-decl "T" list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth_extensionality formula-decl nil more_list_props "structures/")
    (get const-decl "Sign3" measures nil)
    (composition_bijective judgement-tcc nil function_props nil)
    (O const-decl "T3" function_props nil)
    (below type-eq-decl nil nat_types nil)
    (g skolem-const-decl
     "[[below(N) -> [below(N) -> Sign3]] -> below((3 ^ N) ^ N)]"
     measures nil)
    (G skolem-const-decl
     "[(fullset[Measure_Matrix]) -> [below(N) -> [below(N) -> Sign3]]]"
     measures nil)
    (Measure_Matrix type-eq-decl nil measures nil)
    (listn type-eq-decl nil listn "structures/")
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (card_bij formula-decl nil finite_sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (^ const-decl "real" exponentiation nil)
    (bijective? const-decl "bool" functions nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (N formal-const-decl "posnat" measures nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (expt_x2 formula-decl nil exponentiation nil))
   nil)
  (card_measure_matrices-2 nil 3631661308
   ("" (rewrite "expt_x2")
    (("" (rewrite "expt_times")
      ((""
        (case "EXISTS (g:[[below(N)->[below(N)->Sign3]]->below((3^N)^N)]): bijective?(g)")
        (("1" (skeep)
          (("1" (lemma "card_bij[Measure_Matrix]")
            (("1" (inst -1 "(3^N)^N" "fullset[Measure_Matrix]")
              (("1" (flatten)
                (("1" (hide -1)
                  (("1"
                    (case "EXISTS (G: [(fullset[Measure_Matrix])->[below(N)->[below(N)->Sign3]]]): bijective?(G)")
                    (("1" (skeep -1)
                      (("1" (split -2)
                        (("1" (propax) nil nil)
                         ("2"
                          (lemma
                           "composition_bijective[(fullset[Measure_Matrix]),[below(N)->[below(N)->Sign3]], below((3^N)^N)]")
                          (("2" (inst -1 "G" "g")
                            (("2" (inst 1 "g o G") nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1)
                      (("2"
                        (inst 1
                         "LAMBDA(M: (fullset[Measure_Matrix])): LAMBDA(i:below(N))(j: below(N)): get(M)(i,j)")
                        (("2" (expand "bijective?")
                          (("2" (split 1)
                            (("1" (expand "injective?")
                              (("1"
                                (skolem 1 ("M1" "M2"))
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "get")
                                    (("1"
                                      (decompose-equality -1)
                                      (("1"
                                        (use
                                         "nth_extensionality_1[listn[Sign3](N)]")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (inst -1 "n")
                                              (("1"
                                                (decompose-equality -1)
                                                (("1"
                                                  (use
                                                   "nth_extensionality_1[Sign3]")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (inst?)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "surjective?")
                              (("2"
                                (skolem 1 "f_")
                                (("2"
                                  (inst
                                   1
                                   "array2list[listn[Sign3](N)](N)(LAMBDA (k:nat): IF k < N THEN
              array2list[Sign3](N)(LAMBDA (p:nat): IF p<N THEN f_(k)(p) ELSE Undefined ENDIF)
	      ELSE (:Undefined:)^N ENDIF)")
                                  (("1"
                                    (decompose-equality)
                                    (("1"
                                      (decompose-equality)
                                      (("1"
                                        (expand "get")
                                        (("1"
                                          (typepred
                                           "array2list[listn[Sign3](N)]
                  (N)
                  (LAMBDA (k: nat):
                     IF k < N
                       THEN array2list[Sign3]
                                (N)(LAMBDA (p: nat): IF p < N THEN f_(k)(p) ELSE -1 ENDIF)
                     ELSE (: -1 :) ^ N
                     ENDIF)")
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (replace
                                               -3
                                               :dir
                                               rl
                                               :hide?
                                               t)
                                              (("1"
                                                (typepred
                                                 "array2list[Sign3](N)(LAMBDA (p: nat): IF p < N THEN f_(x!1)(p) ELSE -1 ENDIF)")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2"
                                              (use
                                               "length_appendn[Sign3]")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (expand "every")
                                                (("2"
                                                  (expand "every")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (hide 2)
                                            (("3"
                                              (skeep)
                                              (("3"
                                                (hide-all-but 2)
                                                (("3"
                                                  (use
                                                   "length_appendn[Sign3]")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "every")
                                                      (("1"
                                                        (expand
                                                         "every")
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand "every")
                                                    (("2"
                                                      (expand "every")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skeep)
                                        (("2"
                                          (use "length_appendn[Sign3]")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skeep)
                                      (("2"
                                        (use "length_appendn[Sign3]")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "fullset")
                                    (("2" (propax) nil nil))
                                    nil)
                                   ("3"
                                    (use "length_appendn[Sign3]")
                                    (("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (lemma "funset_bijection")
            (("2"
              (case "EXISTS (h: [[below(N)-> Sign3]->below(3^N)]): bijective?(h)")
              (("1" (skeep -1)
                (("1"
                  (case "LET G = LAMBDA (gg:[below(N) -> [below(N) -> Sign3]]): LAMBDA (n:below(N)): h(gg(n)) IN bijective?(G) ")
                  (("1" (inst -3 "3^N" "N")
                    (("1" (skolem -3 "H")
                      (("1" (skoletin)
                        (("1" (inst 1 "H o G")
                          (("1"
                            (lemma
                             "composition_bijective[[below(N)->[below(N)->Sign3]],[below(N)->below(3^N)], below((3^N)^N)]")
                            (("1" (inst -1 "G" "H") nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (skoletin)
                      (("2" (expand "bijective?" 1)
                        (("2" (split 1)
                          (("1" (expand "injective?")
                            (("1" (skeep)
                              (("1"
                                (expand "G" -1)
                                (("1"
                                  (expand "bijective?")
                                  (("1"
                                    (expand "injective?")
                                    (("1"
                                      (decompose-equality 1)
                                      (("1"
                                        (typepred (x!1))
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (decompose-equality -2)
                                            (("1"
                                              (inst -1 "x!1")
                                              (("1"
                                                (inst
                                                 -4
                                                 "x1(x!1)"
                                                 "x2(x!1)")
                                                (("1"
                                                  (ground)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "surjective?")
                            (("2" (skeep)
                              (("2"
                                (lemma
                                 "bijective_inverse_exists[[below(N)->Sign3], below(3^N)]")
                                (("2"
                                  (inst -1 "h")
                                  (("2"
                                    (expand "exists1")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (skolem -1 "hh")
                                        (("2"
                                          (inst
                                           1
                                           "LAMBDA (n:below(N)): hh(y(n))")
                                          (("2"
                                            (decompose-equality 1)
                                            (("2"
                                              (expand "G")
                                              (("2"
                                                (expand "inverse?")
                                                (("2"
                                                  (inst -1 "y(x!1)")
                                                  (("2"
                                                    (ground)
                                                    (("2"
                                                      (expand
                                                       "bijective?")
                                                      (("2"
                                                        (expand
                                                         "surjective?")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (inst
                                                             -4
                                                             "y(x!1)")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2"
                  (case "LET (p: [below(3)-> Sign3]) = LAMBDA (s:below(3)): s-1 IN bijective?(p)")
                  (("1" (skoletin)
                    (("1" (inst -3 "3" "N")
                      (("1" (skeep)
                        (("1"
                          (case "LET (F:[[below(N)->below(3)]->[below(N)->Sign3]]) = LAMBDA (T:[below(N)->below(3)]): LAMBDA (s:below(N)): p(T(s))  IN bijective?(F)")
                          (("1"
                            (lemma
                             "bijective_inverse_exists[[below(N)->below(3)],[below(N)-> Sign3]]")
                            (("1" (skoletin)
                              (("1"
                                (inst -3 "F")
                                (("1"
                                  (lemma
                                   "bij_inv_is_bij_alt[[below(N)->below(3)],[below(N)-> Sign3]]")
                                  (("1"
                                    (expand "exists1")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (skolem -4 "FF")
                                        (("1"
                                          (inst -1 "F" "FF")
                                          (("1"
                                            (inst
                                             1
                                             "LAMBDA (row:[below(N)->Sign3]): f(FF(row))")
                                            (("1"
                                              (case
                                               "LET H = o(f,FF) in bijective?(H)")
                                              (("1"
                                                (expand "o")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (ground)
                                                (("2"
                                                  (lemma
                                                   "composition_bijective[[below(N)->Sign3],[below(N)->below(3)], below(3^N)]")
                                                  (("2"
                                                    (inst -1 "FF" "f")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (expand "bijective?" 1)
                              (("2"
                                (expand "injective?")
                                (("2"
                                  (expand "surjective?")
                                  (("2"
                                    (split)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (expand "bijective?")
                                        (("1"
                                          (expand "injective?")
                                          (("1"
                                            (decompose-equality 1)
                                            (("1"
                                              (decompose-equality -1)
                                              (("1"
                                                (inst -1 "x!1")
                                                (("1"
                                                  (inst
                                                   -2
                                                   "x1(x!1)"
                                                   "x2(x!1)")
                                                  (("1"
                                                    (ground)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skeep)
                                      (("2"
                                        (lemma
                                         "bijective_inverse_exists[below(3), Sign3]")
                                        (("2"
                                          (inst -1 "p")
                                          (("2"
                                            (expand "exists1")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (skolem -1 "q")
                                                (("2"
                                                  (inst
                                                   1
                                                   "LAMBDA(s:below(N)): q(y(s))")
                                                  (("2"
                                                    (expand "inverse?")
                                                    (("2"
                                                      (decompose-equality
                                                       1)
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "y(x!1)")
                                                        (("2"
                                                          (split -1)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "bijective?")
                                                            (("2"
                                                              (expand
                                                               "surjective?")
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (inst
                                                                   -3
                                                                   "y(x!1)")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (skeep)
                            (("3" (ground)
                              (("3"
                                (expand "p")
                                (("3" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (skoletin)
                      (("2" (expand "bijective?")
                        (("2" (expand "injective?")
                          (("2" (expand "surjective?")
                            (("2" (hide -2)
                              (("2"
                                (ground)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (ground)
                                    (("1"
                                      (expand "p")
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skeep)
                                  (("2"
                                    (inst
                                     1
                                     "IF y=-1 THEN 0 ELSIF y=0 THEN 1 ELSE 2 ENDIF")
                                    (("2"
                                      (expand "p")
                                      (("2"
                                        (ground)
                                        (("2"
                                          (lift-if 1)
                                          (("2"
                                            (ground)
                                            (("2"
                                              (typepred (y))
                                              (("2" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (skeep) (("3" (ground) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((funset_bijection formula-decl nil fun_below_props "sets_aux/")
    (array2list const-decl
     "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}"
     array2list "structures/")
    (length_appendn formula-decl nil more_list_props "structures/")
    (length_singleton formula-decl nil more_list_props "structures/")
    (listn type-eq-decl nil listn "structures/")
    (Sign3 type-eq-decl nil sign3 "reals/"))
   nil)
  (card_measure_matrices-1 nil 3631033652
   ("" (rewrite "expt_x2")
    (("" (rewrite "expt_times")
      ((""
        (case "EXISTS (g:[[below(N)->[below(N)->measures]]->below((3^N)^N)]): bijective?(g)")
        (("1" (skeep)
          (("1" (lemma "card_bij[Measure_Matrix]")
            (("1" (inst -1 "(3^N)^N" "fullset[Measure_Matrix]")
              (("1" (flatten)
                (("1" (hide -1)
                  (("1"
                    (case "EXISTS (G: [(fullset[Measure_Matrix])->[below(N)->[below(N)->measures]]]): bijective?(G)")
                    (("1" (skeep -1)
                      (("1" (split -2)
                        (("1" (propax) nil nil)
                         ("2"
                          (lemma
                           "composition_bijective[(fullset[Measure_Matrix]),[below(N)->[below(N)->measures]], below((3^N)^N)]")
                          (("2" (inst -1 "G" "g")
                            (("2" (inst 1 "g o G") nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2"
                      (inst 1
                       "LAMBDA (s:(fullset[Measure_Matrix])): s")
                      (("2" (hide-all-but 1)
                        (("2" (expand "bijective?")
                          (("2" (expand "injective?")
                            (("2" (expand "surjective?")
                              (("2"
                                (ground)
                                (("1" (skeep) nil nil)
                                 ("2"
                                  (skeep)
                                  (("2"
                                    (inst 1 "y")
                                    (("2"
                                      (expand "fullset")
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (lemma "funset_bijection")
            (("2"
              (case "EXISTS (h: [[below(N)-> measures]->below(3^N)]): bijective?(h)")
              (("1" (skeep -1)
                (("1"
                  (case "LET G = LAMBDA (gg:[below(N) -> [below(N) -> measures]]): LAMBDA (n:below(N)): h(gg(n)) IN bijective?(G) ")
                  (("1" (inst -3 "3^N" "N")
                    (("1" (skolem -3 "H")
                      (("1" (skoletin)
                        (("1" (inst 1 "H o G")
                          (("1"
                            (lemma
                             "composition_bijective[[below(N)->[below(N)->measures]],[below(N)->below(3^N)], below((3^N)^N)]")
                            (("1" (inst -1 "G" "H") nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (skoletin)
                      (("2" (expand "bijective?" 1)
                        (("2" (split 1)
                          (("1" (expand "injective?")
                            (("1" (skeep)
                              (("1"
                                (expand "G" -1)
                                (("1"
                                  (expand "bijective?")
                                  (("1"
                                    (expand "injective?")
                                    (("1"
                                      (decompose-equality 1)
                                      (("1"
                                        (typepred (x!1))
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (decompose-equality -2)
                                            (("1"
                                              (inst -1 "x!1")
                                              (("1"
                                                (inst
                                                 -4
                                                 "x1(x!1)"
                                                 "x2(x!1)")
                                                (("1"
                                                  (ground)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "surjective?")
                            (("2" (skeep)
                              (("2"
                                (lemma
                                 "bijective_inverse_exists[[below(N)->measures], below(3^N)]")
                                (("2"
                                  (inst -1 "h")
                                  (("2"
                                    (expand "exists1")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (skolem -1 "hh")
                                        (("2"
                                          (inst
                                           1
                                           "LAMBDA (n:below(N)): hh(y(n))")
                                          (("2"
                                            (decompose-equality 1)
                                            (("2"
                                              (expand "G")
                                              (("2"
                                                (expand "inverse?")
                                                (("2"
                                                  (inst -1 "y(x!1)")
                                                  (("2"
                                                    (ground)
                                                    (("2"
                                                      (expand
                                                       "bijective?")
                                                      (("2"
                                                        (expand
                                                         "surjective?")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (inst
                                                             -4
                                                             "y(x!1)")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2"
                  (case "LET (p: [below(3)-> measures]) = LAMBDA (s:below(3)): s-1 IN bijective?(p)")
                  (("1" (skoletin)
                    (("1" (inst -3 "3" "N")
                      (("1" (skeep)
                        (("1"
                          (case "LET (F:[[below(N)->below(3)]->[below(N)->measures]]) = LAMBDA (T:[below(N)->below(3)]): LAMBDA (s:below(N)): p(T(s))  IN bijective?(F)")
                          (("1"
                            (lemma
                             "bijective_inverse_exists[[below(N)->below(3)],[below(N)-> measures]]")
                            (("1" (skoletin)
                              (("1"
                                (inst -3 "F")
                                (("1"
                                  (lemma
                                   "bij_inv_is_bij_alt[[below(N)->below(3)],[below(N)-> measures]]")
                                  (("1"
                                    (expand "exists1")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (skolem -4 "FF")
                                        (("1"
                                          (inst -1 "F" "FF")
                                          (("1"
                                            (inst
                                             1
                                             "LAMBDA (row:[below(N)->measures]): f(FF(row))")
                                            (("1"
                                              (case
                                               "LET H = o(f,FF) in bijective?(H)")
                                              (("1"
                                                (expand "o")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (ground)
                                                (("2"
                                                  (lemma
                                                   "composition_bijective[[below(N)->measures],[below(N)->below(3)], below(3^N)]")
                                                  (("2"
                                                    (inst -1 "FF" "f")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (expand "bijective?" 1)
                              (("2"
                                (expand "injective?")
                                (("2"
                                  (expand "surjective?")
                                  (("2"
                                    (split)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (expand "bijective?")
                                        (("1"
                                          (expand "injective?")
                                          (("1"
                                            (decompose-equality 1)
                                            (("1"
                                              (decompose-equality -1)
                                              (("1"
                                                (inst -1 "x!1")
                                                (("1"
                                                  (inst
                                                   -2
                                                   "x1(x!1)"
                                                   "x2(x!1)")
                                                  (("1"
                                                    (ground)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skeep)
                                      (("2"
                                        (lemma
                                         "bijective_inverse_exists[below(3), measures]")
                                        (("2"
                                          (inst -1 "p")
                                          (("2"
                                            (expand "exists1")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (skolem -1 "q")
                                                (("2"
                                                  (inst
                                                   1
                                                   "LAMBDA(s:below(N)): q(y(s))")
                                                  (("2"
                                                    (expand "inverse?")
                                                    (("2"
                                                      (decompose-equality
                                                       1)
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "y(x!1)")
                                                        (("2"
                                                          (split -1)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "bijective?")
                                                            (("2"
                                                              (expand
                                                               "surjective?")
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (inst
                                                                   -3
                                                                   "y(x!1)")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (skeep)
                            (("3" (ground)
                              (("3"
                                (expand "p")
                                (("3" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (skoletin)
                      (("2" (expand "bijective?")
                        (("2" (expand "injective?")
                          (("2" (expand "surjective?")
                            (("2" (hide -2)
                              (("2"
                                (ground)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (ground)
                                    (("1"
                                      (expand "p")
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skeep)
                                  (("2"
                                    (inst
                                     1
                                     "IF y=-1 THEN 0 ELSIF y=0 THEN 1 ELSE 2 ENDIF")
                                    (("2"
                                      (expand "p")
                                      (("2"
                                        (ground)
                                        (("2"
                                          (lift-if 1)
                                          (("2"
                                            (ground)
                                            (("2"
                                              (typepred (y))
                                              (("2" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (skeep) (("3" (ground) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((funset_bijection formula-decl nil fun_below_props "sets_aux/"))
   shostak))
 (matrices_fun_order 0
  (matrices_fun_order-1 nil 3653473324
   ("" (expand "partial_order?")
    (("" (split 1)
      (("1" (expand "preorder?")
        (("1" (split 1)
          (("1" (expand "reflexive?")
            (("1" (skeep)
              (("1" (ground)
                (("1" (expand "le") (("1" (propax) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (expand "transitive?")
            (("2" (skeep)
              (("2" (expand "le")
                (("2" (skeep)
                  (("2" (inst?)
                    (("2" (inst?) (("2" (ground) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "antisymmetric?")
        (("2" (skeep)
          (("2" (expand "le")
            (("2" (decompose-equality 1)
              (("2" (decompose-equality 1)
                (("2" (inst?)
                  (("2" (inst?) (("2" (ground) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((le const-decl "bool" measures nil)
    (reflexive? const-decl "bool" relations nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" measures nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (transitive? const-decl "bool" relations nil)
    (preorder? const-decl "bool" orders nil)
    (Measure_Mat_Fn type-eq-decl nil measures nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (antisymmetric? const-decl "bool" relations nil)
    (partial_order? const-decl "bool" orders nil))
   nil))
 (matrices_order 0
  (matrices_order-2 nil 3653731328
   ("" (expand "<=")
    (("" (use "matrices_fun_order")
      (("" (expand "partial_order?")
        (("" (expand "preorder?")
          (("" (flatten)
            (("" (split 1)
              (("1" (expand "reflexive?")
                (("1" (skeep) (("1" (inst?) nil nil)) nil)) nil)
               ("2" (expand "transitive?")
                (("2" (skeep)
                  (("2" (inst? -4 :where 1)
                    (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                  nil))
                nil)
               ("3" (expand "antisymmetric?")
                (("3" (skeep)
                  (("3" (inst?)
                    (("3" (assert)
                      (("3" (hide-all-but (-5 1))
                        (("3" (typepred "form_matfun(x)")
                          (("3" (expand "eq")
                            (("3" (expand "get")
                              (("3"
                                (typepred "form_matfun(y)")
                                (("3"
                                  (expand "eq")
                                  (("3"
                                    (expand "get")
                                    (("3"
                                      (use
                                       "nth_extensionality[listn[Sign3](N)]")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (hide 2)
                                          (("3"
                                            (skolem 1 "i")
                                            (("3"
                                              (use
                                               "nth_extensionality[Sign3]")
                                              (("3"
                                                (assert)
                                                (("3"
                                                  (skolem 1 "j")
                                                  (("3"
                                                    (inst?)
                                                    (("3"
                                                      (inst?)
                                                      (("3"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((matrices_fun_order formula-decl nil measures nil)
    (preorder? const-decl "bool" orders nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" measures nil)
    (below type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (Measure_Mat_Fn type-eq-decl nil measures nil)
    (Measure_Matrix type-eq-decl nil measures nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (listn type-eq-decl nil listn "structures/")
    (eq const-decl "bool" measures nil)
    (form_matfun const-decl "{f | eq(m, f)}" measures nil)
    (reflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (get const-decl "Sign3" measures nil)
    (nth_extensionality formula-decl nil more_list_props "structures/")
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (antisymmetric? const-decl "bool" relations nil)
    (partial_order? const-decl "bool" orders nil)
    (<= const-decl "bool" measures nil))
   nil)
  (matrices_order-1 nil 3629651071
   ("" (expand "<=")
    (("" (use "matrices_fun_order")
      (("" (expand "partial_order?")
        (("" (expand "preorder?")
          (("" (flatten)
            (("" (split 1)
              (("1" (expand "reflexive?")
                (("1" (skeep) (("1" (inst?) nil nil)) nil)) nil)
               ("2" (expand "transitive?")
                (("2" (skeep)
                  (("2" (inst? -4 :where 1)
                    (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                  nil))
                nil)
               ("3" (expand "antisymmetric?")
                (("3" (skeep)
                  (("3" (inst?)
                    (("3" (assert)
                      (("3" (hide-all-but (-5 1))
                        (("3" (typepred "form_matfun(x)")
                          (("3" (expand "eq")
                            (("3" (expand "get")
                              (("3"
                                (typepred "form_matfun(y)")
                                (("3"
                                  (expand "eq")
                                  (("3"
                                    (expand "get")
                                    (("3"
                                      (use
                                       "nth_extensionality_1[listn[Sign3](N)]")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (hide 2)
                                          (("3"
                                            (skolem 1 "i")
                                            (("3"
                                              (use
                                               "nth_extensionality_1[Sign3]")
                                              (("3"
                                                (assert)
                                                (("3"
                                                  (skolem 1 "j")
                                                  (("3"
                                                    (inst?)
                                                    (("3"
                                                      (inst?)
                                                      (("3"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Sign3 type-eq-decl nil sign3 "reals/")
    (listn type-eq-decl nil listn "structures/"))
   shostak))
 (mult_fun_left_preserves_order 0
  (mult_fun_left_preserves_order-1 nil 3653471697
   ("" (skeep)
    (("" (expand "le")
      (("" (skeep)
        (("" (expand "mult")
          (("" (inst -1 "_" "j")
            ((""
              (case "FORALL (k:below(N)): Plus3(f(i)(k),f1(k)(j))<= Plus3(f(i)(k),f2(k)(j))")
              (("1"
                (typepred
                 "max(LAMBDA (k: below(N)): Plus3(f(i)(k) , f1(k)(j))) ")
                (("1" (skeep -3)
                  (("1" (replaces -3 :dir rl)
                    (("1" (hide -1)
                      (("1" (hide -1)
                        (("1" (inst -1 "j_1")
                          (("1"
                            (typepred
                             "max(LAMBDA (k: below(N)): Plus3(f(i)(k) , f2(k)(j))) ")
                            (("1" (hide -1)
                              (("1"
                                (inst -1 "j_1")
                                (("1" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (skeep)
                  (("2" (inst -1 "k")
                    (("2" (ground)
                      (("2" (expand "Plus3" 1 1)
                        (("2" (lift-if 1)
                          (("2" (split 1)
                            (("1" (flatten)
                              (("1"
                                (expand "Plus3")
                                (("1"
                                  (ground)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (split 3)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (split -1)
                                    (("1"
                                      (replaces -1)
                                      (("1"
                                        (expand "Plus3")
                                        (("1"
                                          (lift-if 1)
                                          (("1"
                                            (split)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (ground)
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (typepred
                                                     "f1(k)(j)")
                                                    (("1"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (replaces -1)
                                      (("2"
                                        (typepred "f2(k)(j)")
                                        (("2"
                                          (ground)
                                          (("2"
                                            (replaces -1)
                                            (("2"
                                              (expand "Plus3")
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (ground)
                                  (("2"
                                    (typepred "f(i)(k)")
                                    (("2"
                                      (ground)
                                      (("2"
                                        (typepred "f1(k)(j)")
                                        (("2"
                                          (ground)
                                          (("2"
                                            (replaces -1)
                                            (("2"
                                              (replaces -1)
                                              (("2"
                                                (expand "Plus3")
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (ground)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((le const-decl "bool" measures nil)
    (mult const-decl "Measure_Mat_Fn" measures nil)
    (Measure_Mat_Fn type-eq-decl nil measures nil)
    (Plus3 const-decl "Sign3" measures nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (max const-decl
         "{t: Sign3 | (FORALL i: f(i) <= t) AND (EXISTS j: f(j) = t)}"
         measures nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" measures nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (mult_left_preserves_order 0
  (mult_left_preserves_order-2 nil 3631282752
   ("" (skeep)
    (("" (expand "*")
      (("" (expand "<=")
        (("" (use "fun_matrix_idemp")
          (("" (replace -1 :hide? t)
            (("" (use "fun_matrix_idemp")
              (("" (replace -1 :hide? t)
                (("" (use "mult_fun_left_preserves_order")
                  (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((* const-decl "Measure_Matrix" measures nil)
    (fun_matrix_idemp formula-decl nil measures nil)
    (form_matfun const-decl "{f | eq(m, f)}" measures nil)
    (eq const-decl "bool" measures nil)
    (listn type-eq-decl nil listn "structures/")
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (Measure_Matrix type-eq-decl nil measures nil)
    (mult const-decl "Measure_Mat_Fn" measures nil)
    (Measure_Mat_Fn type-eq-decl nil measures nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" measures nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (mult_fun_left_preserves_order formula-decl nil measures nil)
    (<= const-decl "bool" measures nil))
   nil)
  (mult_left_preserves_order-1 nil 3630950036
   ("" (skeep)
    (("" (expand "<=")
      (("" (skeep)
        (("" (expand "*")
          (("" (inst -1 "_" "j")
            ((""
              (case "FORALL (k:below(N)): n(i)(k)+m1(k)(j)<= n(i)(k)+m2(k)(j)")
              (("1"
                (typepred
                 "max(LAMBDA (k: below(N)): (n(i)(k) + m1(k)(j))) ")
                (("1" (skeep -3)
                  (("1" (replaces -3 :dir rl)
                    (("1" (hide -1)
                      (("1" (hide -1)
                        (("1" (inst -1 "jj")
                          (("1"
                            (typepred
                             "max(LAMBDA (k: below(N)): (n(i)(k) + m2(k)(j))) ")
                            (("1" (hide -1)
                              (("1"
                                (inst -1 "jj")
                                (("1" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (skeep)
                  (("2" (inst -1 "k")
                    (("2" (ground)
                      (("2" (expand "+ " 1 1)
                        (("2" (lift-if 1)
                          (("2" (split 1)
                            (("1" (flatten)
                              (("1"
                                (expand "+ ")
                                (("1"
                                  (ground)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (split 3)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (split -1)
                                    (("1"
                                      (replaces -1)
                                      (("1"
                                        (expand "+ ")
                                        (("1"
                                          (lift-if 1)
                                          (("1"
                                            (split)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (ground)
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (typepred
                                                     "m1(k)(j)")
                                                    (("1"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (replaces -1)
                                      (("2"
                                        (typepred "m2(k)(j)")
                                        (("2"
                                          (ground)
                                          (("2"
                                            (replaces -1)
                                            (("2"
                                              (ground)
                                              (("2"
                                                (expand "+ ")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (ground)
                                  (("2"
                                    (typepred "n(i)(k)")
                                    (("2"
                                      (ground)
                                      (("2"
                                        (typepred "m1(k)(j)")
                                        (("2"
                                          (ground)
                                          (("2"
                                            (replaces -1)
                                            (("2"
                                              (replaces -1)
                                              (("2"
                                                (expand "+ ")
                                                (("2"
                                                  (ground)
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (mult_fun_right_preserves_order 0
  (mult_fun_right_preserves_order-1 nil 3653472078
   ("" (skeep)
    (("" (expand "le")
      (("" (skeep)
        (("" (expand "mult")
          (("" (inst -1 "i" "_")
            ((""
              (case "FORALL (k:below(N)): Plus3(f1(i)(k),f(k)(j))<= Plus3(f2(i)(k),f(k)(j))")
              (("1"
                (typepred
                 "max(LAMBDA (k: below(N)): Plus3(f1(i)(k) , f(k)(j))) ")
                (("1" (skeep -3)
                  (("1" (replaces -3 :dir rl)
                    (("1" (hide -1)
                      (("1" (hide -1)
                        (("1" (inst -1 "j_1")
                          (("1"
                            (typepred
                             "max(LAMBDA (k: below(N)): Plus3(f2(i)(k) , f(k)(j))) ")
                            (("1" (hide -1)
                              (("1"
                                (inst -1 "j_1")
                                (("1" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (skeep)
                  (("2" (inst -1 "k")
                    (("2" (ground)
                      (("2" (expand "Plus3" 1 1)
                        (("2" (lift-if 1)
                          (("2" (split 1)
                            (("1" (flatten)
                              (("1"
                                (expand "Plus3")
                                (("1"
                                  (ground)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (split 3)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (split -1)
                                    (("1"
                                      (replaces -1)
                                      (("1"
                                        (typepred "f2(i)(k)")
                                        (("1"
                                          (ground)
                                          (("1"
                                            (replaces -1)
                                            (("1"
                                              (expand "Plus3")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (replaces -1)
                                      (("2"
                                        (expand "Plus3")
                                        (("2"
                                          (lift-if 1)
                                          (("2"
                                            (ground)
                                            (("2"
                                              (replaces -1)
                                              (("2"
                                                (typepred "f1(i)(k)")
                                                (("2"
                                                  (ground)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (typepred "f(k)(j)")
                                    (("2"
                                      (ground)
                                      (("2"
                                        (typepred "f1(i)(k)")
                                        (("2"
                                          (ground)
                                          (("2"
                                            (replaces -1)
                                            (("2"
                                              (replaces -1)
                                              (("2"
                                                (expand "Plus3")
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (ground)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((le const-decl "bool" measures nil)
    (mult const-decl "Measure_Mat_Fn" measures nil)
    (Measure_Mat_Fn type-eq-decl nil measures nil)
    (Plus3 const-decl "Sign3" measures nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (max const-decl
         "{t: Sign3 | (FORALL i: f(i) <= t) AND (EXISTS j: f(j) = t)}"
         measures nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" measures nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (mult_right_preserves_order 0
  (mult_right_preserves_order-2 nil 3631282838
   ("" (skeep)
    (("" (expand "*")
      (("" (expand "<=")
        (("" (use "fun_matrix_idemp")
          (("" (replace -1 :hide? t)
            (("" (use "fun_matrix_idemp")
              (("" (replace -1 :hide? t)
                (("" (use "mult_fun_right_preserves_order")
                  (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((* const-decl "Measure_Matrix" measures nil)
    (fun_matrix_idemp formula-decl nil measures nil)
    (form_matfun const-decl "{f | eq(m, f)}" measures nil)
    (eq const-decl "bool" measures nil)
    (listn type-eq-decl nil listn "structures/")
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (Measure_Matrix type-eq-decl nil measures nil)
    (mult const-decl "Measure_Mat_Fn" measures nil)
    (Measure_Mat_Fn type-eq-decl nil measures nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" measures nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (mult_fun_right_preserves_order formula-decl nil measures nil)
    (<= const-decl "bool" measures nil))
   nil)
  (mult_right_preserves_order-1 nil 3630952352
   ("" (skeep)
    (("" (expand "<=")
      (("" (skeep)
        (("" (expand "*")
          (("" (inst -1 "i" "_")
            ((""
              (case "FORALL (k:below(N)): m1(i)(k)+n(k)(j)<= m2(i)(k)+n(k)(j)")
              (("1"
                (typepred
                 "max(LAMBDA (k: below(N)): (m1(i)(k) + n(k)(j))) ")
                (("1" (skeep -3)
                  (("1" (replaces -3 :dir rl)
                    (("1" (hide -1)
                      (("1" (hide -1)
                        (("1" (inst -1 "jj")
                          (("1"
                            (typepred
                             "max(LAMBDA (k: below(N)): (m2(i)(k) + n(k)(j))) ")
                            (("1" (hide -1)
                              (("1"
                                (inst -1 "jj")
                                (("1" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (skeep)
                  (("2" (inst -1 "k")
                    (("2" (ground)
                      (("2" (expand "+ " 1 1)
                        (("2" (lift-if 1)
                          (("2" (split 1)
                            (("1" (flatten)
                              (("1"
                                (expand "+ ")
                                (("1"
                                  (ground)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (split 3)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (split -1)
                                    (("1"
                                      (replaces -1)
                                      (("1"
                                        (typepred "m2(i)(k)")
                                        (("1"
                                          (ground)
                                          (("1"
                                            (replaces -1)
                                            (("1"
                                              (expand "+ ")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (replaces -1)
                                      (("2"
                                        (expand "+ ")
                                        (("2"
                                          (lift-if 1)
                                          (("2"
                                            (ground)
                                            (("2"
                                              (replaces -1)
                                              (("2"
                                                (typepred "m1(i)(k)")
                                                (("2"
                                                  (ground)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (typepred "n(k)(j)")
                                    (("2"
                                      (ground)
                                      (("2"
                                        (typepred "m1(i)(k)")
                                        (("2"
                                          (ground)
                                          (("2"
                                            (replaces -1)
                                            (("2"
                                              (replaces -1)
                                              (("2"
                                                (expand "+ ")
                                                (("2"
                                                  (ground)
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (id_fun_is_identity 0
  (id_fun_is_identity-1 nil 3653468598
   ("" (expand "identity?")
    (("" (skosimp)
      (("" (split)
        (("1" (decompose-equality)
          (("1" (decompose-equality)
            (("1" (expand* "mult" "id_fun")
              (("1"
                (name-replace "A" "LAMBDA (k: below(N)):
                    Plus3(x!1(x!2)(k) , IF k = x!3 THEN 0 ELSE -1 ENDIF)"
                 :hide? nil)
                (("1" (decompose-equality)
                  (("1" (typepred "max(A)")
                    (("1" (hide -1)
                      (("1" (case "max(A) = A(x!3)")
                        (("1" (inst -4 "x!3")
                          (("1" (expand "Plus3" -4)
                            (("1" (lift-if)
                              (("1"
                                (ground)
                                (("1"
                                  (typepred "x!1(x!2)(x!3)")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (skosimp)
                            (("2" (inst -1 "x!3")
                              (("2"
                                (case "j!1 = x!3")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (inst -3 "j!1")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "Plus3" -3)
                                      (("2"
                                        (expand "<=")
                                        (("2"
                                          (typepred "A(x!3)")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (decompose-equality)
          (("2" (decompose-equality)
            (("2" (expand* "mult" "id_fun")
              (("2"
                (name-replace "A" "LAMBDA (k: below(N)):
                    Plus3(IF x!2 = k THEN 0 ELSE -1 ENDIF , x!1(k)(x!3))"
                 :hide? nil)
                (("2" (decompose-equality)
                  (("2" (typepred "max(A)")
                    (("2" (hide -1)
                      (("2" (case "max(A) = A(x!2)")
                        (("1" (inst -4 "x!2")
                          (("1" (expand "Plus3" -4)
                            (("1" (lift-if)
                              (("1"
                                (ground)
                                (("1"
                                  (typepred "x!1(x!2)(x!3)")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (skosimp)
                            (("2" (inst -1 "x!2")
                              (("2"
                                (case "j!1 = x!2")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (inst -3 "j!1")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "Plus3" -3)
                                      (("2"
                                        (typepred "A(x!2)")
                                        (("2"
                                          (expand "<=")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Measure_Mat_Fn type-eq-decl nil measures nil)
    (mult const-decl "Measure_Mat_Fn" measures nil)
    (id_fun const-decl "Sign3" measures nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" measures nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (max const-decl
         "{t: Sign3 | (FORALL i: f(i) <= t) AND (EXISTS j: f(j) = t)}"
         measures nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (Plus3 const-decl "Sign3" measures nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (identity? const-decl "bool" operator_defs nil))
   nil))
 (id_is_identity 0
  (id_is_identity-2 nil 3631282959
   ("" (expand "identity?")
    (("" (skeep)
      (("" (use "id_fun_is_identity")
        (("" (expand "identity?")
          (("" (inst -1 "form_matfun(x)")
            (("" (expand "*")
              (("" (flatten)
                (("" (expand "id")
                  (("" (use "fun_matrix_idemp")
                    (("" (replace -1 :hide? t)
                      (("" (replace -1 :hide? t)
                        (("" (replace -1 :hide? t)
                          (("" (use "matrix_fun_idemp")
                            (("" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((* const-decl "Measure_Matrix" measures nil)
    (id const-decl "Measure_Matrix" measures nil)
    (matrix_fun_idemp formula-decl nil measures nil)
    (id_fun const-decl "Sign3" measures nil)
    (fun_matrix_idemp formula-decl nil measures nil)
    (form_matfun const-decl "{f | eq(m, f)}" measures nil)
    (eq const-decl "bool" measures nil)
    (listn type-eq-decl nil listn "structures/")
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (Measure_Matrix type-eq-decl nil measures nil)
    (Measure_Mat_Fn type-eq-decl nil measures nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" measures nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (id_fun_is_identity formula-decl nil measures nil)
    (identity? const-decl "bool" operator_defs nil))
   nil)
  (id_is_identity-1 nil 3562867672
   ("" (expand "identity?")
    (("" (skosimp)
      (("" (split)
        (("1" (decompose-equality)
          (("1" (decompose-equality)
            (("1" (expand* "*" "id")
              (("1"
                (name-replace "A" "LAMBDA (k: below(N)):
            (x!1(x!2)(k) + IF k = x!3 THEN 0 ELSE -1 ENDIF)" :hide?
                 nil)
                (("1" (decompose-equality)
                  (("1" (typepred "max(A)")
                    (("1" (hide -1)
                      (("1" (case "max(A) = A(x!3)")
                        (("1" (inst -4 "x!3")
                          (("1" (expand "+" -4)
                            (("1" (lift-if)
                              (("1"
                                (ground)
                                (("1"
                                  (typepred "x!1(x!2)(x!3)")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (skosimp)
                            (("2" (inst -1 "x!3")
                              (("2"
                                (case "jj!1 = x!3")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (inst -3 "jj!1")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "+" -3)
                                      (("2"
                                        (expand "<=")
                                        (("2"
                                          (typepred "A(x!3)")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1) (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (decompose-equality)
          (("2" (decompose-equality)
            (("2" (expand* "*" "id")
              (("2"
                (name-replace "A" "LAMBDA (k: below(N)):
            (IF x!2 = k THEN 0 ELSE -1 ENDIF + x!1(k)(x!3))" :hide?
                 nil)
                (("2" (decompose-equality)
                  (("2" (typepred "max(A)")
                    (("1" (hide -1)
                      (("1" (case "max(A) = A(x!2)")
                        (("1" (inst -4 "x!2")
                          (("1" (expand "+" -4)
                            (("1" (lift-if)
                              (("1"
                                (ground)
                                (("1"
                                  (typepred "x!1(x!2)(x!3)")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (skosimp)
                            (("2" (inst -1 "x!2")
                              (("2"
                                (case "jj!1 = x!2")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (inst -3 "jj!1")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "+" -3)
                                      (("2"
                                        (typepred "A(x!2)")
                                        (("2"
                                          (expand "<=")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1) (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (max_add 0
  (max_add-2 nil 3570287683
   ("" (grind)
    (("1" (typepred "max(LAMBDA (i: below(N)): -1)")
      (("1" (assert) nil nil)) nil)
     ("2" (typepred "max_(N)(A!1)")
      (("2" (hide -1 -3 -4)
        (("2"
          (typepred
           "max_(N)(LAMBDA (i: below(N)): IF A!1(i) = -1 THEN -1 ELSE 1 ENDIF)")
          (("2" (hide -1)
            (("2" (skeep -2)
              (("2" (inst -3 "j")
                (("2" (typepred "A!1(j)") (("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 1)
      (("3" (typepred "max_(N)(A!1)")
        (("3" (hide -1)
          (("3" (skeep -2)
            (("3"
              (typepred
               "max(LAMBDA (i: below(N)): IF A!1(i) = -1 THEN -1 ELSE 1 ENDIF)")
              (("3" (inst -2 "j")
                (("3" (assert)
                  (("3"
                    (name-replace "AA"
                     "max(LAMBDA (i: below(N)): IF A!1(i) = -1 THEN -1 ELSE 1 ENDIF)")
                    (("3" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4"
      (typepred "max_(N)(LAMBDA (i: below(N)):
                     IF A!1(i) = -1 THEN -1 ELSIF A!1(i) = 1 THEN 1 ELSE 0 ENDIF)")
      (("4"
        (name-replace "AA" "max_(N)(LAMBDA (i: below(N)):
                     IF A!1(i) = -1 THEN -1 ELSIF A!1(i) = 1 THEN 1 ELSE 0 ENDIF)")
        (("4" (typepred "max_(N)(A!1)")
          (("4" (skeep -6)
            (("4" (hide -1 -3 -4 -5)
              (("4" (inst -1 "j")
                (("4" (assert)
                  (("4" (typepred "A!1(j)") (("4" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (hide 1 2)
      (("5" (typepred "max_(N)(A!1)")
        (("5"
          (typepred "max_(N)(LAMBDA (i: below(N)):
                     IF A!1(i) = -1 THEN -1 ELSIF A!1(i) = 1 THEN 1 ELSE 0 ENDIF)")
          (("5"
            (name-replace "AA" "max_(N)(LAMBDA (i: below(N)):
                     IF A!1(i) = -1 THEN -1 ELSIF A!1(i) = 1 THEN 1 ELSE 0 ENDIF)")
            (("5" (hide -4 -3 -5)
              (("5" (skeep -3)
                (("5" (inst -2 "j")
                  (("5" (assert) (("5" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (hide 1 2)
      (("6" (typepred "max_(N)(A!1)")
        (("6" (assert)
          (("6" (hide 1 2)
            (("6"
              (typepred "max_(N)(LAMBDA (i: below(N)):
                     IF A!1(i) = -1 THEN -1 ELSIF A!1(i) = 1 THEN 1 ELSE 0 ENDIF)")
              (("6"
                (name-replace "AA" "max_(N)(LAMBDA (i: below(N)):
                     IF A!1(i) = -1 THEN -1 ELSIF A!1(i) = 1 THEN 1 ELSE 0 ENDIF)")
                (("6" (skeep -6)
                  (("6" (inst -2 "j")
                    (("6" (assert)
                      (("6" (assert)
                        (("6" (skeep -3)
                          (("6" (lift-if)
                            (("6" (assert)
                              (("6"
                                (prop)
                                (("6"
                                  (inst -5 "j!1")
                                  (("6" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (max_ def-decl "{t: Sign3 |
   (FORALL (i: below(n)): f(i) <= t) AND (EXISTS (j: below(n)): f(j) = t)}"
     measures nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" measures nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (Plus3 const-decl "Sign3" measures nil)
    (max const-decl
         "{t: Sign3 | (FORALL i: f(i) <= t) AND (EXISTS j: f(j) = t)}"
         measures nil))
   nil)
  (max_add-1 nil 3570287581 ("" (postpone) nil nil) nil shostak))
 (measure_matrix_fun_assoc 0
  (measure_matrix_fun_assoc-1 nil 3653472448
   ("" (expand "associative?")
    (("" (skeep)
      (("" (decompose-equality)
        (("" (decompose-equality)
          (("" (expand "mult" 1 (1 3))
            ((""
              (typepred
               "max(LAMBDA (k: below(N)): (Plus3((mult(x,y))(x!1)(k) , z(k)(x!2))))")
              ((""
                (name-replace "XY_Z"
                 "max(LAMBDA (k: below(N)): (Plus3((mult(x,y))(x!1)(k) , z(k)(x!2))))")
                ((""
                  (typepred
                   " max(LAMBDA (k: below(N)): (Plus3(x(x!1)(k) , mult(y,z)(k)(x!2))))")
                  ((""
                    (name-replace "X_YZ"
                     "max(LAMBDA (k: below(N)): (Plus3(x(x!1)(k) , mult(y,z)(k)(x!2))))")
                    (("" (skolem -3 "Kx_yz")
                      (("" (skolem -6 "Kxy_z")
                        (("" (hide -1 -4)
                          (("" (expand "mult" (-2 -4))
                            (("" (lemma "max_add")
                              ((""
                                (inst-cp
                                 -1
                                 "LAMBDA (k: below(N)): (Plus3(x(x!1)(k) , y(k)(Kxy_z)))"
                                 "z(Kxy_z)(x!2)")
                                ((""
                                  (inst
                                   -1
                                   "LAMBDA (k: below(N)): (Plus3(y(Kx_yz)(k) , z(k)(x!2)))"
                                   "x(x!1)(Kx_yz)")
                                  ((""
                                    (replace -2 -6)
                                    ((""
                                      (case-replace
                                       "Plus3(x(x!1)(Kx_yz) ,
                  max(LAMBDA (k: below(N)): Plus3(y(Kx_yz)(k) , z(k)(x!2)))) = max(LAMBDA (i: below(N)): Plus3(Plus3(y(Kx_yz)(i) , z(i)(x!2)) , x(x!1)(Kx_yz)))")
                                      (("1"
                                        (hide -1 -2 -3)
                                        (("1"
                                          (typepred
                                           "max(LAMBDA (i: below(N)): Plus3(Plus3(y(Kx_yz)(i) , z(i)(x!2)) , x(x!1)(Kx_yz)))")
                                          (("1"
                                            (name-replace
                                             "YZ"
                                             "max(LAMBDA (i: below(N)): Plus3(Plus3(y(Kx_yz)(i) , z(i)(x!2)) , x(x!1)(Kx_yz)))")
                                            (("1"
                                              (typepred
                                               "max(LAMBDA (i: below(N)): Plus3(Plus3(x(x!1)(i) , y(i)(Kxy_z)) , z(Kxy_z)(x!2)))")
                                              (("1"
                                                (name-replace
                                                 "XY"
                                                 "max(LAMBDA (i: below(N)): Plus3(Plus3(x(x!1)(i) , y(i)(Kxy_z)) , z(Kxy_z)(x!2)))")
                                                (("1"
                                                  (skolem -3 "kxy")
                                                  (("1"
                                                    (skolem -6 "kyz")
                                                    (("1"
                                                      (ground)
                                                      (("1"
                                                        (replaces -1)
                                                        (("1"
                                                          (replaces -1)
                                                          (("1"
                                                            (expand
                                                             "mult"
                                                             -5)
                                                            (("1"
                                                              (inst
                                                               -5
                                                               "kxy")
                                                              (("1"
                                                                (lemma
                                                                 "max_add")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "LAMBDA (k: below(N)): Plus3(y(kxy)(k) , z(k)(x!2))"
                                                                   "x(x!1)(kxy)")
                                                                  (("1"
                                                                    (case-replace
                                                                     "Plus3(x(x!1)(kxy) , max(LAMBDA (k: below(N)): Plus3(y(kxy)(k) , z(k)(x!2)))) = max(LAMBDA (i: below(N)): Plus3(Plus3(y(kxy)(i) , z(i)(x!2)) , x(x!1)(kxy)))")
                                                                    (("1"
                                                                      (hide
                                                                       -1
                                                                       -2)
                                                                      (("1"
                                                                        (typepred
                                                                         "max(LAMBDA (i: below(N)): Plus3(Plus3(y(kxy)(i) , z(i)(x!2)) , x(x!1)(kxy)))")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (hide
                                                                             -3)
                                                                            (("1"
                                                                              (inst
                                                                               -2
                                                                               "Kxy_z")
                                                                              (("1"
                                                                                (hide-all-but
                                                                                 (-1
                                                                                  -2
                                                                                  -4))
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       (-1
                                                                        1))
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (replaces -1)
                                                        (("2"
                                                          (replaces -1)
                                                          (("2"
                                                            (expand
                                                             "mult"
                                                             -5)
                                                            (("2"
                                                              (inst
                                                               -5
                                                               "kxy")
                                                              (("2"
                                                                (lemma
                                                                 "max_add")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "LAMBDA (k: below(N)): Plus3(y(kxy)(k) , z(k)(x!2))"
                                                                   "x(x!1)(kxy)")
                                                                  (("2"
                                                                    (case-replace
                                                                     "Plus3(x(x!1)(kxy) , max(LAMBDA (k: below(N)): Plus3(y(kxy)(k) , z(k)(x!2)))) = max(LAMBDA (i: below(N)): Plus3(Plus3(y(kxy)(i) , z(i)(x!2)) , x(x!1)(kxy)))")
                                                                    (("1"
                                                                      (hide
                                                                       -1
                                                                       -2)
                                                                      (("1"
                                                                        (typepred
                                                                         "max(LAMBDA (i: below(N)): Plus3(Plus3(y(kxy)(i) , z(i)(x!2)) , x(x!1)(kxy)))")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (hide
                                                                             -3)
                                                                            (("1"
                                                                              (inst
                                                                               -2
                                                                               "Kxy_z")
                                                                              (("1"
                                                                                (hide-all-but
                                                                                 (-1
                                                                                  -2
                                                                                  -4))
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       (-1
                                                                        1))
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (replaces -1)
                                                        (("3"
                                                          (replaces -1)
                                                          (("3"
                                                            (expand
                                                             "mult"
                                                             -7)
                                                            (("3"
                                                              (inst
                                                               -7
                                                               "kyz")
                                                              (("3"
                                                                (lemma
                                                                 "max_add")
                                                                (("3"
                                                                  (inst
                                                                   -1
                                                                   "LAMBDA (k: below(N)): Plus3(x(x!1)(k) , y(k)(kyz))"
                                                                   "z(kyz)(x!2)")
                                                                  (("3"
                                                                    (replaces
                                                                     -1)
                                                                    (("3"
                                                                      (typepred
                                                                       "max(LAMBDA (i: below(N)): Plus3(Plus3(x(x!1)(i) , y(i)(kyz)) , z(kyz)(x!2)))")
                                                                      (("3"
                                                                        (assert)
                                                                        (("3"
                                                                          (hide
                                                                           -3)
                                                                          (("3"
                                                                            (inst
                                                                             -2
                                                                             "Kx_yz")
                                                                            (("3"
                                                                              (hide-all-but
                                                                               (-1
                                                                                -2
                                                                                -6))
                                                                              (("3"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("4"
                                                        (replaces -1)
                                                        (("4"
                                                          (replaces -1)
                                                          (("4"
                                                            (expand
                                                             "mult"
                                                             -7)
                                                            (("4"
                                                              (inst
                                                               -7
                                                               "kyz")
                                                              (("4"
                                                                (lemma
                                                                 "max_add")
                                                                (("4"
                                                                  (inst
                                                                   -1
                                                                   "LAMBDA (k: below(N)): Plus3(x(x!1)(k) , y(k)(kyz))"
                                                                   "z(kyz)(x!2)")
                                                                  (("4"
                                                                    (replaces
                                                                     -1)
                                                                    (("4"
                                                                      (typepred
                                                                       "max(LAMBDA (i: below(N)): Plus3(Plus3(x(x!1)(i) , y(i)(kyz)) , z(kyz)(x!2)))")
                                                                      (("4"
                                                                        (assert)
                                                                        (("4"
                                                                          (hide
                                                                           -3)
                                                                          (("4"
                                                                            (inst
                                                                             -2
                                                                             "Kx_yz")
                                                                            (("4"
                                                                              (hide-all-but
                                                                               (-1
                                                                                -2
                                                                                -6))
                                                                              (("4"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("5"
                                                        (replaces -1)
                                                        (("5"
                                                          (replaces -1)
                                                          (("5"
                                                            (expand
                                                             "mult"
                                                             -7)
                                                            (("5"
                                                              (inst
                                                               -7
                                                               "kyz")
                                                              (("5"
                                                                (lemma
                                                                 "max_add")
                                                                (("5"
                                                                  (inst
                                                                   -1
                                                                   "LAMBDA (k: below(N)): Plus3(x(x!1)(k) , y(k)(kyz))"
                                                                   "z(kyz)(x!2)")
                                                                  (("5"
                                                                    (replaces
                                                                     -1)
                                                                    (("5"
                                                                      (typepred
                                                                       "max(LAMBDA (i: below(N)): Plus3(Plus3(x(x!1)(i) , y(i)(kyz)) , z(kyz)(x!2)))")
                                                                      (("5"
                                                                        (assert)
                                                                        (("5"
                                                                          (hide
                                                                           -3)
                                                                          (("5"
                                                                            (inst
                                                                             -2
                                                                             "Kx_yz")
                                                                            (("5"
                                                                              (hide-all-but
                                                                               (-1
                                                                                -2
                                                                                -6))
                                                                              (("5"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("6"
                                                        (replaces -1)
                                                        (("6"
                                                          (replace
                                                           -1
                                                           :hide?
                                                           t)
                                                          (("6"
                                                            (expand
                                                             "mult"
                                                             -5)
                                                            (("6"
                                                              (inst
                                                               -5
                                                               "kxy")
                                                              (("6"
                                                                (lemma
                                                                 "max_add")
                                                                (("6"
                                                                  (inst
                                                                   -1
                                                                   "LAMBDA (k: below(N)): Plus3(y(kxy)(k) , z(k)(x!2))"
                                                                   "x(x!1)(kxy)")
                                                                  (("6"
                                                                    (case-replace
                                                                     "Plus3(x(x!1)(kxy) , max(LAMBDA (k: below(N)): Plus3(y(kxy)(k) , z(k)(x!2)))) = max(LAMBDA (i: below(N)): Plus3(Plus3(y(kxy)(i) , z(i)(x!2)) , x(x!1)(kxy)))")
                                                                    (("1"
                                                                      (hide
                                                                       -1
                                                                       -2)
                                                                      (("1"
                                                                        (typepred
                                                                         "max(LAMBDA (i: below(N)): Plus3(Plus3(y(kxy)(i) , z(i)(x!2)) , x(x!1)(kxy)))")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (hide
                                                                             -3)
                                                                            (("1"
                                                                              (inst
                                                                               -2
                                                                               "Kxy_z")
                                                                              (("1"
                                                                                (hide-all-but
                                                                                 (-1
                                                                                  -2
                                                                                  -4))
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       (-1
                                                                        1))
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but (-1 1))
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Plus3 const-decl "Sign3" measures nil)
    (max const-decl
         "{t: Sign3 | (FORALL i: f(i) <= t) AND (EXISTS j: f(j) = t)}"
         measures nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (max_add formula-decl nil measures nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" measures nil)
    (below type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (mult const-decl "Measure_Mat_Fn" measures nil)
    (Measure_Mat_Fn type-eq-decl nil measures nil)
    (associative? const-decl "bool" operator_defs nil))
   nil))
 (measure_matrix_assoc 0
  (measure_matrix_assoc-3 nil 3631280026
   ("" (expand "*")
    (("" (expand "associative?")
      (("" (skeep)
        (("" (use "measure_matrix_fun_assoc")
          (("" (expand "associative?")
            (("" (use "fun_matrix_idemp")
              (("" (replace -1 :hide? t)
                (("" (use "fun_matrix_idemp")
                  (("" (replace -1 :hide? t)
                    (("" (inst?) (("" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((associative? const-decl "bool" operator_defs nil)
    (measure_matrix_fun_assoc formula-decl nil measures nil)
    (fun_matrix_idemp formula-decl nil measures nil)
    (form_matfun const-decl "{f | eq(m, f)}" measures nil)
    (eq const-decl "bool" measures nil)
    (listn type-eq-decl nil listn "structures/")
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (Measure_Matrix type-eq-decl nil measures nil)
    (mult const-decl "Measure_Mat_Fn" measures nil)
    (Measure_Mat_Fn type-eq-decl nil measures nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" measures nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (* const-decl "Measure_Matrix" measures nil))
   nil)
  (measure_matrix_assoc-2 nil 3572774815
   ("" (expand "associative?")
    (("" (skeep)
      (("" (decompose-equality)
        (("" (decompose-equality)
          (("" (expand "*" 1 (2 3))
            ((""
              (typepred
               "max(LAMBDA (k: below(N)): ((x * y)(x!1)(k) + z(k)(x!2)))")
              ((""
                (name-replace "XY_Z"
                 "max(LAMBDA (k: below(N)): ((x * y)(x!1)(k) + z(k)(x!2)))")
                ((""
                  (typepred
                   " max(LAMBDA (k: below(N)): (x(x!1)(k) + (y * z)(k)(x!2)))")
                  ((""
                    (name-replace "X_YZ"
                     "max(LAMBDA (k: below(N)): (x(x!1)(k) + (y * z)(k)(x!2)))")
                    (("" (skolem -3 "Kx_yz")
                      (("" (skolem -6 "Kxy_z")
                        (("" (hide -1 -4)
                          (("" (expand "*" (-2 -4))
                            (("" (lemma "max_add")
                              ((""
                                (inst-cp
                                 -1
                                 "LAMBDA (k: below(N)): (x(x!1)(k) + y(k)(Kxy_z))"
                                 "z(Kxy_z)(x!2)")
                                ((""
                                  (inst
                                   -1
                                   "LAMBDA (k: below(N)): (y(Kx_yz)(k) + z(k)(x!2))"
                                   "x(x!1)(Kx_yz)")
                                  ((""
                                    (replace -2 -6)
                                    ((""
                                      (case-replace
                                       "(x(x!1)(Kx_yz) +
          max(LAMBDA (k: below(N)): (y(Kx_yz)(k) + z(k)(x!2)))) = max(LAMBDA (i: below(N)): (y(Kx_yz)(i) + z(i)(x!2)) + x(x!1)(Kx_yz))")
                                      (("1"
                                        (hide -1 -2 -3)
                                        (("1"
                                          (typepred
                                           "max(LAMBDA (i: below(N)): (y(Kx_yz)(i) + z(i)(x!2)) + x(x!1)(Kx_yz))")
                                          (("1"
                                            (name-replace
                                             "YZ"
                                             "max(LAMBDA (i: below(N)): (y(Kx_yz)(i) + z(i)(x!2)) + x(x!1)(Kx_yz))")
                                            (("1"
                                              (typepred
                                               "max(LAMBDA (i: below(N)): (x(x!1)(i) + y(i)(Kxy_z)) + z(Kxy_z)(x!2))")
                                              (("1"
                                                (name-replace
                                                 "XY"
                                                 "max(LAMBDA (i: below(N)): (x(x!1)(i) + y(i)(Kxy_z)) + z(Kxy_z)(x!2))")
                                                (("1"
                                                  (skolem -3 "kxy")
                                                  (("1"
                                                    (skolem -6 "kyz")
                                                    (("1"
                                                      (ground)
                                                      (("1"
                                                        (replaces -1)
                                                        (("1"
                                                          (replaces -1)
                                                          (("1"
                                                            (expand
                                                             "*"
                                                             -5)
                                                            (("1"
                                                              (inst
                                                               -5
                                                               "kxy")
                                                              (("1"
                                                                (lemma
                                                                 "max_add")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "LAMBDA (k: below(N)): (y(kxy)(k) + z(k)(x!2))"
                                                                   "x(x!1)(kxy)")
                                                                  (("1"
                                                                    (case-replace
                                                                     "x(x!1)(kxy) + max(LAMBDA (k: below(N)): (y(kxy)(k) + z(k)(x!2))) = max(LAMBDA (i: below(N)): (y(kxy)(i) + z(i)(x!2)) + x(x!1)(kxy))")
                                                                    (("1"
                                                                      (hide
                                                                       -1
                                                                       -2)
                                                                      (("1"
                                                                        (typepred
                                                                         "max(LAMBDA (i: below(N)): (y(kxy)(i) + z(i)(x!2)) + x(x!1)(kxy))")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (hide
                                                                             -3)
                                                                            (("1"
                                                                              (inst
                                                                               -2
                                                                               "Kxy_z")
                                                                              (("1"
                                                                                (hide-all-but
                                                                                 (-1
                                                                                  -2
                                                                                  -4))
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       (-1
                                                                        1))
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (replaces -1)
                                                        (("2"
                                                          (replaces -1)
                                                          (("2"
                                                            (expand
                                                             "*"
                                                             -5)
                                                            (("2"
                                                              (inst
                                                               -5
                                                               "kxy")
                                                              (("2"
                                                                (lemma
                                                                 "max_add")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "LAMBDA (k: below(N)): (y(kxy)(k) + z(k)(x!2))"
                                                                   "x(x!1)(kxy)")
                                                                  (("2"
                                                                    (case-replace
                                                                     "(x(x!1)(kxy) + max(LAMBDA (k: below(N)): (y(kxy)(k) + z(k)(x!2)))) = max(LAMBDA (i: below(N)): (y(kxy)(i) + z(i)(x!2)) + x(x!1)(kxy))")
                                                                    (("1"
                                                                      (hide
                                                                       -1
                                                                       -2)
                                                                      (("1"
                                                                        (typepred
                                                                         "max(LAMBDA (i: below(N)): (y(kxy)(i) + z(i)(x!2)) + x(x!1)(kxy))")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (hide
                                                                             -3)
                                                                            (("1"
                                                                              (inst
                                                                               -2
                                                                               "Kxy_z")
                                                                              (("1"
                                                                                (hide-all-but
                                                                                 (-1
                                                                                  -2
                                                                                  -4))
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       (-1
                                                                        1))
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (replaces -1)
                                                        (("3"
                                                          (replaces -1)
                                                          (("3"
                                                            (expand
                                                             "*"
                                                             -7)
                                                            (("3"
                                                              (inst
                                                               -7
                                                               "kyz")
                                                              (("3"
                                                                (lemma
                                                                 "max_add")
                                                                (("3"
                                                                  (inst
                                                                   -1
                                                                   "LAMBDA (k: below(N)): (x(x!1)(k) + y(k)(kyz))"
                                                                   "z(kyz)(x!2)")
                                                                  (("3"
                                                                    (replaces
                                                                     -1)
                                                                    (("3"
                                                                      (typepred
                                                                       "max(LAMBDA (i: below(N)): (x(x!1)(i) + y(i)(kyz)) + z(kyz)(x!2))")
                                                                      (("3"
                                                                        (assert)
                                                                        (("3"
                                                                          (hide
                                                                           -3)
                                                                          (("3"
                                                                            (inst
                                                                             -2
                                                                             "Kx_yz")
                                                                            (("3"
                                                                              (hide-all-but
                                                                               (-1
                                                                                -2
                                                                                -6))
                                                                              (("3"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("4"
                                                        (replaces -1)
                                                        (("4"
                                                          (replaces -1)
                                                          (("4"
                                                            (expand
                                                             "*"
                                                             -7)
                                                            (("4"
                                                              (inst
                                                               -7
                                                               "kyz")
                                                              (("4"
                                                                (lemma
                                                                 "max_add")
                                                                (("4"
                                                                  (inst
                                                                   -1
                                                                   "LAMBDA (k: below(N)): (x(x!1)(k) + y(k)(kyz))"
                                                                   "z(kyz)(x!2)")
                                                                  (("4"
                                                                    (replaces
                                                                     -1)
                                                                    (("4"
                                                                      (typepred
                                                                       "max(LAMBDA (i: below(N)): (x(x!1)(i) + y(i)(kyz)) + z(kyz)(x!2))")
                                                                      (("4"
                                                                        (assert)
                                                                        (("4"
                                                                          (hide
                                                                           -3)
                                                                          (("4"
                                                                            (inst
                                                                             -2
                                                                             "Kx_yz")
                                                                            (("4"
                                                                              (hide-all-but
                                                                               (-1
                                                                                -2
                                                                                -6))
                                                                              (("4"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("5"
                                                        (replaces -1)
                                                        (("5"
                                                          (replaces -1)
                                                          (("5"
                                                            (expand
                                                             "*"
                                                             -7)
                                                            (("5"
                                                              (inst
                                                               -7
                                                               "kyz")
                                                              (("5"
                                                                (lemma
                                                                 "max_add")
                                                                (("5"
                                                                  (inst
                                                                   -1
                                                                   "LAMBDA (k: below(N)): (x(x!1)(k) + y(k)(kyz))"
                                                                   "z(kyz)(x!2)")
                                                                  (("5"
                                                                    (replaces
                                                                     -1)
                                                                    (("5"
                                                                      (typepred
                                                                       "max(LAMBDA (i: below(N)): (x(x!1)(i) + y(i)(kyz)) + z(kyz)(x!2))")
                                                                      (("5"
                                                                        (assert)
                                                                        (("5"
                                                                          (hide
                                                                           -3)
                                                                          (("5"
                                                                            (inst
                                                                             -2
                                                                             "Kx_yz")
                                                                            (("5"
                                                                              (hide-all-but
                                                                               (-1
                                                                                -2
                                                                                -6))
                                                                              (("5"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("6"
                                                        (replaces -1)
                                                        (("6"
                                                          (replaces -1)
                                                          (("6"
                                                            (expand
                                                             "*"
                                                             -5)
                                                            (("6"
                                                              (inst
                                                               -5
                                                               "kxy")
                                                              (("6"
                                                                (lemma
                                                                 "max_add")
                                                                (("6"
                                                                  (inst
                                                                   -1
                                                                   "LAMBDA (k: below(N)): (y(kxy)(k) + z(k)(x!2))"
                                                                   "x(x!1)(kxy)")
                                                                  (("6"
                                                                    (case-replace
                                                                     "x(x!1)(kxy) + max(LAMBDA (k: below(N)): (y(kxy)(k) + z(k)(x!2))) = max(LAMBDA (i: below(N)): (y(kxy)(i) + z(i)(x!2)) + x(x!1)(kxy))")
                                                                    (("1"
                                                                      (hide
                                                                       -1
                                                                       -2)
                                                                      (("1"
                                                                        (typepred
                                                                         "max(LAMBDA (i: below(N)): (y(kxy)(i) + z(i)(x!2)) + x(x!1)(kxy))")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (hide
                                                                             -3)
                                                                            (("1"
                                                                              (inst
                                                                               -2
                                                                               "Kxy_z")
                                                                              (("1"
                                                                                (hide-all-but
                                                                                 (-1
                                                                                  -2
                                                                                  -4))
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       (-1
                                                                        1))
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but (-1 1))
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (measure_matrix_assoc-1 nil 3572772046
   ("" (expand "associative?")
    (("" (skeep)
      (("" (decompose-equality)
        (("" (decompose-equality)
          (("" (expand "*" 1 (2 3))
            ((""
              (typepred
               "max(LAMBDA (k: below(N)): ((x * y)(x!1)(k) + z(k)(x!2)))")
              ((""
                (name-replace "XY_Z"
                 "max(LAMBDA (k: below(N)): ((x * y)(x!1)(k) + z(k)(x!2)))")
                ((""
                  (typepred
                   " max(LAMBDA (k: below(N)): (x(x!1)(k) + (y * z)(k)(x!2)))")
                  ((""
                    (name-replace "X_YZ"
                     "max(LAMBDA (k: below(N)): (x(x!1)(k) + (y * z)(k)(x!2)))")
                    (("" (skolem -3 "Kx_yz")
                      (("" (skolem -6 "Kxy_z")
                        (("" (hide -1 -4)
                          (("" (expand "*" (-2 -4))
                            (("" (lemma "max_add")
                              ((""
                                (inst-cp
                                 -1
                                 "LAMBDA (k: below(N)): (x(x!1)(k) + y(k)(Kxy_z))"
                                 "z(Kxy_z)(x!2)")
                                ((""
                                  (inst
                                   -1
                                   "LAMBDA (k: below(N)): (y(Kx_yz)(k) + z(k)(x!2))"
                                   "x(x!1)(Kx_yz)")
                                  ((""
                                    (replace -2 -6)
                                    ((""
                                      (case-replace
                                       "(x(x!1)(Kx_yz) +
          max(LAMBDA (k: below(N)): (y(Kx_yz)(k) + z(k)(x!2)))) = max(LAMBDA (i: below(N)): (y(Kx_yz)(i) + z(i)(x!2)) + x(x!1)(Kx_yz))")
                                      (("1"
                                        (hide -1 -2 -3)
                                        (("1"
                                          (typepred
                                           "max(LAMBDA (i: below(N)): (y(Kx_yz)(i) + z(i)(x!2)) + x(x!1)(Kx_yz))")
                                          (("1"
                                            (name-replace
                                             "YZ"
                                             "max(LAMBDA (i: below(N)): (y(Kx_yz)(i) + z(i)(x!2)) + x(x!1)(Kx_yz))")
                                            (("1"
                                              (typepred
                                               "max(LAMBDA (i: below(N)): (x(x!1)(i) + y(i)(Kxy_z)) + z(Kxy_z)(x!2))")
                                              (("1"
                                                (name-replace
                                                 "XY"
                                                 "max(LAMBDA (i: below(N)): (x(x!1)(i) + y(i)(Kxy_z)) + z(Kxy_z)(x!2))")
                                                (("1"
                                                  (skolem -3 "kxy")
                                                  (("1"
                                                    (skolem -6 "kyz")
                                                    (("1"
                                                      (replaces -8)
                                                      (("1"
                                                        (replaces -9)
                                                        (("1"
                                                          (expand "*")
                                                          (("1"
                                                            (postpone)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (postpone) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (defined_pos?_def 0
  (defined_pos?_def-1 nil 3653837506
   ("" (skeep)
    (("" (expand "defined_pos?")
      (("" (expand "defined_pos_fun?")
        (("" (typepred "form_matfun(m)")
          (("" (expand "eq")
            (("" (assert) (("" (inst?) (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((defined_pos? const-decl "bool" measures nil)
    (form_matfun const-decl "{f | eq(m, f)}" measures nil)
    (eq const-decl "bool" measures nil)
    (Measure_Mat_Fn type-eq-decl nil measures nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Measure_Matrix type-eq-decl nil measures nil)
    (listn type-eq-decl nil listn "structures/")
    (N formal-const-decl "posnat" measures nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (defined_pos_fun? const-decl "bool" measures nil))
   shostak))
 (positive_mult_fun 0
  (positive_mult_fun-2 nil 3653482501
   ("" (skeep)
    (("" (prop)
      (("1" (expand "positive_fun?")
        (("1" (skeep)
          (("1" (expand "mult")
            (("1"
              (typepred
               "max(LAMBDA (k: below(N)): Plus3(f1(j)(k) , f2(k)(j)))")
              (("1" (hide -1 -2)
                (("1" (skeep)
                  (("1" (replaces -2)
                    (("1" (inst 1 "j" "j_1") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (expand "positive_fun?")
          (("2" (expand "mult")
            (("2" (inst 1 "j")
              (("2"
                (typepred
                 "max(LAMBDA (k: below(N)): Plus3(f1(j)(k) , f2(k)(j)))")
                (("2" (hide -3)
                  (("2" (inst -2 "k")
                    (("2" (replaces -3) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Measure_Mat_Fn type-eq-decl nil measures nil)
    (Plus3 const-decl "Sign3" measures nil)
    (max const-decl
         "{t: Sign3 | (FORALL i: f(i) <= t) AND (EXISTS j: f(j) = t)}"
         measures nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" measures nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (mult const-decl "Measure_Mat_Fn" measures nil)
    (positive_fun? const-decl "bool" measures nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil)
  (positive_mult_fun-1 nil 3653474771
   ("" (skeep)
    (("" (prop)
      (("1" (expand "positive?")
        (("1" (skeep)
          (("1" (expand "mult")
            (("1"
              (typepred
               "max(LAMBDA (k: below(N)): Plus3(f1(j)(k) , f2(k)(j)))")
              (("1" (hide -1 -2)
                (("1" (skeep)
                  (("1" (replaces -2) (("1" (inst 1 "j" "jj") nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (expand "positive?")
          (("2" (expand "mult")
            (("2" (inst 1 "j")
              (("2"
                (typepred
                 "max(LAMBDA (k: below(N)): Plus3(f1(j)(k) , f2(k)(j)))")
                (("2" (hide -3)
                  (("2" (inst -2 "k")
                    (("2" (replaces -3) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Sign3 type-eq-decl nil sign3 "reals/")) nil))
 (positive_multiplication 0
  (positive_multiplication-3 nil 3631283018
   ("" (skeep)
    (("" (expand "*")
      (("" (use "positive_mult_fun")
        (("" (expand "positive?" 1)
          (("" (use "fun_matrix_idemp")
            (("" (replace -1 :hide? t)
              (("" (assert)
                (("" (ground)
                  (("1" (hide-all-but (-3 1))
                    (("1" (skeep)
                      (("1" (typepred "form_matfun(m1)")
                        (("1" (expand "eq")
                          (("1" (inst? -1)
                            (("1" (inst? 1)
                              (("1"
                                (replace -1 :hide? t)
                                (("1"
                                  (typepred "form_matfun(m2)")
                                  (("1"
                                    (expand "eq")
                                    (("1"
                                      (inst?)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but (-1 2))
                    (("2" (skeep)
                      (("2" (typepred "form_matfun(m1)")
                        (("2" (expand "eq")
                          (("2" (inst? -1)
                            (("2" (inst? 1)
                              (("2"
                                (replace -1 :hide? t)
                                (("2"
                                  (typepred "form_matfun(m2)")
                                  (("2"
                                    (expand "eq")
                                    (("2"
                                      (inst?)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((* const-decl "Measure_Matrix" measures nil)
    (positive? const-decl "bool" measures nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (mult const-decl "Measure_Mat_Fn" measures nil)
    (fun_matrix_idemp formula-decl nil measures nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" measures nil)
    (below type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (Measure_Mat_Fn type-eq-decl nil measures nil)
    (Measure_Matrix type-eq-decl nil measures nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (listn type-eq-decl nil listn "structures/")
    (eq const-decl "bool" measures nil)
    (form_matfun const-decl "{f | eq(m, f)}" measures nil)
    (positive_mult_fun formula-decl nil measures nil))
   nil)
  (positive_multiplication-2 nil 3575901626
   ("" (skeep)
    (("" (prop)
      (("1" (expand "positive?")
        (("1" (skeep)
          (("1" (expand "*")
            (("1"
              (typepred
               "max(LAMBDA (k: below(N)): (m1(j)(k) + m2(k)(j)))")
              (("1" (hide -1 -2)
                (("1" (skeep)
                  (("1" (replaces -2) (("1" (inst 1 "j" "jj") nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (expand "positive?")
          (("2" (expand "*")
            (("2" (inst 1 "j")
              (("2"
                (typepred
                 "max(LAMBDA (k: below(N)): (m1(j)(k) + m2(k)(j)))")
                (("2" (hide -3)
                  (("2" (inst -2 "k")
                    (("2" (replaces -3) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (positive_multiplication-1 nil 3563705220
   ("" (skeep)
    (("" (prop)
      (("1" (expand* "positive?" "positive?")
        (("1" (skeep -1)
          (("1" (expand "*")
            (("1"
              (name-replace "A"
               "LAMBDA (k: below(N)): (m1(j)(k) + m2(k)(j))" :hide?
               nil)
              (("1" (typepred "max(A)")
                (("1" (assert)
                  (("1" (skeep -3)
                    (("1" (inst 1 "j" "jj")
                      (("1" (split)
                        (("1" (flatten)
                          (("1" (replace -4 -3 rl)
                            (("1" (assert)
                              (("1"
                                (replace -4)
                                (("1"
                                  (expand "+" -3)
                                  (("1"
                                    (lift-if)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (replace -4 -3 rl)
                          (("2" (assert)
                            (("2" (replace -4)
                              (("2"
                                (expand "+" -3)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (replace -4 -3 rl)
                          (("3" (assert)
                            (("3" (replace -4)
                              (("3"
                                (expand "+" -3)
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand* "positive?" "positive?")
        (("2" (skeep -1)
          (("2" (inst 3 "j")
            (("2" (expand "*")
              (("2"
                (name-replace "A"
                 "LAMBDA (k: below(N)): (m1(j)(k) + m2(k)(j))" :hide?
                 nil)
                (("2" (split)
                  (("1" (typepred "max(A)")
                    (("1" (assert)
                      (("1" (split)
                        (("1" (hide -3)
                          (("1" (inst -2 "k")
                            (("1" (replace -4 -2 rl)
                              (("1"
                                (assert)
                                (("1"
                                  (replace -4)
                                  (("1"
                                    (expand "+" -2)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (inst -2 "k")
                          (("2" (assert)
                            (("2" (replace -5 -2 rl)
                              (("2"
                                (assert)
                                (("2"
                                  (replace -5)
                                  (("2"
                                    (expand "+" -2)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (typepred "max(A)")
                    (("2" (assert)
                      (("2" (hide -3)
                        (("2" (split)
                          (("1" (inst -2 "k")
                            (("1" (replace -4 -2 rl)
                              (("1"
                                (assert)
                                (("1"
                                  (replace -4)
                                  (("1"
                                    (expand "+" -2)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (inst -2 "k")
                            (("2" (replace -4 -2 rl)
                              (("2"
                                (assert)
                                (("2"
                                  (replace -4)
                                  (("2"
                                    (expand "+" -2)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (positive_commute 0
  (positive_commute-1 nil 3572298174
   ("" (skeep)
    (("" (rewrite "positive_multiplication")
      (("" (rewrite "positive_multiplication")
        (("" (skeep)
          (("" (inst 1 "k" "j") (("" (rewrite "add_commute") nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((positive_multiplication formula-decl nil measures nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" measures nil)
    (listn type-eq-decl nil listn "structures/")
    (Measure_Matrix type-eq-decl nil measures nil)
    (add_commute formula-decl nil measures nil)
    (get const-decl "Sign3" measures nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil))
   shostak))
 (positive_mult_fun_pos 0
  (positive_mult_fun_pos-1 nil 3653475586
   ("" (skeep)
    (("" (expand "mult")
      ((""
        (name-replace "M"
         "max(LAMBDA (k_1: below(N)): Plus3(f1(k)(k_1) , f2(k_1)(k)))")
        (("" (typepred "M")
          (("" (hide -3)
            (("" (inst -2 "k")
              (("" (expand "Plus3") (("" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mult const-decl "Measure_Mat_Fn" measures nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Measure_Mat_Fn type-eq-decl nil measures nil)
    (Plus3 const-decl "Sign3" measures nil)
    (max const-decl
         "{t: Sign3 | (FORALL i: f(i) <= t) AND (EXISTS j: f(j) = t)}"
         measures nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" measures nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (positive_mult_pos 0
  (positive_mult_pos-1 nil 3579628915
   ("" (skeep)
    (("" (expand "*")
      (("" (use "positive_mult_fun_pos")
        ((""
          (typepred
           "form_matrix(mult(form_matfun(m1), form_matfun(m2)))")
          (("" (hide -1 -2)
            (("" (expand "eq")
              (("" (inst? -1)
                (("" (replace -1 :hide? t)
                  (("" (assert)
                    (("" (hide 2)
                      (("" (expand "form_matfun")
                        (("" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((* const-decl "Measure_Matrix" measures nil)
    (mult const-decl "Measure_Mat_Fn" measures nil)
    (form_matrix const-decl "{m: Measure_Matrix | eq(m, f)}" measures
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" measures nil)
    (below type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (Measure_Mat_Fn type-eq-decl nil measures nil)
    (Measure_Matrix type-eq-decl nil measures nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (listn type-eq-decl nil listn "structures/")
    (eq const-decl "bool" measures nil)
    (form_matfun const-decl "{f | eq(m, f)}" measures nil)
    (positive_mult_fun_pos formula-decl nil measures nil))
   shostak))
 (positive_sum_fun 0
  (positive_sum_fun-1 nil 3653475979
   ("" (skeep)
    (("" (expand* "positive_fun?" "positive?")
      (("" (skosimp)
        (("" (expand "sum")
          (("" (expand "Plus3")
            (("" (lift-if)
              (("" (ground)
                (("1" (inst 3 "j!1") nil nil)
                 ("2" (inst 4 "j!1") nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((positive_fun? const-decl "bool" measures nil)
    (sum const-decl "Measure_Mat_Fn" measures nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" measures nil)
    (below type-eq-decl nil naturalnumbers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (Plus3 const-decl "Sign3" measures nil))
   nil))
 (positive_sum 0
  (positive_sum-1 nil 3572272345
   ("" (skeep)
    (("" (expand "positive?")
      (("" (expand "+ ")
        (("" (use "fun_matrix_idemp")
          (("" (replace -1 :hide? t)
            (("" (use "positive_sum_fun") (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((positive? const-decl "bool" measures nil)
    (fun_matrix_idemp formula-decl nil measures nil)
    (form_matfun const-decl "{f | eq(m, f)}" measures nil)
    (eq const-decl "bool" measures nil)
    (listn type-eq-decl nil listn "structures/")
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (Measure_Matrix type-eq-decl nil measures nil)
    (sum const-decl "Measure_Mat_Fn" measures nil)
    (Measure_Mat_Fn type-eq-decl nil measures nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" measures nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (positive_sum_fun formula-decl nil measures nil)
    (+ const-decl "Measure_Matrix" measures nil))
   shostak))
 (positive_sum_fun_positive_mult_fun 0
  (positive_sum_fun_positive_mult_fun-2 nil 3653482680
   ("" (skeep)
    (("" (rewrite "positive_mult_fun")
      (("" (expand "positive_fun?")
        (("" (skeep)
          (("" (expand "sum" -1) (("" (inst 1 "j" "j") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((positive_mult_fun formula-decl nil measures nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" measures nil)
    (below type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (Measure_Mat_Fn type-eq-decl nil measures nil)
    (sum const-decl "Measure_Mat_Fn" measures nil)
    (positive_fun? const-decl "bool" measures nil))
   nil)
  (positive_sum_fun_positive_mult_fun-1 nil 3653476141
   ("" (skeep)
    (("" (rewrite "positive_mult_fun")
      (("" (expand "positive?")
        (("" (skeep)
          (("" (expand "sum" -1) (("" (inst 1 "j" "j") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((Sign3 type-eq-decl nil sign3 "reals/")) nil))
 (positive_sum_positive_mult 0
  (positive_sum_positive_mult-1 nil 3564275031
   ("" (skeep)
    (("" (expand "*")
      (("" (expand "+ ")
        (("" (expand "positive?")
          (("" (use "fun_matrix_idemp")
            (("" (replace -1 :hide? t)
              (("" (use "fun_matrix_idemp")
                (("" (replace -1 :hide? t)
                  (("" (use "positive_sum_fun_positive_mult_fun")
                    (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((* const-decl "Measure_Matrix" measures nil)
    (positive? const-decl "bool" measures nil)
    (positive_sum_fun_positive_mult_fun formula-decl nil measures nil)
    (mult const-decl "Measure_Mat_Fn" measures nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" measures nil)
    (below type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (Measure_Mat_Fn type-eq-decl nil measures nil)
    (sum const-decl "Measure_Mat_Fn" measures nil)
    (Measure_Matrix type-eq-decl nil measures nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (listn type-eq-decl nil listn "structures/")
    (eq const-decl "bool" measures nil)
    (form_matfun const-decl "{f | eq(m, f)}" measures nil)
    (fun_matrix_idemp formula-decl nil measures nil)
    (+ const-decl "Measure_Matrix" measures nil))
   shostak))
 (compatible_is_positive 0
  (compatible_is_positive-2 nil 3575927794
   ("" (skeep)
    (("" (expand "compatible?")
      (("" (rewrite "positive_multiplication")
        (("" (skeep) (("" (inst 1 "j" "j") nil nil)) nil)) nil))
      nil))
    nil)
   ((compatible? const-decl "bool" measures nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Measure_Matrix type-eq-decl nil measures nil)
    (listn type-eq-decl nil listn "structures/")
    (N formal-const-decl "posnat" measures nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (positive_multiplication formula-decl nil measures nil))
   nil)
  (compatible_is_positive-1 nil 3572299450
   ("" (skeep)
    (("" (rewrite "positive_multiplication")
      (("" (expand "compatible?")
        (("" (skeep)
          (("" (expand "*" -1)
            ((""
              (typepred
               "max(LAMBDA (k: below(N)): (m3(j)(k) + m1(k)(j)))")
              ((""
                (name-replace "M_31"
                 "max(LAMBDA (k: below(N)): (m3(j)(k) + m1(k)(j)))")
                (("" (hide -1 -2)
                  (("" (skolem -1 "k")
                    (("" (inst 1 "k" "j")
                      (("" (replace -1 -2 rl)
                        (("" (hide -1)
                          (("" (expand "*" 1)
                            ((""
                              (typepred
                               "max(LAMBDA (k_1: below(N)): (m1(k)(k_1) + m2(k_1)(j)))")
                              ((""
                                (name-replace
                                 "M_12"
                                 "max(LAMBDA (k_1: below(N)): (m1(k)(k_1) + m2(k_1)(j)))")
                                ((""
                                  (hide -3)
                                  ((""
                                    (inst -2 "j")
                                    (("" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (compatible_positive_grafting 0
  (compatible_positive_grafting-1 nil 3575927827
   ("" (skeep)
    (("" (rewrite "positive_multiplication")
      (("" (lemma "compatible_is_positive")
        (("" (inst -1 "m2" "m3*m1")
          (("" (assert)
            (("" (hide -2)
              (("" (lemma "measure_matrix_assoc")
                (("" (expand "associative?")
                  (("" (inst -1 "m2" "m3" "m1")
                    (("" (replace -1 -2 rl)
                      (("" (hide -1)
                        (("" (lemma "positive_commute")
                          (("" (inst -1 "m2 * m3" "m1")
                            (("" (assert)
                              ((""
                                (hide -2)
                                ((""
                                  (lemma "measure_matrix_assoc")
                                  ((""
                                    (expand "associative?")
                                    ((""
                                      (inst -1 "m1" "m2" "m3")
                                      ((""
                                        (replace -1 -2 rl)
                                        ((""
                                          (hide -1)
                                          ((""
                                            (rewrite
                                             "positive_multiplication")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((positive_multiplication formula-decl nil measures nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" measures nil)
    (listn type-eq-decl nil listn "structures/")
    (Measure_Matrix type-eq-decl nil measures nil)
    (* const-decl "Measure_Matrix" measures nil)
    (associative? const-decl "bool" operator_defs nil)
    (positive_commute formula-decl nil measures nil)
    (measure_matrix_assoc formula-decl nil measures nil)
    (compatible_is_positive formula-decl nil measures nil))
   shostak))
 (defined_pos_mul_fun 0
  (defined_pos_mul_fun-1 nil 3653476476
   ("" (skeep)
    (("" (expand "defined_pos_fun?")
      (("" (flatten)
        (("" (expand "mult")
          ((""
            (typepred
             "max(LAMBDA (k_1: below(N)): Plus3(f1(i)(k_1) , f2(k_1)(k)))")
            (("" (hide -1 -3)
              (("" (inst -1 "j")
                (("" (replace -2 -1)
                  (("" (hide -2)
                    (("" (expand "Plus3")
                      (("" (assert)
                        (("" (lift-if) (("" (ground) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((defined_pos_fun? const-decl "bool" measures nil)
    (mult const-decl "Measure_Mat_Fn" measures nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" measures nil)
    (below type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (max const-decl
         "{t: Sign3 | (FORALL i: f(i) <= t) AND (EXISTS j: f(j) = t)}"
         measures nil)
    (Plus3 const-decl "Sign3" measures nil)
    (Measure_Mat_Fn type-eq-decl nil measures nil))
   nil))
 (defined_pos_mul 0
  (defined_pos_mul-1 nil 3589198898
   ("" (skeep)
    (("" (expand "defined_pos?")
      (("" (use "defined_pos_mul_fun")
        (("" (assert)
          (("" (expand "*")
            (("" (use "fun_matrix_idemp") (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((defined_pos? const-decl "bool" measures nil)
    (fun_matrix_idemp formula-decl nil measures nil)
    (mult const-decl "Measure_Mat_Fn" measures nil)
    (* const-decl "Measure_Matrix" measures nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" measures nil)
    (below type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (Measure_Mat_Fn type-eq-decl nil measures nil)
    (Measure_Matrix type-eq-decl nil measures nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (listn type-eq-decl nil listn "structures/")
    (eq const-decl "bool" measures nil)
    (form_matfun const-decl "{f | eq(m, f)}" measures nil)
    (defined_pos_mul_fun formula-decl nil measures nil))
   nil))
 (defined_pos_decomp_fun 0
  (defined_pos_decomp_fun-1 nil 3653476731
   ("" (skeep)
    (("" (prop)
      (("1" (expand "defined_pos_fun?")
        (("1" (expand "mult")
          (("1"
            (name-replace "M"
             "max(LAMBDA (k: below(N)): Plus3(f1(i)(k),f2(k)(j)))")
            (("1" (typepred "M")
              (("1" (hide -1 -2)
                (("1" (skeep)
                  (("1" (inst 2 "j_1")
                    (("1" (expand "Plus3")
                      (("1" (lift-if)
                        (("1" (assert) (("1" (ground) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (expand "defined_pos_fun?")
          (("2" (flatten)
            (("2" (expand "mult")
              (("2"
                (name-replace "M"
                 "max(LAMBDA (k: below(N)): Plus3(f1(i)(k),f2(k)(j)))")
                (("2" (typepred "M")
                  (("2" (hide -1 -3)
                    (("2" (inst -1 "k")
                      (("2" (expand "Plus3")
                        (("2" (assert)
                          (("2" (lift-if) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mult const-decl "Measure_Mat_Fn" measures nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (Measure_Mat_Fn type-eq-decl nil measures nil)
    (Plus3 const-decl "Sign3" measures nil)
    (max const-decl
         "{t: Sign3 | (FORALL i: f(i) <= t) AND (EXISTS j: f(j) = t)}"
         measures nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" measures nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (defined_pos_fun? const-decl "bool" measures nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (defined_pos_decomposition 0
  (defined_pos_decomposition-1 nil 3590507616
   ("" (skeep)
    (("" (expand "*")
      (("" (expand "defined_pos?")
        (("" (use "fun_matrix_idemp")
          (("" (replace -1 :hide? t)
            (("" (use "defined_pos_decomp_fun") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((* const-decl "Measure_Matrix" measures nil)
    (fun_matrix_idemp formula-decl nil measures nil)
    (form_matfun const-decl "{f | eq(m, f)}" measures nil)
    (eq const-decl "bool" measures nil)
    (listn type-eq-decl nil listn "structures/")
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (Measure_Matrix type-eq-decl nil measures nil)
    (mult const-decl "Measure_Mat_Fn" measures nil)
    (Measure_Mat_Fn type-eq-decl nil measures nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" measures nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (defined_pos_decomp_fun formula-decl nil measures nil)
    (defined_pos? const-decl "bool" measures nil))
   shostak))
 (positive_pos_mul_fun 0
  (positive_pos_mul_fun-1 nil 3653477299
   ("" (skeep)
    (("" (expand "mult")
      ((""
        (name-replace "M"
         "max(LAMBDA (k_1: below(N)): Plus3(f1(i)(k_1) , f2(k_1)(k)))")
        (("" (typepred "M")
          (("" (assert)
            (("" (hide -3)
              (("" (inst -2 "j") (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mult const-decl "Measure_Mat_Fn" measures nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Measure_Mat_Fn type-eq-decl nil measures nil)
    (Plus3 const-decl "Sign3" measures nil)
    (max const-decl
         "{t: Sign3 | (FORALL i: f(i) <= t) AND (EXISTS j: f(j) = t)}"
         measures nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (N formal-const-decl "posnat" measures nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (positive_pos_mul 0
  (positive_pos_mul-1 nil 3589236009
   ("" (skeep)
    (("" (expand "*")
      ((""
        (typepred
         "form_matrix(mult(form_matfun(m1), form_matfun(m2)))")
        (("" (hide -1 -2)
          (("" (expand "eq")
            (("" (inst?)
              (("" (replace -1 :hide? t)
                (("" (lemma "positive_pos_mul_fun")
                  (("" (inst? -1 :where 1)
                    (("" (inst -1 "j")
                      (("" (assert)
                        (("" (hide 2)
                          (("" (expand "form_matfun")
                            (("" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((* const-decl "Measure_Matrix" measures nil)
    (positive_pos_mul_fun formula-decl nil measures nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" measures nil)
    (Measure_Mat_Fn type-eq-decl nil measures nil)
    (listn type-eq-decl nil listn "structures/")
    (Measure_Matrix type-eq-decl nil measures nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (eq const-decl "bool" measures nil)
    (form_matrix const-decl "{m: Measure_Matrix | eq(m, f)}" measures
     nil)
    (mult const-decl "Measure_Mat_Fn" measures nil)
    (form_matfun const-decl "{f | eq(m, f)}" measures nil))
   shostak))
 (positive_pos_decomp_fun 0
  (positive_pos_decomp_fun-1 nil 3653477791
   ("" (skeep)
    (("" (prop)
      (("1" (expand "mult")
        (("1"
          (name-replace "M"
           "max(LAMBDA (k: below(N)): Plus3(f1(i)(k),f2(k)(j)))")
          (("1" (typepred "M")
            (("1" (hide -1 -2) (("1" (assert) nil nil)) nil)) nil))
          nil))
        nil)
       ("2" (expand "mult")
        (("2"
          (name-replace "M"
           "max(LAMBDA (k: below(N)): Plus3(f1(i)(k),f2(k)(j)))")
          (("2" (typepred "M")
            (("2" (hide -3)
              (("2" (skeep)
                (("2" (inst -2 "k") (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" measures nil)
    (below type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (max const-decl
         "{t: Sign3 | (FORALL i: f(i) <= t) AND (EXISTS j: f(j) = t)}"
         measures nil)
    (Plus3 const-decl "Sign3" measures nil)
    (Measure_Mat_Fn type-eq-decl nil measures nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (mult const-decl "Measure_Mat_Fn" measures nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (positive_pos_decomposition 0
  (positive_pos_decomposition-1 nil 3590612558
   ("" (skeep)
    (("" (expand "*")
      ((""
        (typepred
         "form_matrix(mult(form_matfun(m1), form_matfun(m2)))")
        (("" (hide -1 -2)
          (("" (expand "eq")
            (("" (inst?)
              (("" (replace -1 :hide? t)
                (("" (use "positive_pos_decomp_fun")
                  (("" (expand "form_matfun") (("" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((* const-decl "Measure_Matrix" measures nil)
    (positive_pos_decomp_fun formula-decl nil measures nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Sign3 type-eq-decl nil sign3 "reals/")
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (N formal-const-decl "posnat" measures nil)
    (Measure_Mat_Fn type-eq-decl nil measures nil)
    (listn type-eq-decl nil listn "structures/")
    (Measure_Matrix type-eq-decl nil measures nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (eq const-decl "bool" measures nil)
    (form_matrix const-decl "{m: Measure_Matrix | eq(m, f)}" measures
     nil)
    (mult const-decl "Measure_Mat_Fn" measures nil)
    (form_matfun const-decl "{f | eq(m, f)}" measures nil))
   shostak)))


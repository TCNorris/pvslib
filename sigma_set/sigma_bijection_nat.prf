(sigma_bijection_nat
 (series_bijection_TCC1 0
  (series_bijection_TCC1-1 nil 3323008883
   ("" (skosimp) (("" (assert) nil nil)) nil)
   ((posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak (series_bijection subtype "0" "below[1 + n]")))
 (series_bijection 0
  (series_bijection-2 "" 3758855579
   ("" (skosimp*)
    (("" (expand "series")
      (("" (lemma "sigma_bijection[below[n!1+1]]" ("low" "0" "high" "n!1"))
        (("1" (expand "o")
          (("1" (expand "extend")
            (("1"
              (inst - "LAMBDA (x: nat):
               IF x < 1 + n!1 THEN a!1(x) ELSE a!1(0) ENDIF")
              (("1" (expand "restrict")
                (("1" (inst - "phi!1")
                  (("1" (expand "restrict")
                    (("1"
                      (case "forall (m:nat): m <= n!1 => sigma[subrange_T[below[n!1 + 1]](0, n!1)]
          (0, m,
           LAMBDA (s_1: subrange_T[below[n!1 + 1]](0, n!1)): a!1(s_1)) = sigma(0, m, a!1)")
                      (("1" (inst - "n!1")
                        (("1" (assert)
                          (("1" (replace -1)
                            (("1" (replace -2 1)
                              (("1" (hide -1 -2)
                                (("1"
                                  (case "forall (m:nat): m <= n!1 => sigma[subrange_T[below[n!1 + 1]](0, n!1)]
          (0, m,
           LAMBDA (x_1: subrange_T[below[n!1 + 1]](0, n!1)):
             IF phi!1(x_1) < 1 + n!1 THEN a!1(phi!1(x_1))
             ELSE a!1(0)
             ENDIF)
       =
       sigma(0, m,
             LAMBDA (x: nat):
               IF x < 1 + n!1 THEN a!1(phi!1(x)) ELSE a!1(0) ENDIF)")
                                  (("1" (inst - "n!1")
                                    (("1" (assert) nil nil)) nil)
                                   ("2" (hide 2)
                                    (("2" (induct "m")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "sigma")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (typepred "phi!1(0)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "sigma")
                                                  (("1" (propax) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skosimp*)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "sigma" 1)
                                            (("2"
                                              (typepred "phi!1(1 + j!1)")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (hide 2)
                                        (("3" (grind) nil nil))
                                        nil)
                                       ("4"
                                        (hide 2)
                                        (("4" (grind) nil nil))
                                        nil)
                                       ("5"
                                        (hide 2)
                                        (("5" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3" (hide-all-but 1)
                                    (("3" (skosimp*) (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide -1 2)
                        (("2" (induct "m")
                          (("1" (assert)
                            (("1" (expand "sigma")
                              (("1" (expand "sigma") (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skosimp*)
                            (("2" (assert)
                              (("2" (expand "sigma" 1)
                                (("2" (propax) nil nil)) nil))
                              nil))
                            nil)
                           ("3" (hide 2)
                            (("3" (skosimp*) (("3" (assert) nil nil)) nil))
                            nil)
                           ("4" (hide 2) (("4" (grind) nil nil)) nil)
                           ("5" (hide 2) (("5" (grind) nil nil)) nil))
                          nil))
                        nil)
                       ("3" (hide -1 2) (("3" (grind) nil nil)) nil)
                       ("4" (hide -1 2) (("4" (grind) nil nil)) nil)
                       ("5" (hide -1 2) (("5" (grind) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (typepred "phi!1")
                      (("2" (expand "bijective?")
                        (("2" (flatten)
                          (("2" (split)
                            (("1" (hide -2)
                              (("1" (expand "injective?")
                                (("1" (skosimp) (("1" (assert) nil nil)) nil))
                                nil))
                              nil)
                             ("2" (hide -1)
                              (("2" (expand "restrict")
                                (("2" (expand "surjective?")
                                  (("2" (typepred "phi!1")
                                    (("2" (expand "bijective?")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (skeep :preds? t)
                                          (("2"
                                            (inst? -)
                                            (("2"
                                              (skeep :preds? t)
                                              (("2" (inst?) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2) (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((series const-decl "sequence[real]" series series)
    (O const-decl "T3" function_props nil)
    (sequence type-eq-decl nil sequences nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (restrict const-decl "R" restrict nil)
    (restrict_of_inj_is_inj application-judgement "(injective?[S, R])"
     restrict nil)
    (n!1 skolem-const-decl "nat" sigma_bijection_nat nil)
    (subrange_T type-eq-decl nil sigma_bijection nil)
    (bijective? const-decl "bool" functions nil)
    (phi!1 skolem-const-decl "(bijective?[below[1 + n!1], below[1 + n!1]])"
     sigma_bijection_nat nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (T_low type-eq-decl nil sigma reals) (T_high type-eq-decl nil sigma reals)
    (sigma def-decl "real" sigma reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sigma_0_neg formula-decl nil sigma_nat reals)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (surjective? const-decl "bool" functions nil)
    (injective? const-decl "bool" functions nil)
    (extend const-decl "R" extend nil)
    (integer nonempty-type-from-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sigma_bijection formula-decl nil sigma_bijection nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil))
   shostak)
  (series_bijection-1 nil 3323009119
   ("" (skosimp*)
    (("" (expand "series")
      (("" (lemma "sigma_bijection[below[n!1+1]]" ("low" "0" "high" "n!1"))
        (("1" (expand "o")
          (("1" (expand "extend")
            (("1"
              (inst - "LAMBDA (x: nat):
               IF x < 1 + n!1 THEN a!1(x) ELSE a!1(0) ENDIF")
              (("1" (expand "restrict")
                (("1" (inst - "phi!1")
                  (("1" (expand "restrict")
                    (("1"
                      (case "forall (m:nat): m <= n!1 => sigma[subrange_T[below[n!1 + 1]](0, n!1)]
          (0, m,
           LAMBDA (s_1: subrange_T[below[n!1 + 1]](0, n!1)): a!1(s_1)) = sigma(0, m, a!1)")
                      (("1" (inst - "n!1")
                        (("1" (assert)
                          (("1" (replace -1)
                            (("1" (replace -2 1)
                              (("1" (hide -1 -2)
                                (("1"
                                  (case "forall (m:nat): m <= n!1 => sigma[subrange_T[below[n!1 + 1]](0, n!1)]
          (0, m,
           LAMBDA (x_1: subrange_T[below[n!1 + 1]](0, n!1)):
             IF phi!1(x_1) < 1 + n!1 THEN a!1(phi!1(x_1))
             ELSE a!1(0)
             ENDIF)
       =
       sigma(0, m,
             LAMBDA (x: nat):
               IF x < 1 + n!1 THEN a!1(phi!1(x)) ELSE a!1(0) ENDIF)")
                                  (("1" (inst - "n!1")
                                    (("1" (assert) nil nil)) nil)
                                   ("2" (hide 2)
                                    (("2" (induct "m")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "sigma")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (typepred "phi!1(0)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "sigma")
                                                  (("1" (propax) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skosimp*)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "sigma" 1)
                                            (("2"
                                              (typepred "phi!1(1 + j!1)")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (hide 2)
                                        (("3" (grind) nil nil))
                                        nil)
                                       ("4"
                                        (hide 2)
                                        (("4" (grind) nil nil))
                                        nil)
                                       ("5"
                                        (hide 2)
                                        (("5" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3" (hide-all-but 1)
                                    (("3" (skosimp*) (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide -1 2)
                        (("2" (induct "m")
                          (("1" (assert)
                            (("1" (expand "sigma")
                              (("1" (expand "sigma") (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skosimp*)
                            (("2" (assert)
                              (("2" (expand "sigma" 1)
                                (("2" (propax) nil nil)) nil))
                              nil))
                            nil)
                           ("3" (hide 2)
                            (("3" (skosimp*) (("3" (assert) nil nil)) nil))
                            nil)
                           ("4" (hide 2) (("4" (grind) nil nil)) nil)
                           ("5" (hide 2) (("5" (grind) nil nil)) nil))
                          nil))
                        nil)
                       ("3" (hide -1 2) (("3" (grind) nil nil)) nil)
                       ("4" (hide -1 2) (("4" (grind) nil nil)) nil)
                       ("5" (hide -1 2) (("5" (grind) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (typepred "phi!1")
                      (("2" (expand "bijective?")
                        (("2" (flatten)
                          (("2" (split)
                            (("1" (hide -2)
                              (("1" (expand "injective?")
                                (("1" (skosimp) (("1" (assert) nil nil)) nil))
                                nil))
                              nil)
                             ("2" (hide -1)
                              (("2" (expand "restrict")
                                (("2" (expand "surjective?")
                                  (("2" (typepred "phi!1")
                                    (("2" (expand "bijective?")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (hide-all-but (-1 1))
                                          (("2"
                                            (expand "injective?")
                                            (("2"
                                              (skosimp*)
                                              (("2"
                                                (inst - "x1!1" "x2!1")
                                                (("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (expand "restrict")
                              (("3" (expand "surjective?")
                                (("3" (skosimp)
                                  (("3" (inst - "y!1")
                                    (("3" (skosimp)
                                      (("3" (inst + "x!1") nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2) (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((sigma_bijection formula-decl nil sigma_bijection nil)
    (sigma_0_neg formula-decl nil sigma_nat reals)
    (sigma def-decl "real" sigma reals) (T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals)
    (subrange_T type-eq-decl nil sigma_bijection nil))
   shostak)))


(sigma_countable
 (sigma_TCC1 0
  (sigma_TCC1-1 nil 3322368543
   ("" (skosimp)
    (("" (lemma "nonempty_card" ("S" "X!1"))
      (("1" (expand "nonempty?") (("1" (assert) nil nil)) nil)
       ("2" (propax) nil nil))
      nil))
    nil)
   ((T formal-type-decl nil sigma_countable nil)
    (countable_set nonempty-type-eq-decl nil countability sets_aux)
    (is_countable const-decl "bool" countability sets_aux)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonempty? const-decl "bool" sets nil))
   shostak (sigma subtype "0" "T_low[below[card[T](X)]]")))
 (sigma_TCC2 0
  (sigma_TCC2-1 nil 3322368543
   ("" (skosimp)
    (("" (lemma "nonempty_card" ("S" "X!1"))
      (("1" (expand "nonempty?") (("1" (assert) nil nil)) nil)
       ("2" (propax) nil nil))
      nil))
    nil)
   ((T formal-type-decl nil sigma_countable nil)
    (countable_set nonempty-type-eq-decl nil countability sets_aux)
    (is_countable const-decl "bool" countability sets_aux)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonempty? const-decl "bool" sets nil))
   shostak
   (sigma subtype
          "(number_fields.-)(finite_sets[sigma_countable.T].card(sigma_countable.X), 1)"
          "T_high[below[card[T](X)]]")))
 (sigma_TCC3 0
  (sigma_TCC3-1 nil 3322368684
   ("" (skosimp)
    (("" (skosimp) (("" (typepred "y!1") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil sigma_countable nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (is_countable const-decl "bool" countability sets_aux)
    (countable_set nonempty-type-eq-decl nil countability sets_aux)
    (below type-eq-decl nil nat_types nil))
   shostak
   (sigma assuming "reals@sigma[below[card[T](X)]].sigma"
          "connected_domain: ASSUMPTION (FORALL (x, y: sigma.T), (z: integers.integer): booleans.IMPLIES(booleans.AND(reals.<=(x, z), reals.<=(z, y)), sigma.T_pred(z)))")))
 (sigma_TCC4 0
  (sigma_TCC4-1 nil 3322368684
   ("" (skosimp) (("" (rewrite "countably_infinite_def") nil nil)) nil)
   ((countably_infinite_def formula-decl nil countable_props sets_aux)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_countable const-decl "bool" countability sets_aux)
    (countable_set nonempty-type-eq-decl nil countability sets_aux)
    (T formal-type-decl nil sigma_countable nil))
   shostak (sigma subtype "sigma_countable.X" "countably_infinite_set[T]")))
 (sigma_TCC5 0
  (sigma_TCC5-1 nil 3405668249
   ("" (skosimp)
    (("" (typepred "f!1")
      (("" (expand "convergent?")
        (("" (assert)
          (("" (expand "o")
            ((""
              (name-replace "FF"
               "LAMBDA (x: nat): f!1(denumerable_enumeration(X!1)(x))")
              (("1" (expand "absconvergent?")
                (("1" (hide 1 2)
                  (("1"
                    (lemma "absconvergent_series_is_convergent" ("x" "FF"))
                    (("1" (expand "convergent?") (("1" (propax) nil nil)) nil)
                     ("2" (expand "absconvergent?") (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (typepred "X!1")
                  (("2" (rewrite "countably_infinite_def") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((convergent? const-decl "bool" countable_convergence nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (countable_set nonempty-type-eq-decl nil countability sets_aux)
    (is_countable const-decl "bool" countability sets_aux)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil sigma_countable nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (countably_infinite_set type-eq-decl nil countability sets_aux)
    (is_countably_infinite const-decl "bool" countability sets_aux)
    (denumerable_enumeration const-decl "[nat -> (X)]" denumerable_enumeration
     nil)
    (absconvergent_series nonempty-type-eq-decl nil absconv_series series)
    (sequence type-eq-decl nil sequences nil)
    (absconvergent_series_is_convergent judgement-tcc nil absconv_series
     series)
    (absconvergent? const-decl "bool" absconv_series series)
    (countably_infinite_def formula-decl nil countable_props sets_aux)
    (O const-decl "T3" function_props nil)
    (convergent? const-decl "bool" convergence_sequences analysis))
   nil
   (sigma subtype
          "series.series(function_props[nat, sigma_countable.T, real].o(sigma_countable.f, denumerable_enumeration[sigma_countable.T].denumerable_enumeration(sigma_countable.X)))"
          "(convergence_sequences.convergent?)")))
 (sigma_empty_TCC1 0
  (sigma_empty_TCC1-1 nil 3322640566 ("" (grind) nil nil)
   ((injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (T formal-type-decl nil sigma_countable nil)
    (denumerable_enumeration const-decl "[nat -> (X)]" denumerable_enumeration
     nil)
    (O const-decl "T3" function_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (abs const-decl "sequence[real]" series series)
    (sigma def-decl "real" sigma reals)
    (series const-decl "sequence[real]" series series)
    (convergence const-decl "bool" convergence_sequences analysis)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (absconvergent? const-decl "bool" absconv_series series)
    (convergent? const-decl "bool" countable_convergence nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (finite_emptyset name-judgement "finite_set[T]" sigma_countable nil)
    (finite_emptyset name-judgement "finite_set[T]" countable_props sets_aux)
    (finite_emptyset name-judgement "finite_set" finite_sets nil))
   shostak
   (sigma_empty subtype "sigma_countable.g"
    "(countable_convergence[sigma_countable.T].convergent?(sets[sigma_countable.T].emptyset))")))
 (sigma_empty 0
  (sigma_empty-1 nil 3322641284
   ("" (skosimp)
    (("" (expand "sigma") (("" (rewrite "emptyset_is_empty?") nil nil)) nil))
    nil)
   ((finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set[T]" countable_props sets_aux)
    (finite_emptyset name-judgement "finite_set[T]" sigma_countable nil)
    (sigma const-decl "real" sigma_countable nil)
    (T formal-type-decl nil sigma_countable nil)
    (emptyset const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (emptyset_is_empty? formula-decl nil sets_lemmas nil))
   shostak))
 (sigma_finite_TCC1 0
  (sigma_finite_TCC1-2 nil 3508520761
   ("" (skosimp)
    (("" (typepred "F!1")
      (("" (expand "convergent?") (("" (propax) nil nil)) nil)) nil))
    nil)
   ((non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil sigma_countable nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (convergent? const-decl "bool" countable_convergence nil))
   nil
   (sigma_finite subtype "sigma_countable.g"
    "(countable_convergence[sigma_countable.T].convergent?(sigma_countable.F))"))
  (sigma_finite_TCC1-1 nil 3322640566
   ("" (skosimp*)
    (("" (typepred "F!1")
      (("" (lemma "finite_countable" ("x" "F!1")) (("" (propax) nil nil))
        nil))
      nil))
    nil)
   ((non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (finite_countable judgement-tcc nil countable_props sets_aux))
   shostak
   (sigma_finite subtype "sigma_countable.g"
    "(countable_convergence[sigma_countable.T].convergent?(sigma_countable.F))")))
 (sigma_finite_TCC2 0
  (sigma_finite_TCC2-2 nil 3508521550
   ("" (skosimp)
    (("" (assert)
      (("" (typepred "n!1")
        (("" (replace -2)
          (("" (assert)
            (("" (typepred "F!1")
              (("" (lemma "nonempty_card" ("S" "F!1"))
                (("" (expand "nonempty?") (("" (propax) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (T formal-type-decl nil sigma_countable nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (nonempty? const-decl "bool" sets nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil))
   nil (sigma_finite subtype "0" "T_low[below[1 + n]]"))
  (sigma_finite_TCC2-1 nil 3322640566
   ("" (skosimp)
    (("" (typepred "F!1")
      (("" (expand "convergent?") (("" (propax) nil nil)) nil)) nil))
    nil)
   ((non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (convergent? const-decl "bool" countable_convergence nil))
   shostak (sigma_finite subtype "0" "T_low[below[1 + n]]")))
 (sigma_finite_TCC3 0
  (sigma_finite_TCC3-1 nil 3322640566
   ("" (skosimp)
    (("" (assert)
      (("" (typepred "n!1")
        (("" (replace -2)
          (("" (assert)
            (("" (typepred "F!1")
              (("" (lemma "nonempty_card" ("S" "F!1"))
                (("" (expand "nonempty?") (("" (propax) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (T formal-type-decl nil sigma_countable nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (nonempty? const-decl "bool" sets nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil))
   shostak (sigma_finite subtype "sigma_countable.n" "T_high[below[1 + n]]")))
 (sigma_finite_TCC4 0
  (sigma_finite_TCC4-2 nil 3508520831
   ("" (skosimp*) (("" (replace -1) (("" (assert) nil nil)) nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil))
   nil
   (sigma_finite subtype
    "function_props[below[card[T](F)], sigma_countable.T, real].o(sigma_countable.g, finite_enumeration[sigma_countable.T].finite_enumeration(sigma_countable.F))"
    "[below[1 + n] -> real]"))
  (sigma_finite_TCC4-1 nil 3322640566
   ("" (skosimp)
    (("" (typepred "F!1")
      (("" (rewrite "empty_card") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (empty_card formula-decl nil finite_sets nil))
   shostak
   (sigma_finite subtype
    "function_props[below[card[T](F)], sigma_countable.T, real].o(sigma_countable.g, finite_enumeration[sigma_countable.T].finite_enumeration(sigma_countable.F))"
    "[below[1 + n] -> real]")))
 (sigma_finite_TCC5 0
  (sigma_finite_TCC5-1 nil 3322640566
   ("" (skosimp*) (("" (replace -1) (("" (assert) nil nil)) nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   shostak
   (sigma_finite assuming "reals@sigma[below[1 + n]].sigma"
    "connected_domain: ASSUMPTION (FORALL (x, y: sigma.T), (z: integers.integer): booleans.IMPLIES(booleans.AND(reals.<=(x, z), reals.<=(z, y)), sigma.T_pred(z)))")))
 (sigma_finite 0
  (sigma_finite-1 nil 3322641469
   ("" (skosimp)
    (("" (assert) (("" (expand "sigma" 1 1) (("" (propax) nil nil)) nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (sigma const-decl "real" sigma_countable nil))
   shostak))
 (sigma_singleton_TCC1 0
  (sigma_singleton_TCC1-1 nil 3351597966 ("" (grind) nil nil)
   ((injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (T formal-type-decl nil sigma_countable nil)
    (denumerable_enumeration const-decl "[nat -> (X)]" denumerable_enumeration
     nil)
    (O const-decl "T3" function_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (abs const-decl "sequence[real]" series series)
    (sigma def-decl "real" sigma reals)
    (series const-decl "sequence[real]" series series)
    (convergence const-decl "bool" convergence_sequences analysis)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (absconvergent? const-decl "bool" absconv_series series)
    (convergent? const-decl "bool" countable_convergence nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nonempty_singleton_finite application-judgement "non_empty_finite_set[T]"
     sigma_countable nil))
   nil
   (sigma_singleton subtype "sigma_countable.g"
    "(countable_convergence[sigma_countable.T].convergent?(sets[sigma_countable.T].singleton(sigma_countable.t)))")))
 (sigma_singleton 0
  (sigma_singleton-1 nil 3351597967
   ("" (skosimp)
    (("" (lemma "sigma_finite" ("F" "singleton(t!1)" "g" "g!1"))
      (("" (rewrite "card_singleton")
        (("" (assert)
          (("" (replace -1)
            (("" (hide -1)
              (("" (expand "sigma")
                (("" (expand "o ")
                  (("" (typepred "finite_enumeration(singleton(t!1))(0)")
                    (("" (expand "singleton")
                      (("" (assert)
                        (("" (replace -1)
                          (("" (expand "sigma") (("" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil sigma_countable nil)
    (sigma_finite formula-decl nil sigma_countable nil)
    (nonempty_singleton_finite application-judgement "non_empty_finite_set[T]"
     sigma_countable nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (O const-decl "T3" function_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (below type-eq-decl nil nat_types nil)
    (finite_enumeration const-decl "[below[card(X)] -> (X)]"
     finite_enumeration nil)
    (sigma def-decl "real" sigma reals)
    (card_singleton formula-decl nil finite_sets nil))
   shostak))
 (sigma_infinite_TCC1 0
  (sigma_infinite_TCC1-1 nil 3322642826
   ("" (skosimp)
    (("" (typepred "f!1")
      (("" (expand "convergent?")
        (("" (typepred "X!1")
          (("" (rewrite "countably_infinite_def")
            (("" (flatten)
              (("" (assert)
                ((""
                  (lemma "absconvergent_series_is_convergent"
                   ("x" "(o[nat, T, real]
                               (f!1, denumerable_enumeration[T](X!1)))"))
                  (("" (assert)
                    (("" (expand "convergent?") (("" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((countably_infinite_set type-eq-decl nil countability sets_aux)
    (is_countably_infinite const-decl "bool" countability sets_aux)
    (convergent? const-decl "bool" countable_convergence nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (countable_set nonempty-type-eq-decl nil countability sets_aux)
    (is_countable const-decl "bool" countability sets_aux)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil sigma_countable nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (denumerable_enumeration const-decl "[nat -> (X)]" denumerable_enumeration
     nil)
    (O const-decl "T3" function_props nil)
    (absconvergent_series nonempty-type-eq-decl nil absconv_series series)
    (absconvergent? const-decl "bool" absconv_series series)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (absconvergent_series_is_convergent judgement-tcc nil absconv_series
     series)
    (countably_infinite_def formula-decl nil countable_props sets_aux)
    (convergent? const-decl "bool" convergence_sequences analysis))
   shostak
   (sigma_infinite subtype
    "series.series(function_props[nat, sigma_countable.T, real].o(sigma_countable.f, denumerable_enumeration[sigma_countable.T].denumerable_enumeration(sigma_countable.X)))"
    "(convergence_sequences.convergent?)")))
 (sigma_infinite 0
  (sigma_infinite-1 nil 3322642960
   ("" (skosimp)
    (("" (typepred "X!1")
      (("" (expand "sigma" 1 1)
        (("" (lemma "infinite_countably_infinite")
          (("" (inst - "X!1")
            (("" (assert)
              (("" (lift-if 2)
                (("" (case-replace "empty?(X!1)")
                  (("1" (hide 2)
                    (("1" (expand "is_countably_infinite")
                      (("1" (skosimp)
                        (("1" (typepred "f!2")
                          (("1"
                            (lemma "bijective_inverse_exists[(X!1),nat]"
                             ("f" "f!2"))
                            (("1" (expand "exists1")
                              (("1" (flatten)
                                (("1" (skolem -1 ("gg"))
                                  (("1" (expand "empty?")
                                    (("1" (inst - "gg(0)")
                                      (("1"
                                        (expand "member")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((countably_infinite_set type-eq-decl nil countability sets_aux)
    (is_countably_infinite const-decl "bool" countability sets_aux)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil sigma_countable nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (infinite_countably_infinite judgement-tcc nil countable_props sets_aux)
    (empty? const-decl "bool" sets nil)
    (bijective? const-decl "bool" functions nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (exists1 const-decl "bool" exists1 nil)
    (member const-decl "bool" sets nil)
    (bijective_inverse_exists formula-decl nil function_inverse_def nil)
    (sigma const-decl "real" sigma_countable nil))
   shostak))
 (sigma_disjoint_union_TCC1 0
  (sigma_disjoint_union_TCC1-1 nil 3323139931
   ("" (skosimp*)
    (("" (typepred "f!1")
      (("" (lemma "convergent_subset")
        (("" (inst - "X!1" "union(X!1, Y!1)" "f!1")
          (("" (split)
            (("1" (propax) nil nil)
             ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)
             ("3" (propax) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((union const-decl "set" sets nil)
    (convergent? const-decl "bool" countable_convergence nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (countable_set nonempty-type-eq-decl nil countability sets_aux)
    (is_countable const-decl "bool" countability sets_aux)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil sigma_countable nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (countable_union application-judgement "countable_set[T]" sigma_countable
     nil)
    (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (convergent_subset formula-decl nil countable_convergence nil))
   shostak
   (sigma_disjoint_union subtype "sigma_countable.f"
    "(countable_convergence[sigma_countable.T].convergent?(sigma_countable.X))")))
 (sigma_disjoint_union_TCC2 0
  (sigma_disjoint_union_TCC2-1 nil 3323139931
   ("" (skosimp)
    (("" (lemma "sigma_disjoint_union_TCC1" ("X" "Y!1" "Y" "X!1" "f" "f!1"))
      (("1" (assert)
        (("1" (hide 2)
          (("1" (expand "disjoint?")
            (("1" (rewrite "intersection_commutative") nil nil)) nil))
          nil))
        nil)
       ("2" (typepred "f!1")
        (("2" (hide -2 2) (("2" (rewrite "union_commutative") nil nil)) nil))
        nil))
      nil))
    nil)
   ((union const-decl "set" sets nil)
    (convergent? const-decl "bool" countable_convergence nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (countable_set nonempty-type-eq-decl nil countability sets_aux)
    (is_countable const-decl "bool" countability sets_aux)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil sigma_countable nil)
    (sigma_disjoint_union_TCC1 subtype-tcc nil sigma_countable nil)
    (countable_union application-judgement "countable_set[T]" sigma_countable
     nil)
    (intersection_commutative formula-decl nil sets_lemmas nil)
    (disjoint? const-decl "bool" sets nil)
    (countable_intersection1 application-judgement "countable_set[T]"
     sigma_countable nil)
    (union_commutative formula-decl nil sets_lemmas nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   shostak
   (sigma_disjoint_union subtype "sigma_countable.f"
    "(countable_convergence[sigma_countable.T].convergent?(sigma_countable.Y))")))
 (sigma_disjoint_union 0
  (sigma_disjoint_union-2 "" 3790094130
   (""
    (case "FORALL (X:finite_set[T], Y:countably_infinite_set[T], f:(convergent?(union(X, Y)))):
        disjoint?(X, Y) IMPLIES
         sigma(union(X, Y), f) = sigma(X, f) + sigma(Y, f)")
    (("1" (skosimp)
      (("1" (typepred "X!1")
        (("1" (typepred "Y!1")
          (("1" (case "is_finite(X!1)")
            (("1" (case "is_finite(Y!1)")
              (("1" (hide -5 -3 -4)
                (("1" (name "NX" "card(X!1)")
                  (("1" (name "NY" "card(Y!1)")
                    (("1" (case-replace "X!1=emptyset[T]")
                      (("1" (rewrite "union_commutative" 1)
                        (("1" (rewrite "union_empty")
                          (("1" (rewrite "sigma_empty")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (case-replace "Y!1=emptyset[T]")
                        (("1" (rewrite "sigma_empty")
                          (("1" (rewrite "union_empty")
                            (("1" (assert) nil nil)) nil))
                          nil)
                         ("2" (rewrite "emptyset_is_empty?" 1 :dir rl)
                          (("2" (rewrite "emptyset_is_empty?" 2 :dir rl)
                            (("2" (typepred "f!1")
                              (("2" (expand "sigma")
                                (("2" (assert)
                                  (("2" (lemma "finite_union[T]")
                                    (("2" (inst - "X!1" "Y!1")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (case-replace
                                           "empty?(union(X!1, Y!1))")
                                          (("1"
                                            (hide-all-but (1 2 -1))
                                            (("1"
                                              (expand "union")
                                              (("1"
                                                (expand "empty?")
                                                (("1"
                                                  (skosimp*)
                                                  (("1"
                                                    (expand "member")
                                                    (("1"
                                                      (inst - "x!1")
                                                      (("1"
                                                        (flatten)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (lemma
                                               "card_disj_union"
                                               ("A" "X!1" "B" "Y!1"))
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (replace -1)
                                                  (("2"
                                                    (replace -4)
                                                    (("2"
                                                      (replace -5)
                                                      (("2"
                                                        (lemma
                                                         "series_bijection")
                                                        (("2"
                                                          (name
                                                           "PHI"
                                                           "LAMBDA (n:[below[card(union(X!1,Y!1))]]): IF n < card(X!1) THEN finite_enumeration(X!1)(n) ELSE finite_enumeration(Y!1)(n-card(X!1)) ENDIF")
                                                          (("1"
                                                            (lemma
                                                             "finite_enumeration_bij"
                                                             ("X"
                                                              "union(X!1,Y!1)"))
                                                            (("1"
                                                              (lemma
                                                               "finite_enumeration_bij"
                                                               ("X" "X!1"))
                                                              (("1"
                                                                (lemma
                                                                 "finite_enumeration_bij"
                                                                 ("X" "Y!1"))
                                                                (("1"
                                                                  (name-replace
                                                                   "FX"
                                                                   "finite_enumeration(X!1)")
                                                                  (("1"
                                                                    (name-replace
                                                                     "FY"
                                                                     "finite_enumeration(Y!1)")
                                                                    (("1"
                                                                      (name-replace
                                                                       "FXY"
                                                                       "finite_enumeration(union(X!1,Y!1))")
                                                                      (("1"
                                                                        (case
                                                                         "bijective?[below[card[T](union(X!1,Y!1))],(union(X!1,Y!1))](PHI)")
                                                                        (("1"
                                                                          (lemma
                                                                           "bijective_inverse_exists[below[card[T](union(X!1, Y!1))], (union(X!1, Y!1))]"
                                                                           ("f"
                                                                            "FXY"))
                                                                          (("1"
                                                                            (expand
                                                                             "exists1")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (skolem
                                                                                 -
                                                                                 ("CXY"))
                                                                                (("1"
                                                                                  (hide
                                                                                   -2)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "series")
                                                                                    (("1"
                                                                                      (hide
                                                                                       -6
                                                                                       -7)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "sigma_bijection[below[card(union(X!1, Y!1))]]"
                                                                                         ("low"
                                                                                          "0"
                                                                                          "high"
                                                                                          "NX+NY-1"
                                                                                          "F"
                                                                                          "f!1 o FXY"))
                                                                                        (("1"
                                                                                          (split
                                                                                           -1)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "bij_inv_is_bij_alt[below[card[T](union(X!1, Y!1))], (union(X!1, Y!1))]"
                                                                                             ("f"
                                                                                              "FXY"
                                                                                              "g"
                                                                                              "CXY"))
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "composition_bijective[below[card[T](union(X!1,Y!1))],(union(X!1,Y!1)),below[card[T](union(X!1, Y!1))]]"
                                                                                               ("f1"
                                                                                                "PHI"
                                                                                                "f2"
                                                                                                "CXY"))
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -
                                                                                                 "CXY o PHI")
                                                                                                (("1"
                                                                                                  (case-replace
                                                                                                   "sigma[subrange_T[below[card(union(X!1, Y!1))]](0, NX - 1 + NY)]
           (0, NX + NY - 1,
            f!1 o FXY o
             restrict
                 [below[card[T](union[T](X!1, Y!1))],
                  subrange_T[below[card[T](union[T](X!1, Y!1))]](0,
                                                                 NX - 1
                                                                 +
                                                                 NY),
                  below[card[T](union[T](X!1, Y!1))]]
                 (CXY o PHI)) = sigma[below[card(union(X!1, Y!1))]](0, NX + NY - 1, f!1 o PHI)")
                                                                                                  (("1"
                                                                                                    (case-replace
                                                                                                     "sigma[subrange_T[below[card(union(X!1, Y!1))]](0, NX - 1 + NY)]
          (0, NX + NY - 1,
           restrict
               [below[card(union(X!1, Y!1))],
                subrange_T[below[card(union(X!1, Y!1))]](0, NX - 1 + NY),
                real]
               (f!1 o FXY)) = sigma[below[card(union(X!1, Y!1))]](0, NX + NY - 1, f!1 o FXY)")
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -5
                                                                                                       4)
                                                                                                      (("1"
                                                                                                        (hide-all-but
                                                                                                         (4
                                                                                                          2
                                                                                                          3
                                                                                                          -14
                                                                                                          -15
                                                                                                          -11))
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "nonempty_card"
                                                                                                           ("S"
                                                                                                            "X!1"))
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "nonempty_card"
                                                                                                             ("S"
                                                                                                              "Y!1"))
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "nonempty?")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (case
                                                                                                                   "forall (n:nat): n <= NY-1 => sigma[below[card(union(X!1, Y!1))]](0, NX + n, f!1 o PHI) =
       sigma[below[card(Y!1)]](0, n, f!1 o FY) +
        sigma[below[card(X!1)]](0, NX - 1, f!1 o FX)")
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "NY-1")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (hide
                                                                                                                     2
                                                                                                                     3
                                                                                                                     4)
                                                                                                                    (("2"
                                                                                                                      (induct
                                                                                                                       "n")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "sigma"
                                                                                                                           1
                                                                                                                           2)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "sigma"
                                                                                                                             1
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "PHI"
                                                                                                                               1
                                                                                                                               1)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "FY"
                                                                                                                                 1)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "o"
                                                                                                                                   1
                                                                                                                                   3)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "o"
                                                                                                                                     1
                                                                                                                                     1)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -5
                                                                                                                                         1)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (hide
                                                                                                                                             -1
                                                                                                                                             -3
                                                                                                                                             -4)
                                                                                                                                            (("1"
                                                                                                                                              (case
                                                                                                                                               "forall (n:nat): n<=NX-1 => sigma(0, n, f!1 o PHI) =
       sigma[below[card(X!1)]](0, n, f!1 o FX)")
                                                                                                                                              (("1"
                                                                                                                                                (inst
                                                                                                                                                 -
                                                                                                                                                 "NX-1")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "sigma"
                                                                                                                                                     1
                                                                                                                                                     2)
                                                                                                                                                    (("1"
                                                                                                                                                      (propax)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (hide
                                                                                                                                                 2)
                                                                                                                                                (("2"
                                                                                                                                                  (induct
                                                                                                                                                   "n")
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "sigma")
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       "FX")
                                                                                                                                                      (("1"
                                                                                                                                                        (expand
                                                                                                                                                         "PHI")
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           "o ")
                                                                                                                                                          (("1"
                                                                                                                                                            (expand
                                                                                                                                                             "sigma")
                                                                                                                                                            (("1"
                                                                                                                                                              (propax)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (skosimp*)
                                                                                                                                                    (("2"
                                                                                                                                                      (assert)
                                                                                                                                                      (("2"
                                                                                                                                                        (expand
                                                                                                                                                         "sigma"
                                                                                                                                                         1)
                                                                                                                                                        (("2"
                                                                                                                                                          (assert)
                                                                                                                                                          (("2"
                                                                                                                                                            (replace
                                                                                                                                                             -1
                                                                                                                                                             1)
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              (("2"
                                                                                                                                                                (expand
                                                                                                                                                                 "o")
                                                                                                                                                                (("2"
                                                                                                                                                                  (expand
                                                                                                                                                                   "PHI")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (expand
                                                                                                                                                                     "FX")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (propax)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("3"
                                                                                                                                                    (skosimp*)
                                                                                                                                                    (("3"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("4"
                                                                                                                                                    (skosimp*)
                                                                                                                                                    (("4"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("5"
                                                                                                                                                    (skosimp*)
                                                                                                                                                    (("5"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("6"
                                                                                                                                                    (skosimp*)
                                                                                                                                                    (("6"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("3"
                                                                                                                                                (skosimp*)
                                                                                                                                                (("3"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("4"
                                                                                                                                                (skosimp*)
                                                                                                                                                (("4"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("5"
                                                                                                                                                (skosimp*)
                                                                                                                                                (("5"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("6"
                                                                                                                                                (skosimp*)
                                                                                                                                                (("6"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (skosimp*)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "sigma"
                                                                                                                             1
                                                                                                                             2)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "sigma"
                                                                                                                               1
                                                                                                                               1)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (replace
                                                                                                                                   -1
                                                                                                                                   1)
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "PHI"
                                                                                                                                       1)
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "o")
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "FY")
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("3"
                                                                                                                        (skosimp)
                                                                                                                        (("3"
                                                                                                                          (assert)
                                                                                                                          (("3"
                                                                                                                            (skosimp*)
                                                                                                                            (("3"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("4"
                                                                                                                        (skosimp)
                                                                                                                        (("4"
                                                                                                                          (assert)
                                                                                                                          (("4"
                                                                                                                            (skosimp*)
                                                                                                                            (("4"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("5"
                                                                                                                        (skosimp*)
                                                                                                                        (("5"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("6"
                                                                                                                        (skosimp*)
                                                                                                                        (("6"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("7"
                                                                                                                        (skosimp*)
                                                                                                                        (("7"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("3"
                                                                                                                    (skosimp*)
                                                                                                                    (("3"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("4"
                                                                                                                    (skosimp*)
                                                                                                                    (("4"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("5"
                                                                                                                    (skosimp*)
                                                                                                                    (("5"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("6"
                                                                                                                    (skosimp*)
                                                                                                                    (("6"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("7"
                                                                                                                    (skosimp*)
                                                                                                                    (("7"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (case
                                                                                                       "forall (n:nat): n <= NX + NY - 1 => sigma[subrange_T[below[card(union(X!1, Y!1))]](0, NX - 1 + NY)]
          (0, n,
           restrict
               [below[card(union(X!1, Y!1))],
                subrange_T[below[card(union(X!1, Y!1))]](0, NX - 1 + NY),
                real]
               (f!1 o FXY))
       = sigma[below[card(union(X!1, Y!1))]](0, n, f!1 o FXY)")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "NX+NY-1")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (lemma
                                                                                                           "nonempty_card"
                                                                                                           ("S"
                                                                                                            "X!1"))
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             "nonempty_card"
                                                                                                             ("S"
                                                                                                              "Y!1"))
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "nonempty?")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (induct
                                                                                                         "n")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "sigma")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "restrict")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "sigma"
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (skosimp*)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "sigma"
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "restrict")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("3"
                                                                                                          (skosimp*)
                                                                                                          (("3"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("4"
                                                                                                          (skosimp*)
                                                                                                          (("4"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("5"
                                                                                                          (skosimp*)
                                                                                                          (("5"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("6"
                                                                                                          (skosimp*)
                                                                                                          (("6"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("3"
                                                                                                        (skosimp*)
                                                                                                        (("3"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("4"
                                                                                                        (skosimp*)
                                                                                                        (("4"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("5"
                                                                                                        (skosimp*)
                                                                                                        (("5"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("6"
                                                                                                        (skosimp*)
                                                                                                        (("6"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("3"
                                                                                                      (skosimp*)
                                                                                                      (("3"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide
                                                                                                     5
                                                                                                     -3)
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       "comp_inverse_right_alt[below[card[T](union(X!1, Y!1))], (union(X!1, Y!1))]"
                                                                                                       ("f"
                                                                                                        "FXY"
                                                                                                        "g"
                                                                                                        "CXY"))
                                                                                                      (("2"
                                                                                                        (hide
                                                                                                         -2
                                                                                                         -3
                                                                                                         -4
                                                                                                         -5
                                                                                                         -6
                                                                                                         -7
                                                                                                         -8)
                                                                                                        (("2"
                                                                                                          (lemma
                                                                                                           "nonempty_card"
                                                                                                           ("S"
                                                                                                            "X!1"))
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             "nonempty_card"
                                                                                                             ("S"
                                                                                                              "Y!1"))
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "nonempty?")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (hide
                                                                                                                   2
                                                                                                                   3
                                                                                                                   4)
                                                                                                                  (("2"
                                                                                                                    (case
                                                                                                                     "forall (n:nat): n <= NX-1+NY => sigma[subrange_T[below[card(union(X!1, Y!1))]](0, NX - 1 + NY)]
          (0, n,
           f!1 o FXY o
            restrict
                [below[card[T](union[T](X!1, Y!1))],
                 subrange_T[below[card[T](union[T](X!1, Y!1))]]
                     (0, NX - 1 + NY),
                 below[card[T](union[T](X!1, Y!1))]]
                (CXY o PHI))
       = sigma[below[card(union(X!1, Y!1))]](0, n, f!1 o PHI)")
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -
                                                                                                                       "NX-1+NY")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (hide
                                                                                                                       2)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "restrict")
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "o ")
                                                                                                                          (("2"
                                                                                                                            (induct
                                                                                                                             "n")
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "sigma")
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 -
                                                                                                                                 "PHI(0)")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "sigma"
                                                                                                                                     1)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (skosimp*)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "sigma"
                                                                                                                                 1)
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (replace
                                                                                                                                     -1
                                                                                                                                     1)
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (hide
                                                                                                                                         -1)
                                                                                                                                        (("2"
                                                                                                                                          (inst
                                                                                                                                           -
                                                                                                                                           "PHI(1+j!1)")
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("3"
                                                                                                                              (skosimp*)
                                                                                                                              (("3"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("4"
                                                                                                                              (skosimp*)
                                                                                                                              (("4"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("5"
                                                                                                                              (skosimp*)
                                                                                                                              (("5"
                                                                                                                                (expand
                                                                                                                                 "PHI")
                                                                                                                                (("5"
                                                                                                                                  (case
                                                                                                                                   "x!1 < card(X!1)")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (typepred
                                                                                                                                       "finite_enumeration(X!1)(x!1)")
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "union")
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "member")
                                                                                                                                          (("1"
                                                                                                                                            (propax)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "union")
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "member")
                                                                                                                                        (("2"
                                                                                                                                          (propax)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("6"
                                                                                                                              (skosimp*)
                                                                                                                              (("6"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("7"
                                                                                                                              (skosimp*)
                                                                                                                              (("7"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("3"
                                                                                                                      (skosimp*)
                                                                                                                      (("3"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("4"
                                                                                                                      (skosimp*)
                                                                                                                      (("4"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("5"
                                                                                                                      (skosimp*)
                                                                                                                      (("5"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("6"
                                                                                                                      (skosimp*)
                                                                                                                      (("6"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("3"
                                                                                                    (skosimp)
                                                                                                    (("3"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (split
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (skosimp*)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "o")
                                                                                                      (("1"
                                                                                                        (typepred
                                                                                                         "CXY(PHI(x1!1))")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (hide
                                                                                                           2
                                                                                                           3
                                                                                                           4
                                                                                                           5
                                                                                                           6)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "union")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "member")
                                                                                                              (("2"
                                                                                                                (flatten)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "PHI")
                                                                                                                  (("2"
                                                                                                                    (case-replace
                                                                                                                     "x1!1 < card(X!1)")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "finite_enumeration")
                                                                                                                      (("1"
                                                                                                                        (propax)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide
                                                                                                     -2
                                                                                                     -4
                                                                                                     -5
                                                                                                     -6
                                                                                                     -7
                                                                                                     5)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "bijective?")
                                                                                                      (("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "o ")
                                                                                                          (("2"
                                                                                                            (split
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "restrict")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "injective?")
                                                                                                                (("1"
                                                                                                                  (skosimp*)
                                                                                                                  (("1"
                                                                                                                    (typepred
                                                                                                                     "x1!1")
                                                                                                                    (("1"
                                                                                                                      (typepred
                                                                                                                       "x2!1")
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -
                                                                                                                         "x1!1"
                                                                                                                         "x2!1")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (expand
                                                                                                               "surjective?")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "restrict")
                                                                                                                (("2"
                                                                                                                  (skosimp)
                                                                                                                  (("2"
                                                                                                                    (typepred
                                                                                                                     "y!1")
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -
                                                                                                                       "y!1")
                                                                                                                      (("2"
                                                                                                                        (skosimp)
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           +
                                                                                                                           "x!1")
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil)
                                                                                               ("3"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (lemma
                                                                                             "nonempty_card"
                                                                                             ("S"
                                                                                              "X!1"))
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "nonempty_card"
                                                                                               ("S"
                                                                                                "Y!1"))
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "nonempty?")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (lemma
                                                                                           "nonempty_card"
                                                                                           ("S"
                                                                                            "X!1"))
                                                                                          (("2"
                                                                                            (lemma
                                                                                             "nonempty_card"
                                                                                             ("S"
                                                                                              "Y!1"))
                                                                                            (("2"
                                                                                              (expand
                                                                                               "nonempty?")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (assert)
                                                                                          (("3"
                                                                                            (lemma
                                                                                             "nonempty_card"
                                                                                             ("S"
                                                                                              "union(X!1, Y!1)"))
                                                                                            (("3"
                                                                                              (expand
                                                                                               "nonempty?")
                                                                                              (("3"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("4"
                                                                                          (skosimp*)
                                                                                          (("4"
                                                                                            (typepred
                                                                                             "x!1")
                                                                                            (("4"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           (3
                                                                            4
                                                                            1
                                                                            -1
                                                                            -2
                                                                            -13
                                                                            -11
                                                                            -12))
                                                                          (("2"
                                                                            (expand
                                                                             "bijective?")
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (expand
                                                                                 "PHI")
                                                                                (("2"
                                                                                  (expand
                                                                                   "FY")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "FX")
                                                                                    (("2"
                                                                                      (split)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "injective?")
                                                                                        (("1"
                                                                                          (skosimp*)
                                                                                          (("1"
                                                                                            (case-replace
                                                                                             "x1!1 < card(X!1)")
                                                                                            (("1"
                                                                                              (case-replace
                                                                                               "x2!1 < card(X!1)")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -6
                                                                                                 "x1!1"
                                                                                                 "x2!1")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "disjoint?")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "intersection")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "empty?")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "member")
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -9
                                                                                                           "finite_enumeration(X!1)(x1!1)")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (case-replace
                                                                                               "x2!1<card(X!1)")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "disjoint?")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "intersection")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "empty?")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "member")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -9
                                                                                                         "finite_enumeration(X!1)(x2!1)")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -2
                                                                                                   "x1!1-card(X!1)"
                                                                                                   "x2!1-card(X!1)")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "surjective?")
                                                                                        (("2"
                                                                                          (skosimp*)
                                                                                          (("2"
                                                                                            (case
                                                                                             "X!1(y!1)")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -5
                                                                                               "y!1")
                                                                                              (("1"
                                                                                                (skosimp)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   +
                                                                                                   "x!1")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand
                                                                                               "disjoint?")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "intersection")
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "y!1")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "union")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "member")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -3
                                                                                                           "y!1")
                                                                                                          (("2"
                                                                                                            (skosimp)
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               +
                                                                                                               "x!1+card(X!1)")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (skosimp)
                                                                          (("3"
                                                                            (typepred
                                                                             "x1!1")
                                                                            (("3"
                                                                              (expand
                                                                               "PHI"
                                                                               1)
                                                                              (("3"
                                                                                (expand
                                                                                 "union"
                                                                                 1)
                                                                                (("3"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("3"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skosimp)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (propax) nil nil))
                    nil)
                   ("2" (propax) nil nil))
                  nil))
                nil)
               ("2" (inst - "X!1" "Y!1" "f!1")
                (("1" (assert) nil nil)
                 ("2" (rewrite "countably_infinite_def") nil nil))
                nil))
              nil)
             ("2" (case "is_finite(Y!1)")
              (("1" (inst - "Y!1" "X!1" "f!1")
                (("1" (rewrite "union_commutative" -4)
                  (("1" (assert)
                    (("1" (hide-all-but (-4 2))
                      (("1" (expand "disjoint?")
                        (("1" (rewrite "intersection_commutative") nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (rewrite "union_commutative")
                  (("2" (typepred "f!1") (("2" (propax) nil nil)) nil)) nil)
                 ("3" (rewrite "countably_infinite_def") nil nil))
                nil)
               ("2" (assert)
                (("2" (hide -3)
                  (("2" (typepred "f!1")
                    (("2"
                      (lemma "convergent_subset"
                       ("X" "X!1" "Y" "union(X!1,Y!1)" "g" "f!1"))
                      (("2"
                        (lemma "convergent_subset"
                         ("X" "Y!1" "Y" "union(X!1,Y!1)" "g" "f!1"))
                        (("2" (assert)
                          (("2" (split -1)
                            (("1" (split -2)
                              (("1" (expand "sigma")
                                (("1" (expand "convergent?")
                                  (("1"
                                    (lemma "infinite_union_right"
                                     ("S" "X!1" "Inf" "Y!1"))
                                    (("1"
                                      (lemma "infinite_nonempty" ("x" "X!1"))
                                      (("1"
                                        (lemma
                                         "infinite_nonempty"
                                         ("x" "Y!1"))
                                        (("1"
                                          (lemma
                                           "infinite_nonempty"
                                           ("x" "union(X!1,Y!1)"))
                                          (("1"
                                            (expand "nonempty?")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lemma
                                                 "denumerable_enumeration_bij"
                                                 ("X" "X!1"))
                                                (("1"
                                                  (lemma
                                                   "denumerable_enumeration_bij"
                                                   ("X" "Y!1"))
                                                  (("1"
                                                    (lemma
                                                     "denumerable_enumeration_bij"
                                                     ("X" "union(X!1,Y!1)"))
                                                    (("1"
                                                      (name-replace
                                                       "DXY"
                                                       "denumerable_enumeration(union(X!1,Y!1))")
                                                      (("1"
                                                        (name-replace
                                                         "DX"
                                                         "denumerable_enumeration(X!1)")
                                                        (("1"
                                                          (name-replace
                                                           "DY"
                                                           "denumerable_enumeration(Y!1)")
                                                          (("1"
                                                            (case
                                                             "forall (n:nat): even?(n) IMPLIES integer_pred(n / 2) & n/2 >= 0")
                                                            (("1"
                                                              (case
                                                               "forall (n:nat): NOT even?(n) IMPLIES integer_pred((n-1) / 2) & (n-1)/2 >= 0")
                                                              (("1"
                                                                (name
                                                                 "PHI"
                                                                 "LAMBDA (n:nat): IF even?(n) THEN DX(n/2) ELSE DY((n-1)/2) ENDIF")
                                                                (("1"
                                                                  (case
                                                                   "bijective?[nat,(union(X!1, Y!1))](PHI)")
                                                                  (("1"
                                                                    (lemma
                                                                     "bijective_inverse_exists[nat, (union(X!1, Y!1))]"
                                                                     ("f"
                                                                      "DXY"))
                                                                    (("1"
                                                                      (expand
                                                                       "exists1")
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (hide
                                                                           -2)
                                                                          (("1"
                                                                            (skolem
                                                                             -
                                                                             ("CXY"))
                                                                            (("1"
                                                                              (lemma
                                                                               "bij_inv_is_bij_alt[nat, (union(X!1, Y!1))]"
                                                                               ("f"
                                                                                "DXY"
                                                                                "g"
                                                                                "CXY"))
                                                                              (("1"
                                                                                (lemma
                                                                                 "comp_inverse_right_alt[nat, (union(X!1, Y!1))]"
                                                                                 ("f"
                                                                                  "DXY"
                                                                                  "g"
                                                                                  "CXY"))
                                                                                (("1"
                                                                                  (lemma
                                                                                   "composition_bijective[nat,(union(X!1, Y!1)),nat]"
                                                                                   ("f1"
                                                                                    "PHI"
                                                                                    "f2"
                                                                                    "CXY"))
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "abs_series_bij_limit"
                                                                                     ("a"
                                                                                      "f!1 o DXY"
                                                                                      "phi"
                                                                                      "CXY o PHI"))
                                                                                    (("1"
                                                                                      (split
                                                                                       -1)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "extensionality"
                                                                                         ("f"
                                                                                          "f!1 o DXY o (CXY o PHI)"
                                                                                          "g"
                                                                                          "f!1 o PHI"))
                                                                                        (("1"
                                                                                          (split
                                                                                           -1)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -2)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "forall (x:real): convergence(series(f!1 o DX),x) IFF convergence(series(LAMBDA (n:nat): if even?(n) then f!1(DX(n/2)) else 0 endif),x)")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "limit(series(f!1 o DX))")
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     "limit_equiv"
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "absconvergent_series_is_convergent"
                                                                                                       ("x"
                                                                                                        "f!1 o DX"))
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (case
                                                                                                           "forall (x:real): convergence(series(f!1 o DY),x) IFF convergence(series(LAMBDA (n:nat):IF odd?(n) THEN f!1(DY((n-1)/2)) ELSE 0 ENDIF),x)")
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "limit(series(f!1 o DY))")
                                                                                                            (("1"
                                                                                                              (rewrite
                                                                                                               "limit_equiv"
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (lemma
                                                                                                                 "absconvergent_series_is_convergent"
                                                                                                                 ("x"
                                                                                                                  "f!1 o DY"))
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (lemma
                                                                                                                     "cnv_seq_sum"
                                                                                                                     ("s1"
                                                                                                                      "series(LAMBDA (n: nat):
                           IF even?(n) THEN f!1(DX(n / 2)) ELSE 0 ENDIF)"
                                                                                                                      "l1"
                                                                                                                      "limit(series(f!1 o DX))"
                                                                                                                      "s2"
                                                                                                                      "series(LAMBDA (n: nat):
                           IF odd?(n) THEN f!1(DY((n - 1) / 2))
                           ELSE 0
                           ENDIF)"
                                                                                                                      "l2"
                                                                                                                      "limit(series(f!1 o DY))"))
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (rewrite
                                                                                                                         "series_sum"
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (lemma
                                                                                                                           "extensionality"
                                                                                                                           ("f"
                                                                                                                            "(LAMBDA (n: nat):
                            IF even?(n) THEN f!1(DX(n / 2)) ELSE 0 ENDIF)
                          +
                          (LAMBDA (n: nat):
                             IF odd?(n) THEN f!1(DY((n - 1) / 2))
                             ELSE 0
                             ENDIF)"
                                                                                                                            "g"
                                                                                                                            "f!1 o PHI"))
                                                                                                                          (("1"
                                                                                                                            (split
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (replace
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (rewrite
                                                                                                                                 "limit_equiv"
                                                                                                                                 -2)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (hide-all-but
                                                                                                                               1)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "+")
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "o")
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "PHI")
                                                                                                                                    (("2"
                                                                                                                                      (skosimp)
                                                                                                                                      (("2"
                                                                                                                                        (case-replace
                                                                                                                                         "even?(x!1)")
                                                                                                                                        (("1"
                                                                                                                                          (lemma
                                                                                                                                           "even_iff_not_odd"
                                                                                                                                           ("x"
                                                                                                                                            "x!1"))
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (lemma
                                                                                                                                           "even_iff_not_odd"
                                                                                                                                           ("x"
                                                                                                                                            "x!1"))
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (hide-all-but
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (skosimp)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "series")
                                                                                                                (("2"
                                                                                                                  (case
                                                                                                                   "forall (n:nat): sigma(0, n, f!1 o DY) = sigma(0,2*n+1 ,
                           LAMBDA (n: nat):
                             IF odd?(n) THEN f!1(DY((n - 1) / 2))
                             ELSE 0
                             ENDIF)")
                                                                                                                  (("1"
                                                                                                                    (case
                                                                                                                     "FORALL (n: nat):
        even?(n) =>
         sigma(0, n,
               (LAMBDA (n: nat):
                  IF odd?(n) THEN f!1(DY((n - 1) / 2)) ELSE 0 ENDIF))
          = IF n = 0 THEN 0 ELSE sigma(0, n / 2-1, f!1 o DY) ENDIF")
                                                                                                                    (("1"
                                                                                                                      (case
                                                                                                                       "FORALL (n: nat):
        odd?(n) =>
         sigma(0, n,
               (LAMBDA (n: nat):
                  IF odd?(n) THEN f!1(DY((n - 1) / 2)) ELSE 0 ENDIF))
          = sigma(0, (n-1)/ 2, f!1 o DY)")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "convergence")
                                                                                                                        (("1"
                                                                                                                          (split
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (skosimp*)
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -
                                                                                                                               "epsilon!1")
                                                                                                                              (("1"
                                                                                                                                (skosimp)
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   +
                                                                                                                                   "2*n!1+1")
                                                                                                                                  (("1"
                                                                                                                                    (skosimp)
                                                                                                                                    (("1"
                                                                                                                                      (case
                                                                                                                                       "even?(i!1)")
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         -5
                                                                                                                                         "i!1")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (replace
                                                                                                                                             -5)
                                                                                                                                            (("1"
                                                                                                                                              (inst
                                                                                                                                               -2
                                                                                                                                               "i!1/2-1")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (hide-all-but
                                                                                                                                                   (-1
                                                                                                                                                    -2
                                                                                                                                                    1))
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "even?")
                                                                                                                                                    (("1"
                                                                                                                                                      (propax)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (case-replace
                                                                                                                                                 "i!1=0")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (expand
                                                                                                                                                   "even?")
                                                                                                                                                  (("2"
                                                                                                                                                    (skosimp)
                                                                                                                                                    (("2"
                                                                                                                                                      (replace
                                                                                                                                                       -1)
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        (("2"
                                                                                                                                                          (case-replace
                                                                                                                                                           "2 * j!1 / 2 = j!1")
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (lemma
                                                                                                                                                             "div_cancel2"
                                                                                                                                                             ("x"
                                                                                                                                                              "j!1"
                                                                                                                                                              "n0z"
                                                                                                                                                              "2"))
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (rewrite
                                                                                                                                         "even_iff_not_odd"
                                                                                                                                         1)
                                                                                                                                        (("2"
                                                                                                                                          (inst
                                                                                                                                           -4
                                                                                                                                           "i!1")
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            (("2"
                                                                                                                                              (replace
                                                                                                                                               -4)
                                                                                                                                              (("2"
                                                                                                                                                (hide
                                                                                                                                                 -5
                                                                                                                                                 -6
                                                                                                                                                 -4)
                                                                                                                                                (("2"
                                                                                                                                                  (inst
                                                                                                                                                   -
                                                                                                                                                   "(i!1-1)/2")
                                                                                                                                                  (("1"
                                                                                                                                                    (split
                                                                                                                                                     -2)
                                                                                                                                                    (("1"
                                                                                                                                                      (propax)
                                                                                                                                                      nil
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (expand
                                                                                                                                                     "odd?")
                                                                                                                                                    (("2"
                                                                                                                                                      (skosimp)
                                                                                                                                                      (("2"
                                                                                                                                                        (replace
                                                                                                                                                         -1)
                                                                                                                                                        (("2"
                                                                                                                                                          (assert)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (skosimp*)
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               -
                                                                                                                               "epsilon!1")
                                                                                                                              (("2"
                                                                                                                                (skosimp)
                                                                                                                                (("2"
                                                                                                                                  (inst
                                                                                                                                   +
                                                                                                                                   "2*n!1+1")
                                                                                                                                  (("2"
                                                                                                                                    (skosimp*)
                                                                                                                                    (("2"
                                                                                                                                      (inst
                                                                                                                                       -5
                                                                                                                                       "i!1")
                                                                                                                                      (("2"
                                                                                                                                        (inst
                                                                                                                                         -1
                                                                                                                                         "2*i!1+1")
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (hide-all-but
                                                                                                                         (-2
                                                                                                                          1))
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "odd?"
                                                                                                                           1
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (skosimp*)
                                                                                                                            (("2"
                                                                                                                              (replace
                                                                                                                               -1)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (inst
                                                                                                                                   -
                                                                                                                                   "j!1")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (case
                                                                                                                                       "forall (i,j:int):i<j=>i+1<=j")
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         -
                                                                                                                                         "-1"
                                                                                                                                         "j!1")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (hide-all-but
                                                                                                                                         1)
                                                                                                                                        (("2"
                                                                                                                                          (grind)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("3"
                                                                                                                        (hide
                                                                                                                         -1
                                                                                                                         2)
                                                                                                                        (("3"
                                                                                                                          (skosimp*)
                                                                                                                          (("3"
                                                                                                                            (assert)
                                                                                                                            (("3"
                                                                                                                              (case
                                                                                                                               "forall (i,j:int):i<j=>i+1<=j")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "odd?")
                                                                                                                                  (("1"
                                                                                                                                    (skosimp)
                                                                                                                                    (("1"
                                                                                                                                      (replace
                                                                                                                                       -2)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (flatten)
                                                                                                                                          (("1"
                                                                                                                                            (lemma
                                                                                                                                             "trichotomy"
                                                                                                                                             ("x"
                                                                                                                                              "j!1"))
                                                                                                                                            (("1"
                                                                                                                                              (split
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil)
                                                                                                                                               ("3"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (hide-all-but
                                                                                                                                 1)
                                                                                                                                (("2"
                                                                                                                                  (grind)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("4"
                                                                                                                        (skosimp*)
                                                                                                                        (("4"
                                                                                                                          (hide-all-but
                                                                                                                           (-2
                                                                                                                            1))
                                                                                                                          (("4"
                                                                                                                            (expand
                                                                                                                             "odd?")
                                                                                                                            (("4"
                                                                                                                              (skosimp)
                                                                                                                              (("4"
                                                                                                                                (replace
                                                                                                                                 -1)
                                                                                                                                (("4"
                                                                                                                                  (assert)
                                                                                                                                  (("4"
                                                                                                                                    (lemma
                                                                                                                                     "trichotomy"
                                                                                                                                     ("x"
                                                                                                                                      "j!1"))
                                                                                                                                    (("4"
                                                                                                                                      (split
                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil)
                                                                                                                                       ("3"
                                                                                                                                        (case
                                                                                                                                         "forall (i,j:int): i< j => i+1<=j")
                                                                                                                                        (("1"
                                                                                                                                          (inst
                                                                                                                                           -
                                                                                                                                           "j!1"
                                                                                                                                           "0")
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (hide-all-but
                                                                                                                                           1)
                                                                                                                                          (("2"
                                                                                                                                            (grind)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (hide
                                                                                                                       2)
                                                                                                                      (("2"
                                                                                                                        (skosimp)
                                                                                                                        (("2"
                                                                                                                          (case-replace
                                                                                                                           "n!1=0")
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "sigma")
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "odd?")
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "sigma"
                                                                                                                                 1)
                                                                                                                                (("1"
                                                                                                                                  (propax)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "even?")
                                                                                                                              (("2"
                                                                                                                                (skosimp)
                                                                                                                                (("2"
                                                                                                                                  (replace
                                                                                                                                   -1)
                                                                                                                                  (("2"
                                                                                                                                    (inst
                                                                                                                                     -
                                                                                                                                     "j!1-1")
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "sigma"
                                                                                                                                       2
                                                                                                                                       1)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (lemma
                                                                                                                                           "even_iff_not_odd"
                                                                                                                                           ("x"
                                                                                                                                            "2*j!1"))
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "even?"
                                                                                                                                             -1)
                                                                                                                                            (("1"
                                                                                                                                              (flatten
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (hide
                                                                                                                                                 -2)
                                                                                                                                                (("1"
                                                                                                                                                  (split
                                                                                                                                                   -1)
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (inst
                                                                                                                                                     +
                                                                                                                                                     "j!1")
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("3"
                                                                                                                      (expand
                                                                                                                       "even?")
                                                                                                                      (("3"
                                                                                                                        (skosimp*)
                                                                                                                        (("3"
                                                                                                                          (assert)
                                                                                                                          (("3"
                                                                                                                            (typepred
                                                                                                                             "n!1")
                                                                                                                            (("3"
                                                                                                                              (replace
                                                                                                                               -2)
                                                                                                                              (("3"
                                                                                                                                (assert)
                                                                                                                                (("3"
                                                                                                                                  (case
                                                                                                                                   "forall (i,j:int):i<j=>i+1<=j")
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     -
                                                                                                                                     "0"
                                                                                                                                     "j!1")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (lemma
                                                                                                                                         "div_cancel2"
                                                                                                                                         ("x"
                                                                                                                                          "j!1"
                                                                                                                                          "n0z"
                                                                                                                                          "2"))
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (case-replace
                                                                                                                                             "2 * j!1 / 2 - 1 = j!1-1")
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (hide-all-but
                                                                                                                                     1)
                                                                                                                                    (("2"
                                                                                                                                      (grind)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("4"
                                                                                                                      (hide-all-but
                                                                                                                       1)
                                                                                                                      (("4"
                                                                                                                        (expand
                                                                                                                         "odd?")
                                                                                                                        (("4"
                                                                                                                          (skosimp*)
                                                                                                                          (("4"
                                                                                                                            (replace
                                                                                                                             -2)
                                                                                                                            (("4"
                                                                                                                              (assert)
                                                                                                                              (("4"
                                                                                                                                (case
                                                                                                                                 "forall (i,j:int):i<j=>i+1<=j")
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -
                                                                                                                                   "-1"
                                                                                                                                   "j!1")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (hide-all-but
                                                                                                                                   1)
                                                                                                                                  (("2"
                                                                                                                                    (grind)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (hide
                                                                                                                     2)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "o ")
                                                                                                                      (("2"
                                                                                                                        (induct
                                                                                                                         "n")
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "sigma")
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "sigma")
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "odd?")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (skosimp*)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "sigma"
                                                                                                                             1)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "sigma"
                                                                                                                               1
                                                                                                                               2)
                                                                                                                              (("2"
                                                                                                                                (replace
                                                                                                                                 -1
                                                                                                                                 1
                                                                                                                                 rl)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "odd?")
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("3"
                                                                                                                          (expand
                                                                                                                           "odd?")
                                                                                                                          (("3"
                                                                                                                            (skosimp*)
                                                                                                                            (("3"
                                                                                                                              (assert)
                                                                                                                              (("3"
                                                                                                                                (case
                                                                                                                                 "forall (i,j:int):i<j=>i+1<=j")
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -
                                                                                                                                   "-1"
                                                                                                                                   "j!1")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (hide-all-but
                                                                                                                                   1)
                                                                                                                                  (("2"
                                                                                                                                    (grind)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("3"
                                                                                                            (expand
                                                                                                             "odd?")
                                                                                                            (("3"
                                                                                                              (skosimp)
                                                                                                              (("3"
                                                                                                                (case
                                                                                                                 "forall (i,j:int):i<j=>i+1<=j")
                                                                                                                (("1"
                                                                                                                  (skosimp)
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "-1"
                                                                                                                     "j!1")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide-all-but
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (grind)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide-all-but
                                                                                                   (1
                                                                                                    -14))
                                                                                                  (("2"
                                                                                                    (skosimp*)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "series")
                                                                                                      (("2"
                                                                                                        (case
                                                                                                         "FORALL (n:nat):sigma(0,2*n,(LAMBDA (n: nat):
                  IF even?(n) THEN f!1(DX(n / 2)) ELSE 0 ENDIF))
          = sigma(0,n,f!1 o DX)")
                                                                                                        (("1"
                                                                                                          (case
                                                                                                           "FORALL (n: nat): even?(n) =>
        sigma(0, n,
              (LAMBDA (n: nat):
                 IF even?(n) THEN f!1(DX(n / 2)) ELSE 0 ENDIF))
         = sigma(0, n/2, f!1 o DX)")
                                                                                                          (("1"
                                                                                                            (case
                                                                                                             "FORALL (n: nat):
        odd?(n) =>
         sigma(0, n,
               (LAMBDA (n: nat):
                  IF even?(n) THEN f!1(DX(n / 2)) ELSE 0 ENDIF))
          = sigma(0, (n-1) / 2, f!1 o DX)")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "convergence")
                                                                                                              (("1"
                                                                                                                (split
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (skosimp*)
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "epsilon!1")
                                                                                                                    (("1"
                                                                                                                      (skosimp)
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         +
                                                                                                                         "2*n!1")
                                                                                                                        (("1"
                                                                                                                          (skosimp)
                                                                                                                          (("1"
                                                                                                                            (case
                                                                                                                             "even?(i!1)")
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "even?"
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (skosimp)
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -
                                                                                                                                   "j!1")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (inst
                                                                                                                                       -5
                                                                                                                                       "i!1")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (rewrite
                                                                                                                               "even_or_odd"
                                                                                                                               1)
                                                                                                                              (("2"
                                                                                                                                (inst
                                                                                                                                 -4
                                                                                                                                 "i!1")
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (replace
                                                                                                                                     -4
                                                                                                                                     1)
                                                                                                                                    (("2"
                                                                                                                                      (inst
                                                                                                                                       -2
                                                                                                                                       "(i!1-1)/2")
                                                                                                                                      (("1"
                                                                                                                                        (split
                                                                                                                                         -2)
                                                                                                                                        (("1"
                                                                                                                                          (propax)
                                                                                                                                          nil
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (assert)
                                                                                                                                          (("2"
                                                                                                                                            (hide-all-but
                                                                                                                                             (-1
                                                                                                                                              -2
                                                                                                                                              1))
                                                                                                                                            (("2"
                                                                                                                                              (expand
                                                                                                                                               "odd?")
                                                                                                                                              (("2"
                                                                                                                                                (propax)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "odd?")
                                                                                                                                          (("2"
                                                                                                                                            (skosimp)
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (skosimp*)
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "epsilon!1")
                                                                                                                    (("2"
                                                                                                                      (skosimp)
                                                                                                                      (("2"
                                                                                                                        (case
                                                                                                                         "even?(n!1)")
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "even?"
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (skosimp)
                                                                                                                            (("1"
                                                                                                                              (replace
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 +
                                                                                                                                 "j!1")
                                                                                                                                (("1"
                                                                                                                                  (skosimp)
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     -
                                                                                                                                     "2*i!1")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         -5
                                                                                                                                         "2*i!1")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (rewrite
                                                                                                                           "even_or_odd"
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "odd?"
                                                                                                                             -1)
                                                                                                                            (("2"
                                                                                                                              (skosimp)
                                                                                                                              (("2"
                                                                                                                                (replace
                                                                                                                                 -1)
                                                                                                                                (("2"
                                                                                                                                  (inst
                                                                                                                                   +
                                                                                                                                   "j!1")
                                                                                                                                  (("1"
                                                                                                                                    (skosimp)
                                                                                                                                    (("1"
                                                                                                                                      (inst
                                                                                                                                       -
                                                                                                                                       "1+2*i!1")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (inst
                                                                                                                                           -4
                                                                                                                                           "1+2*i!1")
                                                                                                                                          (("1"
                                                                                                                                            (split
                                                                                                                                             -4)
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (expand
                                                                                                                                               "odd?")
                                                                                                                                              (("2"
                                                                                                                                                (inst
                                                                                                                                                 +
                                                                                                                                                 "i!1")
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (hide-all-but
                                                                                                               (-2
                                                                                                                1))
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "odd?")
                                                                                                                (("2"
                                                                                                                  (skosimp*)
                                                                                                                  (("2"
                                                                                                                    (replace
                                                                                                                     -1)
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -
                                                                                                                       "j!1")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "sigma"
                                                                                                                           1
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -2)
                                                                                                                            (("1"
                                                                                                                              (case
                                                                                                                               "forall (i,j:int):i<j=>i+1<=j")
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 -
                                                                                                                                 "-1"
                                                                                                                                 "j!1")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (lift-if
                                                                                                                                     1)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (rewrite
                                                                                                                                         "even_or_odd"
                                                                                                                                         1)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (hide-all-but
                                                                                                                                 1)
                                                                                                                                (("2"
                                                                                                                                  (grind)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (case
                                                                                                                         "forall (i,j:int):i<j=>i+1<=j")
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -
                                                                                                                           "-1"
                                                                                                                           "j!1")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (hide-all-but
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (grind)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("3"
                                                                                                              (expand
                                                                                                               "odd?")
                                                                                                              (("3"
                                                                                                                (skosimp*)
                                                                                                                (("3"
                                                                                                                  (assert)
                                                                                                                  (("3"
                                                                                                                    (case
                                                                                                                     "forall (i,j:int):i<j=>i+1<=j")
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -
                                                                                                                       "-1"
                                                                                                                       "j!1")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (hide-all-but
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("4"
                                                                                                              (expand
                                                                                                               "even?")
                                                                                                              (("4"
                                                                                                                (skosimp*)
                                                                                                                (("4"
                                                                                                                  (case
                                                                                                                   "forall (i,j:int):i<j=>i+1<=j")
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "-1"
                                                                                                                     "j!1")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (hide-all-but
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (hide-all-but
                                                                                                             (-1
                                                                                                              1))
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "even?"
                                                                                                               1
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (skosimp*)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -
                                                                                                                   "j!1")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("3"
                                                                                                            (expand
                                                                                                             "even?")
                                                                                                            (("3"
                                                                                                              (skosimp*)
                                                                                                              (("3"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("4"
                                                                                                            (expand
                                                                                                             "even?")
                                                                                                            (("4"
                                                                                                              (skosimp*)
                                                                                                              (("4"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (hide-all-but
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (induct
                                                                                                             "n")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "o")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "sigma")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (skosimp*)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "sigma"
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "o")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "sigma"
                                                                                                                       1
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (replace
                                                                                                                         -1
                                                                                                                         1)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (lift-if
                                                                                                                             1)
                                                                                                                            (("2"
                                                                                                                              (prop)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "even?")
                                                                                                                                (("1"
                                                                                                                                  (propax)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (rewrite
                                                                                                                                 "even_or_odd"
                                                                                                                                 1)
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("3"
                                                                                                              (expand
                                                                                                               "even?")
                                                                                                              (("3"
                                                                                                                (skosimp*)
                                                                                                                (("3"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("3"
                                                                                                          (skosimp*)
                                                                                                          (("3"
                                                                                                            (assert)
                                                                                                            (("3"
                                                                                                              (expand
                                                                                                               "even?")
                                                                                                              (("3"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (expand
                                                                                                   "even?")
                                                                                                  (("3"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (expand
                                                                                             "o")
                                                                                            (("2"
                                                                                              (skosimp)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -3
                                                                                                 "PHI(x!1)")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "absconvergent?")
                                                                                        (("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil)
                                                                                   ("3"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (-2
                                                                      -3
                                                                      -5
                                                                      -6
                                                                      -12
                                                                      1))
                                                                    (("2"
                                                                      (expand
                                                                       "bijective?")
                                                                      (("2"
                                                                        (expand
                                                                         "PHI")
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (split
                                                                             1)
                                                                            (("1"
                                                                              (expand
                                                                               "injective?")
                                                                              (("1"
                                                                                (skosimp*)
                                                                                (("1"
                                                                                  (case-replace
                                                                                   "even?(x1!1)")
                                                                                  (("1"
                                                                                    (case-replace
                                                                                     "even?(x2!1)")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -8
                                                                                       "x1!1/2"
                                                                                       "x2!1/2")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (inst
                                                                                         -5
                                                                                         "x2!1")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (inst
                                                                                         -5
                                                                                         "x1!1")
                                                                                        (("3"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (expand
                                                                                       "disjoint?")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "intersection")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "empty?")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "member")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -9
                                                                                                 "DX(x1!1/2)")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (inst
                                                                                                   -4
                                                                                                   "x1!1")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (case-replace
                                                                                     "even?(x2!1)")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "disjoint?")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "intersection")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "empty?")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "member")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -4
                                                                                                 "x2!1")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (typepred
                                                                                                     "DX(x2!1 / 2)")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -10
                                                                                                       "DX(x2!1 / 2)")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (inst-cp
                                                                                         -
                                                                                         "x1!1")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -
                                                                                           "x2!1")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -7
                                                                                                 "(x1!1 - 1) / 2"
                                                                                                 "(x2!1 - 1) / 2")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "surjective?")
                                                                              (("2"
                                                                                (skosimp*)
                                                                                (("2"
                                                                                  (typepred
                                                                                   "y!1")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "union")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "member")
                                                                                      (("2"
                                                                                        (split
                                                                                         -1)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -7
                                                                                           "y!1")
                                                                                          (("1"
                                                                                            (skosimp)
                                                                                            (("1"
                                                                                              (inst
                                                                                               +
                                                                                               "2*x!1")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (inst
                                                                                           -5
                                                                                           "y!1")
                                                                                          (("2"
                                                                                            (skosimp)
                                                                                            (("2"
                                                                                              (inst
                                                                                               +
                                                                                               "2*x!1+1")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   "div_cancel2"
                                                                                                   ("x"
                                                                                                    "x!1"
                                                                                                    "n0z"
                                                                                                    "2"))
                                                                                                  (("2"
                                                                                                    (lift-if
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (prop)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "even?")
                                                                                                          (("2"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (expand
                                                                     "PHI")
                                                                    (("3"
                                                                      (expand
                                                                       "union")
                                                                      (("3"
                                                                        (expand
                                                                         "member")
                                                                        (("3"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (propax)
                                                                  nil
                                                                  nil)
                                                                 ("3"
                                                                  (skosimp)
                                                                  (("3"
                                                                    (inst
                                                                     -3
                                                                     "n!1")
                                                                    (("3"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (skosimp)
                                                                  (("2"
                                                                    (rewrite
                                                                     "even_or_odd")
                                                                    (("2"
                                                                      (expand
                                                                       "odd?")
                                                                      (("2"
                                                                        (skosimp)
                                                                        (("2"
                                                                          (replace
                                                                           -1)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (case
                                                                               "forall (i,j:int):i<j=>i+1<=j")
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "-1"
                                                                                 "j!1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but 1)
                                                              (("2"
                                                                (expand
                                                                 "even?")
                                                                (("2"
                                                                  (skosimp*)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide-all-but 1) (("2" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skosimp*)
        (("2" (typepred "X!1")
          (("2" (typepred "Y!1")
            (("2" (typepred "f!1")
              (("2" (case-replace "X!1=emptyset[T]")
                (("1" (rewrite "sigma_empty" 1)
                  (("1" (rewrite "union_commutative" 1)
                    (("1" (rewrite "union_empty" 1) (("1" (assert) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (rewrite "emptyset_is_empty?" 1 :dir rl)
                  (("2" (rewrite "countably_infinite_def")
                    (("2" (flatten)
                      (("2"
                        (lemma "infinite_union_right" ("S" "X!1" "Inf" "Y!1"))
                        (("2" (expand "convergent?")
                          (("2" (assert)
                            (("2" (expand "sigma")
                              (("2" (assert)
                                (("2"
                                  (lemma "infinite_nonempty[T]" ("x" "Y!1"))
                                  (("2"
                                    (lemma "infinite_nonempty[T]"
                                     ("x" "union(X!1,Y!1)"))
                                    (("2" (expand "nonempty?")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (lemma
                                           "convergent_subset"
                                           ("X"
                                            "Y!1"
                                            "Y"
                                            "union(X!1,Y!1)"
                                            "g"
                                            "f!1"))
                                          (("2"
                                            (split -1)
                                            (("1"
                                              (expand "convergent?")
                                              (("1"
                                                (lemma
                                                 "denumerable_enumeration_bij"
                                                 ("X" "union(X!1,Y!1)"))
                                                (("1"
                                                  (lemma
                                                   "denumerable_enumeration_bij"
                                                   ("X" "Y!1"))
                                                  (("1"
                                                    (lemma
                                                     "finite_enumeration_bij"
                                                     ("X" "X!1"))
                                                    (("1"
                                                      (name-replace
                                                       "DX"
                                                       "finite_enumeration(X!1)")
                                                      (("1"
                                                        (name-replace
                                                         "DY"
                                                         "denumerable_enumeration(Y!1)")
                                                        (("1"
                                                          (name-replace
                                                           "DXY"
                                                           "denumerable_enumeration(union(X!1,Y!1))")
                                                          (("1"
                                                            (lemma
                                                             "nonempty_card"
                                                             ("S" "X!1"))
                                                            (("1"
                                                              (expand
                                                               "nonempty?")
                                                              (("1"
                                                                (hide 1 2)
                                                                (("1"
                                                                  (name
                                                                   "PHI"
                                                                   "LAMBDA (n:nat): IF n<card(X!1) THEN DX(n) ELSE DY(n-card(X!1)) ENDIF")
                                                                  (("1"
                                                                    (case
                                                                     "bijective?[nat, (union(X!1, Y!1))](PHI)")
                                                                    (("1"
                                                                      (lemma
                                                                       "bijective_inverse_exists[nat, (union(X!1, Y!1))]"
                                                                       ("f"
                                                                        "DXY"))
                                                                      (("1"
                                                                        (expand
                                                                         "exists1")
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (hide
                                                                             -2)
                                                                            (("1"
                                                                              (skolem
                                                                               -
                                                                               ("CXY"))
                                                                              (("1"
                                                                                (lemma
                                                                                 "bij_inv_is_bij_alt[nat, (union(X!1, Y!1))]"
                                                                                 ("f"
                                                                                  "DXY"
                                                                                  "g"
                                                                                  "CXY"))
                                                                                (("1"
                                                                                  (lemma
                                                                                   "comp_inverse_right_alt[nat, (union(X!1, Y!1))]"
                                                                                   ("f"
                                                                                    "DXY"
                                                                                    "g"
                                                                                    "CXY"))
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "composition_bijective[nat,(union(X!1, Y!1)),nat]"
                                                                                     ("f1"
                                                                                      "PHI"
                                                                                      "f2"
                                                                                      "CXY"))
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "abs_series_bij_limit"
                                                                                       ("a"
                                                                                        "f!1 o DXY"
                                                                                        "phi"
                                                                                        "CXY o PHI"))
                                                                                      (("1"
                                                                                        (split
                                                                                         -1)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "extensionality"
                                                                                           ("f"
                                                                                            "f!1 o DXY o (CXY o PHI)"
                                                                                            "g"
                                                                                            "f!1 o PHI"))
                                                                                          (("1"
                                                                                            (split
                                                                                             -1)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -2)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "limit_series_shift"
                                                                                                   ("a"
                                                                                                    "f!1 o PHI"
                                                                                                    "pn"
                                                                                                    "card(X!1)"))
                                                                                                  (("1"
                                                                                                    (split
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "o"
                                                                                                         4)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "PHI"
                                                                                                           4)
                                                                                                          (("1"
                                                                                                            (hide-all-but
                                                                                                             (4
                                                                                                              -17
                                                                                                              -10))
                                                                                                            (("1"
                                                                                                              (case
                                                                                                               "forall (n:nat): n < card(X!1) => sigma(0,n,
            LAMBDA (x: nat):
              IF x < card(X!1) THEN f!1(DX(x))
              ELSE f!1(DY(x - card(X!1)))
              ENDIF)
       =
       sigma[below[card(X!1)]]
           (0, n, LAMBDA (x: below[card(X!1)]): f!1(DX(x)))")
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 "card(X!1)-1")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (hide
                                                                                                                 2)
                                                                                                                (("2"
                                                                                                                  (induct
                                                                                                                   "n")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "sigma")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "sigma"
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (skosimp*)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "sigma"
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("3"
                                                                                                                    (skosimp*)
                                                                                                                    (("3"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("4"
                                                                                                                    (skosimp*)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("5"
                                                                                                                    (skosimp*)
                                                                                                                    (("5"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("6"
                                                                                                                    (skosimp*)
                                                                                                                    (("6"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("3"
                                                                                                                (skosimp*)
                                                                                                                (("3"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("4"
                                                                                                                (skosimp*)
                                                                                                                nil
                                                                                                                nil)
                                                                                                               ("5"
                                                                                                                (skosimp*)
                                                                                                                (("5"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (lemma
                                                                                                       "abs_series_bij_conv"
                                                                                                       ("a"
                                                                                                        "f!1 o DXY"
                                                                                                        "phi"
                                                                                                        "CXY o PHI"))
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         -2
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "absconvergent?")
                                                                                                          (("2"
                                                                                                            (replace
                                                                                                             -15)
                                                                                                            (("2"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (skosimp)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -3
                                                                                                 "PHI(x!1)")
                                                                                                (("1"
                                                                                                  (hide-all-but
                                                                                                   (-3
                                                                                                    1))
                                                                                                  (("1"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   "PHI")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "union")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "member")
                                                                                                        (("2"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "absconvergent?")
                                                                                          (("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil)
                                                                                     ("3"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       (-2
                                                                        -9
                                                                        1
                                                                        -3
                                                                        -4
                                                                        -10))
                                                                      (("2"
                                                                        (expand
                                                                         "bijective?")
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (expand
                                                                             "PHI")
                                                                            (("2"
                                                                              (split)
                                                                              (("1"
                                                                                (expand
                                                                                 "injective?")
                                                                                (("1"
                                                                                  (skosimp*)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "disjoint?")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "intersection")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "empty?")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "member")
                                                                                          (("1"
                                                                                            (case-replace
                                                                                             "x1!1 < card(X!1)")
                                                                                            (("1"
                                                                                              (case-replace
                                                                                               "x2!1 < card(X!1)")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -5
                                                                                                 "x1!1"
                                                                                                 "x2!1")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -9
                                                                                                   "DX(x1!1)")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (case-replace
                                                                                               "x2!1 < card(X!1)")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -9
                                                                                                 "DX(x2!1)")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -5
                                                                                                   "x1!1 - card(X!1)"
                                                                                                   "x2!1 - card(X!1)")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "surjective?")
                                                                                (("2"
                                                                                  (skosimp*)
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "y!1")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "disjoint?")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "intersection")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "union")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "empty?")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "member")
                                                                                              (("2"
                                                                                                (split
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -4
                                                                                                   "y!1")
                                                                                                  (("1"
                                                                                                    (skosimp)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       +
                                                                                                       "x!1")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (inst
                                                                                                   -6
                                                                                                   "y!1")
                                                                                                  (("2"
                                                                                                    (skosimp)
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       +
                                                                                                       "x!1+card(X!1)")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (expand
                                                                       "PHI")
                                                                      (("3"
                                                                        (expand
                                                                         "union")
                                                                        (("3"
                                                                          (expand
                                                                           "member")
                                                                          (("3"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skosimp*)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but 1)
                                              (("2" (grind) nil nil))
                                              nil)
                                             ("3"
                                              (expand "convergent?")
                                              (("3" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide-all-but 1)
      (("3" (skosimp)
        (("3" (typepred "f!1")
          (("3"
            (lemma "convergent_subset"
             ("g" "f!1" "X" "Y!1" "Y" "union(X!1,Y!1)"))
            (("3" (assert)
              (("3" (hide-all-but 1) (("3" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skosimp)
      (("4" (typepred "f!1")
        (("4"
          (lemma "convergent_subset"
           ("g" "f!1" "X" "X!1" "Y" "union(X!1,Y!1)"))
          (("4" (assert)
            (("4" (hide-all-but 1)
              (("4" (typepred "Y!1")
                (("4" (rewrite "countably_infinite_def")
                  (("4" (expand "subset?")
                    (("4" (expand "union")
                      (("4" (expand "member") (("4" (skosimp) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (sigma_disjoint_union-1 nil 3351662957
   (""
    (case "FORALL (X:finite_set[T], Y:countably_infinite_set[T], f:(convergent?(union(X, Y)))):
        disjoint?(X, Y) IMPLIES
         sigma(union(X, Y), f) = sigma(X, f) + sigma(Y, f)")
    (("1" (skosimp)
      (("1" (typepred "X!1")
        (("1" (typepred "Y!1")
          (("1" (case "is_finite(X!1)")
            (("1" (case "is_finite(Y!1)")
              (("1" (hide -5 -3 -4)
                (("1" (name "NX" "card(X!1)")
                  (("1" (name "NY" "card(Y!1)")
                    (("1" (case-replace "X!1=emptyset[T]")
                      (("1" (rewrite "union_commutative" 1)
                        (("1" (rewrite "union_empty")
                          (("1" (rewrite "sigma_empty")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (case-replace "Y!1=emptyset[T]")
                        (("1" (rewrite "sigma_empty")
                          (("1" (rewrite "union_empty")
                            (("1" (assert) nil nil)) nil))
                          nil)
                         ("2" (rewrite "emptyset_is_empty?" 1 :dir rl)
                          (("2" (rewrite "emptyset_is_empty?" 2 :dir rl)
                            (("2" (typepred "f!1")
                              (("2" (expand "sigma")
                                (("2" (assert)
                                  (("2" (lemma "finite_union[T]")
                                    (("2" (inst - "X!1" "Y!1")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (case-replace
                                           "empty?(union(X!1, Y!1))")
                                          (("1"
                                            (hide-all-but (1 2 -1))
                                            (("1"
                                              (expand "union")
                                              (("1"
                                                (expand "empty?")
                                                (("1"
                                                  (skosimp*)
                                                  (("1"
                                                    (expand "member")
                                                    (("1"
                                                      (inst - "x!1")
                                                      (("1"
                                                        (flatten)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (lemma
                                               "card_disj_union"
                                               ("A" "X!1" "B" "Y!1"))
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (replace -1)
                                                  (("2"
                                                    (replace -4)
                                                    (("2"
                                                      (replace -5)
                                                      (("2"
                                                        (lemma
                                                         "series_bijection")
                                                        (("2"
                                                          (name
                                                           "PHI"
                                                           "LAMBDA (n:[below[card(union(X!1,Y!1))]]): IF n < card(X!1) THEN finite_enumeration(X!1)(n) ELSE finite_enumeration(Y!1)(n-card(X!1)) ENDIF")
                                                          (("1"
                                                            (lemma
                                                             "finite_enumeration_bij"
                                                             ("X"
                                                              "union(X!1,Y!1)"))
                                                            (("1"
                                                              (lemma
                                                               "finite_enumeration_bij"
                                                               ("X" "X!1"))
                                                              (("1"
                                                                (lemma
                                                                 "finite_enumeration_bij"
                                                                 ("X" "Y!1"))
                                                                (("1"
                                                                  (name-replace
                                                                   "FX"
                                                                   "finite_enumeration(X!1)")
                                                                  (("1"
                                                                    (name-replace
                                                                     "FY"
                                                                     "finite_enumeration(Y!1)")
                                                                    (("1"
                                                                      (name-replace
                                                                       "FXY"
                                                                       "finite_enumeration(union(X!1,Y!1))")
                                                                      (("1"
                                                                        (case
                                                                         "bijective?[below[card[T](union(X!1,Y!1))],(union(X!1,Y!1))](PHI)")
                                                                        (("1"
                                                                          (lemma
                                                                           "bijective_inverse_exists[below[card[T](union(X!1, Y!1))], (union(X!1, Y!1))]"
                                                                           ("f"
                                                                            "FXY"))
                                                                          (("1"
                                                                            (expand
                                                                             "exists1")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (skolem
                                                                                 -
                                                                                 ("CXY"))
                                                                                (("1"
                                                                                  (hide
                                                                                   -2)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "series")
                                                                                    (("1"
                                                                                      (hide
                                                                                       -6
                                                                                       -7)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "sigma_bijection[below[card(union(X!1, Y!1))]]"
                                                                                         ("low"
                                                                                          "0"
                                                                                          "high"
                                                                                          "NX+NY-1"
                                                                                          "F"
                                                                                          "f!1 o FXY"))
                                                                                        (("1"
                                                                                          (split
                                                                                           -1)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "bij_inv_is_bij_alt[below[card[T](union(X!1, Y!1))], (union(X!1, Y!1))]"
                                                                                             ("f"
                                                                                              "FXY"
                                                                                              "g"
                                                                                              "CXY"))
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "composition_bijective[below[card[T](union(X!1,Y!1))],(union(X!1,Y!1)),below[card[T](union(X!1, Y!1))]]"
                                                                                               ("f1"
                                                                                                "PHI"
                                                                                                "f2"
                                                                                                "CXY"))
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -
                                                                                                 "CXY o PHI")
                                                                                                (("1"
                                                                                                  (case-replace
                                                                                                   "sigma[subrange_T[below[card(union(X!1, Y!1))]](0, NX - 1 + NY)]
           (0, NX + NY - 1,
            f!1 o FXY o
             restrict
                 [below[card[T](union[T](X!1, Y!1))],
                  subrange_T[below[card[T](union[T](X!1, Y!1))]](0,
                                                                 NX - 1
                                                                 +
                                                                 NY),
                  below[card[T](union[T](X!1, Y!1))]]
                 (CXY o PHI)) = sigma[below[card(union(X!1, Y!1))]](0, NX + NY - 1, f!1 o PHI)")
                                                                                                  (("1"
                                                                                                    (case-replace
                                                                                                     "sigma[subrange_T[below[card(union(X!1, Y!1))]](0, NX - 1 + NY)]
          (0, NX + NY - 1,
           restrict
               [below[card(union(X!1, Y!1))],
                subrange_T[below[card(union(X!1, Y!1))]](0, NX - 1 + NY),
                real]
               (f!1 o FXY)) = sigma[below[card(union(X!1, Y!1))]](0, NX + NY - 1, f!1 o FXY)")
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -5
                                                                                                       4)
                                                                                                      (("1"
                                                                                                        (hide-all-but
                                                                                                         (4
                                                                                                          2
                                                                                                          3
                                                                                                          -14
                                                                                                          -15
                                                                                                          -11))
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "nonempty_card"
                                                                                                           ("S"
                                                                                                            "X!1"))
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "nonempty_card"
                                                                                                             ("S"
                                                                                                              "Y!1"))
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "nonempty?")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (case
                                                                                                                   "forall (n:nat): n <= NY-1 => sigma[below[card(union(X!1, Y!1))]](0, NX + n, f!1 o PHI) =
       sigma[below[card(Y!1)]](0, n, f!1 o FY) +
        sigma[below[card(X!1)]](0, NX - 1, f!1 o FX)")
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "NY-1")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (hide
                                                                                                                     2
                                                                                                                     3
                                                                                                                     4)
                                                                                                                    (("2"
                                                                                                                      (induct
                                                                                                                       "n")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "sigma"
                                                                                                                           1
                                                                                                                           2)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "sigma"
                                                                                                                             1
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "PHI"
                                                                                                                               1
                                                                                                                               1)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "FY"
                                                                                                                                 1)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "o"
                                                                                                                                   1
                                                                                                                                   3)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "o"
                                                                                                                                     1
                                                                                                                                     1)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -5
                                                                                                                                         1)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (hide
                                                                                                                                             -1
                                                                                                                                             -3
                                                                                                                                             -4)
                                                                                                                                            (("1"
                                                                                                                                              (case
                                                                                                                                               "forall (n:nat): n<=NX-1 => sigma(0, n, f!1 o PHI) =
       sigma[below[card(X!1)]](0, n, f!1 o FX)")
                                                                                                                                              (("1"
                                                                                                                                                (inst
                                                                                                                                                 -
                                                                                                                                                 "NX-1")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "sigma"
                                                                                                                                                     1
                                                                                                                                                     2)
                                                                                                                                                    (("1"
                                                                                                                                                      (propax)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (hide
                                                                                                                                                 2)
                                                                                                                                                (("2"
                                                                                                                                                  (induct
                                                                                                                                                   "n")
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "sigma")
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       "FX")
                                                                                                                                                      (("1"
                                                                                                                                                        (expand
                                                                                                                                                         "PHI")
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           "o ")
                                                                                                                                                          (("1"
                                                                                                                                                            (expand
                                                                                                                                                             "sigma")
                                                                                                                                                            (("1"
                                                                                                                                                              (propax)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (skosimp*)
                                                                                                                                                    (("2"
                                                                                                                                                      (assert)
                                                                                                                                                      (("2"
                                                                                                                                                        (expand
                                                                                                                                                         "sigma"
                                                                                                                                                         1)
                                                                                                                                                        (("2"
                                                                                                                                                          (assert)
                                                                                                                                                          (("2"
                                                                                                                                                            (replace
                                                                                                                                                             -1
                                                                                                                                                             1)
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              (("2"
                                                                                                                                                                (expand
                                                                                                                                                                 "o")
                                                                                                                                                                (("2"
                                                                                                                                                                  (expand
                                                                                                                                                                   "PHI")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (expand
                                                                                                                                                                     "FX")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (propax)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("3"
                                                                                                                                                    (skosimp*)
                                                                                                                                                    (("3"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("4"
                                                                                                                                                    (skosimp*)
                                                                                                                                                    (("4"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("5"
                                                                                                                                                    (skosimp*)
                                                                                                                                                    (("5"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("6"
                                                                                                                                                    (skosimp*)
                                                                                                                                                    (("6"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("3"
                                                                                                                                                (skosimp*)
                                                                                                                                                (("3"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("4"
                                                                                                                                                (skosimp*)
                                                                                                                                                (("4"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("5"
                                                                                                                                                (skosimp*)
                                                                                                                                                (("5"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("6"
                                                                                                                                                (skosimp*)
                                                                                                                                                (("6"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (skosimp*)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "sigma"
                                                                                                                             1
                                                                                                                             2)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "sigma"
                                                                                                                               1
                                                                                                                               1)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (replace
                                                                                                                                   -1
                                                                                                                                   1)
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "PHI"
                                                                                                                                       1)
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "o")
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "FY")
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("3"
                                                                                                                        (skosimp)
                                                                                                                        (("3"
                                                                                                                          (assert)
                                                                                                                          (("3"
                                                                                                                            (skosimp*)
                                                                                                                            (("3"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("4"
                                                                                                                        (skosimp)
                                                                                                                        (("4"
                                                                                                                          (assert)
                                                                                                                          (("4"
                                                                                                                            (skosimp*)
                                                                                                                            (("4"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("5"
                                                                                                                        (skosimp*)
                                                                                                                        (("5"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("6"
                                                                                                                        (skosimp*)
                                                                                                                        (("6"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("7"
                                                                                                                        (skosimp*)
                                                                                                                        (("7"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("3"
                                                                                                                    (skosimp*)
                                                                                                                    (("3"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("4"
                                                                                                                    (skosimp*)
                                                                                                                    (("4"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("5"
                                                                                                                    (skosimp*)
                                                                                                                    (("5"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("6"
                                                                                                                    (skosimp*)
                                                                                                                    (("6"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("7"
                                                                                                                    (skosimp*)
                                                                                                                    (("7"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (case
                                                                                                       "forall (n:nat): n <= NX + NY - 1 => sigma[subrange_T[below[card(union(X!1, Y!1))]](0, NX - 1 + NY)]
          (0, n,
           restrict
               [below[card(union(X!1, Y!1))],
                subrange_T[below[card(union(X!1, Y!1))]](0, NX - 1 + NY),
                real]
               (f!1 o FXY))
       = sigma[below[card(union(X!1, Y!1))]](0, n, f!1 o FXY)")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "NX+NY-1")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (lemma
                                                                                                           "nonempty_card"
                                                                                                           ("S"
                                                                                                            "X!1"))
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             "nonempty_card"
                                                                                                             ("S"
                                                                                                              "Y!1"))
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "nonempty?")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (induct
                                                                                                         "n")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "sigma")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "restrict")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "sigma"
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (skosimp*)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "sigma"
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "restrict")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("3"
                                                                                                          (skosimp*)
                                                                                                          (("3"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("4"
                                                                                                          (skosimp*)
                                                                                                          (("4"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("5"
                                                                                                          (skosimp*)
                                                                                                          (("5"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("6"
                                                                                                          (skosimp*)
                                                                                                          (("6"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("3"
                                                                                                        (skosimp*)
                                                                                                        (("3"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("4"
                                                                                                        (skosimp*)
                                                                                                        (("4"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("5"
                                                                                                        (skosimp*)
                                                                                                        (("5"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("6"
                                                                                                        (skosimp*)
                                                                                                        (("6"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("3"
                                                                                                      (skosimp*)
                                                                                                      (("3"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide
                                                                                                     5
                                                                                                     -3)
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       "comp_inverse_right_alt[below[card[T](union(X!1, Y!1))], (union(X!1, Y!1))]"
                                                                                                       ("f"
                                                                                                        "FXY"
                                                                                                        "g"
                                                                                                        "CXY"))
                                                                                                      (("2"
                                                                                                        (hide
                                                                                                         -2
                                                                                                         -3
                                                                                                         -4
                                                                                                         -5
                                                                                                         -6
                                                                                                         -7
                                                                                                         -8)
                                                                                                        (("2"
                                                                                                          (lemma
                                                                                                           "nonempty_card"
                                                                                                           ("S"
                                                                                                            "X!1"))
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             "nonempty_card"
                                                                                                             ("S"
                                                                                                              "Y!1"))
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "nonempty?")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (hide
                                                                                                                   2
                                                                                                                   3
                                                                                                                   4)
                                                                                                                  (("2"
                                                                                                                    (case
                                                                                                                     "forall (n:nat): n <= NX-1+NY => sigma[subrange_T[below[card(union(X!1, Y!1))]](0, NX - 1 + NY)]
          (0, n,
           f!1 o FXY o
            restrict
                [below[card[T](union[T](X!1, Y!1))],
                 subrange_T[below[card[T](union[T](X!1, Y!1))]]
                     (0, NX - 1 + NY),
                 below[card[T](union[T](X!1, Y!1))]]
                (CXY o PHI))
       = sigma[below[card(union(X!1, Y!1))]](0, n, f!1 o PHI)")
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -
                                                                                                                       "NX-1+NY")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (hide
                                                                                                                       2)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "restrict")
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "o ")
                                                                                                                          (("2"
                                                                                                                            (induct
                                                                                                                             "n")
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "sigma")
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 -
                                                                                                                                 "PHI(0)")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "sigma"
                                                                                                                                     1)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (skosimp*)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "sigma"
                                                                                                                                 1)
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (replace
                                                                                                                                     -1
                                                                                                                                     1)
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (hide
                                                                                                                                         -1)
                                                                                                                                        (("2"
                                                                                                                                          (inst
                                                                                                                                           -
                                                                                                                                           "PHI(1+j!1)")
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("3"
                                                                                                                              (skosimp*)
                                                                                                                              (("3"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("4"
                                                                                                                              (skosimp*)
                                                                                                                              (("4"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("5"
                                                                                                                              (skosimp*)
                                                                                                                              (("5"
                                                                                                                                (expand
                                                                                                                                 "PHI")
                                                                                                                                (("5"
                                                                                                                                  (case
                                                                                                                                   "x!1 < card(X!1)")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (typepred
                                                                                                                                       "finite_enumeration(X!1)(x!1)")
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "union")
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "member")
                                                                                                                                          (("1"
                                                                                                                                            (propax)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "union")
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "member")
                                                                                                                                        (("2"
                                                                                                                                          (propax)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("6"
                                                                                                                              (skosimp*)
                                                                                                                              (("6"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("7"
                                                                                                                              (skosimp*)
                                                                                                                              (("7"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("3"
                                                                                                                      (skosimp*)
                                                                                                                      (("3"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("4"
                                                                                                                      (skosimp*)
                                                                                                                      (("4"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("5"
                                                                                                                      (skosimp*)
                                                                                                                      (("5"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("6"
                                                                                                                      (skosimp*)
                                                                                                                      (("6"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("3"
                                                                                                    (skosimp)
                                                                                                    (("3"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (split
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (skosimp*)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "o")
                                                                                                      (("1"
                                                                                                        (typepred
                                                                                                         "CXY(PHI(x1!1))")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (hide
                                                                                                           2
                                                                                                           3
                                                                                                           4
                                                                                                           5
                                                                                                           6)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "union")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "member")
                                                                                                              (("2"
                                                                                                                (flatten)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "PHI")
                                                                                                                  (("2"
                                                                                                                    (case-replace
                                                                                                                     "x1!1 < card(X!1)")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "finite_enumeration")
                                                                                                                      (("1"
                                                                                                                        (propax)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide
                                                                                                     -2
                                                                                                     -4
                                                                                                     -5
                                                                                                     -6
                                                                                                     -7
                                                                                                     5)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "bijective?")
                                                                                                      (("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "o ")
                                                                                                          (("2"
                                                                                                            (split
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "restrict")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "injective?")
                                                                                                                (("1"
                                                                                                                  (skosimp*)
                                                                                                                  (("1"
                                                                                                                    (typepred
                                                                                                                     "x1!1")
                                                                                                                    (("1"
                                                                                                                      (typepred
                                                                                                                       "x2!1")
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -
                                                                                                                         "x1!1"
                                                                                                                         "x2!1")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (expand
                                                                                                               "surjective?")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "restrict")
                                                                                                                (("2"
                                                                                                                  (skosimp)
                                                                                                                  (("2"
                                                                                                                    (typepred
                                                                                                                     "y!1")
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -
                                                                                                                       "y!1")
                                                                                                                      (("2"
                                                                                                                        (skosimp)
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           +
                                                                                                                           "x!1")
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil)
                                                                                               ("3"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (lemma
                                                                                             "nonempty_card"
                                                                                             ("S"
                                                                                              "X!1"))
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "nonempty_card"
                                                                                               ("S"
                                                                                                "Y!1"))
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "nonempty?")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (lemma
                                                                                           "nonempty_card"
                                                                                           ("S"
                                                                                            "X!1"))
                                                                                          (("2"
                                                                                            (lemma
                                                                                             "nonempty_card"
                                                                                             ("S"
                                                                                              "Y!1"))
                                                                                            (("2"
                                                                                              (expand
                                                                                               "nonempty?")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (assert)
                                                                                          (("3"
                                                                                            (assert)
                                                                                            (("3"
                                                                                              (lemma
                                                                                               "nonempty_card"
                                                                                               ("S"
                                                                                                "union(X!1, Y!1)"))
                                                                                              (("3"
                                                                                                (expand
                                                                                                 "nonempty?")
                                                                                                (("3"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("4"
                                                                                          (skosimp*)
                                                                                          (("4"
                                                                                            (typepred
                                                                                             "x!1")
                                                                                            (("4"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           (3
                                                                            4
                                                                            1
                                                                            -1
                                                                            -2
                                                                            -13
                                                                            -11
                                                                            -12))
                                                                          (("2"
                                                                            (expand
                                                                             "bijective?")
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (expand
                                                                                 "PHI")
                                                                                (("2"
                                                                                  (expand
                                                                                   "FY")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "FX")
                                                                                    (("2"
                                                                                      (split)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "injective?")
                                                                                        (("1"
                                                                                          (skosimp*)
                                                                                          (("1"
                                                                                            (case-replace
                                                                                             "x1!1 < card(X!1)")
                                                                                            (("1"
                                                                                              (case-replace
                                                                                               "x2!1 < card(X!1)")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -6
                                                                                                 "x1!1"
                                                                                                 "x2!1")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "disjoint?")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "intersection")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "empty?")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "member")
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -9
                                                                                                           "finite_enumeration(X!1)(x1!1)")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (case-replace
                                                                                               "x2!1<card(X!1)")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "disjoint?")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "intersection")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "empty?")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "member")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -9
                                                                                                         "finite_enumeration(X!1)(x2!1)")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -2
                                                                                                   "x1!1-card(X!1)"
                                                                                                   "x2!1-card(X!1)")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "surjective?")
                                                                                        (("2"
                                                                                          (skosimp*)
                                                                                          (("2"
                                                                                            (case
                                                                                             "X!1(y!1)")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -5
                                                                                               "y!1")
                                                                                              (("1"
                                                                                                (skosimp)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   +
                                                                                                   "x!1")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand
                                                                                               "disjoint?")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "intersection")
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "y!1")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "union")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "member")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -3
                                                                                                           "y!1")
                                                                                                          (("2"
                                                                                                            (skosimp)
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               +
                                                                                                               "x!1+card(X!1)")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (skosimp)
                                                                          (("3"
                                                                            (typepred
                                                                             "x1!1")
                                                                            (("3"
                                                                              (expand
                                                                               "PHI"
                                                                               1)
                                                                              (("3"
                                                                                (expand
                                                                                 "union"
                                                                                 1)
                                                                                (("3"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("3"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skosimp)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (propax) nil nil))
                    nil)
                   ("2" (propax) nil nil))
                  nil))
                nil)
               ("2" (inst - "X!1" "Y!1" "f!1")
                (("1" (assert) nil nil)
                 ("2" (rewrite "countably_infinite_def") nil nil))
                nil))
              nil)
             ("2" (case "is_finite(Y!1)")
              (("1" (inst - "Y!1" "X!1" "f!1")
                (("1" (rewrite "union_commutative" -4)
                  (("1" (assert)
                    (("1" (hide-all-but (-4 2))
                      (("1" (expand "disjoint?")
                        (("1" (rewrite "intersection_commutative") nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (rewrite "union_commutative")
                  (("2" (typepred "f!1") (("2" (propax) nil nil)) nil)) nil)
                 ("3" (rewrite "countably_infinite_def") nil nil))
                nil)
               ("2" (assert)
                (("2" (hide -3)
                  (("2" (typepred "f!1")
                    (("2"
                      (lemma "convergent_subset"
                       ("X" "X!1" "Y" "union(X!1,Y!1)" "g" "f!1"))
                      (("2"
                        (lemma "convergent_subset"
                         ("X" "Y!1" "Y" "union(X!1,Y!1)" "g" "f!1"))
                        (("2" (assert)
                          (("2" (split -1)
                            (("1" (split -2)
                              (("1" (expand "sigma")
                                (("1" (expand "convergent?")
                                  (("1"
                                    (lemma "infinite_union_right"
                                     ("S" "X!1" "Inf" "Y!1"))
                                    (("1"
                                      (lemma "infinite_nonempty" ("x" "X!1"))
                                      (("1"
                                        (lemma
                                         "infinite_nonempty"
                                         ("x" "Y!1"))
                                        (("1"
                                          (lemma
                                           "infinite_nonempty"
                                           ("x" "union(X!1,Y!1)"))
                                          (("1"
                                            (expand "nonempty?")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lemma
                                                 "denumerable_enumeration_bij"
                                                 ("X" "X!1"))
                                                (("1"
                                                  (lemma
                                                   "denumerable_enumeration_bij"
                                                   ("X" "Y!1"))
                                                  (("1"
                                                    (lemma
                                                     "denumerable_enumeration_bij"
                                                     ("X" "union(X!1,Y!1)"))
                                                    (("1"
                                                      (name-replace
                                                       "DXY"
                                                       "denumerable_enumeration(union(X!1,Y!1))")
                                                      (("1"
                                                        (name-replace
                                                         "DX"
                                                         "denumerable_enumeration(X!1)")
                                                        (("1"
                                                          (name-replace
                                                           "DY"
                                                           "denumerable_enumeration(Y!1)")
                                                          (("1"
                                                            (case
                                                             "forall (n:nat): even?(n) IMPLIES integer_pred(n / 2) & n/2 >= 0")
                                                            (("1"
                                                              (case
                                                               "forall (n:nat): NOT even?(n) IMPLIES integer_pred((n-1) / 2) & (n-1)/2 >= 0")
                                                              (("1"
                                                                (name
                                                                 "PHI"
                                                                 "LAMBDA (n:nat): IF even?(n) THEN DX(n/2) ELSE DY((n-1)/2) ENDIF")
                                                                (("1"
                                                                  (case
                                                                   "bijective?[nat,(union(X!1, Y!1))](PHI)")
                                                                  (("1"
                                                                    (lemma
                                                                     "bijective_inverse_exists[nat, (union(X!1, Y!1))]"
                                                                     ("f"
                                                                      "DXY"))
                                                                    (("1"
                                                                      (expand
                                                                       "exists1")
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (hide
                                                                           -2)
                                                                          (("1"
                                                                            (skolem
                                                                             -
                                                                             ("CXY"))
                                                                            (("1"
                                                                              (lemma
                                                                               "bij_inv_is_bij_alt[nat, (union(X!1, Y!1))]"
                                                                               ("f"
                                                                                "DXY"
                                                                                "g"
                                                                                "CXY"))
                                                                              (("1"
                                                                                (lemma
                                                                                 "comp_inverse_right_alt[nat, (union(X!1, Y!1))]"
                                                                                 ("f"
                                                                                  "DXY"
                                                                                  "g"
                                                                                  "CXY"))
                                                                                (("1"
                                                                                  (lemma
                                                                                   "composition_bijective[nat,(union(X!1, Y!1)),nat]"
                                                                                   ("f1"
                                                                                    "PHI"
                                                                                    "f2"
                                                                                    "CXY"))
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "abs_series_bij_limit"
                                                                                     ("a"
                                                                                      "f!1 o DXY"
                                                                                      "phi"
                                                                                      "CXY o PHI"))
                                                                                    (("1"
                                                                                      (split
                                                                                       -1)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "extensionality"
                                                                                         ("f"
                                                                                          "f!1 o DXY o (CXY o PHI)"
                                                                                          "g"
                                                                                          "f!1 o PHI"))
                                                                                        (("1"
                                                                                          (split
                                                                                           -1)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -2)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "forall (x:real): convergence(series(f!1 o DX),x) IFF convergence(series(LAMBDA (n:nat): if even?(n) then f!1(DX(n/2)) else 0 endif),x)")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "limit(series(f!1 o DX))")
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     "limit_equiv"
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "absconvergent_series_is_convergent"
                                                                                                       ("x"
                                                                                                        "f!1 o DX"))
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (case
                                                                                                           "forall (x:real): convergence(series(f!1 o DY),x) IFF convergence(series(LAMBDA (n:nat):IF odd?(n) THEN f!1(DY((n-1)/2)) ELSE 0 ENDIF),x)")
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "limit(series(f!1 o DY))")
                                                                                                            (("1"
                                                                                                              (rewrite
                                                                                                               "limit_equiv"
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (lemma
                                                                                                                 "absconvergent_series_is_convergent"
                                                                                                                 ("x"
                                                                                                                  "f!1 o DY"))
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (lemma
                                                                                                                     "cnv_seq_sum"
                                                                                                                     ("s1"
                                                                                                                      "series(LAMBDA (n: nat):
                           IF even?(n) THEN f!1(DX(n / 2)) ELSE 0 ENDIF)"
                                                                                                                      "l1"
                                                                                                                      "limit(series(f!1 o DX))"
                                                                                                                      "s2"
                                                                                                                      "series(LAMBDA (n: nat):
                           IF odd?(n) THEN f!1(DY((n - 1) / 2))
                           ELSE 0
                           ENDIF)"
                                                                                                                      "l2"
                                                                                                                      "limit(series(f!1 o DY))"))
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (rewrite
                                                                                                                         "series_sum"
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (lemma
                                                                                                                           "extensionality"
                                                                                                                           ("f"
                                                                                                                            "(LAMBDA (n: nat):
                            IF even?(n) THEN f!1(DX(n / 2)) ELSE 0 ENDIF)
                          +
                          (LAMBDA (n: nat):
                             IF odd?(n) THEN f!1(DY((n - 1) / 2))
                             ELSE 0
                             ENDIF)"
                                                                                                                            "g"
                                                                                                                            "f!1 o PHI"))
                                                                                                                          (("1"
                                                                                                                            (split
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (replace
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (rewrite
                                                                                                                                 "limit_equiv"
                                                                                                                                 -2)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (hide-all-but
                                                                                                                               1)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "+")
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "o")
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "PHI")
                                                                                                                                    (("2"
                                                                                                                                      (skosimp)
                                                                                                                                      (("2"
                                                                                                                                        (case-replace
                                                                                                                                         "even?(x!1)")
                                                                                                                                        (("1"
                                                                                                                                          (lemma
                                                                                                                                           "even_iff_not_odd"
                                                                                                                                           ("x"
                                                                                                                                            "x!1"))
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (lemma
                                                                                                                                           "even_iff_not_odd"
                                                                                                                                           ("x"
                                                                                                                                            "x!1"))
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (hide-all-but
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (skosimp)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "series")
                                                                                                                (("2"
                                                                                                                  (case
                                                                                                                   "forall (n:nat): sigma(0, n, f!1 o DY) = sigma(0,2*n+1 ,
                           LAMBDA (n: nat):
                             IF odd?(n) THEN f!1(DY((n - 1) / 2))
                             ELSE 0
                             ENDIF)")
                                                                                                                  (("1"
                                                                                                                    (case
                                                                                                                     "FORALL (n: nat):
        even?(n) =>
         sigma(0, n,
               (LAMBDA (n: nat):
                  IF odd?(n) THEN f!1(DY((n - 1) / 2)) ELSE 0 ENDIF))
          = IF n = 0 THEN 0 ELSE sigma(0, n / 2-1, f!1 o DY) ENDIF")
                                                                                                                    (("1"
                                                                                                                      (case
                                                                                                                       "FORALL (n: nat):
        odd?(n) =>
         sigma(0, n,
               (LAMBDA (n: nat):
                  IF odd?(n) THEN f!1(DY((n - 1) / 2)) ELSE 0 ENDIF))
          = sigma(0, (n-1)/ 2, f!1 o DY)")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "convergence")
                                                                                                                        (("1"
                                                                                                                          (split
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (skosimp*)
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -
                                                                                                                               "epsilon!1")
                                                                                                                              (("1"
                                                                                                                                (skosimp)
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   +
                                                                                                                                   "2*n!1+1")
                                                                                                                                  (("1"
                                                                                                                                    (skosimp)
                                                                                                                                    (("1"
                                                                                                                                      (case
                                                                                                                                       "even?(i!1)")
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         -5
                                                                                                                                         "i!1")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (replace
                                                                                                                                             -5)
                                                                                                                                            (("1"
                                                                                                                                              (inst
                                                                                                                                               -2
                                                                                                                                               "i!1/2-1")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (hide-all-but
                                                                                                                                                   (-1
                                                                                                                                                    -2
                                                                                                                                                    1))
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "even?")
                                                                                                                                                    (("1"
                                                                                                                                                      (propax)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (case-replace
                                                                                                                                                 "i!1=0")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (expand
                                                                                                                                                   "even?")
                                                                                                                                                  (("2"
                                                                                                                                                    (skosimp)
                                                                                                                                                    (("2"
                                                                                                                                                      (replace
                                                                                                                                                       -1)
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        (("2"
                                                                                                                                                          (case-replace
                                                                                                                                                           "2 * j!1 / 2 = j!1")
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (lemma
                                                                                                                                                             "div_cancel2"
                                                                                                                                                             ("x"
                                                                                                                                                              "j!1"
                                                                                                                                                              "n0z"
                                                                                                                                                              "2"))
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (rewrite
                                                                                                                                         "even_iff_not_odd"
                                                                                                                                         1)
                                                                                                                                        (("2"
                                                                                                                                          (inst
                                                                                                                                           -4
                                                                                                                                           "i!1")
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            (("2"
                                                                                                                                              (replace
                                                                                                                                               -4)
                                                                                                                                              (("2"
                                                                                                                                                (hide
                                                                                                                                                 -5
                                                                                                                                                 -6
                                                                                                                                                 -4)
                                                                                                                                                (("2"
                                                                                                                                                  (inst
                                                                                                                                                   -
                                                                                                                                                   "(i!1-1)/2")
                                                                                                                                                  (("1"
                                                                                                                                                    (split
                                                                                                                                                     -2)
                                                                                                                                                    (("1"
                                                                                                                                                      (propax)
                                                                                                                                                      nil
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (expand
                                                                                                                                                     "odd?")
                                                                                                                                                    (("2"
                                                                                                                                                      (skosimp)
                                                                                                                                                      (("2"
                                                                                                                                                        (replace
                                                                                                                                                         -1)
                                                                                                                                                        (("2"
                                                                                                                                                          (assert)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (skosimp*)
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               -
                                                                                                                               "epsilon!1")
                                                                                                                              (("2"
                                                                                                                                (skosimp)
                                                                                                                                (("2"
                                                                                                                                  (inst
                                                                                                                                   +
                                                                                                                                   "2*n!1+1")
                                                                                                                                  (("2"
                                                                                                                                    (skosimp*)
                                                                                                                                    (("2"
                                                                                                                                      (inst
                                                                                                                                       -5
                                                                                                                                       "i!1")
                                                                                                                                      (("2"
                                                                                                                                        (inst
                                                                                                                                         -1
                                                                                                                                         "2*i!1+1")
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (hide-all-but
                                                                                                                         (-2
                                                                                                                          1))
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "odd?"
                                                                                                                           1
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (skosimp*)
                                                                                                                            (("2"
                                                                                                                              (replace
                                                                                                                               -1)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (inst
                                                                                                                                   -
                                                                                                                                   "j!1")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (case
                                                                                                                                       "forall (i,j:int):i<j=>i+1<=j")
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         -
                                                                                                                                         "-1"
                                                                                                                                         "j!1")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (hide-all-but
                                                                                                                                         1)
                                                                                                                                        (("2"
                                                                                                                                          (grind)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("3"
                                                                                                                        (hide
                                                                                                                         -1
                                                                                                                         2)
                                                                                                                        (("3"
                                                                                                                          (skosimp*)
                                                                                                                          (("3"
                                                                                                                            (assert)
                                                                                                                            (("3"
                                                                                                                              (case
                                                                                                                               "forall (i,j:int):i<j=>i+1<=j")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "odd?")
                                                                                                                                  (("1"
                                                                                                                                    (skosimp)
                                                                                                                                    (("1"
                                                                                                                                      (replace
                                                                                                                                       -2)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (flatten)
                                                                                                                                          (("1"
                                                                                                                                            (lemma
                                                                                                                                             "trichotomy"
                                                                                                                                             ("x"
                                                                                                                                              "j!1"))
                                                                                                                                            (("1"
                                                                                                                                              (split
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil)
                                                                                                                                               ("3"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (hide-all-but
                                                                                                                                 1)
                                                                                                                                (("2"
                                                                                                                                  (grind)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("4"
                                                                                                                        (skosimp*)
                                                                                                                        (("4"
                                                                                                                          (hide-all-but
                                                                                                                           (-2
                                                                                                                            1))
                                                                                                                          (("4"
                                                                                                                            (expand
                                                                                                                             "odd?")
                                                                                                                            (("4"
                                                                                                                              (skosimp)
                                                                                                                              (("4"
                                                                                                                                (replace
                                                                                                                                 -1)
                                                                                                                                (("4"
                                                                                                                                  (assert)
                                                                                                                                  (("4"
                                                                                                                                    (lemma
                                                                                                                                     "trichotomy"
                                                                                                                                     ("x"
                                                                                                                                      "j!1"))
                                                                                                                                    (("4"
                                                                                                                                      (split
                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil)
                                                                                                                                       ("3"
                                                                                                                                        (case
                                                                                                                                         "forall (i,j:int): i< j => i+1<=j")
                                                                                                                                        (("1"
                                                                                                                                          (inst
                                                                                                                                           -
                                                                                                                                           "j!1"
                                                                                                                                           "0")
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (hide-all-but
                                                                                                                                           1)
                                                                                                                                          (("2"
                                                                                                                                            (grind)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (hide
                                                                                                                       2)
                                                                                                                      (("2"
                                                                                                                        (skosimp)
                                                                                                                        (("2"
                                                                                                                          (case-replace
                                                                                                                           "n!1=0")
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "sigma")
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "odd?")
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "sigma"
                                                                                                                                 1)
                                                                                                                                (("1"
                                                                                                                                  (propax)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "even?")
                                                                                                                              (("2"
                                                                                                                                (skosimp)
                                                                                                                                (("2"
                                                                                                                                  (replace
                                                                                                                                   -1)
                                                                                                                                  (("2"
                                                                                                                                    (inst
                                                                                                                                     -
                                                                                                                                     "j!1-1")
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "sigma"
                                                                                                                                       2
                                                                                                                                       1)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (lemma
                                                                                                                                           "even_iff_not_odd"
                                                                                                                                           ("x"
                                                                                                                                            "2*j!1"))
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "even?"
                                                                                                                                             -1)
                                                                                                                                            (("1"
                                                                                                                                              (flatten
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (hide
                                                                                                                                                 -2)
                                                                                                                                                (("1"
                                                                                                                                                  (split
                                                                                                                                                   -1)
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (inst
                                                                                                                                                     +
                                                                                                                                                     "j!1")
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("3"
                                                                                                                      (expand
                                                                                                                       "even?")
                                                                                                                      (("3"
                                                                                                                        (skosimp*)
                                                                                                                        (("3"
                                                                                                                          (assert)
                                                                                                                          (("3"
                                                                                                                            (typepred
                                                                                                                             "n!1")
                                                                                                                            (("3"
                                                                                                                              (replace
                                                                                                                               -2)
                                                                                                                              (("3"
                                                                                                                                (assert)
                                                                                                                                (("3"
                                                                                                                                  (case
                                                                                                                                   "forall (i,j:int):i<j=>i+1<=j")
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     -
                                                                                                                                     "0"
                                                                                                                                     "j!1")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (lemma
                                                                                                                                         "div_cancel2"
                                                                                                                                         ("x"
                                                                                                                                          "j!1"
                                                                                                                                          "n0z"
                                                                                                                                          "2"))
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (case-replace
                                                                                                                                             "2 * j!1 / 2 - 1 = j!1-1")
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (hide-all-but
                                                                                                                                     1)
                                                                                                                                    (("2"
                                                                                                                                      (grind)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("4"
                                                                                                                      (hide-all-but
                                                                                                                       1)
                                                                                                                      (("4"
                                                                                                                        (expand
                                                                                                                         "odd?")
                                                                                                                        (("4"
                                                                                                                          (skosimp*)
                                                                                                                          (("4"
                                                                                                                            (replace
                                                                                                                             -2)
                                                                                                                            (("4"
                                                                                                                              (assert)
                                                                                                                              (("4"
                                                                                                                                (case
                                                                                                                                 "forall (i,j:int):i<j=>i+1<=j")
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -
                                                                                                                                   "-1"
                                                                                                                                   "j!1")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (hide-all-but
                                                                                                                                   1)
                                                                                                                                  (("2"
                                                                                                                                    (grind)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (hide
                                                                                                                     2)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "o ")
                                                                                                                      (("2"
                                                                                                                        (induct
                                                                                                                         "n")
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "sigma")
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "sigma")
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "odd?")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (skosimp*)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "sigma"
                                                                                                                             1)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "sigma"
                                                                                                                               1
                                                                                                                               2)
                                                                                                                              (("2"
                                                                                                                                (replace
                                                                                                                                 -1
                                                                                                                                 1
                                                                                                                                 rl)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "odd?")
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("3"
                                                                                                                          (expand
                                                                                                                           "odd?")
                                                                                                                          (("3"
                                                                                                                            (skosimp*)
                                                                                                                            (("3"
                                                                                                                              (assert)
                                                                                                                              (("3"
                                                                                                                                (case
                                                                                                                                 "forall (i,j:int):i<j=>i+1<=j")
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -
                                                                                                                                   "-1"
                                                                                                                                   "j!1")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (hide-all-but
                                                                                                                                   1)
                                                                                                                                  (("2"
                                                                                                                                    (grind)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("3"
                                                                                                            (expand
                                                                                                             "odd?")
                                                                                                            (("3"
                                                                                                              (skosimp)
                                                                                                              (("3"
                                                                                                                (case
                                                                                                                 "forall (i,j:int):i<j=>i+1<=j")
                                                                                                                (("1"
                                                                                                                  (skosimp)
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "-1"
                                                                                                                     "j!1")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide-all-but
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (grind)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide-all-but
                                                                                                   (1
                                                                                                    -14))
                                                                                                  (("2"
                                                                                                    (skosimp*)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "series")
                                                                                                      (("2"
                                                                                                        (case
                                                                                                         "FORALL (n:nat):sigma(0,2*n,(LAMBDA (n: nat):
                  IF even?(n) THEN f!1(DX(n / 2)) ELSE 0 ENDIF))
          = sigma(0,n,f!1 o DX)")
                                                                                                        (("1"
                                                                                                          (case
                                                                                                           "FORALL (n: nat): even?(n) =>
        sigma(0, n,
              (LAMBDA (n: nat):
                 IF even?(n) THEN f!1(DX(n / 2)) ELSE 0 ENDIF))
         = sigma(0, n/2, f!1 o DX)")
                                                                                                          (("1"
                                                                                                            (case
                                                                                                             "FORALL (n: nat):
        odd?(n) =>
         sigma(0, n,
               (LAMBDA (n: nat):
                  IF even?(n) THEN f!1(DX(n / 2)) ELSE 0 ENDIF))
          = sigma(0, (n-1) / 2, f!1 o DX)")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "convergence")
                                                                                                              (("1"
                                                                                                                (split
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (skosimp*)
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "epsilon!1")
                                                                                                                    (("1"
                                                                                                                      (skosimp)
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         +
                                                                                                                         "2*n!1")
                                                                                                                        (("1"
                                                                                                                          (skosimp)
                                                                                                                          (("1"
                                                                                                                            (case
                                                                                                                             "even?(i!1)")
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "even?"
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (skosimp)
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -
                                                                                                                                   "j!1")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (inst
                                                                                                                                       -5
                                                                                                                                       "i!1")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (rewrite
                                                                                                                               "even_or_odd"
                                                                                                                               1)
                                                                                                                              (("2"
                                                                                                                                (inst
                                                                                                                                 -4
                                                                                                                                 "i!1")
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (replace
                                                                                                                                     -4
                                                                                                                                     1)
                                                                                                                                    (("2"
                                                                                                                                      (inst
                                                                                                                                       -2
                                                                                                                                       "(i!1-1)/2")
                                                                                                                                      (("1"
                                                                                                                                        (split
                                                                                                                                         -2)
                                                                                                                                        (("1"
                                                                                                                                          (propax)
                                                                                                                                          nil
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (assert)
                                                                                                                                          (("2"
                                                                                                                                            (hide-all-but
                                                                                                                                             (-1
                                                                                                                                              -2
                                                                                                                                              1))
                                                                                                                                            (("2"
                                                                                                                                              (expand
                                                                                                                                               "odd?")
                                                                                                                                              (("2"
                                                                                                                                                (propax)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "odd?")
                                                                                                                                          (("2"
                                                                                                                                            (skosimp)
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (skosimp*)
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "epsilon!1")
                                                                                                                    (("2"
                                                                                                                      (skosimp)
                                                                                                                      (("2"
                                                                                                                        (case
                                                                                                                         "even?(n!1)")
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "even?"
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (skosimp)
                                                                                                                            (("1"
                                                                                                                              (replace
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 +
                                                                                                                                 "j!1")
                                                                                                                                (("1"
                                                                                                                                  (skosimp)
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     -
                                                                                                                                     "2*i!1")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         -5
                                                                                                                                         "2*i!1")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (rewrite
                                                                                                                           "even_or_odd"
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "odd?"
                                                                                                                             -1)
                                                                                                                            (("2"
                                                                                                                              (skosimp)
                                                                                                                              (("2"
                                                                                                                                (replace
                                                                                                                                 -1)
                                                                                                                                (("2"
                                                                                                                                  (inst
                                                                                                                                   +
                                                                                                                                   "j!1")
                                                                                                                                  (("1"
                                                                                                                                    (skosimp)
                                                                                                                                    (("1"
                                                                                                                                      (inst
                                                                                                                                       -
                                                                                                                                       "1+2*i!1")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (inst
                                                                                                                                           -4
                                                                                                                                           "1+2*i!1")
                                                                                                                                          (("1"
                                                                                                                                            (split
                                                                                                                                             -4)
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (expand
                                                                                                                                               "odd?")
                                                                                                                                              (("2"
                                                                                                                                                (inst
                                                                                                                                                 +
                                                                                                                                                 "i!1")
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (hide-all-but
                                                                                                               (-2
                                                                                                                1))
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "odd?")
                                                                                                                (("2"
                                                                                                                  (skosimp*)
                                                                                                                  (("2"
                                                                                                                    (replace
                                                                                                                     -1)
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -
                                                                                                                       "j!1")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "sigma"
                                                                                                                           1
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -2)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (case
                                                                                                                                 "forall (i,j:int):i<j=>i+1<=j")
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -
                                                                                                                                   "-1"
                                                                                                                                   "j!1")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (lift-if
                                                                                                                                       1)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (rewrite
                                                                                                                                           "even_or_odd"
                                                                                                                                           1)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (hide-all-but
                                                                                                                                   1)
                                                                                                                                  (("2"
                                                                                                                                    (grind)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (case
                                                                                                                         "forall (i,j:int):i<j=>i+1<=j")
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -
                                                                                                                           "-1"
                                                                                                                           "j!1")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (hide-all-but
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (grind)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("3"
                                                                                                              (expand
                                                                                                               "odd?")
                                                                                                              (("3"
                                                                                                                (skosimp*)
                                                                                                                (("3"
                                                                                                                  (assert)
                                                                                                                  (("3"
                                                                                                                    (case
                                                                                                                     "forall (i,j:int):i<j=>i+1<=j")
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -
                                                                                                                       "-1"
                                                                                                                       "j!1")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (hide-all-but
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("4"
                                                                                                              (expand
                                                                                                               "even?")
                                                                                                              (("4"
                                                                                                                (skosimp*)
                                                                                                                (("4"
                                                                                                                  (case
                                                                                                                   "forall (i,j:int):i<j=>i+1<=j")
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "-1"
                                                                                                                     "j!1")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (hide-all-but
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (hide-all-but
                                                                                                             (-1
                                                                                                              1))
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "even?"
                                                                                                               1
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (skosimp*)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -
                                                                                                                   "j!1")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("3"
                                                                                                            (expand
                                                                                                             "even?")
                                                                                                            (("3"
                                                                                                              (skosimp*)
                                                                                                              (("3"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("4"
                                                                                                            (expand
                                                                                                             "even?")
                                                                                                            (("4"
                                                                                                              (skosimp*)
                                                                                                              (("4"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (hide-all-but
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (induct
                                                                                                             "n")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "o")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "sigma")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (skosimp*)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "sigma"
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "o")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "sigma"
                                                                                                                       1
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (replace
                                                                                                                         -1
                                                                                                                         1)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (lift-if
                                                                                                                             1)
                                                                                                                            (("2"
                                                                                                                              (prop)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "even?")
                                                                                                                                (("1"
                                                                                                                                  (propax)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (rewrite
                                                                                                                                 "even_or_odd"
                                                                                                                                 1)
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("3"
                                                                                                              (expand
                                                                                                               "even?")
                                                                                                              (("3"
                                                                                                                (skosimp*)
                                                                                                                (("3"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("3"
                                                                                                          (skosimp*)
                                                                                                          (("3"
                                                                                                            (assert)
                                                                                                            (("3"
                                                                                                              (expand
                                                                                                               "even?")
                                                                                                              (("3"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (expand
                                                                                                   "even?")
                                                                                                  (("3"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (expand
                                                                                             "o")
                                                                                            (("2"
                                                                                              (skosimp)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -3
                                                                                                 "PHI(x!1)")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "absconvergent?")
                                                                                        (("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil)
                                                                                   ("3"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (-2
                                                                      -3
                                                                      -5
                                                                      -6
                                                                      -12
                                                                      1))
                                                                    (("2"
                                                                      (expand
                                                                       "bijective?")
                                                                      (("2"
                                                                        (expand
                                                                         "PHI")
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (split
                                                                             1)
                                                                            (("1"
                                                                              (expand
                                                                               "injective?")
                                                                              (("1"
                                                                                (skosimp*)
                                                                                (("1"
                                                                                  (case-replace
                                                                                   "even?(x1!1)")
                                                                                  (("1"
                                                                                    (case-replace
                                                                                     "even?(x2!1)")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -8
                                                                                       "x1!1/2"
                                                                                       "x2!1/2")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (inst
                                                                                         -5
                                                                                         "x2!1")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (inst
                                                                                         -5
                                                                                         "x1!1")
                                                                                        (("3"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (expand
                                                                                       "disjoint?")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "intersection")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "empty?")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "member")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -9
                                                                                                 "DX(x1!1/2)")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (inst
                                                                                                   -4
                                                                                                   "x1!1")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (case-replace
                                                                                     "even?(x2!1)")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "disjoint?")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "intersection")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "empty?")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "member")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -4
                                                                                                 "x2!1")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (typepred
                                                                                                     "DX(x2!1 / 2)")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -10
                                                                                                       "DX(x2!1 / 2)")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (inst-cp
                                                                                         -
                                                                                         "x1!1")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -
                                                                                           "x2!1")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -7
                                                                                                 "(x1!1 - 1) / 2"
                                                                                                 "(x2!1 - 1) / 2")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "surjective?")
                                                                              (("2"
                                                                                (skosimp*)
                                                                                (("2"
                                                                                  (typepred
                                                                                   "y!1")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "union")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "member")
                                                                                      (("2"
                                                                                        (split
                                                                                         -1)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -7
                                                                                           "y!1")
                                                                                          (("1"
                                                                                            (skosimp)
                                                                                            (("1"
                                                                                              (inst
                                                                                               +
                                                                                               "2*x!1")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (inst
                                                                                           -5
                                                                                           "y!1")
                                                                                          (("2"
                                                                                            (skosimp)
                                                                                            (("2"
                                                                                              (inst
                                                                                               +
                                                                                               "2*x!1+1")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   "div_cancel2"
                                                                                                   ("x"
                                                                                                    "x!1"
                                                                                                    "n0z"
                                                                                                    "2"))
                                                                                                  (("2"
                                                                                                    (lift-if
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (prop)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "even?")
                                                                                                          (("2"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (expand
                                                                     "PHI")
                                                                    (("3"
                                                                      (expand
                                                                       "union")
                                                                      (("3"
                                                                        (expand
                                                                         "member")
                                                                        (("3"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (propax)
                                                                  nil
                                                                  nil)
                                                                 ("3"
                                                                  (skosimp)
                                                                  (("3"
                                                                    (inst
                                                                     -3
                                                                     "n!1")
                                                                    (("3"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (skosimp)
                                                                  (("2"
                                                                    (rewrite
                                                                     "even_or_odd")
                                                                    (("2"
                                                                      (expand
                                                                       "odd?")
                                                                      (("2"
                                                                        (skosimp)
                                                                        (("2"
                                                                          (replace
                                                                           -1)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (case
                                                                               "forall (i,j:int):i<j=>i+1<=j")
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "-1"
                                                                                 "j!1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but 1)
                                                              (("2"
                                                                (expand
                                                                 "even?")
                                                                (("2"
                                                                  (skosimp*)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide-all-but 1) (("2" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skosimp*)
        (("2" (typepred "X!1")
          (("2" (typepred "Y!1")
            (("2" (typepred "f!1")
              (("2" (case-replace "X!1=emptyset[T]")
                (("1" (rewrite "sigma_empty" 1)
                  (("1" (rewrite "union_commutative" 1)
                    (("1" (rewrite "union_empty" 1) (("1" (assert) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (rewrite "emptyset_is_empty?" 1 :dir rl)
                  (("2" (rewrite "countably_infinite_def")
                    (("2" (flatten)
                      (("2"
                        (lemma "infinite_union_right" ("S" "X!1" "Inf" "Y!1"))
                        (("2" (expand "convergent?")
                          (("2" (assert)
                            (("2" (expand "sigma")
                              (("2" (assert)
                                (("2"
                                  (lemma "infinite_nonempty[T]" ("x" "Y!1"))
                                  (("2"
                                    (lemma "infinite_nonempty[T]"
                                     ("x" "union(X!1,Y!1)"))
                                    (("2" (expand "nonempty?")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (lemma
                                           "convergent_subset"
                                           ("X"
                                            "Y!1"
                                            "Y"
                                            "union(X!1,Y!1)"
                                            "g"
                                            "f!1"))
                                          (("2"
                                            (split -1)
                                            (("1"
                                              (expand "convergent?")
                                              (("1"
                                                (lemma
                                                 "denumerable_enumeration_bij"
                                                 ("X" "union(X!1,Y!1)"))
                                                (("1"
                                                  (lemma
                                                   "denumerable_enumeration_bij"
                                                   ("X" "Y!1"))
                                                  (("1"
                                                    (lemma
                                                     "finite_enumeration_bij"
                                                     ("X" "X!1"))
                                                    (("1"
                                                      (name-replace
                                                       "DX"
                                                       "finite_enumeration(X!1)")
                                                      (("1"
                                                        (name-replace
                                                         "DY"
                                                         "denumerable_enumeration(Y!1)")
                                                        (("1"
                                                          (name-replace
                                                           "DXY"
                                                           "denumerable_enumeration(union(X!1,Y!1))")
                                                          (("1"
                                                            (lemma
                                                             "nonempty_card"
                                                             ("S" "X!1"))
                                                            (("1"
                                                              (expand
                                                               "nonempty?")
                                                              (("1"
                                                                (hide 1 2)
                                                                (("1"
                                                                  (name
                                                                   "PHI"
                                                                   "LAMBDA (n:nat): IF n<card(X!1) THEN DX(n) ELSE DY(n-card(X!1)) ENDIF")
                                                                  (("1"
                                                                    (case
                                                                     "bijective?[nat, (union(X!1, Y!1))](PHI)")
                                                                    (("1"
                                                                      (lemma
                                                                       "bijective_inverse_exists[nat, (union(X!1, Y!1))]"
                                                                       ("f"
                                                                        "DXY"))
                                                                      (("1"
                                                                        (expand
                                                                         "exists1")
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (hide
                                                                             -2)
                                                                            (("1"
                                                                              (skolem
                                                                               -
                                                                               ("CXY"))
                                                                              (("1"
                                                                                (lemma
                                                                                 "bij_inv_is_bij_alt[nat, (union(X!1, Y!1))]"
                                                                                 ("f"
                                                                                  "DXY"
                                                                                  "g"
                                                                                  "CXY"))
                                                                                (("1"
                                                                                  (lemma
                                                                                   "comp_inverse_right_alt[nat, (union(X!1, Y!1))]"
                                                                                   ("f"
                                                                                    "DXY"
                                                                                    "g"
                                                                                    "CXY"))
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "composition_bijective[nat,(union(X!1, Y!1)),nat]"
                                                                                     ("f1"
                                                                                      "PHI"
                                                                                      "f2"
                                                                                      "CXY"))
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "abs_series_bij_limit"
                                                                                       ("a"
                                                                                        "f!1 o DXY"
                                                                                        "phi"
                                                                                        "CXY o PHI"))
                                                                                      (("1"
                                                                                        (split
                                                                                         -1)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "extensionality"
                                                                                           ("f"
                                                                                            "f!1 o DXY o (CXY o PHI)"
                                                                                            "g"
                                                                                            "f!1 o PHI"))
                                                                                          (("1"
                                                                                            (split
                                                                                             -1)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -2)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "limit_series_shift"
                                                                                                   ("a"
                                                                                                    "f!1 o PHI"
                                                                                                    "pn"
                                                                                                    "card(X!1)"))
                                                                                                  (("1"
                                                                                                    (split
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "o"
                                                                                                         4)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "PHI"
                                                                                                           4)
                                                                                                          (("1"
                                                                                                            (hide-all-but
                                                                                                             (4
                                                                                                              -17
                                                                                                              -10))
                                                                                                            (("1"
                                                                                                              (case
                                                                                                               "forall (n:nat): n < card(X!1) => sigma(0,n,
            LAMBDA (x: nat):
              IF x < card(X!1) THEN f!1(DX(x))
              ELSE f!1(DY(x - card(X!1)))
              ENDIF)
       =
       sigma[below[card(X!1)]]
           (0, n, LAMBDA (x: below[card(X!1)]): f!1(DX(x)))")
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 "card(X!1)-1")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (hide
                                                                                                                 2)
                                                                                                                (("2"
                                                                                                                  (induct
                                                                                                                   "n")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "sigma")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "sigma"
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (skosimp*)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "sigma"
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("3"
                                                                                                                    (skosimp*)
                                                                                                                    (("3"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("4"
                                                                                                                    (skosimp*)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("5"
                                                                                                                    (skosimp*)
                                                                                                                    (("5"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("6"
                                                                                                                    (skosimp*)
                                                                                                                    (("6"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("3"
                                                                                                                (skosimp*)
                                                                                                                (("3"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("4"
                                                                                                                (skosimp*)
                                                                                                                nil
                                                                                                                nil)
                                                                                                               ("5"
                                                                                                                (skosimp*)
                                                                                                                (("5"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (lemma
                                                                                                       "abs_series_bij_conv"
                                                                                                       ("a"
                                                                                                        "f!1 o DXY"
                                                                                                        "phi"
                                                                                                        "CXY o PHI"))
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         -2
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "absconvergent?")
                                                                                                          (("2"
                                                                                                            (replace
                                                                                                             -15)
                                                                                                            (("2"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (skosimp)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -3
                                                                                                 "PHI(x!1)")
                                                                                                (("1"
                                                                                                  (hide-all-but
                                                                                                   (-3
                                                                                                    1))
                                                                                                  (("1"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   "PHI")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "union")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "member")
                                                                                                        (("2"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "absconvergent?")
                                                                                          (("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil)
                                                                                     ("3"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       (-2
                                                                        -9
                                                                        1
                                                                        -3
                                                                        -4
                                                                        -10))
                                                                      (("2"
                                                                        (expand
                                                                         "bijective?")
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (expand
                                                                             "PHI")
                                                                            (("2"
                                                                              (split)
                                                                              (("1"
                                                                                (expand
                                                                                 "injective?")
                                                                                (("1"
                                                                                  (skosimp*)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "disjoint?")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "intersection")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "empty?")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "member")
                                                                                          (("1"
                                                                                            (case-replace
                                                                                             "x1!1 < card(X!1)")
                                                                                            (("1"
                                                                                              (case-replace
                                                                                               "x2!1 < card(X!1)")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -5
                                                                                                 "x1!1"
                                                                                                 "x2!1")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -9
                                                                                                   "DX(x1!1)")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (case-replace
                                                                                               "x2!1 < card(X!1)")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -9
                                                                                                 "DX(x2!1)")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -5
                                                                                                   "x1!1 - card(X!1)"
                                                                                                   "x2!1 - card(X!1)")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "surjective?")
                                                                                (("2"
                                                                                  (skosimp*)
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "y!1")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "disjoint?")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "intersection")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "union")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "empty?")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "member")
                                                                                              (("2"
                                                                                                (split
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -4
                                                                                                   "y!1")
                                                                                                  (("1"
                                                                                                    (skosimp)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       +
                                                                                                       "x!1")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (inst
                                                                                                   -6
                                                                                                   "y!1")
                                                                                                  (("2"
                                                                                                    (skosimp)
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       +
                                                                                                       "x!1+card(X!1)")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (expand
                                                                       "PHI")
                                                                      (("3"
                                                                        (expand
                                                                         "union")
                                                                        (("3"
                                                                          (expand
                                                                           "member")
                                                                          (("3"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skosimp*)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but 1)
                                              (("2" (grind) nil nil))
                                              nil)
                                             ("3"
                                              (expand "convergent?")
                                              (("3" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide-all-but 1)
      (("3" (skosimp)
        (("3" (typepred "f!1")
          (("3"
            (lemma "convergent_subset"
             ("g" "f!1" "X" "Y!1" "Y" "union(X!1,Y!1)"))
            (("3" (assert)
              (("3" (hide-all-but 1) (("3" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skosimp)
      (("4" (typepred "f!1")
        (("4"
          (lemma "convergent_subset"
           ("g" "f!1" "X" "X!1" "Y" "union(X!1,Y!1)"))
          (("4" (assert)
            (("4" (hide-all-but 1)
              (("4" (typepred "Y!1")
                (("4" (rewrite "countably_infinite_def")
                  (("4" (expand "subset?")
                    (("4" (expand "union")
                      (("4" (expand "member") (("4" (skosimp) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((y!1 skolem-const-decl "(union(X!1, Y!1))" sigma_countable nil)
    (x!1 skolem-const-decl "nat" sigma_countable nil)
    (Y!1 skolem-const-decl "countably_infinite_set[T]" sigma_countable nil)
    (limit_series_shift formula-decl nil series series)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (abs_series_bij_conv formula-decl nil series_lems series)
    (PHI skolem-const-decl "[nat -> T]" sigma_countable nil)
    (X!1 skolem-const-decl "finite_set[T]" sigma_countable nil)
    (countably_infinite_union1 application-judgement
     "countably_infinite_set[T]" sigma_countable nil)
    (intersection_commutative formula-decl nil sets_lemmas nil)
    (countable_intersection1 application-judgement "countable_set[T]"
     sigma_countable nil)
    (f!1 skolem-const-decl "(convergent?(union(X!1, Y!1)))" sigma_countable
     nil)
    (convergent_subset formula-decl nil countable_convergence nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (infinite_nonempty judgement-tcc nil infinite_sets_def nil)
    (denumerable_enumeration const-decl "[nat -> (X)]" denumerable_enumeration
     nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (j!1 skolem-const-decl "int" sigma_countable nil)
    (j!1 skolem-const-decl "int" sigma_countable nil)
    (j!1 skolem-const-decl "int" sigma_countable nil)
    (even_or_odd formula-decl nil naturalnumbers nil)
    (i!1 skolem-const-decl "nat" sigma_countable nil)
    (j!1 skolem-const-decl "int" sigma_countable nil)
    (j!1 skolem-const-decl "int" sigma_countable nil)
    (limit const-decl "real" convergence_sequences analysis)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (absconvergent_series_is_convergent judgement-tcc nil absconv_series
     series)
    (absconvergent? const-decl "bool" absconv_series series)
    (absconvergent_series nonempty-type-eq-decl nil absconv_series series)
    (odd? const-decl "bool" integers nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (even_iff_not_odd formula-decl nil naturalnumbers nil)
    (PHI skolem-const-decl "[nat -> T]" sigma_countable nil)
    (series_sum formula-decl nil series series)
    (cnv_seq_sum formula-decl nil convergence_ops analysis)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers nil)
    (j!1 skolem-const-decl "int" sigma_countable nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (i!1 skolem-const-decl "nat" sigma_countable nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel2 formula-decl nil real_props nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (j!1 skolem-const-decl "int" sigma_countable nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (sigma_0_neg formula-decl nil sigma_nat reals)
    (trichotomy formula-decl nil real_axioms nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (limit_equiv formula-decl nil convergence_ops analysis)
    (convergence const-decl "bool" convergence_sequences analysis)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (extensionality formula-decl nil functions nil)
    (sequence type-eq-decl nil sequences nil)
    (abs_series_bij_limit formula-decl nil series_lems series)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat" rationals
     nil)
    (y!1 skolem-const-decl "(union(X!1, Y!1))" sigma_countable nil)
    (x1!1 skolem-const-decl "nat" sigma_countable nil)
    (x2!1 skolem-const-decl "nat" sigma_countable nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (even? const-decl "bool" integers nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat" rationals
     nil)
    (denumerable_enumeration_bij formula-decl nil denumerable_enumeration nil)
    (infinite_set type-eq-decl nil infinite_sets_def nil)
    (infinite_union_right judgement-tcc nil infinite_sets_def nil)
    (subset? const-decl "bool" sets nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (union_empty formula-decl nil sets_lemmas nil)
    (sigma_empty formula-decl nil sigma_countable nil)
    (countable_union application-judgement "countable_set[T]" sigma_countable
     nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set[T]" countable_props sets_aux)
    (finite_emptyset name-judgement "finite_set[T]" sigma_countable nil)
    (union_commutative formula-decl nil sets_lemmas nil)
    (emptyset_is_empty? formula-decl nil sets_lemmas nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (card_disj_union formula-decl nil finite_sets nil)
    (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (finite_enumeration const-decl "[below[card(X)] -> (X)]"
     finite_enumeration nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (intersection const-decl "set" sets nil)
    (y!1 skolem-const-decl "(union(X!1, Y!1))" sigma_countable nil)
    (bijective_inverse_exists formula-decl nil function_inverse_def nil)
    (composition_bijective judgement-tcc nil function_props nil)
    (surjective? const-decl "bool" functions nil)
    (injective? const-decl "bool" functions nil)
    (sigma def-decl "real" sigma reals) (T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (nonempty? const-decl "bool" sets nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (FX skolem-const-decl "[below[card(X!1)] -> (X!1)]" sigma_countable nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (FY skolem-const-decl "[below[card(Y!1)] -> (Y!1)]" sigma_countable nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (comp_inverse_right_alt formula-decl nil function_inverse_def nil)
    (restrict const-decl "R" restrict nil)
    (PHI skolem-const-decl "[below[card(union(X!1, Y!1))] -> T]"
     sigma_countable nil)
    (CXY skolem-const-decl
     "[(union(X!1, Y!1)) -> below[card[T](union(X!1, Y!1))]]" sigma_countable
     nil)
    (subrange_T type-eq-decl nil sigma_bijection nil)
    (NY skolem-const-decl "{n: nat | n = Card(Y!1)}" sigma_countable nil)
    (NX skolem-const-decl "{n: nat | n = Card(X!1)}" sigma_countable nil)
    (Y!1 skolem-const-decl "countable_set[T]" sigma_countable nil)
    (X!1 skolem-const-decl "countable_set[T]" sigma_countable nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (inverse? const-decl "bool" function_inverse_def nil)
    (bij_inv_is_bij_alt formula-decl nil function_inverse_def nil)
    (integer nonempty-type-from-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (O const-decl "T3" function_props nil)
    (sigma_bijection formula-decl nil sigma_bijection nil)
    (series const-decl "sequence[real]" series series)
    (exists1 const-decl "bool" exists1 nil)
    (bijective? const-decl "bool" functions nil)
    (finite_enumeration_bij formula-decl nil finite_enumeration nil)
    (series_bijection formula-decl nil sigma_bijection_nat nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (finite_union judgement-tcc nil finite_sets nil)
    (countably_infinite_def formula-decl nil countable_props sets_aux)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (countably_infinite_union2 application-judgement
     "countably_infinite_set[T]" sigma_countable nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (T formal-type-decl nil sigma_countable nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_countably_infinite const-decl "bool" countability sets_aux)
    (countably_infinite_set type-eq-decl nil countability sets_aux)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (is_countable const-decl "bool" countability sets_aux)
    (countable_set nonempty-type-eq-decl nil countability sets_aux)
    (convergent? const-decl "bool" countable_convergence nil)
    (union const-decl "set" sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (disjoint? const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sigma const-decl "real" sigma_countable nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil))
   shostak))
 (sigma_union_TCC1 0
  (sigma_union_TCC1-1 nil 3351659919
   ("" (skosimp)
    ((""
      (lemma "convergent_subset" ("X" "X!1" "Y" "union(X!1,Y!1)" "g" "f!1"))
      (("" (split)
        (("1" (propax) nil nil) ("2" (hide 2) (("2" (grind) nil nil)) nil)
         ("3" (typepred "f!1") (("3" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   ((T formal-type-decl nil sigma_countable nil)
    (convergent? const-decl "bool" countable_convergence nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (union const-decl "set" sets nil)
    (countable_set nonempty-type-eq-decl nil countability sets_aux)
    (is_countable const-decl "bool" countability sets_aux)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (convergent_subset formula-decl nil countable_convergence nil)
    (countable_union application-judgement "countable_set[T]" sigma_countable
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil))
   nil
   (sigma_union subtype "sigma_countable.f"
    "(countable_convergence[sigma_countable.T].convergent?(sigma_countable.X))")))
 (sigma_union_TCC2 0
  (sigma_union_TCC2-1 nil 3351659919
   ("" (skosimp)
    (("" (typepred "f!1")
      ((""
        (lemma "convergent_subset" ("X" "Y!1" "Y" "union(X!1,Y!1)" "g" "f!1"))
        (("" (assert) (("" (hide-all-but 1) (("" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((union const-decl "set" sets nil)
    (convergent? const-decl "bool" countable_convergence nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (countable_set nonempty-type-eq-decl nil countability sets_aux)
    (is_countable const-decl "bool" countability sets_aux)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil sigma_countable nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil)
    (convergent_subset formula-decl nil countable_convergence nil)
    (countable_union application-judgement "countable_set[T]" sigma_countable
     nil))
   nil
   (sigma_union subtype "sigma_countable.f"
    "(countable_convergence[sigma_countable.T].convergent?(sigma_countable.Y))")))
 (sigma_union_TCC3 0
  (sigma_union_TCC3-1 nil 3351659919
   ("" (skosimp)
    (("" (typepred "f!1")
      ((""
        (lemma "convergent_subset"
         ("X" "intersection(X!1,Y!1)" "Y" "union(X!1,Y!1)" "g" "f!1"))
        (("" (assert) (("" (hide-all-but 1) (("" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((union const-decl "set" sets nil)
    (convergent? const-decl "bool" countable_convergence nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (countable_set nonempty-type-eq-decl nil countability sets_aux)
    (is_countable const-decl "bool" countability sets_aux)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil sigma_countable nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (convergent_subset formula-decl nil countable_convergence nil)
    (countable_union application-judgement "countable_set[T]" sigma_countable
     nil)
    (countable_intersection1 application-judgement "countable_set[T]"
     sigma_countable nil))
   nil
   (sigma_union subtype "sigma_countable.f"
    "(countable_convergence[sigma_countable.T].convergent?(sets[sigma_countable.T].intersection(sigma_countable.X, sigma_countable.Y)))")))
 (sigma_union 0
  (sigma_union-1 nil 3351661433
   ("" (skosimp)
    (("" (rewrite "union_difference")
      (("" (case "union(difference(Y!1, X!1), intersection(X!1, Y!1)) = Y!1")
        (("1"
          (lemma "sigma_disjoint_union"
           ("X" "difference(Y!1, X!1)" "Y" "intersection(X!1, Y!1)" "f"
            "f!1"))
          (("1"
            (case-replace
             "disjoint?(difference(Y!1, X!1), intersection(X!1, Y!1))")
            (("1" (replace -3 -2)
              (("1" (replace -2 1)
                (("1" (assert)
                  (("1" (hide-all-but 1)
                    (("1"
                      (lemma "sigma_disjoint_union"
                       ("X" "X!1" "Y" "difference(Y!1, X!1)" "f" "f!1"))
                      (("1" (assert)
                        (("1" (hide-all-but 1) (("1" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
            nil)
           ("2" (replace -1)
            (("2"
              (lemma "convergent_subset"
               ("X" "Y!1" "Y" "union(X!1,Y!1)" "g" "f!1"))
              (("2" (typepred "f!1")
                (("2" (assert)
                  (("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide-all-but 1)
          (("2" (apply-extensionality :hide? t) (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((union_difference formula-decl nil sets_lemmas nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_countable const-decl "bool" countability sets_aux)
    (countable_set nonempty-type-eq-decl nil countability sets_aux)
    (T formal-type-decl nil sigma_countable nil)
    (countable_difference application-judgement "countable_set[T]"
     sigma_countable nil)
    (countable_union application-judgement "countable_set[T]" sigma_countable
     nil)
    (convergent? const-decl "bool" countable_convergence nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (sigma_disjoint_union formula-decl nil sigma_countable nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (disjoint? const-decl "bool" sets nil)
    (convergent_subset formula-decl nil countable_convergence nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (countable_intersection1 application-judgement "countable_set[T]"
     sigma_countable nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (union const-decl "set" sets nil) (difference const-decl "set" sets nil)
    (intersection const-decl "set" sets nil))
   shostak))
 (sigma_intersection 0
  (sigma_intersection-1 nil 3351660503
   ("" (skosimp)
    (("" (lemma "sigma_union" ("f" "f!1" "X" "X!1" "Y" "Y!1"))
      (("" (assert) nil nil)) nil))
    nil)
   ((union const-decl "set" sets nil)
    (convergent? const-decl "bool" countable_convergence nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (countable_set nonempty-type-eq-decl nil countability sets_aux)
    (is_countable const-decl "bool" countability sets_aux)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil sigma_countable nil)
    (sigma_union formula-decl nil sigma_countable nil)
    (countable_union application-judgement "countable_set[T]" sigma_countable
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (countable_intersection1 application-judgement "countable_set[T]"
     sigma_countable nil))
   shostak))
 (sigma_difference_TCC1 0
  (sigma_difference_TCC1-1 nil 3351659919
   ("" (skosimp)
    (("" (typepred "f!1")
      ((""
        (lemma "convergent_subset"
         ("X" "difference(X!1,Y!1)" "Y" "union(X!1,Y!1)" "g" "f!1"))
        (("" (assert) (("" (hide-all-but 1) (("" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((union const-decl "set" sets nil)
    (convergent? const-decl "bool" countable_convergence nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (countable_set nonempty-type-eq-decl nil countability sets_aux)
    (is_countable const-decl "bool" countability sets_aux)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil sigma_countable nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil)
    (difference const-decl "set" sets nil)
    (convergent_subset formula-decl nil countable_convergence nil)
    (countable_union application-judgement "countable_set[T]" sigma_countable
     nil)
    (countable_difference application-judgement "countable_set[T]"
     sigma_countable nil))
   nil
   (sigma_difference subtype "sigma_countable.f"
    "(countable_convergence[sigma_countable.T].convergent?(sets[sigma_countable.T].difference(sigma_countable.X, sigma_countable.Y)))")))
 (sigma_difference_TCC2 0
  (sigma_difference_TCC2-1 nil 3351659919
   ("" (skosimp*)
    (("" (typepred "f!1")
      ((""
        (lemma "convergent_subset"
         ("X" "difference(Y!1,X!1)" "Y" "union(X!1,Y!1)" "g" "f!1"))
        (("" (assert) (("" (hide-all-but 1) (("" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((union const-decl "set" sets nil)
    (convergent? const-decl "bool" countable_convergence nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (countable_set nonempty-type-eq-decl nil countability sets_aux)
    (is_countable const-decl "bool" countability sets_aux)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil sigma_countable nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil)
    (difference const-decl "set" sets nil)
    (convergent_subset formula-decl nil countable_convergence nil)
    (countable_union application-judgement "countable_set[T]" sigma_countable
     nil)
    (countable_difference application-judgement "countable_set[T]"
     sigma_countable nil))
   nil
   (sigma_difference subtype "sigma_countable.f"
    "(countable_convergence[sigma_countable.T].convergent?(sets[sigma_countable.T].difference(sigma_countable.Y, sigma_countable.X)))")))
 (sigma_difference 0
  (sigma_difference-1 nil 3351661074
   (""
    (case "forall (X,Y:set[T]): disjoint?(difference(X,Y),intersection(X,Y)) & union(difference(X,Y),intersection(X,Y)) = X")
    (("1" (skosimp)
      (("1" (inst-cp - "X!1" "Y!1")
        (("1" (inst - "Y!1" "X!1")
          (("1" (rewrite "intersection_commutative" -1)
            (("1" (flatten)
              (("1"
                (lemma "convergent_subset" ("Y" "union(X!1,Y!1)" "g" "f!1"))
                (("1" (inst-cp - "X!1")
                  (("1" (inst - "Y!1")
                    (("1" (typepred "f!1")
                      (("1" (assert)
                        (("1" (split)
                          (("1" (split)
                            (("1"
                              (lemma "sigma_disjoint_union"
                               ("f" "f!1" "X" "difference(Y!1, X!1)" "Y"
                                "intersection(X!1, Y!1)"))
                              (("1"
                                (lemma "sigma_disjoint_union"
                                 ("f" "f!1" "X" "difference(X!1, Y!1)" "Y"
                                  "intersection(X!1, Y!1)"))
                                (("1" (assert) nil nil)
                                 ("2" (replace -8) (("2" (propax) nil nil))
                                  nil))
                                nil)
                               ("2" (replace -5) (("2" (propax) nil nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1) (("2" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide-all-but 1)
      (("2" (skosimp*)
        (("2" (split)
          (("1" (grind) nil nil)
           ("2" (apply-extensionality :hide? t) (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (sigma_disjoint_union formula-decl nil sigma_countable nil)
    (countable_difference application-judgement "countable_set[T]"
     sigma_countable nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (convergent? const-decl "bool" countable_convergence nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (convergent_subset formula-decl nil countable_convergence nil)
    (countable_union application-judgement "countable_set[T]" sigma_countable
     nil)
    (countable_intersection1 application-judgement "countable_set[T]"
     sigma_countable nil)
    (intersection_commutative formula-decl nil sets_lemmas nil)
    (is_countable const-decl "bool" countability sets_aux)
    (countable_set nonempty-type-eq-decl nil countability sets_aux)
    (T formal-type-decl nil sigma_countable nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (disjoint? const-decl "bool" sets nil)
    (difference const-decl "set" sets nil)
    (intersection const-decl "set" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (union const-decl "set" sets nil))
   shostak))
 (sigma_subset_TCC1 0
  (sigma_subset_TCC1-1 nil 3351660499
   ("" (skosimp)
    (("" (typepred "f!1")
      (("" (lemma "convergent_subset" ("X" "X!1" "Y" "Y!1" "g" "f!1"))
        (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((convergent? const-decl "bool" countable_convergence nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (countable_set nonempty-type-eq-decl nil countability sets_aux)
    (is_countable const-decl "bool" countability sets_aux)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil sigma_countable nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (convergent_subset formula-decl nil countable_convergence nil))
   nil
   (sigma_subset subtype "sigma_countable.f"
    "(countable_convergence[sigma_countable.T].convergent?(sigma_countable.X))")))
 (sigma_subset_TCC2 0
  (sigma_subset_TCC2-1 nil 3351660499
   ("" (skosimp)
    ((""
      (lemma "convergent_subset"
       ("X" "difference(Y!1,X!1)" "Y" "Y!1" "g" "f!1"))
      (("" (typepred "f!1")
        (("" (rewrite "difference_subset") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((T formal-type-decl nil sigma_countable nil)
    (convergent? const-decl "bool" countable_convergence nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (difference const-decl "set" sets nil)
    (countable_set nonempty-type-eq-decl nil countability sets_aux)
    (is_countable const-decl "bool" countability sets_aux)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (convergent_subset formula-decl nil countable_convergence nil)
    (countable_difference application-judgement "countable_set[T]"
     sigma_countable nil)
    (difference_subset formula-decl nil sets_lemmas nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   nil
   (sigma_subset subtype "sigma_countable.f"
    "(countable_convergence[sigma_countable.T].convergent?(sets[sigma_countable.T].difference(sigma_countable.Y, sigma_countable.X)))")))
 (sigma_subset 0
  (sigma_subset-1 nil 3351660545
   ("" (skosimp)
    (("" (lemma "sigma_difference" ("f" "f!1" "X" "X!1" "Y" "Y!1"))
      (("1" (lemma "difference_subset2" ("a" "X!1" "b" "Y!1"))
        (("1" (lemma "sigma_empty" ("g" "f!1")) (("1" (assert) nil nil)) nil))
        nil)
       ("2" (lemma "union_subset2" ("a" "X!1" "b" "Y!1"))
        (("2" (typepred "f!1") (("2" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((union const-decl "set" sets nil)
    (convergent? const-decl "bool" countable_convergence nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (countable_set nonempty-type-eq-decl nil countability sets_aux)
    (is_countable const-decl "bool" countability sets_aux)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil sigma_countable nil)
    (sigma_difference formula-decl nil sigma_countable nil)
    (countable_union application-judgement "countable_set[T]" sigma_countable
     nil)
    (sigma_empty formula-decl nil sigma_countable nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set[T]" countable_props sets_aux)
    (finite_emptyset name-judgement "finite_set[T]" sigma_countable nil)
    (countable_difference application-judgement "countable_set[T]"
     sigma_countable nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (difference_subset2 formula-decl nil sets_lemmas nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (union_subset2 formula-decl nil sets_lemmas nil))
   shostak))
 (sigma_add_TCC1 0
  (sigma_add_TCC1-1 nil 3351588824
   ("" (skosimp)
    (("" (lemma "convergent_add" ("X" "X!1" "t" "t!1" "g" "f!1"))
      (("" (typepred "f!1") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((T formal-type-decl nil sigma_countable nil)
    (convergent? const-decl "bool" countable_convergence nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (countable_set nonempty-type-eq-decl nil countability sets_aux)
    (is_countable const-decl "bool" countability sets_aux)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (convergent_add formula-decl nil countable_convergence nil)
    (countable_add application-judgement "countable_set[T]" sigma_countable
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   nil
   (sigma_add subtype "sigma_countable.f"
    "(countable_convergence[sigma_countable.T].convergent?(sets[sigma_countable.T].add(sigma_countable.t, sigma_countable.X)))")))
 (sigma_add 0
  (sigma_add-2 "" 3790094132
   ("" (skosimp)
    (("" (case-replace "member(t!1, X!1)")
      (("1" (lemma "member_add" ("x" "t!1" "a" "X!1"))
        (("1" (assert) nil nil)) nil)
       ("2" (assert)
        (("2" (lemma "add_as_union" ("x" "t!1" "a" "X!1"))
          (("2" (replace -1)
            (("2"
              (lemma "sigma_disjoint_union"
               ("f" "f!1" "X" "X!1" "Y" "singleton(t!1)"))
              (("2" (split -1)
                (("1" (replace -1)
                  (("1" (rewrite "sigma_singleton") (("1" (assert) nil nil))
                    nil))
                  nil)
                 ("2" (hide -1 3)
                  (("2" (expand "singleton")
                    (("2" (expand "disjoint?")
                      (("2" (expand "intersection")
                        (("2" (expand "empty?")
                          (("2" (expand "member")
                            (("2" (skosimp) (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (sigma_add-1 nil 3351596890
   ("" (skosimp)
    (("" (case-replace "member(t!1, X!1)")
      (("1" (lemma "member_add" ("x" "t!1" "a" "X!1"))
        (("1" (assert) nil nil)) nil)
       ("2" (assert)
        (("2" (lemma "add_as_union" ("x" "t!1" "a" "X!1"))
          (("2" (replace -1)
            (("2"
              (lemma "sigma_disjoint_union"
               ("f" "f!1" "X" "X!1" "Y" "singleton(t!1)"))
              (("1" (split -1)
                (("1" (replace -1)
                  (("1" (rewrite "sigma_singleton") (("1" (assert) nil nil))
                    nil))
                  nil)
                 ("2" (hide -1 3)
                  (("2" (expand "singleton")
                    (("2" (expand "disjoint?")
                      (("2" (expand "intersection")
                        (("2" (expand "empty?")
                          (("2" (expand "member")
                            (("2" (skosimp) (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (lemma "finite_countable" ("x" "singleton[T](t!1)"))
                (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-type-decl nil sigma_countable nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil)
    (is_countable const-decl "bool" countability sets_aux)
    (countable_set nonempty-type-eq-decl nil countability sets_aux)
    (countable_add application-judgement "countable_set[T]" sigma_countable
     nil)
    (member_add formula-decl nil sets_lemmas nil)
    (add_as_union formula-decl nil sets_lemmas nil)
    (union const-decl "set" sets nil)
    (convergent? const-decl "bool" countable_convergence nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (sigma_disjoint_union formula-decl nil sigma_countable nil)
    (nonempty_singleton_finite application-judgement "non_empty_finite_set[T]"
     sigma_countable nil)
    (countable_intersection1 application-judgement "countable_set[T]"
     sigma_countable nil)
    (disjoint? const-decl "bool" sets nil) (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (countable_union application-judgement "countable_set[T]" sigma_countable
     nil)
    (nonempty_union2 application-judgement "(nonempty?)" sets nil)
    (sigma_singleton formula-decl nil sigma_countable nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (sigma_remove_TCC1 0
  (sigma_remove_TCC1-1 nil 3395763930
   ("" (skosimp)
    (("" (typepred "f!1") (("" (rewrite "convergent_remove") nil nil)) nil))
    nil)
   ((convergent? const-decl "bool" countable_convergence nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (countable_set nonempty-type-eq-decl nil countability sets_aux)
    (is_countable const-decl "bool" countability sets_aux)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil sigma_countable nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (convergent_remove formula-decl nil countable_convergence nil))
   nil
   (sigma_remove subtype "sigma_countable.f"
    "(countable_convergence[sigma_countable.T].convergent?(sets[sigma_countable.T].remove(sigma_countable.t, sigma_countable.X)))")))
 (sigma_remove 0
  (sigma_remove-1 nil 3395764346
   ("" (skosimp)
    (("" (case-replace "member(t!1, X!1)")
      (("1" (lemma "add_remove_member" ("x" "t!1" "a" "X!1"))
        (("1" (assert)
          (("1"
            (lemma "sigma_add" ("f" "f!1" "t" "t!1" "X" "remove(t!1, X!1)"))
            (("1" (replace -2 -1)
              (("1" (expand "remove" -1 1)
                (("1" (expand "member" -1 1)
                  (("1" (replace -1 1) (("1" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (assert)
        (("2" (case-replace "remove(t!1, X!1)=X!1")
          (("2" (hide 3)
            (("2" (apply-extensionality :hide? t)
              (("2" (expand "remove")
                (("2" (expand "member")
                  (("2" (assert)
                    (("2" (case-replace "x!1=t!1")
                      (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-type-decl nil sigma_countable nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil)
    (is_countable const-decl "bool" countability sets_aux)
    (countable_set nonempty-type-eq-decl nil countability sets_aux)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (countable_remove application-judgement "countable_set[T]" sigma_countable
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sigma_add formula-decl nil sigma_countable nil)
    (remove const-decl "set" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (convergent? const-decl "bool" countable_convergence nil)
    (add_remove_member formula-decl nil sets_lemmas nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   shostak))
 (sigma_choose_rest_TCC1 0
  (sigma_choose_rest_TCC1-1 nil 3323139930
   ("" (skosimp)
    (("" (typepred "f!1")
      (("" (lemma "convergent_subset" ("X" "rest(X!1)" "Y" "X!1" "g" "f!1"))
        (("" (rewrite "rest_subset") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((nonempty_countable type-eq-decl nil sigma_countable nil)
    (nonempty_countable? const-decl "bool" sigma_countable nil)
    (convergent? const-decl "bool" countable_convergence nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (countable_set nonempty-type-eq-decl nil countability sets_aux)
    (is_countable const-decl "bool" countability sets_aux)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil sigma_countable nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (rest_subset formula-decl nil sets_lemmas nil)
    (countable_rest application-judgement "countable_set[T]" sigma_countable
     nil)
    (convergent_subset formula-decl nil countable_convergence nil)
    (rest const-decl "set" sets nil))
   shostak
   (sigma_choose_rest subtype "sigma_countable.f"
    "(countable_convergence[sigma_countable.T].convergent?(sets[sigma_countable.T].rest(sigma_countable.X)))")))
 (sigma_choose_rest 0
  (sigma_choose_rest-1 nil 3351588363
   ("" (skosimp)
    (("" (typepred "X!1")
      (("" (expand "nonempty_countable?")
        (("" (flatten)
          (("" (lemma "choose_rest" ("a" "X!1"))
            (("" (split -1)
              (("1"
                (lemma "sigma_add"
                 ("f" "f!1" "t" "choose(X!1)" "X" "rest(X!1)"))
                (("1" (replace -2)
                  (("1" (lemma "choose_not_member" ("a" "X!1"))
                    (("1" (split -1)
                      (("1" (assert) nil nil)
                       ("2" (expand "nonempty?") (("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "nonempty?") (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonempty_countable type-eq-decl nil sigma_countable nil)
    (nonempty_countable? const-decl "bool" sigma_countable nil)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil sigma_countable nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (countable_add application-judgement "countable_set[T]" sigma_countable
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (choose_not_member formula-decl nil sets_lemmas nil)
    (countable_rest application-judgement "countable_set[T]" sigma_countable
     nil)
    (sigma_add formula-decl nil sigma_countable nil)
    (is_countable const-decl "bool" countability sets_aux)
    (countable_set nonempty-type-eq-decl nil countability sets_aux)
    (rest const-decl "set" sets nil) (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (convergent? const-decl "bool" countable_convergence nil)
    (choose_rest formula-decl nil sets_lemmas nil))
   shostak))
 (sigma_zero_TCC1 0
  (sigma_zero_TCC1-1 nil 3395082722
   ("" (skosimp) (("" (rewrite "convergent_zero") nil nil)) nil)
   ((convergent_zero formula-decl nil countable_convergence nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_countable const-decl "bool" countability sets_aux)
    (countable_set nonempty-type-eq-decl nil countability sets_aux)
    (T formal-type-decl nil sigma_countable nil))
   nil
   (sigma_zero subtype "LAMBDA t: 0"
    "(countable_convergence[sigma_countable.T].convergent?(sigma_countable.X))")))
 (sigma_zero 0
  (sigma_zero-1 nil 3395082722
   ("" (skosimp)
    (("" (expand "sigma")
      (("" (case-replace "empty?(X!1)")
        (("" (replace 1 2)
          (("" (expand "o")
            (("" (case-replace "is_finite(X!1)")
              (("1"
                (lemma "sigma_zero[below[card(X!1)]]"
                 ("low" "0" "high" "card(X!1) - 1"))
                (("1" (propax) nil nil)
                 ("2" (hide 3) (("2" (skosimp) (("2" (assert) nil nil)) nil))
                  nil))
                nil)
               ("2" (replace 1) (("2" (rewrite "zero_series_limit") nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma const-decl "real" sigma_countable nil)
    (is_finite const-decl "bool" finite_sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (integer nonempty-type-from-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (sigma_zero formula-decl nil sigma reals)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (T_high type-eq-decl nil sigma reals)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (T_low type-eq-decl nil sigma reals)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (below type-eq-decl nil nat_types nil)
    (zero_series_limit formula-decl nil series series)
    (O const-decl "T3" function_props nil)
    (countable_set nonempty-type-eq-decl nil countability sets_aux)
    (is_countable const-decl "bool" countability sets_aux)
    (empty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil sigma_countable nil))
   shostak))
 (sigma_scal_TCC1 0
  (sigma_scal_TCC1-1 nil 3395115776
   ("" (skosimp)
    (("" (lemma "convergent_scal" ("a" "a!1" "f" "f!1" "X" "X!1"))
      (("" (typepred "f!1") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((T formal-type-decl nil sigma_countable nil)
    (convergent? const-decl "bool" countable_convergence nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (countable_set nonempty-type-eq-decl nil countability sets_aux)
    (is_countable const-decl "bool" countability sets_aux)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (convergent_scal formula-decl nil countable_convergence nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   nil
   (sigma_scal subtype
    "real_fun_ops[sigma_countable.T].*(sigma_countable.a, sigma_countable.f)"
    "(countable_convergence[sigma_countable.T].convergent?(sigma_countable.X))")))
 (sigma_scal 0
  (sigma_scal-1 nil 3395115776
   ("" (skosimp)
    (("" (expand "sigma")
      (("" (case-replace "empty?(X!1)")
        (("1" (assert) nil nil)
         ("2" (assert)
          (("2" (case-replace "is_finite(X!1)")
            (("1" (name-replace "FE" "finite_enumeration(X!1)")
              (("1"
                (lemma "sigma_scal[below[card(X!1)]]"
                 ("low" "0" "high" "card(X!1) - 1" "F" "f!1 o FE" "a" "a!1"))
                (("1" (replace -1 2 rl)
                  (("1" (expand "o")
                    (("1" (expand "*") (("1" (propax) nil nil)) nil)) nil))
                  nil)
                 ("2" (skosimp) (("2" (assert) nil nil)) nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (name-replace "DE" "denumerable_enumeration(X!1)")
                (("2" (lemma "series_scal" ("c" "a!1" "a" "f!1 o DE"))
                  (("2" (expand "o")
                    (("2" (expand "*")
                      (("2" (replace -1 3 rl)
                        (("2" (hide -1)
                          (("2"
                            (name-replace "SERIES"
                             "series(LAMBDA (x_1: nat): f!1(DE(x_1)))")
                            (("2" (rewrite "limit_scal" * :dir rl)
                              (("2" (expand "*") (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma const-decl "real" sigma_countable nil)
    (series_scal formula-decl nil series series)
    (sequence type-eq-decl nil sequences nil)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (limit_scal formula-decl nil convergence_ops analysis)
    (series const-decl "sequence[real]" series series)
    (denumerable_enumeration const-decl "[nat -> (X)]" denumerable_enumeration
     nil)
    (is_countably_infinite const-decl "bool" countability sets_aux)
    (countably_infinite_set type-eq-decl nil countability sets_aux)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (below type-eq-decl nil nat_types nil)
    (finite_enumeration const-decl "[below[card(X)] -> (X)]"
     finite_enumeration nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (integer nonempty-type-from-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (sigma_scal formula-decl nil sigma reals)
    (O const-decl "T3" function_props nil)
    (convergent? const-decl "bool" countable_convergence nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (T_high type-eq-decl nil sigma reals)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (T_low type-eq-decl nil sigma reals)
    (is_finite const-decl "bool" finite_sets nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (countable_set nonempty-type-eq-decl nil countability sets_aux)
    (is_countable const-decl "bool" countability sets_aux)
    (empty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil sigma_countable nil))
   shostak))
 (sigma_opp_TCC1 0
  (sigma_opp_TCC1-1 nil 3395763930
   ("" (skosimp)
    (("" (typepred "f!1") (("" (rewrite "convergent_opp") nil nil)) nil)) nil)
   ((convergent? const-decl "bool" countable_convergence nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (countable_set nonempty-type-eq-decl nil countability sets_aux)
    (is_countable const-decl "bool" countability sets_aux)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil sigma_countable nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (convergent_opp formula-decl nil countable_convergence nil))
   nil
   (sigma_opp subtype "(real_fun_ops[sigma_countable.T].-)(sigma_countable.f)"
    "(countable_convergence[sigma_countable.T].convergent?(sigma_countable.X))")))
 (sigma_opp 0
  (sigma_opp-1 nil 3395764191
   ("" (skosimp)
    (("" (lemma "sigma_scal" ("X" "X!1" "f" "f!1" "a" "-1"))
      (("" (case-replace "-1 * f!1=-f!1")
        (("1" (assert) nil nil)
         ("2" (hide-all-but 1)
          (("2" (apply-extensionality :hide? t)
            (("2" (expand "*")
              (("2" (expand "-") (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((convergent? const-decl "bool" countable_convergence nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (countable_set nonempty-type-eq-decl nil countability sets_aux)
    (is_countable const-decl "bool" countability sets_aux)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil sigma_countable nil)
    (sigma_scal formula-decl nil sigma_countable nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (= const-decl "[T, T -> boolean]" equalities nil))
   shostak))
 (sigma_plus_TCC1 0
  (sigma_plus_TCC1-1 nil 3395082722
   ("" (skosimp) (("" (rewrite "convergent_plus") nil nil)) nil)
   ((convergent_plus formula-decl nil countable_convergence nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_countable const-decl "bool" countability sets_aux)
    (countable_set nonempty-type-eq-decl nil countability sets_aux)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (convergent? const-decl "bool" countable_convergence nil)
    (T formal-type-decl nil sigma_countable nil))
   nil
   (sigma_plus subtype
    "(real_fun_ops[sigma_countable.T].+)(sigma_countable.f, sigma_countable.g)"
    "(countable_convergence[sigma_countable.T].convergent?(sigma_countable.X))")))
 (sigma_plus 0
  (sigma_plus-1 nil 3395083157
   ("" (skosimp)
    (("" (expand "sigma")
      (("" (case-replace "empty?(X!1)")
        (("1" (assert) nil nil)
         ("2" (replace 1)
          (("2" (case-replace "is_finite(X!1)")
            (("1" (name-replace "FE" "finite_enumeration(X!1)")
              (("1" (expand "o")
                (("1" (expand "+")
                  (("1"
                    (lemma "sigma_sum[below[card(X!1)]]"
                     ("low" "0" "high" "card(X!1) - 1" "F"
                      "LAMBDA (x: below[card(X!1)]): f!1(FE(x))" "G"
                      "LAMBDA (x: below[card(X!1)]): g!1(FE(x))"))
                    (("1" (assert) nil nil)
                     ("2" (hide 3)
                      (("2" (skosimp) (("2" (assert) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (replace 1)
              (("2" (name-replace "DE" "denumerable_enumeration(X!1)")
                (("2" (lemma "series_sum" ("a" "f!1 o DE" "b" "g!1 o DE"))
                  (("2" (rewrite "limit_sum" * :dir rl)
                    (("2" (replace -1)
                      (("2" (hide -1)
                        (("2" (expand "o ")
                          (("2" (expand "+") (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma const-decl "real" sigma_countable nil)
    (series_sum formula-decl nil series series)
    (sequence type-eq-decl nil sequences nil)
    (limit_sum formula-decl nil convergence_ops analysis)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (series const-decl "sequence[real]" series series)
    (denumerable_enumeration const-decl "[nat -> (X)]" denumerable_enumeration
     nil)
    (is_countably_infinite const-decl "bool" countability sets_aux)
    (countably_infinite_set type-eq-decl nil countability sets_aux)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (below type-eq-decl nil nat_types nil)
    (finite_enumeration const-decl "[below[card(X)] -> (X)]"
     finite_enumeration nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (sigma_sum formula-decl nil sigma reals)
    (convergent? const-decl "bool" countable_convergence nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (T_high type-eq-decl nil sigma reals)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (T_low type-eq-decl nil sigma reals)
    (O const-decl "T3" function_props nil)
    (is_finite const-decl "bool" finite_sets nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (countable_set nonempty-type-eq-decl nil countability sets_aux)
    (is_countable const-decl "bool" countability sets_aux)
    (empty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil sigma_countable nil))
   shostak))
 (sigma_diff_TCC1 0
  (sigma_diff_TCC1-1 nil 3395763930
   ("" (skosimp)
    (("" (typepred "f!1")
      (("" (typepred "g!1")
        (("" (lemma "convergent_diff" ("X" "X!1" "f" "f!1" "g" "g!1"))
          (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((convergent? const-decl "bool" countable_convergence nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (countable_set nonempty-type-eq-decl nil countability sets_aux)
    (is_countable const-decl "bool" countability sets_aux)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil sigma_countable nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (convergent_diff formula-decl nil countable_convergence nil))
   nil
   (sigma_diff subtype
    "(real_fun_ops[sigma_countable.T].-)(sigma_countable.f, sigma_countable.g)"
    "(countable_convergence[sigma_countable.T].convergent?(sigma_countable.X))")))
 (sigma_diff 0
  (sigma_diff-1 nil 3395764251
   ("" (skosimp)
    (("" (lemma "sigma_opp" ("X" "X!1" "f" "g!1"))
      (("" (lemma "sigma_plus" ("X" "X!1" "f" "f!1" "g" "-g!1"))
        (("" (case-replace "f!1 + -g!1=f!1 - g!1")
          (("1" (assert) nil nil)
           ("2" (hide-all-but 1)
            (("2" (apply-extensionality :hide? t)
              (("2" (expand "-")
                (("2" (expand "+") (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((convergent? const-decl "bool" countable_convergence nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (countable_set nonempty-type-eq-decl nil countability sets_aux)
    (is_countable const-decl "bool" countability sets_aux)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil sigma_countable nil)
    (sigma_opp formula-decl nil sigma_countable nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sigma_plus formula-decl nil sigma_countable nil)
    (- const-decl "[T -> real]" real_fun_ops reals))
   shostak))
 (sigma_ge_0 0
  (sigma_ge_0-1 nil 3395769001
   ("" (skosimp)
    (("" (expand "sigma")
      (("" (case-replace "empty?(X!1)")
        (("1" (assert) nil nil)
         ("2" (assert)
          (("2" (case-replace "is_finite(X!1)")
            (("1"
              (lemma "sigma_ge_0[below[card(X!1)]]"
               ("low" "0" "high" "card(X!1) - 1" "F"
                "f!1 o finite_enumeration(X!1)"))
              (("1" (split -1)
                (("1" (propax) nil nil)
                 ("2" (skosimp)
                  (("2" (expand "o")
                    (("2" (inst - "finite_enumeration(X!1)(n!1)") nil nil))
                    nil))
                  nil))
                nil)
               ("2" (skosimp) (("2" (assert) nil nil)) nil))
              nil)
             ("2" (assert)
              (("2"
                (lemma "limit_order"
                 ("s1" "lambda (n:nat):0" "l1" "0" "s2"
                  "series(f!1 o denumerable_enumeration(X!1))"))
                (("2" (typepred "f!1")
                  (("2" (expand "convergent?")
                    (("2" (lemma "absconvergent_series_is_convergent")
                      (("2" (inst - "f!1 o denumerable_enumeration(X!1)")
                        (("2" (hide -2)
                          (("2" (expand "convergent?")
                            (("2" (skosimp)
                              (("2" (inst - "l!1")
                                (("2" (replace -1)
                                  (("2" (split)
                                    (("1" (rewrite "limit_def" - :dir rl)
                                      (("1" (assert) nil nil)) nil)
                                     ("2" (hide-all-but 1)
                                      (("2"
                                        (expand "convergence")
                                        (("2"
                                          (skosimp)
                                          (("2"
                                            (inst + "0")
                                            (("2"
                                              (skosimp)
                                              (("2"
                                                (expand "abs")
                                                (("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3" (hide-all-but (-2 1))
                                      (("3"
                                        (skosimp)
                                        (("3"
                                          (case
                                           "forall (n:nat): (f!1 o denumerable_enumeration(X!1))(n) >= 0")
                                          (("1"
                                            (hide -2)
                                            (("1"
                                              (name-replace
                                               "FF"
                                               "f!1 o denumerable_enumeration(X!1)")
                                              (("1"
                                                (expand "series")
                                                (("1"
                                                  (lemma
                                                   "sigma_ge_0"
                                                   ("low"
                                                    "0"
                                                    "high"
                                                    "n!1"
                                                    "F"
                                                    "FF"))
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (skosimp)
                                                      (("1"
                                                        (inst - "n!2")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skosimp)
                                            (("2"
                                              (expand "o")
                                              (("2"
                                                (inst
                                                 -
                                                 "denumerable_enumeration(X!1)(n!2)")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma const-decl "real" sigma_countable nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (absconvergent_series_is_convergent judgement-tcc nil absconv_series
     series)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (convergence const-decl "bool" convergence_sequences analysis)
    (limit_def formula-decl nil convergence_sequences analysis)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (absconvergent_series nonempty-type-eq-decl nil absconv_series series)
    (f!1 skolem-const-decl "(convergent?(X!1))" sigma_countable nil)
    (X!1 skolem-const-decl "countable_set[T]" sigma_countable nil)
    (absconvergent? const-decl "bool" absconv_series series)
    (limit_order formula-decl nil convergence_ops analysis)
    (sequence type-eq-decl nil sequences nil)
    (series const-decl "sequence[real]" series series)
    (countably_infinite_set type-eq-decl nil countability sets_aux)
    (is_countably_infinite const-decl "bool" countability sets_aux)
    (denumerable_enumeration const-decl "[nat -> (X)]" denumerable_enumeration
     nil)
    (below type-eq-decl nil nat_types nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (T_low type-eq-decl nil sigma reals)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (T_high type-eq-decl nil sigma reals) (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (finite_enumeration const-decl "[below[card(X)] -> (X)]"
     finite_enumeration nil)
    (convergent? const-decl "bool" countable_convergence nil)
    (O const-decl "T3" function_props nil)
    (sigma_ge_0 formula-decl nil sigma reals)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (subrange type-eq-decl nil integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (is_finite const-decl "bool" finite_sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (countable_set nonempty-type-eq-decl nil countability sets_aux)
    (is_countable const-decl "bool" countability sets_aux)
    (empty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil sigma_countable nil))
   shostak))
 (sigma_gt_0 0
  (sigma_gt_0-2 nil 3462021289
   ("" (skosimp)
    (("" (expand "sigma")
      (("" (typepred "X!1")
        (("" (expand "nonempty_countable?")
          (("" (flatten)
            (("" (expand "nonempty?")
              (("" (assert)
                (("" (case-replace "is_finite(X!1)")
                  (("1"
                    (lemma "sigma_gt_0[below[card(X!1)]]"
                     ("low" "0" "high" "card(X!1) - 1" "F"
                      "f!1 o finite_enumeration(X!1)"))
                    (("1" (assert)
                      (("1" (lemma "nonempty_card[T]" ("S" "X!1"))
                        (("1" (expand "nonempty?")
                          (("1" (assert)
                            (("1" (skosimp)
                              (("1" (expand "o" 1)
                                (("1" (inst - "finite_enumeration(X!1)(n!1)")
                                  nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skosimp) (("2" (assert) nil nil)) nil))
                    nil)
                   ("2" (assert)
                    (("2" (typepred "f!1")
                      (("2" (expand "convergent?")
                        (("2" (lemma "absconvergent_series_is_convergent")
                          (("2" (inst - "f!1 o denumerable_enumeration(X!1)")
                            (("2" (hide -2 -3)
                              (("2" (expand "convergent?")
                                (("2" (skosimp)
                                  (("2"
                                    (case "forall (n:nat): (f!1 o denumerable_enumeration(X!1))(n)>0")
                                    (("1"
                                      (name-replace
                                       "FF"
                                       "f!1 o denumerable_enumeration(X!1)")
                                      (("1"
                                        (hide -3 1 2)
                                        (("1"
                                          (lemma
                                           "limit_order"
                                           ("s1"
                                            "lambda (n:nat): FF(0)"
                                            "l1"
                                            "FF(0)"
                                            "s2"
                                            "series(FF)"
                                            "l2"
                                            "l!1"))
                                          (("1"
                                            (replace -3)
                                            (("1"
                                              (split -1)
                                              (("1"
                                                (rewrite
                                                 "limit_def"
                                                 -
                                                 :dir
                                                 rl)
                                                (("1"
                                                  (inst - "0")
                                                  (("1" (assert) nil nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2"
                                                  (expand "convergence")
                                                  (("2"
                                                    (expand "abs")
                                                    (("2" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (skosimp)
                                                (("3"
                                                  (expand "series")
                                                  (("3"
                                                    (hide -2 2)
                                                    (("3"
                                                      (lemma
                                                       "sigma_split"
                                                       ("low"
                                                        "0"
                                                        "z"
                                                        "0"
                                                        "high"
                                                        "n!1"
                                                        "F"
                                                        "FF"))
                                                      (("3"
                                                        (assert)
                                                        (("3"
                                                          (expand
                                                           "sigma"
                                                           -1
                                                           2)
                                                          (("3"
                                                            (case-replace
                                                             "n!1=0")
                                                            (("1"
                                                              (expand "sigma")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (lemma
                                                               "sigma.sigma_ge_0")
                                                              (("2"
                                                                (lemma
                                                                 "sigma.sigma_ge_0"
                                                                 ("low"
                                                                  "1"
                                                                  "high"
                                                                  "n!1"
                                                                  "F"
                                                                  "FF"))
                                                                (("2"
                                                                  (split -1)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (skosimp)
                                                                    (("2"
                                                                      (inst
                                                                       -3
                                                                       "n!2")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (hide-all-but (-2 1))
                                      (("2"
                                        (skosimp)
                                        (("2"
                                          (expand "o")
                                          (("2"
                                            (inst
                                             -
                                             "denumerable_enumeration(X!1)(n!1)")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma const-decl "real" sigma_countable nil)
    (nonempty? const-decl "bool" sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (subrange type-eq-decl nil integers nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (integer nonempty-type-from-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (sigma_gt_0 formula-decl nil sigma reals)
    (O const-decl "T3" function_props nil)
    (is_countable const-decl "bool" countability sets_aux)
    (countable_set nonempty-type-eq-decl nil countability sets_aux)
    (convergent? const-decl "bool" countable_convergence nil)
    (finite_enumeration const-decl "[below[card(X)] -> (X)]"
     finite_enumeration nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (T_high type-eq-decl nil sigma reals)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (T_low type-eq-decl nil sigma reals)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (below type-eq-decl nil nat_types nil)
    (absconvergent_series_is_convergent judgement-tcc nil absconv_series
     series)
    (limit_order formula-decl nil convergence_ops analysis)
    (series const-decl "sequence[real]" series series)
    (limit_def formula-decl nil convergence_sequences analysis)
    (convergence const-decl "bool" convergence_sequences analysis)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (sigma_split formula-decl nil sigma reals)
    (sigma def-decl "real" sigma reals)
    (sigma_ge_0 formula-decl nil sigma reals)
    (sigma_0_neg formula-decl nil sigma_nat reals)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers nil)
    (> const-decl "bool" reals nil)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (absconvergent_series nonempty-type-eq-decl nil absconv_series series)
    (sequence type-eq-decl nil sequences nil)
    (absconvergent? const-decl "bool" absconv_series series)
    (X!1 skolem-const-decl "nonempty_countable" sigma_countable nil)
    (f!1 skolem-const-decl "(convergent?(X!1))" sigma_countable nil)
    (countably_infinite_set type-eq-decl nil countability sets_aux)
    (is_countably_infinite const-decl "bool" countability sets_aux)
    (denumerable_enumeration const-decl "[nat -> (X)]" denumerable_enumeration
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil sigma_countable nil)
    (set type-eq-decl nil sets nil)
    (nonempty_countable? const-decl "bool" sigma_countable nil)
    (nonempty_countable type-eq-decl nil sigma_countable nil))
   nil)
  (sigma_gt_0-1 nil 3395770501
   ("" (skosimp)
    (("" (expand "sigma")
      (("" (typepred "X!1")
        (("" (expand "nonempty_countable?")
          (("" (flatten)
            (("" (expand "nonempty?")
              (("" (assert)
                (("" (case-replace "is_finite(X!1)")
                  (("1"
                    (lemma "sigma_gt_0[below[card(X!1)]]"
                     ("low" "0" "high" "card(X!1) - 1" "F"
                      "f!1 o finite_enumeration(X!1)"))
                    (("1" (assert)
                      (("1" (lemma "nonempty_card[T]" ("S" "X!1"))
                        (("1" (expand "nonempty?")
                          (("1" (assert)
                            (("1" (skosimp)
                              (("1" (expand "o" 1)
                                (("1" (inst - "finite_enumeration(X!1)(n!1)")
                                  nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skosimp) (("2" (assert) nil nil)) nil))
                    nil)
                   ("2" (assert)
                    (("2" (typepred "f!1")
                      (("2" (expand "convergent?")
                        (("2" (lemma "absconvergent_series_is_convergent")
                          (("2" (inst - "f!1 o denumerable_enumeration(X!1)")
                            (("2" (hide -2 -3)
                              (("2" (expand "convergent")
                                (("2" (skosimp)
                                  (("2"
                                    (case "forall (n:nat): (f!1 o denumerable_enumeration(X!1))(n)>0")
                                    (("1"
                                      (name-replace
                                       "FF"
                                       "f!1 o denumerable_enumeration(X!1)")
                                      (("1"
                                        (hide -3 1 2)
                                        (("1"
                                          (lemma
                                           "limit_order"
                                           ("s1"
                                            "lambda (n:nat): FF(0)"
                                            "l1"
                                            "FF(0)"
                                            "s2"
                                            "series(FF)"
                                            "l2"
                                            "l!1"))
                                          (("1"
                                            (replace -3)
                                            (("1"
                                              (split -1)
                                              (("1"
                                                (rewrite
                                                 "limit_def"
                                                 -
                                                 :dir
                                                 rl)
                                                (("1"
                                                  (inst - "0")
                                                  (("1" (assert) nil nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2"
                                                  (expand "convergence")
                                                  (("2"
                                                    (expand "abs")
                                                    (("2" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (skosimp)
                                                (("3"
                                                  (expand "series")
                                                  (("3"
                                                    (hide -2 2)
                                                    (("3"
                                                      (lemma
                                                       "sigma_split"
                                                       ("low"
                                                        "0"
                                                        "z"
                                                        "0"
                                                        "high"
                                                        "n!1"
                                                        "F"
                                                        "FF"))
                                                      (("3"
                                                        (assert)
                                                        (("3"
                                                          (expand
                                                           "sigma"
                                                           -1
                                                           2)
                                                          (("3"
                                                            (case-replace
                                                             "n!1=0")
                                                            (("1"
                                                              (expand "sigma")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (lemma
                                                               "sigma.sigma_ge_0")
                                                              (("2"
                                                                (lemma
                                                                 "sigma.sigma_ge_0"
                                                                 ("low"
                                                                  "1"
                                                                  "high"
                                                                  "n!1"
                                                                  "F"
                                                                  "FF"))
                                                                (("2"
                                                                  (split -1)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (skosimp)
                                                                    (("2"
                                                                      (inst
                                                                       -3
                                                                       "n!2")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (hide-all-but (-2 1))
                                      (("2"
                                        (skosimp)
                                        (("2"
                                          (expand "o")
                                          (("2"
                                            (inst
                                             -
                                             "denumerable_enumeration(X!1)(n!1)")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonempty? const-decl "bool" sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (sigma_gt_0 formula-decl nil sigma reals)
    (convergent? const-decl "bool" countable_convergence nil)
    (finite_enumeration const-decl "[below[card(X)] -> (X)]"
     finite_enumeration nil)
    (T_high type-eq-decl nil sigma reals) (T_low type-eq-decl nil sigma reals)
    (finite_set type-eq-decl nil finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (absconvergent_series_is_convergent judgement-tcc nil absconv_series
     series)
    (limit_def formula-decl nil convergence_sequences analysis)
    (convergence const-decl "bool" convergence_sequences analysis)
    (sigma_split formula-decl nil sigma reals)
    (sigma def-decl "real" sigma reals)
    (sigma_ge_0 formula-decl nil sigma reals)
    (sigma_0_neg formula-decl nil sigma_nat reals)
    (absconvergent_series nonempty-type-eq-decl nil absconv_series series)
    (absconvergent? const-decl "bool" absconv_series series)
    (denumerable_enumeration const-decl "[nat -> (X)]" denumerable_enumeration
     nil)
    (set type-eq-decl nil sets nil))
   shostak))
 (sigma_abs_TCC1 0
  (sigma_abs_TCC1-1 nil 3395767351
   ("" (skosimp)
    (("" (typepred "f!1") (("" (rewrite "convergent_abs") nil nil)) nil)) nil)
   ((convergent? const-decl "bool" countable_convergence nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (countable_set nonempty-type-eq-decl nil countability sets_aux)
    (is_countable const-decl "bool" countability sets_aux)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil sigma_countable nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (convergent_abs formula-decl nil countable_convergence nil))
   nil
   (sigma_abs subtype "real_fun_ops[sigma_countable.T].abs(sigma_countable.f)"
    "(countable_convergence[sigma_countable.T].convergent?(sigma_countable.X))")))
 (sigma_abs 0
  (sigma_abs-1 nil 3395767542
   ("" (skosimp)
    (("" (lemma "sigma_ge_0" ("X" "X!1" "f" "abs(f!1)-f!1"))
      (("1" (split -1)
        (("1" (lemma "sigma_diff" ("X" "X!1" "f" "abs(f!1)" "g" "f!1"))
          (("1" (replace -1)
            (("1" (hide -1)
              (("1" (lemma "sigma_ge_0" ("X" "X!1" "f" "abs(f!1)+f!1"))
                (("1" (split -1)
                  (("1"
                    (lemma "sigma_plus" ("X" "X!1" "f" "abs(f!1)" "g" "f!1"))
                    (("1" (replace -1)
                      (("1" (hide -1)
                        (("1" (name-replace "SigA" "sigma(X!1, abs(f!1))")
                          (("1" (name-replace "Sig" "sigma(X!1, f!1)")
                            (("1" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -1 2) (("2" (grind) nil nil)) nil))
                  nil)
                 ("2" (typepred "f!1")
                  (("2" (lemma "convergent_abs" ("X" "X!1" "g" "f!1"))
                    (("2" (assert)
                      (("2"
                        (lemma "convergent_plus"
                         ("X" "X!1" "f" "abs(f!1)" "g" "f!1"))
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skosimp) (("2" (hide 2) (("2" (grind) nil nil)) nil)) nil))
        nil)
       ("2" (hide 2)
        (("2" (typepred "f!1")
          (("2" (lemma "convergent_abs" ("X" "X!1" "g" "f!1"))
            (("2" (assert)
              (("2"
                (lemma "convergent_diff" ("X" "X!1" "f" "abs(f!1)" "g" "f!1"))
                (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((abs const-decl "[T -> nonneg_real]" real_fun_ops reals)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (convergent? const-decl "bool" countable_convergence nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (countable_set nonempty-type-eq-decl nil countability sets_aux)
    (is_countable const-decl "bool" countability sets_aux)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil sigma_countable nil)
    (sigma_ge_0 formula-decl nil sigma_countable nil)
    (sigma_diff formula-decl nil sigma_countable nil)
    (convergent_plus formula-decl nil countable_convergence nil)
    (convergent_abs formula-decl nil countable_convergence nil)
    (sigma const-decl "real" sigma_countable nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (sigma_plus formula-decl nil sigma_countable nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (convergent_diff formula-decl nil countable_convergence nil))
   shostak))
 (sigma_eq 0
  (sigma_eq-1 nil 3395768273
   ("" (skosimp)
    (("" (expand "sigma")
      (("" (case-replace "empty?(X!1)")
        (("" (assert)
          (("" (case-replace "is_finite(X!1)")
            (("1"
              (lemma "sigma_eq[below[card(X!1)]]"
               ("low" "0" "high" "card(X!1) - 1" "F"
                "f!1 o finite_enumeration(X!1)" "G"
                "g!1 o finite_enumeration(X!1)"))
              (("1" (split -1)
                (("1" (propax) nil nil)
                 ("2" (skosimp)
                  (("2" (expand "o")
                    (("2" (inst - "finite_enumeration(X!1)(n!1)") nil nil))
                    nil))
                  nil))
                nil)
               ("2" (skosimp) (("2" (assert) nil nil)) nil))
              nil)
             ("2" (assert)
              (("2"
                (case-replace
                 "f!1 o denumerable_enumeration(X!1) =g!1 o denumerable_enumeration(X!1)")
                (("2" (apply-extensionality :hide? t)
                  (("2" (expand "o")
                    (("2" (inst - "denumerable_enumeration(X!1)(x!1)") nil
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma const-decl "real" sigma_countable nil)
    (denumerable_enumeration const-decl "[nat -> (X)]" denumerable_enumeration
     nil)
    (is_countably_infinite const-decl "bool" countability sets_aux)
    (countably_infinite_set type-eq-decl nil countability sets_aux)
    (below type-eq-decl nil nat_types nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (T_low type-eq-decl nil sigma reals)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (T_high type-eq-decl nil sigma reals) (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (finite_enumeration const-decl "[below[card(X)] -> (X)]"
     finite_enumeration nil)
    (convergent? const-decl "bool" countable_convergence nil)
    (O const-decl "T3" function_props nil)
    (sigma_eq formula-decl nil sigma reals)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (subrange type-eq-decl nil integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (is_finite const-decl "bool" finite_sets nil)
    (countable_set nonempty-type-eq-decl nil countability sets_aux)
    (is_countable const-decl "bool" countability sets_aux)
    (empty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil sigma_countable nil))
   shostak))
 (sigma_le 0
  (sigma_le-1 nil 3395768649
   ("" (skosimp)
    (("" (lemma "sigma_ge_0" ("X" "X!1" "f" "g!1-f!1"))
      (("1" (split -1)
        (("1" (lemma "sigma_diff" ("X" "X!1" "f" "g!1" "g" "f!1"))
          (("1" (assert) nil nil)) nil)
         ("2" (skosimp)
          (("2" (inst - "t!1")
            (("2" (expand "-") (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil)
       ("2" (lemma "convergent_diff" ("X" "X!1" "f" "g!1" "g" "f!1"))
        (("2" (assert) nil nil)) nil))
      nil))
    nil)
   ((- const-decl "[T -> real]" real_fun_ops reals)
    (convergent? const-decl "bool" countable_convergence nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (countable_set nonempty-type-eq-decl nil countability sets_aux)
    (is_countable const-decl "bool" countability sets_aux)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil sigma_countable nil)
    (sigma_ge_0 formula-decl nil sigma_countable nil)
    (sigma_diff formula-decl nil sigma_countable nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (convergent_diff formula-decl nil countable_convergence nil))
   shostak))
 (sigma_lt 0
  (sigma_lt-1 nil 3395771658
   ("" (skosimp)
    (("" (lemma "sigma_gt_0" ("X" "X!1" "f" "g!1-f!1"))
      (("1" (split)
        (("1" (lemma "sigma_diff" ("X" "X!1" "f" "g!1" "g" "f!1"))
          (("1" (assert) nil nil)) nil)
         ("2" (skosimp)
          (("2" (expand "-")
            (("2" (inst - "t!1") (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil)
       ("2" (lemma "convergent_diff" ("X" "X!1" "f" "g!1" "g" "f!1"))
        (("2" (assert) nil nil)) nil))
      nil))
    nil)
   ((- const-decl "[T -> real]" real_fun_ops reals)
    (convergent? const-decl "bool" countable_convergence nil)
    (countable_set nonempty-type-eq-decl nil countability sets_aux)
    (is_countable const-decl "bool" countability sets_aux)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (nonempty_countable type-eq-decl nil sigma_countable nil)
    (nonempty_countable? const-decl "bool" sigma_countable nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil sigma_countable nil)
    (sigma_gt_0 formula-decl nil sigma_countable nil)
    (sigma_diff formula-decl nil sigma_countable nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (convergent_diff formula-decl nil countable_convergence nil))
   shostak))
 (sigma_bij_TCC1 0
  (sigma_bij_TCC1-1 nil 3472975864
   ("" (skosimp*)
    (("" (typepred "phi!1")
      (("" (typepred "f!1")
        (("" (expand "convergent?")
          (("" (flatten)
            (("" (assert)
              (("" (expand "absconvergent?")
                (("" (typepred "phi!1")
                  (("" (lemma "denumerable_enumeration_bij" ("X" "X!1"))
                    (("" (lemma "denumerable_enumeration_image" ("X" "X!1"))
                      (("" (name-replace "PHI" "denumerable_enumeration(X!1)")
                        (("" (expand "extend")
                          (("" (expand "o")
                            ((""
                              (lemma "bij_inv_is_bij[nat, (X!1)]" ("f" "PHI"))
                              (("" (hide -4)
                                (("" (assert)
                                  (("" (case "nonempty?(X!1)")
                                    (("1"
                                      (lemma
                                       "bij_inv_is_bij[(X!1), (X!1)]"
                                       ("f" "phi!1"))
                                      (("1"
                                        (split -1)
                                        (("1"
                                          (lemma
                                           "abs_series_bij_conv"
                                           ("a"
                                            "abs(LAMBDA (x: nat): f!1(PHI(x)))"
                                            "phi"
                                            "lambda n: inverse(PHI)(phi!1(PHI(n)))"))
                                          (("1"
                                            (assert)
                                            (("1"
                                              (split -1)
                                              (("1"
                                                (expand "o")
                                                (("1"
                                                  (expand "abs" -1)
                                                  (("1"
                                                    (expand "abs" 2)
                                                    (("1"
                                                      (case-replace
                                                       "(LAMBDA (x_1: nat):
                          abs(f!1(PHI(inverse(PHI)(phi!1(PHI(x_1)))))))=(LAMBDA (n: nat): abs(f!1(phi!1(PHI(n)))))")
                                                      (("1"
                                                        (hide-all-but
                                                         (-2
                                                          -3
                                                          -4
                                                          -5
                                                          -6
                                                          -8
                                                          1))
                                                        (("1"
                                                          (apply-extensionality
                                                           :hide?
                                                           t)
                                                          (("1"
                                                            (lemma
                                                             "comp_inverse_right[nat, (X!1)]"
                                                             ("f"
                                                              "PHI"
                                                              "y"
                                                              "phi!1(PHI(x!1))"))
                                                            (("1"
                                                              (replace -1)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skosimp)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (lemma
                                                                 "comp_inverse_right[nat, (X!1)]"
                                                                 ("f"
                                                                  "PHI"
                                                                  "y"
                                                                  "phi!1(PHI(n!1))"))
                                                                (("2"
                                                                  (replace -1)
                                                                  (("2"
                                                                    (name-replace
                                                                     "DRL1"
                                                                     "f!1(phi!1(PHI(n!1)))")
                                                                    (("2"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but (1 -6))
                                                (("2"
                                                  (expand "convergent?")
                                                  (("2"
                                                    (skosimp)
                                                    (("2"
                                                      (inst + "l!1")
                                                      (("2"
                                                        (expand "convergence")
                                                        (("2"
                                                          (skosimp)
                                                          (("2"
                                                            (inst
                                                             -
                                                             "epsilon!1")
                                                            (("2"
                                                              (skosimp)
                                                              (("2"
                                                                (inst + "n!1")
                                                                (("2"
                                                                  (skosimp)
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "i!1")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "abs"
                                                                         1
                                                                         2)
                                                                        (("2"
                                                                          (expand
                                                                           "abs"
                                                                           -2
                                                                           2)
                                                                          (("2"
                                                                            (expand
                                                                             "series")
                                                                            (("2"
                                                                              (case-replace
                                                                               "(LAMBDA (n: nat): abs(abs(LAMBDA (x: nat): f!1(PHI(x)))(n)))=(LAMBDA (n: nat): abs(f!1(PHI(n))))")
                                                                              (("2"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("2"
                                                                                  (apply-extensionality
                                                                                   :hide?
                                                                                   t)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "abs")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "abs")
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (skosimp)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "abs")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "abs")
                                                                                        (("2"
                                                                                          (case-replace
                                                                                           "f!1(PHI(n!2)) < 0")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (lemma
                                             "composition_bijective[nat,(X!1),(X!1)]"
                                             ("f1" "PHI" "f2" "phi!1"))
                                            (("2"
                                              (lemma
                                               "composition_bijective[nat,(X!1),nat]"
                                               ("f1"
                                                "phi!1 o PHI"
                                                "f2"
                                                "inverse[nat, (X!1)](PHI)"))
                                              (("1"
                                                (expand "o")
                                                (("1" (propax) nil nil))
                                                nil)
                                               ("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (propax) nil nil))
                                        nil)
                                       ("2"
                                        (hide-all-but (-1 1))
                                        (("2"
                                          (expand "nonempty?")
                                          (("2"
                                            (expand "empty?")
                                            (("2"
                                              (skosimp)
                                              (("2"
                                                (inst + "x!1")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "member")
                                                    (("2" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (expand "nonempty?")
                                      (("2"
                                        (rewrite "emptyset_is_empty?")
                                        (("2"
                                          (replace -1)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bijective? const-decl "bool" functions nil)
    (countable_set nonempty-type-eq-decl nil countability sets_aux)
    (is_countable const-decl "bool" countability sets_aux)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil sigma_countable nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (denumerable_enumeration_image formula-decl nil denumerable_enumeration
     nil)
    (extend const-decl "R" extend nil)
    (bij_inv_is_bij formula-decl nil function_inverse nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set[T]" countable_props sets_aux)
    (finite_emptyset name-judgement "finite_set[T]" sigma_countable nil)
    (emptyset_is_empty? formula-decl nil sets_lemmas nil)
    (TRUE const-decl "bool" booleans nil)
    (abs_series_bij_conv formula-decl nil series_lems series)
    (sequence type-eq-decl nil sequences nil)
    (abs const-decl "sequence[real]" series series)
    (inverse const-decl "D" function_inverse nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (PHI skolem-const-decl "[nat -> (X!1)]" sigma_countable nil)
    (phi!1 skolem-const-decl "(bijective?[(X!1), (X!1)])" sigma_countable nil)
    (f!1 skolem-const-decl "(convergent?[T](X!1))" sigma_countable nil)
    (X!1 skolem-const-decl "countable_set[T]" sigma_countable nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (comp_inverse_right formula-decl nil function_inverse nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (< const-decl "bool" reals nil)
    (series const-decl "sequence[real]" series series)
    (sigma_nnreal application-judgement "nnreal" sigma_nat reals)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (convergence const-decl "bool" convergence_sequences analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (bijective_inverse_is_bijective application-judgement "(bijective?[R, D])"
     function_inverse nil)
    (composition_bijective judgement-tcc nil function_props nil)
    (member const-decl "bool" sets nil)
    (x!1 skolem-const-decl "T" sigma_countable nil)
    (empty? const-decl "bool" sets nil) (nonempty? const-decl "bool" sets nil)
    (O const-decl "T3" function_props nil)
    (denumerable_enumeration const-decl "[nat -> (X)]" denumerable_enumeration
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (countably_infinite_set type-eq-decl nil countability sets_aux)
    (is_countably_infinite const-decl "bool" countability sets_aux)
    (denumerable_enumeration_bij formula-decl nil denumerable_enumeration nil)
    (absconvergent? const-decl "bool" absconv_series series)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (convergent? const-decl "bool" countable_convergence nil))
   nil
   (sigma_bij subtype
    "extend[sigma_countable.T, (sigma_countable.X), real, 0].extend(function_props[(sigma_countable.X), sigma_countable.T, real].o(sigma_countable.f, sigma_countable.phi))"
    "(countable_convergence[sigma_countable.T].convergent?(sigma_countable.X))")))
 (sigma_bij 0
  (sigma_bij-1 nil 3472977153
   ("" (skosimp)
    (("" (typepred "f!1")
      (("" (typepred "phi!1")
        (("" (expand "o" 1)
          (("" (expand "extend" 1)
            (("" (expand "sigma")
              (("" (case-replace "empty?(X!1)")
                (("" (assert)
                  (("" (case-replace "is_finite(X!1)")
                    (("1" (lemma "sigma_bijection[below[card(X!1)]]")
                      (("1" (lemma "nonempty_card[T]" ("S" "X!1"))
                        (("1" (expand "nonempty?" -1)
                          (("1" (inst - "_" "card(X!1) - 1" "0")
                            (("1" (assert)
                              (("1"
                                (lemma "finite_enumeration_bij" ("X" "X!1"))
                                (("1"
                                  (lemma "finite_enumeration_image"
                                   ("X" "X!1"))
                                  (("1"
                                    (name-replace "PHI"
                                     "finite_enumeration(X!1)")
                                    (("1" (inst - "f!1 o PHI")
                                      (("1"
                                        (expand "o" 2 1)
                                        (("1"
                                          (case
                                           "forall (n:below[card(X!1)]): sigma[subrange_T[below[card(X!1)]](0, card(X!1) - 1)]
            (0, n,
             restrict
                 [below[card(X!1)],
                  subrange_T[below[card(X!1)]](0, card(X!1) - 1), real]
                 (f!1 o PHI)) = sigma[below[card(X!1)]](0, n, f!1 o PHI)")
                                          (("1"
                                            (inst - "card(X!1) - 1")
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (hide -1)
                                                (("1"
                                                  (name-replace
                                                   "RHS"
                                                   "sigma[below[card(X!1)]](0, card(X!1) - 1, f!1 o PHI)")
                                                  (("1"
                                                    (lemma
                                                     "bij_inv_is_bij[below[card(X!1)], (X!1)]"
                                                     ("f" "PHI"))
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lemma
                                                         "composition_bijective[below[card(X!1)],(X!1),(X!1)]"
                                                         ("f1"
                                                          "PHI"
                                                          "f2"
                                                          "phi!1"))
                                                        (("1"
                                                          (lemma
                                                           "composition_bijective[below[card(X!1)],(X!1),below[card(X!1)]]"
                                                           ("f1"
                                                            "phi!1 o PHI"
                                                            "f2"
                                                            "inverse[below[card(X!1)], (X!1)](PHI)"))
                                                          (("1"
                                                            (expand "o" -1)
                                                            (("1"
                                                              (case
                                                               "exists (phi:
                (bijective?
                     [subrange_T[below[card(X!1)]](0, card(X!1) - 1),
                      subrange_T[below[card(X!1)]](0, card(X!1) - 1)])): forall (n:subrange_T[below[card(X!1)]](0, card(X!1) - 1)): PHI(phi(n))= phi!1(PHI(n))")
                                                              (("1"
                                                                (skosimp)
                                                                (("1"
                                                                  (inst
                                                                   -8
                                                                   "phi!2")
                                                                  (("1"
                                                                    (case
                                                                     "forall (n:below[card(X!1)]): sigma[subrange_T[below[card(X!1)]](0, card(X!1) - 1)]
           (0,n, f!1 o PHI o phi!2)=sigma[below[card(X!1)]]
          (0,n,
           LAMBDA (x: below[card(X!1)]): f!1(phi!1(PHI(x))))")
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "card(X!1) - 1")
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       (-1
                                                                        1
                                                                        2
                                                                        -7))
                                                                      (("2"
                                                                        (induct
                                                                         "n")
                                                                        (("1"
                                                                          (expand
                                                                           "sigma")
                                                                          (("1"
                                                                            (expand
                                                                             "sigma")
                                                                            (("1"
                                                                              (expand
                                                                               "o")
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "0")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (skosimp*)
                                                                          (("2"
                                                                            (expand
                                                                             "sigma"
                                                                             1)
                                                                            (("2"
                                                                              (replace
                                                                               -2)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   "o"
                                                                                   1)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -
                                                                                     "1+jb!1")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("3"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("4"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("4"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide -7 3)
                                                                (("2"
                                                                  (inst
                                                                   +
                                                                   "lambda (n:subrange_T[below[card(X!1)]](0, card(X!1) - 1)): inverse[below[card(X!1)], (X!1)](PHI)(phi!1(PHI(n)))")
                                                                  (("1"
                                                                    (skosimp)
                                                                    (("1"
                                                                      (typepred
                                                                       "n!1")
                                                                      (("1"
                                                                        (lemma
                                                                         "comp_inverse_right[below[card(X!1)], (X!1)]"
                                                                         ("f"
                                                                          "PHI"
                                                                          "y"
                                                                          "phi!1(PHI(n!1))"))
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (-1 1))
                                                                    (("2"
                                                                      (expand
                                                                       "bijective?")
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (split)
                                                                          (("1"
                                                                            (hide
                                                                             -2)
                                                                            (("1"
                                                                              (expand
                                                                               "injective?")
                                                                              (("1"
                                                                                (skosimp*)
                                                                                (("1"
                                                                                  (typepred
                                                                                   "x1!1")
                                                                                  (("1"
                                                                                    (typepred
                                                                                     "x2!1")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "x1!1"
                                                                                       "x2!1")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             -1)
                                                                            (("2"
                                                                              (expand
                                                                               "surjective?")
                                                                              (("2"
                                                                                (skosimp)
                                                                                (("2"
                                                                                  (typepred
                                                                                   "y!1")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -
                                                                                     "y!1")
                                                                                    (("2"
                                                                                      (skosimp)
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "x!1")
                                                                                        (("2"
                                                                                          (inst
                                                                                           +
                                                                                           "x!1")
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (skosimp)
                                                                    (("3"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("4"
                                                                    (skosimp)
                                                                    (("4"
                                                                      (inst
                                                                       +
                                                                       "0")
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("5"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("5"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (hide-all-but
                                                                 1)
                                                                (("3"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (inst + "0")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -4 3)
                                            (("2"
                                              (induct "n")
                                              (("1"
                                                (expand "sigma")
                                                (("1"
                                                  (expand "sigma")
                                                  (("1"
                                                    (expand "restrict")
                                                    (("1" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skosimp*)
                                                (("2"
                                                  (expand "sigma" 1)
                                                  (("2"
                                                    (replace -2)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand "restrict")
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (hide-all-but 1)
                                                (("3" (grind) nil nil))
                                                nil)
                                               ("4"
                                                (hide-all-but 1)
                                                (("4" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (hide-all-but 1)
                                            (("3" (grind) nil nil))
                                            nil)
                                           ("4"
                                            (hide-all-but 1)
                                            (("4" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil) ("3" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skosimp)
                        (("2" (typepred "y!1")
                          (("2" (typepred "x!1") (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "convergent?")
                      (("2" (assert)
                        (("2" (expand "o")
                          (("2" (expand "absconvergent?")
                            (("2"
                              (lemma "denumerable_enumeration_bij"
                               ("X" "X!1"))
                              (("1"
                                (name-replace "PHI"
                                 "denumerable_enumeration(X!1)")
                                (("1"
                                  (lemma "bij_inv_is_bij[nat, (X!1)]"
                                   ("f" "PHI"))
                                  (("1" (assert)
                                    (("1"
                                      (lemma
                                       "abs_series_bij_limit"
                                       ("a"
                                        "LAMBDA (x: nat): f!1(PHI(x))"
                                        "phi"
                                        "lambda n: inverse(PHI)(phi!1(PHI(n)))"))
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "o" -1)
                                          (("1"
                                            (case-replace
                                             "(LAMBDA (x_1: nat):
                      f!1(PHI(inverse(PHI)(phi!1(PHI(x_1))))))=(LAMBDA (x: nat): f!1(phi!1(PHI(x))))")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (hide -1 4)
                                              (("2"
                                                (apply-extensionality
                                                 :hide?
                                                 t)
                                                (("2"
                                                  (lemma
                                                   "comp_inverse_right[nat, (X!1)]"
                                                   ("f"
                                                    "PHI"
                                                    "y"
                                                    "phi!1(PHI(x!1))"))
                                                  (("2"
                                                    (replace -1)
                                                    (("2" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but (-1 -3 -2 1 3))
                                        (("2"
                                          (lemma
                                           "composition_bijective[nat,(X!1),(X!1)]"
                                           ("f1" "PHI" "f2" "phi!1"))
                                          (("2"
                                            (lemma
                                             "composition_bijective[nat,(X!1),nat]"
                                             ("f1"
                                              "phi!1 o PHI"
                                              "f2"
                                              "inverse[nat, (X!1)](PHI)"))
                                            (("1"
                                              (expand "o")
                                              (("1" (propax) nil nil))
                                              nil)
                                             ("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (rewrite "countably_infinite_def") nil
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((convergent? const-decl "bool" countable_convergence nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (countable_set nonempty-type-eq-decl nil countability sets_aux)
    (is_countable const-decl "bool" countability sets_aux)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil sigma_countable nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (O const-decl "T3" function_props nil)
    (sigma const-decl "real" sigma_countable nil)
    (denumerable_enumeration_bij formula-decl nil denumerable_enumeration nil)
    (is_countably_infinite const-decl "bool" countability sets_aux)
    (countably_infinite_set type-eq-decl nil countability sets_aux)
    (abs_series_bij_limit formula-decl nil series_lems series)
    (sequence type-eq-decl nil sequences nil)
    (denumerable_enumeration const-decl "[nat -> (X)]" denumerable_enumeration
     nil)
    (countably_infinite_def formula-decl nil countable_props sets_aux)
    (absconvergent? const-decl "bool" absconv_series series)
    (below type-eq-decl nil nat_types nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (sigma_bijection formula-decl nil sigma_bijection nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (nonempty? const-decl "bool" sets nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finite_enumeration_image formula-decl nil finite_enumeration nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (subrange_T type-eq-decl nil sigma_bijection nil)
    (T_low type-eq-decl nil sigma reals) (T_high type-eq-decl nil sigma reals)
    (sigma def-decl "real" sigma reals) (restrict const-decl "R" restrict nil)
    (inverse const-decl "D" function_inverse nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (below_induction formula-decl nil bounded_nat_inductions nil)
    (below type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (PHI skolem-const-decl "[below[card(X!1)] -> (X!1)]" sigma_countable nil)
    (phi!1 skolem-const-decl "(bijective?[(X!1), (X!1)])" sigma_countable nil)
    (comp_inverse_right formula-decl nil function_inverse nil)
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (composition_bijective judgement-tcc nil function_props nil)
    (TRUE const-decl "bool" booleans nil)
    (bij_inv_is_bij formula-decl nil function_inverse nil)
    (finite_enumeration const-decl "[below[card(X)] -> (X)]"
     finite_enumeration nil)
    (finite_enumeration_bij formula-decl nil finite_enumeration nil)
    (X!1 skolem-const-decl "countable_set[T]" sigma_countable nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (empty? const-decl "bool" sets nil) (extend const-decl "R" extend nil)
    (bijective? const-decl "bool" functions nil))
   shostak))
 (sigma_nn_def_TCC1 0
  (sigma_nn_def_TCC1-1 nil 3472975864
   ("" (skosimp*) (("" (grind) nil nil)) nil)
   ((subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (convergent? const-decl "bool" countable_convergence nil)
    (absconvergent? const-decl "bool" absconv_series series)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (convergence const-decl "bool" convergence_sequences analysis)
    (series const-decl "sequence[real]" series series)
    (sigma def-decl "real" sigma reals)
    (abs const-decl "sequence[real]" series series)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (O const-decl "T3" function_props nil)
    (denumerable_enumeration const-decl "[nat -> (X)]" denumerable_enumeration
     nil)
    (T formal-type-decl nil sigma_countable nil)
    (bijective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (injective? const-decl "bool" functions nil)
    (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil))
   nil
   (sigma_nn_def subtype "sigma_countable.f"
    "(countable_convergence[sigma_countable.T].convergent?(sigma_countable.F))")))
 (sigma_nn_def_TCC2 0
  (sigma_nn_def_TCC2-1 nil 3472975864
   ("" (skosimp*)
    (("" (split)
      (("1" (expand "nonempty?")
        (("1" (expand "empty?")
          (("1" (inst - "0")
            (("1" (expand "member")
              (("1" (inst + "emptyset[T]")
                (("1" (split)
                  (("1" (expand "emptyset")
                    (("1" (expand "subset?")
                      (("1" (expand "member") (("1" (propax) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (rewrite "sigma_empty") nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "above_bounded")
        (("2" (typepred "f!1")
          (("2" (inst + "sigma(X!1,f!1)")
            (("2" (expand "upper_bound")
              (("2" (skosimp)
                (("2" (typepred "z!1")
                  (("2" (skosimp)
                    (("2" (case "union(F!1, difference(X!1, F!1))=X!1")
                      (("1"
                        (lemma "sigma_disjoint_union"
                         ("f" "f!1" "X" "F!1" "Y" "difference(X!1,F!1)"))
                        (("1" (replace -2)
                          (("1" (split -1)
                            (("1"
                              (lemma "sigma_ge_0"
                               ("f" "f!1" "X" "difference(X!1, F!1)"))
                              (("1" (split -1)
                                (("1" (assert) nil nil)
                                 ("2" (skosimp)
                                  (("2" (typepred "t!1")
                                    (("2" (expand "difference")
                                      (("2"
                                        (expand "member")
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (inst -8 "t!1")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but (-3 1))
                              (("2" (expand "difference")
                                (("2" (expand "disjoint?")
                                  (("2" (expand "intersection")
                                    (("2" (expand "subset?")
                                      (("2"
                                        (expand "empty?")
                                        (("2"
                                          (expand "member")
                                          (("2" (skosimp) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (replace -1) (("2" (propax) nil nil)) nil))
                        nil)
                       ("2" (hide-all-but (-2 1))
                        (("2" (apply-extensionality :hide? t)
                          (("2" (expand "subset?")
                            (("2" (expand "difference")
                              (("2" (expand "union")
                                (("2" (expand "member")
                                  (("2" (inst - "x!1")
                                    (("2" (case-replace "F!1(x!1)")
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (sigma_empty formula-decl nil sigma_countable nil)
    (is_countable const-decl "bool" countability sets_aux)
    (countable_set nonempty-type-eq-decl nil countability sets_aux)
    (convergent? const-decl "bool" countable_convergence nil)
    (T formal-type-decl nil sigma_countable nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set[T]" countable_props sets_aux)
    (finite_emptyset name-judgement "finite_set[T]" sigma_countable nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nonempty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (upper_bound const-decl "bool" bound_defs reals)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (countable_difference application-judgement "countable_set[T]"
     sigma_countable nil)
    (countable_union application-judgement "countable_set[T]" sigma_countable
     nil)
    (union const-decl "set" sets nil) (difference const-decl "set" sets nil)
    (finite_intersection2 application-judgement "finite_set[T]"
     sigma_countable nil)
    (disjoint? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (sigma_ge_0 formula-decl nil sigma_countable nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (sigma_disjoint_union formula-decl nil sigma_countable nil)
    (sigma const-decl "real" sigma_countable nil)
    (above_bounded const-decl "bool" bounded_reals reals))
   nil
   (sigma_nn_def subtype
    "{nnx | EXISTS (F: finite_sets[sigma_countable.T].finite_set): booleans.AND(sets[sigma_countable.T].subset?(F, sigma_countable.X), sigma_countable.nnx = sigma_countable.sigma(F, sigma_countable.f))}"
    "sup_set[nnreal]")))
 (sigma_nn_def 0
  (sigma_nn_def-1 nil 3472977168
   (""
    (case "forall (f:[T->nnreal],X: countable_set[T]): convergent?(X)(f) => sigma(X, f) =
          sup({nnx | EXISTS (F:finite_set[T]): subset?(F, X) AND nnx = sigma(F, f)})")
    (("1" (skosimp*)
      (("1" (inst - "lambda t: if X!1(t) then f!1(t) else 0 endif" "X!1")
        (("1" (split -1)
          (("1"
            (lemma "sigma_eq"
             ("X" "X!1" "f" "LAMBDA t: IF X!1(t) THEN f!1(t) ELSE 0 ENDIF" "g"
              "f!1"))
            (("1" (split -1)
              (("1" (replace -1)
                (("1" (hide -1)
                  (("1" (replace -1 1)
                    (("1" (hide -1)
                      (("1"
                        (lemma "extensionality_postulate"
                         ("f" "{nnx |
             EXISTS (F:finite_set[T]):
               subset?(F, X!1) AND
                nnx =
                 sigma(F, LAMBDA t: IF X!1(t) THEN f!1(t) ELSE 0 ENDIF)}" "g"
                          "{nnx | EXISTS (F:finite_set[T]): subset?(F, X!1) AND nnx = sigma(F, f!1)}"))
                        (("1" (flatten)
                          (("1" (hide -2)
                            (("1" (split -1)
                              (("1" (replace -1) (("1" (propax) nil nil)) nil)
                               ("2" (hide 2)
                                (("2" (skosimp)
                                  (("2"
                                    (case-replace
                                     "EXISTS (F:finite_set[T]): subset?(F, X!1) AND x!1 = sigma(F, f!1)")
                                    (("1" (skosimp)
                                      (("1"
                                        (inst + "F!1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lemma
                                             "sigma_eq"
                                             ("X"
                                              "F!1"
                                              "f"
                                              "f!1"
                                              "g"
                                              "LAMBDA t: IF X!1(t) THEN f!1(t) ELSE 0 ENDIF"))
                                            (("1"
                                              (split -1)
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (hide 2 -2)
                                                (("2"
                                                  (skosimp)
                                                  (("2"
                                                    (typepred "t!1")
                                                    (("2"
                                                      (inst - "t!1")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand "subset?")
                                                          (("2"
                                                            (inst - "t!1")
                                                            (("2"
                                                              (expand
                                                               "member")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "convergent?")
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (replace 1 2)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (skosimp)
                                          (("2"
                                            (inst + "F!1")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (lemma
                                                 "sigma_eq"
                                                 ("X"
                                                  "F!1"
                                                  "f"
                                                  "f!1"
                                                  "g"
                                                  "LAMBDA t: IF X!1(t) THEN f!1(t) ELSE 0 ENDIF"))
                                                (("1"
                                                  (split -1)
                                                  (("1" (assert) nil nil)
                                                   ("2"
                                                    (hide-all-but (1 -3 -1))
                                                    (("2"
                                                      (skosimp)
                                                      (("2"
                                                        (inst - "t!1")
                                                        (("2"
                                                          (expand "subset?")
                                                          (("2"
                                                            (inst - "t!1")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "member")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "convergent?")
                                                  (("2" (propax) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skosimp)
                          (("2" (expand "convergent?")
                            (("2" (propax) nil nil)) nil))
                          nil)
                         ("3" (skosimp)
                          (("3" (expand "convergent?")
                            (("3" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skosimp)
                (("2" (typepred "t!1") (("2" (assert) nil nil)) nil)) nil))
              nil)
             ("2" (hide-all-but 1)
              (("2" (typepred "f!1")
                (("2" (expand "convergent?")
                  (("2" (flatten)
                    (("2" (assert)
                      (("2"
                        (lemma "denumerable_enumeration_image" ("X" "X!1"))
                        (("2"
                          (name-replace "PHI" "denumerable_enumeration(X!1)")
                          (("2"
                            (lemma "extensionality_postulate"
                             ("f" "image(PHI, fullset[nat])" "g"
                              "restrict[T, (X!1), boolean](X!1)"))
                            (("2" (replace -1 -2 rl)
                              (("2" (hide -1)
                                (("2" (expand "restrict")
                                  (("2"
                                    (case-replace
                                     "(LAMBDA t: IF X!1(t) THEN f!1(t) ELSE 0 ENDIF) o PHI = f!1 o PHI")
                                    (("2" (hide -2 3)
                                      (("2"
                                        (apply-extensionality 1 :hide? t)
                                        (("2"
                                          (expand "o" 1)
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (typepred "f!1")
              (("2" (expand "convergent?")
                (("2" (flatten)
                  (("2" (assert)
                    (("2" (lemma "denumerable_enumeration_image" ("X" "X!1"))
                      (("2"
                        (name-replace "PHI" "denumerable_enumeration(X!1)")
                        (("2"
                          (lemma "extensionality_postulate"
                           ("f" "image(PHI, fullset[nat])" "g"
                            "restrict[T, (X!1), boolean](X!1)"))
                          (("2" (replace -1 -2 rl)
                            (("2" (hide -1)
                              (("2" (expand "restrict")
                                (("2"
                                  (case-replace
                                   "(LAMBDA t: IF X!1(t) THEN f!1(t) ELSE 0 ENDIF) o PHI=f!1 o PHI")
                                  (("2" (hide -2 3)
                                    (("2" (apply-extensionality :hide? t)
                                      (("2"
                                        (expand "o" 1)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skosimp)
        (("2"
          (case "nonempty?({nnx | EXISTS (F:finite_set[T]): subset?(F, X!1) AND nnx = sigma(F, f!1)})")
          (("1"
            (case "above_bounded[nnreal]
           ({nnx | EXISTS (F:finite_set[T]): subset?[T](F, X!1) AND nnx = sigma[T](F, f!1)})")
            (("1"
              (typepred
               "sup({nnx | EXISTS (F:finite_set[T]): subset?(F, X!1) AND nnx = sigma(F, f!1)})")
              (("1"
                (name-replace "SUP"
                 "sup({nnx | EXISTS (F:finite_set[T]): subset?(F, X!1) AND nnx = sigma(F, f!1)})")
                (("1" (expand "least_upper_bound")
                  (("1" (expand "upper_bound")
                    (("1" (flatten)
                      (("1" (case "SUP<=sigma(X!1, f!1)")
                        (("1" (hide -3)
                          (("1" (case "SUP<sigma(X!1, f!1)")
                            (("1" (hide -2 1)
                              (("1" (expand "sigma" -1)
                                (("1" (case-replace "empty?(X!1)")
                                  (("1" (assert)
                                    (("1" (inst - "0")
                                      (("1"
                                        (inst + "emptyset[T]")
                                        (("1"
                                          (rewrite "sigma_empty")
                                          (("1"
                                            (hide-all-but 1)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (replace 1)
                                    (("2" (case-replace "is_finite(X!1)")
                                      (("1"
                                        (inst - "sigma(X!1,f!1)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "sigma" -3)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma
                                           "sigma_ge_0"
                                           ("X" "X!1" "f" "f!1"))
                                          (("1"
                                            (split -1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst + "X!1")
                                                (("1"
                                                  (hide-all-but 1)
                                                  (("1"
                                                    (expand "subset?")
                                                    (("1" (skosimp) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skosimp)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2" (propax) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (lemma
                                           "increasing_bounded_convergence"
                                           ("v1"
                                            "series(f!1 o denumerable_enumeration(X!1))"))
                                          (("1"
                                            (split -1)
                                            (("1"
                                              (lemma
                                               "convergence_sequences.limit_def"
                                               ("v"
                                                "series(f!1 o denumerable_enumeration(X!1))"
                                                "l"
                                                "sup(series(f!1 o denumerable_enumeration(X!1)))"))
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "o" -1 1)
                                                  (("1"
                                                    (expand "o" -3)
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (expand "sup")
                                                        (("1"
                                                          (name
                                                           "LUB"
                                                           "lub(Im(series(f!1 o denumerable_enumeration(X!1))))")
                                                          (("1"
                                                            (replace -1)
                                                            (("1"
                                                              (inst-cp - "0")
                                                              (("1"
                                                                (expand "Im")
                                                                (("1"
                                                                  (case
                                                                   "nonempty?({z:real |
             EXISTS (x: nat):
               z = series(f!1 o denumerable_enumeration(X!1))(x)})")
                                                                  (("1"
                                                                    (case
                                                                     "bounded_above?({z: real |
                         EXISTS (x: nat):
                           z =
                            series(o[nat, T, nnreal]
                                       (f!1,
                                        denumerable_enumeration[T](X!1)))
                                  (x)})")
                                                                    (("1"
                                                                      (typepred
                                                                       "lub({z: real |
                         EXISTS (x: nat):
                           z =
                            series(o[nat, T, nnreal]
                                       (f!1,
                                        denumerable_enumeration[T](X!1)))
                                  (x)})")
                                                                      (("1"
                                                                        (replace
                                                                         -4)
                                                                        (("1"
                                                                          (hide
                                                                           -2
                                                                           -3)
                                                                          (("1"
                                                                            (hide
                                                                             -2)
                                                                            (("1"
                                                                              (expand
                                                                               "least_upper_bound?")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (expand
                                                                                   "upper_bound?")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -2
                                                                                     "SUP")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (skosimp)
                                                                                        (("1"
                                                                                          (typepred
                                                                                           "s!1")
                                                                                          (("1"
                                                                                            (skosimp)
                                                                                            (("1"
                                                                                              (case
                                                                                               "SUP<s!1")
                                                                                              (("1"
                                                                                                (hide
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -7
                                                                                                   "s!1")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "o"
                                                                                                       -2)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "series"
                                                                                                         -2)
                                                                                                        (("2"
                                                                                                          (name
                                                                                                           "FF"
                                                                                                           "{t | exists n: n <= x!1 & t = denumerable_enumeration[T](X!1)(n)}")
                                                                                                          (("2"
                                                                                                            (case
                                                                                                             "is_finite[T](FF)")
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               +
                                                                                                               "FF")
                                                                                                              (("1"
                                                                                                                (split
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "subset?")
                                                                                                                  (("1"
                                                                                                                    (hide-all-but
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "FF")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "member")
                                                                                                                        (("1"
                                                                                                                          (skosimp*)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (replace
                                                                                                                   -4)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "sigma"
                                                                                                                     1
                                                                                                                     2)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (hide
                                                                                                                         -3
                                                                                                                         -4
                                                                                                                         -5
                                                                                                                         -10
                                                                                                                         -11)
                                                                                                                        (("2"
                                                                                                                          (case-replace
                                                                                                                           "empty?(FF)")
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "empty?"
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "FF"
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "member")
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -
                                                                                                                                   "denumerable_enumeration[T](X!1)(0)")
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     +
                                                                                                                                     "0")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (lemma
                                                                                                                               "denumerable_enumeration_bij"
                                                                                                                               ("X"
                                                                                                                                "X!1"))
                                                                                                                              (("2"
                                                                                                                                (lemma
                                                                                                                                 "finite_enumeration_bij"
                                                                                                                                 ("X"
                                                                                                                                  "FF"))
                                                                                                                                (("2"
                                                                                                                                  (name-replace
                                                                                                                                   "PHI"
                                                                                                                                   "denumerable_enumeration[T](X!1)")
                                                                                                                                  (("2"
                                                                                                                                    (name-replace
                                                                                                                                     "PSI"
                                                                                                                                     "finite_enumeration[T](FF)")
                                                                                                                                    (("2"
                                                                                                                                      (lemma
                                                                                                                                       "bij_inv_is_bij[nat, (X!1)]"
                                                                                                                                       ("f"
                                                                                                                                        "PHI"))
                                                                                                                                      (("2"
                                                                                                                                        (lemma
                                                                                                                                         "bij_inv_is_bij[below[card(FF)], (FF)]"
                                                                                                                                         ("f"
                                                                                                                                          "PSI"))
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (case
                                                                                                                                             "x!1=card(FF)-1")
                                                                                                                                            (("1"
                                                                                                                                              (replace
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (hide
                                                                                                                                                 -8
                                                                                                                                                 -9
                                                                                                                                                 -10
                                                                                                                                                 -11
                                                                                                                                                 -12)
                                                                                                                                                (("1"
                                                                                                                                                  (lemma
                                                                                                                                                   "nonempty_card[T]"
                                                                                                                                                   ("S"
                                                                                                                                                    "FF"))
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "nonempty?"
                                                                                                                                                     -1)
                                                                                                                                                    (("1"
                                                                                                                                                      (lemma
                                                                                                                                                       "sigma_bijection[below[card(FF)]]")
                                                                                                                                                      (("1"
                                                                                                                                                        (inst
                                                                                                                                                         -
                                                                                                                                                         "_"
                                                                                                                                                         "card(FF) - 1"
                                                                                                                                                         "0")
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          (("1"
                                                                                                                                                            (expand
                                                                                                                                                             "o"
                                                                                                                                                             2)
                                                                                                                                                            (("1"
                                                                                                                                                              (inst
                                                                                                                                                               -
                                                                                                                                                               "LAMBDA (x: below[card(FF)]): f!1(PSI(x))")
                                                                                                                                                              (("1"
                                                                                                                                                                (expand
                                                                                                                                                                 "restrict")
                                                                                                                                                                (("1"
                                                                                                                                                                  (case
                                                                                                                                                                   "forall (n:below[card(FF)]): sigma[subrange_T[below[card(FF)]](0, card(FF) - 1)]
            (0, n,
             LAMBDA (s: subrange_T[below[card(FF)]](0, card(FF) - 1)):
               f!1(PSI(s)))=sigma[below[card(FF)]]
           (0, n, LAMBDA (x: below[card(FF)]): f!1(PSI(x)))")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (inst
                                                                                                                                                                     -
                                                                                                                                                                     "card(FF)-1")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (replace
                                                                                                                                                                       -1)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (name-replace
                                                                                                                                                                         "RHS"
                                                                                                                                                                         "sigma[below[card(FF)]]
           (0, card(FF) - 1, LAMBDA (x: below[card(FF)]): f!1(PSI(x)))")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (hide
                                                                                                                                                                           -1)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (expand
                                                                                                                                                                             "o"
                                                                                                                                                                             -1)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (case
                                                                                                                                                                               "bijective?
                     [subrange_T[below[card(FF)]](0, card(FF) - 1),
                      subrange_T[below[card(FF)]](0, card(FF) - 1)](lambda (n:subrange_T[below[card(FF)]](0, card(FF) - 1)): inverse(PSI)(PHI(n)))")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (inst
                                                                                                                                                                                 -
                                                                                                                                                                                 "LAMBDA (n: subrange_T[below[card(FF)]](0, card(FF) - 1)):
             inverse(PSI)(PHI(n))")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (hide
                                                                                                                                                                                   -1)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (replace
                                                                                                                                                                                     -1)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (hide
                                                                                                                                                                                       -1)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (case
                                                                                                                                                                                         "forall (n:below[card(FF)]): sigma(0, n, LAMBDA (x: nat): f!1(PHI(x))) =
       sigma[subrange_T[below[card(FF)]](0, card(FF) - 1)]
           (0, n,
            LAMBDA (x_1: subrange_T[below[card(FF)]](0, card(FF) - 1)):
              f!1(PSI(inverse(PSI)(PHI(x_1)))))")
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (inst
                                                                                                                                                                                           -
                                                                                                                                                                                           "card(FF)-1")
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil)
                                                                                                                                                                                         ("2"
                                                                                                                                                                                          (hide
                                                                                                                                                                                           3)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (hide
                                                                                                                                                                                             2)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (induct
                                                                                                                                                                                               "n")
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (expand
                                                                                                                                                                                                 "sigma")
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (expand
                                                                                                                                                                                                   "sigma")
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (lemma
                                                                                                                                                                                                     "comp_inverse_right[below[card[T](FF)], (FF)]"
                                                                                                                                                                                                     ("f"
                                                                                                                                                                                                      "PSI"
                                                                                                                                                                                                      "y"
                                                                                                                                                                                                      "PHI(0)"))
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                      nil
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil)
                                                                                                                                                                                               ("2"
                                                                                                                                                                                                (skosimp*)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (expand
                                                                                                                                                                                                   "sigma"
                                                                                                                                                                                                   1)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (replace
                                                                                                                                                                                                     -2
                                                                                                                                                                                                     1
                                                                                                                                                                                                     rl)
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (lemma
                                                                                                                                                                                                         "comp_inverse_right[below[card[T](FF)], (FF)]"
                                                                                                                                                                                                         ("f"
                                                                                                                                                                                                          "PSI"
                                                                                                                                                                                                          "y"
                                                                                                                                                                                                          "PHI(1+jb!1)"))
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                          nil
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil)
                                                                                                                                                                                               ("3"
                                                                                                                                                                                                (hide-all-but
                                                                                                                                                                                                 1)
                                                                                                                                                                                                (("3"
                                                                                                                                                                                                  (grind)
                                                                                                                                                                                                  nil
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil)
                                                                                                                                                                                               ("4"
                                                                                                                                                                                                (expand
                                                                                                                                                                                                 "PHI")
                                                                                                                                                                                                (("4"
                                                                                                                                                                                                  (skosimp)
                                                                                                                                                                                                  (("4"
                                                                                                                                                                                                    (inst
                                                                                                                                                                                                     +
                                                                                                                                                                                                     "0")
                                                                                                                                                                                                    nil
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil)
                                                                                                                                                                                               ("5"
                                                                                                                                                                                                (skosimp)
                                                                                                                                                                                                (("5"
                                                                                                                                                                                                  (replace
                                                                                                                                                                                                   -8
                                                                                                                                                                                                   1
                                                                                                                                                                                                   rl)
                                                                                                                                                                                                  (("5"
                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                    (("5"
                                                                                                                                                                                                      (inst
                                                                                                                                                                                                       +
                                                                                                                                                                                                       "x!2")
                                                                                                                                                                                                      (("5"
                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                        nil
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil)
                                                                                                                                                                                               ("6"
                                                                                                                                                                                                (skosimp)
                                                                                                                                                                                                (("6"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  (("6"
                                                                                                                                                                                                    (skosimp)
                                                                                                                                                                                                    (("6"
                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                      nil
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil)
                                                                                                                                                                                         ("3"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          (("3"
                                                                                                                                                                                            (hide-all-but
                                                                                                                                                                                             1)
                                                                                                                                                                                            (("3"
                                                                                                                                                                                              (grind)
                                                                                                                                                                                              nil
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil)
                                                                                                                                                                                         ("4"
                                                                                                                                                                                          (skosimp*)
                                                                                                                                                                                          (("4"
                                                                                                                                                                                            (assert)
                                                                                                                                                                                            (("4"
                                                                                                                                                                                              (replace
                                                                                                                                                                                               -8
                                                                                                                                                                                               *
                                                                                                                                                                                               rl)
                                                                                                                                                                                              (("4"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                (("4"
                                                                                                                                                                                                  (inst
                                                                                                                                                                                                   +
                                                                                                                                                                                                   "x!2")
                                                                                                                                                                                                  (("4"
                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                    nil
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (skosimp)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("3"
                                                                                                                                                                                  (skosimp)
                                                                                                                                                                                  (("3"
                                                                                                                                                                                    (inst
                                                                                                                                                                                     +
                                                                                                                                                                                     "0")
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("4"
                                                                                                                                                                                  (skosimp)
                                                                                                                                                                                  (("4"
                                                                                                                                                                                    (replace
                                                                                                                                                                                     -9
                                                                                                                                                                                     1
                                                                                                                                                                                     rl)
                                                                                                                                                                                    (("4"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      (("4"
                                                                                                                                                                                        (inst
                                                                                                                                                                                         +
                                                                                                                                                                                         "n!1")
                                                                                                                                                                                        (("4"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("5"
                                                                                                                                                                                  (hide-all-but
                                                                                                                                                                                   1)
                                                                                                                                                                                  (("5"
                                                                                                                                                                                    (grind)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil)
                                                                                                                                                                               ("2"
                                                                                                                                                                                (hide
                                                                                                                                                                                 -1
                                                                                                                                                                                 3)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (case
                                                                                                                                                                                   "bijective?[below[card[T](FF)], (FF)](lambda (n:below[card(FF)]): PHI(n))")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (lemma
                                                                                                                                                                                     "composition_bijective[below[card[T](FF)], (FF),below[card[T](FF)]]"
                                                                                                                                                                                     ("f1"
                                                                                                                                                                                      "LAMBDA (n: below[card(FF)]): PHI(n)"
                                                                                                                                                                                      "f2"
                                                                                                                                                                                      "inverse[below[card[T](FF)], (FF)](PSI)"))
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "o"
                                                                                                                                                                                       -1)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (hide-all-but
                                                                                                                                                                                         (-1
                                                                                                                                                                                          -10
                                                                                                                                                                                          -9
                                                                                                                                                                                          1
                                                                                                                                                                                          -3))
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (expand
                                                                                                                                                                                           "bijective?")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (flatten)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (split)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (hide
                                                                                                                                                                                                 -2)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (expand
                                                                                                                                                                                                   "injective?")
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (skosimp)
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (typepred
                                                                                                                                                                                                       "x1!1")
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (typepred
                                                                                                                                                                                                         "x2!1")
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (inst
                                                                                                                                                                                                           -
                                                                                                                                                                                                           "x1!1"
                                                                                                                                                                                                           "x2!1")
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                            nil
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil)
                                                                                                                                                                                               ("2"
                                                                                                                                                                                                (hide
                                                                                                                                                                                                 -1)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (expand
                                                                                                                                                                                                   "surjective?")
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (skosimp)
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (typepred
                                                                                                                                                                                                       "y!1")
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (inst
                                                                                                                                                                                                         -
                                                                                                                                                                                                         "y!1")
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (skosimp)
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (typepred
                                                                                                                                                                                                             "x!2")
                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                              (inst
                                                                                                                                                                                                               +
                                                                                                                                                                                                               "x!2")
                                                                                                                                                                                                              nil
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil)
                                                                                                                                                                                     ("2"
                                                                                                                                                                                      (propax)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil)
                                                                                                                                                                                   ("2"
                                                                                                                                                                                    (hide-all-but
                                                                                                                                                                                     (-8
                                                                                                                                                                                      1
                                                                                                                                                                                      -6))
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "bijective?")
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (flatten)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (split)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (expand
                                                                                                                                                                                             "injective?")
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (skosimp)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (inst
                                                                                                                                                                                                 -
                                                                                                                                                                                                 "x1!1"
                                                                                                                                                                                                 "x2!1")
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  nil
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil)
                                                                                                                                                                                           ("2"
                                                                                                                                                                                            (expand
                                                                                                                                                                                             "surjective?")
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (skosimp)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (typepred
                                                                                                                                                                                                 "y!1")
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (replace
                                                                                                                                                                                                   -4
                                                                                                                                                                                                   -1
                                                                                                                                                                                                   rl)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (skosimp)
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (inst
                                                                                                                                                                                                         +
                                                                                                                                                                                                         "n!1")
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                          nil
                                                                                                                                                                                                          nil)
                                                                                                                                                                                                         ("2"
                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                          nil
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil)
                                                                                                                                                                                   ("3"
                                                                                                                                                                                    (skosimp)
                                                                                                                                                                                    (("3"
                                                                                                                                                                                      (replace
                                                                                                                                                                                       -8
                                                                                                                                                                                       1
                                                                                                                                                                                       rl)
                                                                                                                                                                                      (("3"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        (("3"
                                                                                                                                                                                          (inst
                                                                                                                                                                                           +
                                                                                                                                                                                           "n!1")
                                                                                                                                                                                          (("3"
                                                                                                                                                                                            (assert)
                                                                                                                                                                                            nil
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil)
                                                                                                                                                                               ("3"
                                                                                                                                                                                (skosimp)
                                                                                                                                                                                (("3"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil)
                                                                                                                                                                               ("4"
                                                                                                                                                                                (skosimp)
                                                                                                                                                                                (("4"
                                                                                                                                                                                  (inst
                                                                                                                                                                                   +
                                                                                                                                                                                   "0")
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil)
                                                                                                                                                                               ("5"
                                                                                                                                                                                (skosimp)
                                                                                                                                                                                (("5"
                                                                                                                                                                                  (replace
                                                                                                                                                                                   -9
                                                                                                                                                                                   1
                                                                                                                                                                                   rl)
                                                                                                                                                                                  (("5"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    (("5"
                                                                                                                                                                                      (inst
                                                                                                                                                                                       +
                                                                                                                                                                                       "n!1")
                                                                                                                                                                                      (("5"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        nil
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (hide-all-but
                                                                                                                                                                     (-2
                                                                                                                                                                      1
                                                                                                                                                                      2))
                                                                                                                                                                    (("2"
                                                                                                                                                                      (induct
                                                                                                                                                                       "n")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (expand
                                                                                                                                                                         "sigma")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (expand
                                                                                                                                                                           "sigma")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (propax)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil)
                                                                                                                                                                       ("2"
                                                                                                                                                                        (skosimp*)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (expand
                                                                                                                                                                           "sigma"
                                                                                                                                                                           1)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (propax)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil)
                                                                                                                                                                       ("3"
                                                                                                                                                                        (skosimp*)
                                                                                                                                                                        (("3"
                                                                                                                                                                          (assert)
                                                                                                                                                                          nil
                                                                                                                                                                          nil))
                                                                                                                                                                        nil)
                                                                                                                                                                       ("4"
                                                                                                                                                                        (skosimp*)
                                                                                                                                                                        (("4"
                                                                                                                                                                          (assert)
                                                                                                                                                                          nil
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("3"
                                                                                                                                                                    (hide-all-but
                                                                                                                                                                     1)
                                                                                                                                                                    (("3"
                                                                                                                                                                      (grind)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("4"
                                                                                                                                                                    (hide-all-but
                                                                                                                                                                     1)
                                                                                                                                                                    (("4"
                                                                                                                                                                      (grind)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (assert)
                                                                                                                                                          nil
                                                                                                                                                          nil)
                                                                                                                                                         ("3"
                                                                                                                                                          (assert)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (hide-all-but
                                                                                                                                                         (-1
                                                                                                                                                          1))
                                                                                                                                                        (("2"
                                                                                                                                                          (grind)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (hide
                                                                                                                                               -7
                                                                                                                                               -8
                                                                                                                                               -9
                                                                                                                                               -10
                                                                                                                                               -11
                                                                                                                                               3)
                                                                                                                                              (("2"
                                                                                                                                                (lemma
                                                                                                                                                 "card_bij_inv[T]"
                                                                                                                                                 ("S"
                                                                                                                                                  "FF"
                                                                                                                                                  "N"
                                                                                                                                                  "x!1+1"))
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  (("2"
                                                                                                                                                    (hide
                                                                                                                                                     2)
                                                                                                                                                    (("2"
                                                                                                                                                      (inst
                                                                                                                                                       +
                                                                                                                                                       "lambda (n:below[1 + x!1]): PHI(n)")
                                                                                                                                                      (("1"
                                                                                                                                                        (hide-all-but
                                                                                                                                                         (-4
                                                                                                                                                          -6
                                                                                                                                                          -5
                                                                                                                                                          1
                                                                                                                                                          2))
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           "bijective?")
                                                                                                                                                          (("1"
                                                                                                                                                            (flatten)
                                                                                                                                                            (("1"
                                                                                                                                                              (split)
                                                                                                                                                              (("1"
                                                                                                                                                                (expand
                                                                                                                                                                 "injective?")
                                                                                                                                                                (("1"
                                                                                                                                                                  (skosimp)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (inst
                                                                                                                                                                     -
                                                                                                                                                                     "x1!1"
                                                                                                                                                                     "x2!1")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (hide
                                                                                                                                                                 -1)
                                                                                                                                                                (("2"
                                                                                                                                                                  (expand
                                                                                                                                                                   "surjective?")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (skosimp)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (typepred
                                                                                                                                                                       "y!1")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (replace
                                                                                                                                                                         -4
                                                                                                                                                                         -1
                                                                                                                                                                         rl)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (skosimp)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (inst
                                                                                                                                                                               +
                                                                                                                                                                               "n!1")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (assert)
                                                                                                                                                                                nil
                                                                                                                                                                                nil)
                                                                                                                                                                               ("2"
                                                                                                                                                                                (assert)
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (skosimp)
                                                                                                                                                        (("2"
                                                                                                                                                          (replace
                                                                                                                                                           -6
                                                                                                                                                           1
                                                                                                                                                           rl)
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            (("2"
                                                                                                                                                              (inst
                                                                                                                                                               +
                                                                                                                                                               "n!1")
                                                                                                                                                              (("2"
                                                                                                                                                                (assert)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (inst
                                                                                                                                           +
                                                                                                                                           "0")
                                                                                                                                          (("2"
                                                                                                                                            (lemma
                                                                                                                                             "nonempty_card[T]"
                                                                                                                                             ("S"
                                                                                                                                              "FF"))
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              (("2"
                                                                                                                                                (expand
                                                                                                                                                 "nonempty?"
                                                                                                                                                 1)
                                                                                                                                                (("2"
                                                                                                                                                  (propax)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (hide-all-but
                                                                                                               (1
                                                                                                                3
                                                                                                                4))
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "FF")
                                                                                                                (("2"
                                                                                                                  (rewrite
                                                                                                                   "is_finite_surj"
                                                                                                                   1
                                                                                                                   :dir
                                                                                                                   rl)
                                                                                                                  (("1"
                                                                                                                    (lemma
                                                                                                                     "denumerable_enumeration_bij"
                                                                                                                     ("X"
                                                                                                                      "X!1"))
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       +
                                                                                                                       "x!1+1"
                                                                                                                       "lambda (n:below[(x!1+1)]): denumerable_enumeration[T](X!1)(n)")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "bijective?")
                                                                                                                        (("1"
                                                                                                                          (flatten)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "surjective?")
                                                                                                                            (("1"
                                                                                                                              (skosimp)
                                                                                                                              (("1"
                                                                                                                                (typepred
                                                                                                                                 "y!1")
                                                                                                                                (("1"
                                                                                                                                  (skosimp)
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     +
                                                                                                                                     "n!1")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (skosimp)
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           +
                                                                                                                           "n!1")
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (rewrite
                                                                                                                       "countably_infinite_def")
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (skosimp)
                                                                                                                    (("2"
                                                                                                                      (rewrite
                                                                                                                       "countably_infinite_def")
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "bounded_above?"
                                                                       1)
                                                                      (("2"
                                                                        (inst
                                                                         +
                                                                         "LUB")
                                                                        (("2"
                                                                          (expand
                                                                           "upper_bound?"
                                                                           1)
                                                                          (("2"
                                                                            (skosimp)
                                                                            (("2"
                                                                              (typepred
                                                                               "s!1")
                                                                              (("2"
                                                                                (skolem
                                                                                 -
                                                                                 ("n!1"))
                                                                                (("2"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("2"
                                                                                    (hide
                                                                                     -1)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "convergence_nonneg"
                                                                                       ("nna"
                                                                                        "f!1 o denumerable_enumeration(X!1)"
                                                                                        "nnx"
                                                                                        "LUB"))
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "n!1")
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "nonempty?")
                                                                    (("2"
                                                                      (expand
                                                                       "empty?"
                                                                       -1)
                                                                      (("2"
                                                                        (expand
                                                                         "member")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "series(f!1 o denumerable_enumeration(X!1))(0)")
                                                                          (("2"
                                                                            (inst
                                                                             +
                                                                             "0")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (inst
                                                                 +
                                                                 "emptyset[T]")
                                                                (("2"
                                                                  (rewrite
                                                                   "sigma_empty"
                                                                   1)
                                                                  (("2"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "convergent?")
                                                (("2"
                                                  (lemma
                                                   "absconvergent_series_is_convergent"
                                                   ("x"
                                                    "f!1 o denumerable_enumeration(X!1)"))
                                                  (("1"
                                                    (inst
                                                     +
                                                     "sup(series(f!1 o denumerable_enumeration(X!1)))")
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (expand "o ")
                                                    (("2" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (1 2 -5))
                                              (("2"
                                                (expand "increasing?")
                                                (("2"
                                                  (skosimp)
                                                  (("2"
                                                    (expand "series")
                                                    (("2"
                                                      (lemma
                                                       "sigma_split[nat]"
                                                       ("low"
                                                        "0"
                                                        "high"
                                                        "y!1"
                                                        "z"
                                                        "x!1"
                                                        "F"
                                                        "f!1 o denumerable_enumeration(X!1)"))
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (replace -1)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "bounded_above?")
                                            (("2"
                                              (inst
                                               +
                                               "convergence_sequences.limit(series(f!1 o denumerable_enumeration(X!1)))")
                                              (("1"
                                                (skolem + ("n!1"))
                                                (("1"
                                                  (lemma
                                                   "limit_nonneg"
                                                   ("nna"
                                                    "series(f!1 o denumerable_enumeration(X!1))"))
                                                  (("1"
                                                    (expand "convergent?")
                                                    (("1"
                                                      (lemma
                                                       "absconvergent_series_is_convergent"
                                                       ("x"
                                                        "f!1 o denumerable_enumeration(X!1)"))
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lemma
                                                           "convergence_nonneg"
                                                           ("nna"
                                                            "f!1 o denumerable_enumeration(X!1)"
                                                            "nnx"
                                                            "convergence_sequences.limit(series(f!1 o denumerable_enumeration(X!1)))"))
                                                          (("1"
                                                            (split -1)
                                                            (("1"
                                                              (inst - "n!1")
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (rewrite
                                                               "convergence_sequences.limit_lemma"
                                                               1)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "convergent?")
                                                            (("2"
                                                              (replace -1 -2)
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand "o")
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but (1 3))
                                                    (("2"
                                                      (skolem + ("n!2"))
                                                      (("2"
                                                        (lemma
                                                         "sigma.sigma_ge_0")
                                                        (("2"
                                                          (expand "series")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "o[nat, T, nnreal](f!1, denumerable_enumeration[T](X!1))"
                                                             "n!2"
                                                             "0")
                                                            (("2"
                                                              (split -1)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (hide 2)
                                                                (("2"
                                                                  (skosimp)
                                                                  (("2"
                                                                    (expand
                                                                     "o")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "convergent?")
                                                (("2"
                                                  (lemma
                                                   "absconvergent_series_is_convergent"
                                                   ("x"
                                                    "f!1 o denumerable_enumeration(X!1)"))
                                                  (("1"
                                                    (expand "convergent?")
                                                    (("1" (propax) nil nil))
                                                    nil)
                                                   ("2"
                                                    (expand "o ")
                                                    (("2" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil)
                         ("2" (inst -2 "sigma(X!1, f!1)")
                          (("2" (assert)
                            (("2" (skosimp)
                              (("2" (typepred "z!1")
                                (("2" (skosimp)
                                  (("2" (replace -3)
                                    (("2" (hide-all-but (-2 2 -7))
                                      (("2"
                                        (lemma
                                         "sigma_subset"
                                         ("X" "F!1" "Y" "X!1" "f" "f!1"))
                                        (("2"
                                          (assert)
                                          (("2"
                                            (lemma
                                             "convergent_difference"
                                             ("X" "X!1" "Y" "F!1" "g" "f!1"))
                                            (("2"
                                              (assert)
                                              (("2"
                                                (lemma
                                                 "sigma_ge_0"
                                                 ("X"
                                                  "difference(X!1, F!1)"
                                                  "f"
                                                  "f!1"))
                                                (("2"
                                                  (split -1)
                                                  (("1" (assert) nil nil)
                                                   ("2"
                                                    (skosimp)
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil)
             ("2" (hide 2)
              (("2" (expand "above_bounded")
                (("2" (inst + "sigma(X!1,f!1)")
                  (("2" (expand "upper_bound")
                    (("2" (skosimp)
                      (("2" (typepred "z!1")
                        (("2" (skosimp)
                          (("2"
                            (lemma "sigma_subset"
                             ("X" "F!1" "Y" "X!1" "f" "f!1"))
                            (("2" (assert)
                              (("2"
                                (lemma "convergent_difference"
                                 ("X" "X!1" "Y" "F!1" "g" "f!1"))
                                (("2" (assert)
                                  (("2"
                                    (lemma "sigma_ge_0"
                                     ("X" "difference(X!1, F!1)" "f" "f!1"))
                                    (("2" (split -1)
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (skosimp)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide-all-but 1)
            (("2" (expand "nonempty?")
              (("2" (expand "empty?")
                (("2" (inst - "0")
                  (("2" (expand "member")
                    (("2" (inst + "emptyset[T]")
                      (("2" (rewrite "sigma_empty") (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (hide-all-but 1)
            (("3" (skosimp)
              (("3" (expand "convergent?") (("3" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skosimp)
        (("3" (split 1)
          (("1" (expand "nonempty?")
            (("1" (expand "empty?")
              (("1" (inst - "0")
                (("1" (expand "member")
                  (("1" (inst + "emptyset[T]")
                    (("1" (rewrite "sigma_empty")
                      (("1" (hide -1) (("1" (grind) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "above_bounded")
            (("2" (inst + "sigma(X!1,f!1)")
              (("2" (expand "upper_bound")
                (("2" (skosimp)
                  (("2" (typepred "z!1")
                    (("2" (skosimp)
                      (("2"
                        (lemma "sigma_subset" ("X" "F!1" "Y" "X!1" "f" "f!1"))
                        (("2" (assert)
                          (("2" (replace -4)
                            (("2"
                              (lemma "convergent_difference"
                               ("X" "X!1" "Y" "F!1" "g" "f!1"))
                              (("2" (assert)
                                (("2"
                                  (lemma "sigma_ge_0"
                                   ("X" "difference(X!1, F!1)" "f" "f!1"))
                                  (("2" (split -1)
                                    (("1" (assert) nil nil)
                                     ("2" (skosimp) (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (skosimp*)
        (("4" (lemma "convergent_subset" ("X" "F!1" "Y" "X!1" "g" "f!1"))
          (("4" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((convergent_subset formula-decl nil countable_convergence nil)
    (X!1 skolem-const-decl "countable_set[T]" sigma_countable nil)
    (f!1 skolem-const-decl "[T -> nnreal]" sigma_countable nil)
    (countable_difference application-judgement "countable_set[T]"
     sigma_countable nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (difference const-decl "set" sets nil)
    (convergent_difference formula-decl nil countable_convergence nil)
    (sigma_subset formula-decl nil sigma_countable nil)
    (empty? const-decl "bool" sets nil)
    (X!1 skolem-const-decl "countable_set[T]" sigma_countable nil)
    (f!1 skolem-const-decl "[T -> nnreal]" sigma_countable nil)
    (sigma_empty formula-decl nil sigma_countable nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set[T]" countable_props sets_aux)
    (finite_emptyset name-judgement "finite_set[T]" sigma_countable nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sigma_ge_0 formula-decl nil sigma_countable nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (increasing_bounded_convergence formula-decl nil convergence_sequences
     analysis)
    (sequence type-eq-decl nil sequences nil)
    (bounded_above? const-decl "bool" real_fun_preds reals)
    (series const-decl "sequence[real]" series series)
    (sigma_split formula-decl nil sigma reals)
    (even_minus_odd_is_odd application-judgement "odd_int" integers nil)
    (increasing? const-decl "bool" real_fun_preds reals)
    (limit_def formula-decl nil convergence_sequences analysis)
    (sup const-decl "real" real_fun_supinf analysis)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (nonempty_image application-judgement "(nonempty?[real])" real_fun_supinf
     analysis)
    (bounded_above? const-decl "bool" bounded_real_defs nil)
    (least_upper_bound? const-decl "bool" bounded_real_defs nil)
    (lub const-decl "{x | least_upper_bound?(x, SA)}" bounded_real_defs nil)
    (Im const-decl "setof[real]" real_fun_props reals)
    (convergence_nonneg formula-decl nil series_lems series)
    (upper_bound? const-decl "bool" bounded_real_defs nil)
    (s!1 skolem-const-decl "({z: real |
    EXISTS (x: nat):
      z =
       series(o[nat, T, nnreal](f!1, denumerable_enumeration[T](X!1)))(x)})"
     sigma_countable nil)
    (is_finite_surj formula-decl nil finite_sets nil)
    (countably_infinite_def formula-decl nil countable_props sets_aux)
    (n!1 skolem-const-decl "nat" sigma_countable nil)
    (FF skolem-const-decl "[T -> boolean]" sigma_countable nil)
    (sigma_nnreal application-judgement "nnreal" sigma_nat reals)
    (denumerable_enumeration_bij formula-decl nil denumerable_enumeration nil)
    (bij_inv_is_bij formula-decl nil function_inverse nil)
    (x!1 skolem-const-decl "nat" sigma_countable nil)
    (n!1 skolem-const-decl "nat" sigma_countable nil)
    (card_bij_inv formula-decl nil finite_sets nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (sigma_bijection formula-decl nil sigma_bijection nil)
    (integer nonempty-type-from-decl nil integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (subrange_T type-eq-decl nil sigma_bijection nil)
    (T_low type-eq-decl nil sigma reals) (T_high type-eq-decl nil sigma reals)
    (sigma def-decl "real" sigma reals)
    (bijective? const-decl "bool" functions nil)
    (inverse const-decl "D" function_inverse nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below_induction formula-decl nil bounded_nat_inductions nil)
    (comp_inverse_right formula-decl nil function_inverse nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (PHI skolem-const-decl "[nat -> (X!1)]" sigma_countable nil)
    (PSI skolem-const-decl "[below[card(FF)] -> (FF)]" sigma_countable nil)
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (composition_bijective judgement-tcc nil function_props nil)
    (n!1 skolem-const-decl "nat" sigma_countable nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (TRUE const-decl "bool" booleans nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (below type-eq-decl nil nat_types nil)
    (finite_enumeration const-decl "[below[card(X)] -> (X)]"
     finite_enumeration nil)
    (finite_enumeration_bij formula-decl nil finite_enumeration nil)
    (absconvergent_series_is_convergent judgement-tcc nil absconv_series
     series)
    (absconvergent? const-decl "bool" absconv_series series)
    (absconvergent_series nonempty-type-eq-decl nil absconv_series series)
    (limit const-decl "real" convergence_sequences analysis)
    (limit_nonneg formula-decl nil series_lems series)
    (limit_lemma formula-decl nil convergence_sequences analysis)
    (sigma_ge_0 formula-decl nil sigma reals) (< const-decl "bool" reals nil)
    (upper_bound const-decl "bool" bound_defs reals)
    (denumerable_enumeration const-decl "[nat -> (X)]" denumerable_enumeration
     nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (O const-decl "T3" function_props nil)
    (restrict const-decl "R" restrict nil) (fullset const-decl "set" sets nil)
    (image const-decl "set[R]" function_image nil)
    (countably_infinite_set type-eq-decl nil countability sets_aux)
    (is_countably_infinite const-decl "bool" countability sets_aux)
    (denumerable_enumeration_image formula-decl nil denumerable_enumeration
     nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (extensionality_postulate formula-decl nil functions nil)
    (sigma_eq formula-decl nil sigma_countable nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (f!1 skolem-const-decl "(convergent?(X!1))" sigma_countable nil)
    (X!1 skolem-const-decl "countable_set[T]" sigma_countable nil)
    (T formal-type-decl nil sigma_countable nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (set type-eq-decl nil sets nil)
    (is_countable const-decl "bool" countability sets_aux)
    (countable_set nonempty-type-eq-decl nil countability sets_aux)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (convergent? const-decl "bool" countable_convergence nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sigma const-decl "real" sigma_countable nil)
    (sup_set type-eq-decl nil bounded_reals reals)
    (pred type-eq-decl nil defined_types nil)
    (least_upper_bound const-decl "bool" bound_defs reals)
    (<= const-decl "bool" reals nil) (nonempty? const-decl "bool" sets nil)
    (setof type-eq-decl nil defined_types nil)
    (above_bounded const-decl "bool" bounded_reals reals)
    (sup const-decl "{x | least_upper_bound(<=)(x, Su)}" bounded_reals reals)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subset? const-decl "bool" sets nil))
   shostak))
 (sigma_def_TCC1 0
  (sigma_def_TCC1-1 nil 3472975864
   ("" (skosimp)
    (("" (lemma "finite_countable" ("x" "F!1"))
      (("" (expand "convergent?") (("" (propax) nil nil)) nil)) nil))
    nil)
   ((T formal-type-decl nil sigma_countable nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finite_countable judgement-tcc nil countable_props sets_aux)
    (convergent? const-decl "bool" countable_convergence nil))
   nil
   (sigma_def subtype "sigma_countable.f"
    "(countable_convergence[sigma_countable.T].convergent?(sigma_countable.F))")))
 (sigma_def_TCC2 0
  (sigma_def_TCC2-1 nil 3472975864
   ("" (skosimp)
    (("" (typepred "f!1")
      (("" (split)
        (("1" (expand "nonempty?")
          (("1" (expand "empty?")
            (("1" (inst - "sigma(emptyset[T],f!1)")
              (("1" (expand "member")
                (("1" (inst + "emptyset[T]")
                  (("1" (split)
                    (("1" (expand "emptyset")
                      (("1" (expand "subset?")
                        (("1" (skosimp)
                          (("1" (expand "member") (("1" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "emptyset") (("2" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (rewrite "sigma_empty") (("2" (assert) nil nil)) nil)
               ("3" (expand "convergent?") (("3" (propax) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (name "XX" "{t | X!1(t) & f!1(t)>=0}")
          (("2" (case "subset?(XX,X!1)")
            (("1" (lemma "sigma_subset" ("X" "XX" "Y" "X!1" "f" "f!1"))
              (("1" (replace -2)
                (("1"
                  (lemma "sigma_opp" ("f" "f!1" "X" "difference(X!1, XX)"))
                  (("1"
                    (lemma "sigma_ge_0"
                     ("X" "difference(X!1, XX)" "f" "-f!1"))
                    (("1" (split -1)
                      (("1" (lemma "sigma_ge_0" ("X" "XX" "f" "f!1"))
                        (("1" (split -1)
                          (("1" (expand "above_bounded")
                            (("1" (inst + "sigma(XX, f!1)")
                              (("1" (expand "upper_bound")
                                (("1" (skosimp)
                                  (("1" (typepred "z!1")
                                    (("1" (skosimp)
                                      (("1"
                                        (lemma
                                         "sigma_subset"
                                         ("f" "f!1" "X" "F!1" "Y" "XX"))
                                        (("1"
                                          (split -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lemma
                                               "sigma_ge_0"
                                               ("f"
                                                "f!1"
                                                "X"
                                                "difference(XX, F!1)"))
                                              (("1"
                                                (split)
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (skosimp)
                                                  (("2"
                                                    (typepred "t!1")
                                                    (("2"
                                                      (expand "difference")
                                                      (("2"
                                                        (expand "XX")
                                                        (("2"
                                                          (expand "member")
                                                          (("2"
                                                            (flatten)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (expand "subset?")
                                              (("2"
                                                (skosimp)
                                                (("2"
                                                  (expand "member")
                                                  (("2"
                                                    (expand "XX")
                                                    (("2"
                                                      (inst - "x!1")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (inst - "x!1")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skosimp)
                            (("2" (typepred "t!1")
                              (("2" (expand "XX") (("2" (flatten) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but (1 -3))
                        (("2" (skosimp)
                          (("2" (expand "subset?")
                            (("2" (inst - "t!1")
                              (("2" (expand "XX")
                                (("2" (typepred "t!1")
                                  (("2" (expand "difference")
                                    (("2" (expand "member")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "XX")
                                            (("2"
                                              (expand "-")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "X!1")
                (("2" (lemma "countable_subset[T]")
                  (("2" (inst - "XX" "X!1") (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (expand "subset?")
              (("2" (skosimp)
                (("2" (expand "member")
                  (("2" (expand "XX") (("2" (flatten) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((convergent? const-decl "bool" countable_convergence nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (countable_set nonempty-type-eq-decl nil countability sets_aux)
    (is_countable const-decl "bool" countability sets_aux)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil sigma_countable nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sigma_subset formula-decl nil sigma_countable nil)
    (countable_difference application-judgement "countable_set[T]"
     sigma_countable nil)
    (sigma_opp formula-decl nil sigma_countable nil)
    (difference const-decl "set" sets nil)
    (XX skolem-const-decl "[T -> boolean]" sigma_countable nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (upper_bound const-decl "bool" bound_defs reals)
    (above_bounded const-decl "bool" bounded_reals reals)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (sigma_ge_0 formula-decl nil sigma_countable nil)
    (countable_subset formula-decl nil countability sets_aux)
    (nonempty? const-decl "bool" sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (finite_emptyset name-judgement "finite_set[T]" sigma_countable nil)
    (finite_emptyset name-judgement "finite_set[T]" countable_props sets_aux)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (X!1 skolem-const-decl "countable_set[T]" sigma_countable nil)
    (f!1 skolem-const-decl "(convergent?[T](X!1))" sigma_countable nil)
    (>= const-decl "bool" reals nil)
    (sigma const-decl "real" sigma_countable nil)
    (nnreal type-eq-decl nil real_types nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (sigma_empty formula-decl nil sigma_countable nil)
    (empty? const-decl "bool" sets nil))
   nil
   (sigma_def subtype
    "{nnx | EXISTS (F: finite_sets[sigma_countable.T].finite_set): booleans.AND(sets[sigma_countable.T].subset?(F, sigma_countable.X), booleans.AND(FORALL t: booleans.=>(F(sigma_countable.t), reals.>=(sigma_countable.f(sigma_countable.t), 0)), sigma_countable.nnx = sigma_countable.sigma(F, sigma_countable.f)))}"
    "sup_set[nnreal]")))
 (sigma_def_TCC3 0
  (sigma_def_TCC3-2 "" 3790094148 ("" (skosimp) (("" (grind) nil nil)) nil)
   nil shostak
   (sigma_def subtype "sigma_countable.f"
    "(countable_convergence[sigma_countable.T].convergent?(sigma_countable.F))"))
  (sigma_def_TCC3-1 nil 3472975864
   ("" (skosimp)
    (("" (split)
      (("1" (expand "nonempty?")
        (("1" (expand "empty?")
          (("1" (inst - "0")
            (("1" (expand "member")
              (("1" (inst + "emptyset[T]")
                (("1" (rewrite "sigma_empty") (("1" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "above_bounded")
        (("2"
          (lemma "countable_subset"
           ("S" "{t | X!1(t) & f!1(t) >= 0}" "Count" "X!1"))
          (("2" (case-replace "subset?({t | X!1(t) & f!1(t) >= 0}, X!1)")
            (("1"
              (lemma "convergent_subset"
               ("g" "f!1" "X" "{t | X!1(t) & f!1(t)>=0}" "Y" "X!1"))
              (("1" (assert)
                (("1" (inst + "sigma({t | X!1(t) & f!1(t)>=0},f!1)")
                  (("1" (expand "upper_bound")
                    (("1" (skosimp)
                      (("1" (typepred "z!1")
                        (("1" (skosimp)
                          (("1"
                            (lemma "sigma_subset"
                             ("X" "F!1" "Y" "{t | X!1(t) & f!1(t) >= 0}" "f"
                              "f!1"))
                            (("1"
                              (case-replace
                               "subset?(F!1, {t | X!1(t) & f!1(t) >= 0})")
                              (("1"
                                (lemma "sigma_ge_0"
                                 ("X"
                                  "difference({t | X!1(t) & f!1(t) >= 0}, F!1)"
                                  "f" "f!1"))
                                (("1" (split -1)
                                  (("1" (assert) nil nil)
                                   ("2" (skosimp)
                                    (("2" (typepred "t!1")
                                      (("2"
                                        (expand "difference")
                                        (("2"
                                          (expand "member")
                                          (("2" (flatten) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide-all-but (1 -3 -4))
                                (("2" (expand "subset?")
                                  (("2" (expand "member")
                                    (("2" (skosimp)
                                      (("2"
                                        (inst - "x!1")
                                        (("2"
                                          (inst - "x!1")
                                          (("2"
                                            (assert)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (propax) nil nil))
              nil)
             ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (convergent? const-decl "bool" countable_convergence nil)
    (absconvergent? const-decl "bool" absconv_series series)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (convergence const-decl "bool" convergence_sequences analysis)
    (series const-decl "sequence[real]" series series)
    (sigma def-decl "real" sigma reals)
    (abs const-decl "sequence[real]" series series)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (O const-decl "T3" function_props nil)
    (denumerable_enumeration const-decl "[nat -> (X)]" denumerable_enumeration
     nil)
    (T formal-type-decl nil sigma_countable nil)
    (bijective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (injective? const-decl "bool" functions nil)
    (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil))
   nil
   (sigma_def subtype "sigma_countable.f"
    "(countable_convergence[sigma_countable.T].convergent?(sigma_countable.F))")))
 (sigma_def_TCC4 0
  (sigma_def_TCC4-1 nil 3472975864
   ("" (skosimp)
    (("" (split)
      (("1" (expand "nonempty?")
        (("1" (expand "empty?")
          (("1" (inst - "0")
            (("1" (expand "member")
              (("1" (inst + "emptyset[T]")
                (("1" (split)
                  (("1" (expand "emptyset")
                    (("1" (expand "subset?")
                      (("1" (skosimp)
                        (("1" (expand "member") (("1" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "emptyset") (("2" (propax) nil nil)) nil)
                   ("3" (rewrite "sigma_empty") nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred "f!1")
        (("2" (name "XX" "{t | X!1(t) & f!1(t) <= 0}")
          (("2" (case "subset?(XX,X!1)")
            (("1" (lemma "sigma_subset" ("X" "XX" "Y" "X!1" "f" "f!1"))
              (("1" (assert)
                (("1" (lemma "sigma_opp" ("f" "f!1" "X" "XX"))
                  (("1"
                    (lemma "sigma_ge_0" ("f" "f!1" "X" "difference(X!1, XX)"))
                    (("1" (split -1)
                      (("1" (lemma "sigma_ge_0" ("f" "-f!1" "X" "XX"))
                        (("1" (split)
                          (("1" (expand "below_bounded")
                            (("1" (inst + "sigma(XX, f!1)")
                              (("1" (expand "lower_bound")
                                (("1" (skosimp)
                                  (("1" (typepred "z!1")
                                    (("1" (skosimp)
                                      (("1"
                                        (lemma
                                         "sigma_subset"
                                         ("X" "F!1" "Y" "XX" "f" "f!1"))
                                        (("1"
                                          (split -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lemma
                                               "sigma_opp"
                                               ("f"
                                                "f!1"
                                                "X"
                                                "difference(XX, F!1)"))
                                              (("1"
                                                (replace -6 * rl)
                                                (("1"
                                                  (lemma
                                                   "sigma_ge_0"
                                                   ("f"
                                                    "-f!1"
                                                    "X"
                                                    "difference(XX, F!1)"))
                                                  (("1"
                                                    (split)
                                                    (("1" (assert) nil nil)
                                                     ("2"
                                                      (skosimp)
                                                      (("2"
                                                        (typepred "t!1")
                                                        (("2"
                                                          (expand
                                                           "difference")
                                                          (("2"
                                                            (expand "member")
                                                            (("2"
                                                              (expand "-")
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (expand
                                                                   "XX")
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (-2 1 -3))
                                            (("2"
                                              (expand "subset?")
                                              (("2"
                                                (expand "member")
                                                (("2"
                                                  (skosimp)
                                                  (("2"
                                                    (inst - "x!1")
                                                    (("2"
                                                      (inst - "x!1")
                                                      (("2"
                                                        (expand "XX")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skosimp)
                            (("2" (typepred "t!1")
                              (("2" (expand "XX")
                                (("2" (expand "-")
                                  (("2" (flatten) (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (skosimp)
                          (("2" (typepred "t!1")
                            (("2" (expand "difference")
                              (("2" (expand "member")
                                (("2" (flatten)
                                  (("2" (expand "XX") (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but (-1 1))
                (("2" (lemma "countable_subset" ("Count" "X!1" "S" "XX"))
                  (("2" (assert) nil nil)) nil))
                nil))
              nil)
             ("2" (hide-all-but 1)
              (("2" (expand "subset?")
                (("2" (expand "member")
                  (("2" (expand "XX") (("2" (skosimp) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (sigma_empty formula-decl nil sigma_countable nil)
    (is_countable const-decl "bool" countability sets_aux)
    (countable_set nonempty-type-eq-decl nil countability sets_aux)
    (convergent? const-decl "bool" countable_convergence nil)
    (T formal-type-decl nil sigma_countable nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set[T]" countable_props sets_aux)
    (finite_emptyset name-judgement "finite_set[T]" sigma_countable nil)
    (npreal type-eq-decl nil real_types nil) (<= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nonempty? const-decl "bool" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sigma_subset formula-decl nil sigma_countable nil)
    (sigma_opp formula-decl nil sigma_countable nil)
    (sigma const-decl "real" sigma_countable nil)
    (XX skolem-const-decl "[T -> boolean]" sigma_countable nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (lower_bound const-decl "bool" bound_defs reals)
    (below_bounded const-decl "bool" bounded_reals reals)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (difference const-decl "set" sets nil)
    (sigma_ge_0 formula-decl nil sigma_countable nil)
    (countable_difference application-judgement "countable_set[T]"
     sigma_countable nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (countable_subset formula-decl nil countability sets_aux)
    (NOT const-decl "[bool -> bool]" booleans nil))
   nil
   (sigma_def subtype
    "{npx | EXISTS (F: finite_sets[sigma_countable.T].finite_set): booleans.AND(sets[sigma_countable.T].subset?(F, sigma_countable.X), booleans.AND(FORALL t: booleans.=>(F(sigma_countable.t), reals.<=(sigma_countable.f(sigma_countable.t), 0)), sigma_countable.npx = sigma_countable.sigma(F, sigma_countable.f)))}"
    "inf_set[npreal]")))
 (sigma_def 0
  (sigma_def-1 nil 3472977180
   ("" (skosimp)
    ((""
      (case "union[T]({t | X!1(t) & f!1(t) >= 0}, {t | X!1(t) & f!1(t) < 0})=X!1")
      (("1"
        (lemma "convergent_subset"
         ("X" "{t | X!1(t) & f!1(t) >= 0}" "Y" "X!1" "g" "f!1"))
        (("1" (case-replace "subset?({t | X!1(t) & f!1(t) >= 0}, X!1)")
          (("1"
            (lemma "convergent_subset"
             ("X" "{t | X!1(t) & f!1(t) < 0}" "Y" "X!1" "g" "f!1"))
            (("1" (case-replace "subset?({t | X!1(t) & f!1(t) < 0}, X!1)")
              (("1" (assert)
                (("1"
                  (lemma "sigma_disjoint_union"
                   ("X" "{t | X!1(t) & f!1(t) >= 0}" "Y"
                    "{t | X!1(t) & f!1(t) < 0}" "f" "f!1"))
                  (("1"
                    (case-replace
                     "disjoint?({t | X!1(t) & f!1(t) >= 0}, {t | X!1(t) & f!1(t) < 0})")
                    (("1" (replace -7)
                      (("1"
                        (lemma "sigma_nn_def"
                         ("f" "f!1" "X" "{t | X!1(t) & f!1(t) >= 0}"))
                        (("1" (split -1)
                          (("1"
                            (case-replace "{nnx |
              EXISTS (F:finite_set[T]):
                subset?(F, {t | X!1(t) & f!1(t) >= 0}) AND
                 nnx = sigma(F, f!1)}={nnx |
               EXISTS (F:finite_set[T]):
                 subset?(F, X!1) AND
                  (FORALL t: F(t) => f!1(t) >= 0) AND nnx = sigma(F, f!1)}")
                            (("1" (hide -1)
                              (("1" (replace -1 1 rl)
                                (("1" (replace -3 1)
                                  (("1" (assert)
                                    (("1" (hide -1 -3)
                                      (("1"
                                        (lemma
                                         "convergent_opp"
                                         ("X"
                                          "{t | X!1(t) & f!1(t) < 0}"
                                          "f"
                                          "f!1"))
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lemma
                                             "sigma_opp"
                                             ("f"
                                              "f!1"
                                              "X"
                                              "{t | X!1(t) & f!1(t) < 0}"))
                                            (("1"
                                              (lemma
                                               "sigma_nn_def"
                                               ("f"
                                                "-f!1"
                                                "X"
                                                "{t | X!1(t) & f!1(t) <= 0}"))
                                              (("1"
                                                (split -1)
                                                (("1"
                                                  (case
                                                   "union({t | X!1(t) & f!1(t) < 0},{t | X!1(t) & f!1(t) = 0}) = {t | X!1(t) & f!1(t) <= 0}")
                                                  (("1"
                                                    (lemma
                                                     "sigma_disjoint_union"
                                                     ("X"
                                                      "{t | X!1(t) & f!1(t) < 0}"
                                                      "Y"
                                                      "{t | X!1(t) & f!1(t) = 0}"
                                                      "f"
                                                      "-f!1"))
                                                    (("1"
                                                      (replace -2)
                                                      (("1"
                                                        (split -1)
                                                        (("1"
                                                          (lemma
                                                           "sigma_eq"
                                                           ("X"
                                                            "{t | X!1(t) & f!1(t) = 0}"
                                                            "f"
                                                            "-f!1"
                                                            "g"
                                                            "LAMBDA t: 0"))
                                                          (("1"
                                                            (split -1)
                                                            (("1"
                                                              (rewrite
                                                               "sigma_zero"
                                                               -1)
                                                              (("1"
                                                                (replace -1)
                                                                (("1"
                                                                  (hide -1)
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (hide
                                                                       -2)
                                                                      (("1"
                                                                        (hide
                                                                         -1)
                                                                        (("1"
                                                                          (rewrite
                                                                           "sigma_opp"
                                                                           -1)
                                                                          (("1"
                                                                            (case
                                                                             "forall (S:sup_set[nnreal]): sup(S) = -inf(image[nnreal,npreal](lambda (x:nnreal): -x,S))")
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "{nnx |
              EXISTS (F:finite_set[T]):
                subset?(F, {t | X!1(t) & f!1(t) <= 0}) AND
                 nnx = sigma(F, -f!1)}")
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (case-replace
                                                                                   "image[nnreal, npreal]
                (LAMBDA (x: nnreal): -x,
                 {nnx |
                    EXISTS (F:finite_set[T]):
                      subset?(F, {t | X!1(t) & f!1(t) <= 0}) AND
                       nnx = sigma(F, -f!1)})={npx |
              EXISTS (F:finite_set[T]):
                subset?(F, X!1) AND
                 (FORALL t: F(t) => f!1(t) <= 0) AND npx = sigma(F, f!1)}")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     -1
                                                                                     -2
                                                                                     2)
                                                                                    (("2"
                                                                                      (apply-extensionality
                                                                                       :hide?
                                                                                       t)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "image")
                                                                                        (("1"
                                                                                          (case-replace
                                                                                           "EXISTS (F:finite_set[T]):
          subset?(F, X!1) AND
           (FORALL t: F(t) => f!1(t) <= 0) AND x!1 = sigma(F, f!1)")
                                                                                          (("1"
                                                                                            (skosimp)
                                                                                            (("1"
                                                                                              (inst
                                                                                               +
                                                                                               "-x!1")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (inst
                                                                                                 +
                                                                                                 "F!1")
                                                                                                (("2"
                                                                                                  (rewrite
                                                                                                   "sigma_opp")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (hide-all-but
                                                                                                       (-1
                                                                                                        -2
                                                                                                        1))
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "subset?")
                                                                                                        (("2"
                                                                                                          (skosimp)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "member")
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "x!2")
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 "x!2")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (replace
                                                                                             1
                                                                                             2)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (skosimp)
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "x!2")
                                                                                                  (("2"
                                                                                                    (skosimp)
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       +
                                                                                                       "F!1")
                                                                                                      (("2"
                                                                                                        (split)
                                                                                                        (("1"
                                                                                                          (hide-all-but
                                                                                                           (-2
                                                                                                            1))
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "subset?")
                                                                                                            (("1"
                                                                                                              (skosimp)
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 "x!3")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "member")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (skosimp)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "subset?"
                                                                                                             -3)
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "t!1")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "member")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("3"
                                                                                                          (assert)
                                                                                                          (("3"
                                                                                                            (rewrite
                                                                                                             "sigma_opp")
                                                                                                            (("3"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (hide
                                                                                             2)
                                                                                            (("3"
                                                                                              (skosimp)
                                                                                              (("3"
                                                                                                (lemma
                                                                                                 "convergent_subset"
                                                                                                 ("X"
                                                                                                  "F!1"
                                                                                                  "Y"
                                                                                                  "X!1"
                                                                                                  "g"
                                                                                                  "f!1"))
                                                                                                (("3"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (skosimp)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "convergent_subset"
                                                                                           ("X"
                                                                                            "F!1"
                                                                                            "Y"
                                                                                            "X!1"
                                                                                            "g"
                                                                                            "f!1"))
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (skosimp)
                                                                                        (("3"
                                                                                          (expand
                                                                                           "convergent?")
                                                                                          (("3"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (skosimp)
                                                                                    (("3"
                                                                                      (lemma
                                                                                       "convergent_subset"
                                                                                       ("X"
                                                                                        "F!1"
                                                                                        "Y"
                                                                                        "X!1"
                                                                                        "g"
                                                                                        "f!1"))
                                                                                      (("3"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("4"
                                                                                    (skosimp)
                                                                                    (("4"
                                                                                      (expand
                                                                                       "convergent?")
                                                                                      (("4"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 2)
                                                                                (("2"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "nonempty?")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "empty?")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "0")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "member")
                                                                                          (("1"
                                                                                            (inst
                                                                                             +
                                                                                             "emptyset[T]")
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "sigma_empty")
                                                                                              (("1"
                                                                                                (hide-all-but
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     -1)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "above_bounded")
                                                                                      (("2"
                                                                                        (inst
                                                                                         +
                                                                                         "sigma[T]({t | X!1(t) & f!1(t) <= 0}, -f!1)")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "upper_bound")
                                                                                          (("1"
                                                                                            (skosimp)
                                                                                            (("1"
                                                                                              (typepred
                                                                                               "z!1")
                                                                                              (("1"
                                                                                                (skosimp)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "sigma_subset"
                                                                                                   ("X"
                                                                                                    "F!1"
                                                                                                    "Y"
                                                                                                    "{t | X!1(t) & f!1(t) <= 0}"
                                                                                                    "f"
                                                                                                    "-f!1"))
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "convergent_subset"
                                                                                                       ("X"
                                                                                                        "difference({t | X!1(t) & f!1(t) <= 0}, F!1)"
                                                                                                        "Y"
                                                                                                        "{t | X!1(t) & f!1(t) <= 0}"
                                                                                                        "g"
                                                                                                        "-f!1"))
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (split
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "sigma_ge_0"
                                                                                                             ("X"
                                                                                                              "difference({t | X!1(t) & f!1(t) <= 0}, F!1)"
                                                                                                              "f"
                                                                                                              "-f!1"))
                                                                                                            (("1"
                                                                                                              (split
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (skosimp)
                                                                                                                (("2"
                                                                                                                  (typepred
                                                                                                                   "t!1")
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "difference")
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "member")
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "-")
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (hide-all-but
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("3"
                                                                                                            (lemma
                                                                                                             "convergent_subset"
                                                                                                             ("X"
                                                                                                              "{t | X!1(t) & f!1(t) <= 0}"
                                                                                                              "Y"
                                                                                                              "X!1"
                                                                                                              "g"
                                                                                                              "-f!1"))
                                                                                                            (("3"
                                                                                                              (rewrite
                                                                                                               "convergent_opp")
                                                                                                              (("3"
                                                                                                                (assert)
                                                                                                                (("3"
                                                                                                                  (hide-all-but
                                                                                                                   1)
                                                                                                                  (("3"
                                                                                                                    (grind)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (lemma
                                                                                           "convergent_subset"
                                                                                           ("X"
                                                                                            "{t | X!1(t) & f!1(t) <= 0}"
                                                                                            "Y"
                                                                                            "X!1"
                                                                                            "g"
                                                                                            "-f!1"))
                                                                                          (("2"
                                                                                            (rewrite
                                                                                             "convergent_opp")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (hide-all-but
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (lemma
                                                                                           "countable_subset[T]"
                                                                                           ("S"
                                                                                            "{t | X!1(t) & f!1(t) <= 0}"
                                                                                            "Count"
                                                                                            "X!1"))
                                                                                          (("3"
                                                                                            (split)
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide-all-but
                                                                                               1)
                                                                                              (("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (skosimp)
                                                                                (("3"
                                                                                  (lemma
                                                                                   "convergent_subset"
                                                                                   ("X"
                                                                                    "F!1"
                                                                                    "Y"
                                                                                    "X!1"
                                                                                    "g"
                                                                                    "-f!1"))
                                                                                  (("3"
                                                                                    (rewrite
                                                                                     "convergent_opp")
                                                                                    (("3"
                                                                                      (assert)
                                                                                      (("3"
                                                                                        (hide-all-but
                                                                                         (-1
                                                                                          1))
                                                                                        (("3"
                                                                                          (expand
                                                                                           "subset?")
                                                                                          (("3"
                                                                                            (expand
                                                                                             "member")
                                                                                            (("3"
                                                                                              (skosimp)
                                                                                              (("3"
                                                                                                (inst
                                                                                                 -
                                                                                                 "x!1")
                                                                                                (("3"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (skosimp)
                                                                                (("2"
                                                                                  (typepred
                                                                                   "sup(S!1)")
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "inf(image[nnreal, npreal](LAMBDA (x: nnreal): -x, S!1))")
                                                                                    (("2"
                                                                                      (name-replace
                                                                                       "INF"
                                                                                       "inf(image[nnreal, npreal](LAMBDA (x: nnreal): -x, S!1))")
                                                                                      (("2"
                                                                                        (name-replace
                                                                                         "SUP"
                                                                                         "sup(S!1)")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "greatest_lower_bound")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "least_upper_bound")
                                                                                            (("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "lower_bound")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "upper_bound")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -2
                                                                                                     "-SUP")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -4
                                                                                                         "-INF")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (split
                                                                                                             -4)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (skosimp)
                                                                                                                (("1"
                                                                                                                  (typepred
                                                                                                                   "z!1")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "image")
                                                                                                                    (("1"
                                                                                                                      (skosimp)
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -5
                                                                                                                         "x!1")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (skosimp)
                                                                                                              (("2"
                                                                                                                (typepred
                                                                                                                 "z!1")
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -3
                                                                                                                   "-z!1")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (expand
                                                                                                                     "image")
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       +
                                                                                                                       "z!1")
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (skosimp)
                                                                              (("3"
                                                                                (typepred
                                                                                 "S!1")
                                                                                (("3"
                                                                                  (hide-all-but
                                                                                   (-1
                                                                                    -2
                                                                                    1))
                                                                                  (("3"
                                                                                    (split)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "nonempty?")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "empty?")
                                                                                        (("1"
                                                                                          (skosimp)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "member")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "image")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -
                                                                                                 "-x!1")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   +
                                                                                                   "x!1")
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (expand
                                                                                       "image")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "below_bounded")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "above_bounded")
                                                                                          (("2"
                                                                                            (skosimp)
                                                                                            (("2"
                                                                                              (inst
                                                                                               +
                                                                                               "-n!1")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "upper_bound")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "lower_bound")
                                                                                                  (("2"
                                                                                                    (skosimp)
                                                                                                    (("2"
                                                                                                      (typepred
                                                                                                       "z!1")
                                                                                                      (("2"
                                                                                                        (skosimp)
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "x!1")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skosimp)
                                                              (("2"
                                                                (expand "-")
                                                                (("2"
                                                                  (typepred
                                                                   "t!1")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (rewrite
                                                             "convergent_zero")
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but 1)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (replace -1)
                                                      (("2"
                                                        (lemma
                                                         "convergent_subset"
                                                         ("X"
                                                          "{t | X!1(t) & f!1(t) <= 0}"
                                                          "Y"
                                                          "X!1"
                                                          "g"
                                                          "-f!1"))
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (split 1)
                                                            (("1"
                                                              (hide-all-but 1)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (rewrite
                                                                 "convergent_opp")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (lemma
                                                       "countable_subset[T]"
                                                       ("S"
                                                        "{t | X!1(t) & f!1(t) = 0}"
                                                        "Count"
                                                        "X!1"))
                                                      (("3"
                                                        (split -1)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide-all-but 1)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (grind)
                                                      (("2"
                                                        (apply-extensionality
                                                         :hide?
                                                         t)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -1 2)
                                                  (("2"
                                                    (skosimp)
                                                    (("2"
                                                      (expand "-")
                                                      (("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma
                                                 "convergent_subset"
                                                 ("X"
                                                  "{t | X!1(t) & f!1(t) <= 0}"
                                                  "Y"
                                                  "X!1"
                                                  "g"
                                                  "-f!1"))
                                                (("1"
                                                  (split -1)
                                                  (("1" (propax) nil nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2" (grind) nil nil))
                                                    nil)
                                                   ("3"
                                                    (lemma
                                                     "convergent_opp"
                                                     ("X" "X!1" "f" "f!1"))
                                                    (("3" (assert) nil nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (lemma
                                                   "countable_subset[T]"
                                                   ("S"
                                                    "{t | X!1(t) & f!1(t) <= 0}"
                                                    "Count"
                                                    "X!1"))
                                                  (("2"
                                                    (split -1)
                                                    (("1" (propax) nil nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2" (grind) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (lemma
                                                 "countable_subset[T]"
                                                 ("S"
                                                  "{t | X!1(t) & f!1(t) <= 0}"
                                                  "Count"
                                                  "X!1"))
                                                (("3"
                                                  (split -1)
                                                  (("1" (propax) nil nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2" (grind) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2" (apply-extensionality :hide? t)
                                (("1" (hide-all-but 1)
                                  (("1"
                                    (case-replace "EXISTS (F:finite_set[T]):
         subset?(F, {t | X!1(t) & f!1(t) >= 0}) AND x!1 = sigma(F, f!1)")
                                    (("1" (skosimp)
                                      (("1"
                                        (inst + "F!1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide -2)
                                            (("1"
                                              (expand "subset?")
                                              (("1"
                                                (expand "member")
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (skosimp)
                                                    (("1"
                                                      (inst - "x!2")
                                                      (("1" (assert) nil nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (skosimp)
                                                    (("2"
                                                      (inst - "t!1")
                                                      (("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (replace 1 2)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (skosimp)
                                          (("2"
                                            (inst + "F!1")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "subset?")
                                                (("2"
                                                  (skosimp)
                                                  (("2"
                                                    (expand "member")
                                                    (("2"
                                                      (inst - "x!2")
                                                      (("2"
                                                        (inst - "x!2")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3" (hide 2)
                                      (("3"
                                        (skosimp)
                                        (("3"
                                          (expand "convergent?")
                                          (("3" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (skosimp)
                                  (("2" (expand "convergent?")
                                    (("2" (propax) nil nil)) nil))
                                  nil)
                                 ("3" (skosimp)
                                  (("3" (lemma "finite_countable" ("x" "F!1"))
                                    (("3"
                                      (lemma
                                       "convergent_subset"
                                       ("X" "F!1" "Y" "X!1" "g" "f!1"))
                                      (("3"
                                        (assert)
                                        (("3"
                                          (hide-all-but (-2 1))
                                          (("3"
                                            (expand "subset?")
                                            (("3"
                                              (expand "member")
                                              (("3"
                                                (skosimp)
                                                (("3"
                                                  (inst - "x!1")
                                                  (("3" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (skosimp)
                              (("3" (expand "convergent?")
                                (("3" (propax) nil nil)) nil))
                              nil)
                             ("4" (skosimp)
                              (("4" (lemma "finite_countable" ("x" "F!1"))
                                (("4" (hide-all-but (1 -2))
                                  (("4"
                                    (lemma "convergent_subset"
                                     ("X" "F!1" "Y" "X!1" "g" "f!1"))
                                    (("4" (assert)
                                      (("4"
                                        (hide 2)
                                        (("4"
                                          (expand "subset?")
                                          (("4"
                                            (expand "member")
                                            (("4"
                                              (skosimp)
                                              (("4"
                                                (inst - "x!1")
                                                (("4" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but 1) (("2" (skosimp) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
              nil)
             ("2"
              (lemma "countable_subset"
               ("S" "{t | X!1(t) & f!1(t) < 0}" "Count" "X!1"))
              (("2" (assert)
                (("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)) nil))
              nil))
            nil)
           ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
          nil)
         ("2"
          (lemma "countable_subset"
           ("S" "{t | X!1(t) & f!1(t) >= 0}" "Count" "X!1"))
          (("2" (assert) (("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (apply-extensionality :hide? t) (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((< const-decl "bool" reals nil)
    (convergent? const-decl "bool" countable_convergence nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (countable_set nonempty-type-eq-decl nil countability sets_aux)
    (is_countable const-decl "bool" countability sets_aux)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (union const-decl "set" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil sigma_countable nil)
    (subset? const-decl "bool" sets nil)
    (sigma_disjoint_union formula-decl nil sigma_countable nil)
    (finite_countable judgement-tcc nil countable_props sets_aux)
    (<= const-decl "bool" reals nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (intersection const-decl "set" sets nil)
    (sigma_eq formula-decl nil sigma_countable nil)
    (sigma_zero formula-decl nil sigma_countable nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (S!1 skolem-const-decl "sup_set[nnreal]" sigma_countable nil)
    (x!1 skolem-const-decl "nnreal" sigma_countable nil)
    (S!1 skolem-const-decl "sup_set[nnreal]" sigma_countable nil)
    (z!1 skolem-const-decl "(S!1)" sigma_countable nil)
    (lower_bound const-decl "bool" bound_defs reals)
    (X!1 skolem-const-decl "countable_set[T]" sigma_countable nil)
    (f!1 skolem-const-decl "(convergent?(X!1))" sigma_countable nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (x!1 skolem-const-decl "npreal" sigma_countable nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (member const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (sigma_empty formula-decl nil sigma_countable nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set[T]" countable_props sets_aux)
    (finite_emptyset name-judgement "finite_set[T]" sigma_countable nil)
    (countable_subset formula-decl nil countability sets_aux)
    (upper_bound const-decl "bool" bound_defs reals)
    (sigma_subset formula-decl nil sigma_countable nil)
    (difference const-decl "set" sets nil)
    (sigma_ge_0 formula-decl nil sigma_countable nil)
    (image const-decl "set[R]" function_image nil)
    (inf const-decl "{x | greatest_lower_bound(<=)(x, Sl)}" bounded_reals
         reals)
    (below_bounded const-decl "bool" bounded_reals reals)
    (greatest_lower_bound const-decl "bool" bound_defs reals)
    (inf_set type-eq-decl nil bounded_reals reals)
    (npreal type-eq-decl nil real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sup const-decl "{x | least_upper_bound(<=)(x, Su)}" bounded_reals reals)
    (least_upper_bound const-decl "bool" bound_defs reals)
    (pred type-eq-decl nil defined_types nil)
    (sup_set type-eq-decl nil bounded_reals reals)
    (above_bounded const-decl "bool" bounded_reals reals)
    (setof type-eq-decl nil defined_types nil)
    (nonempty? const-decl "bool" sets nil)
    (convergent_zero formula-decl nil countable_convergence nil)
    (sigma_opp formula-decl nil sigma_countable nil)
    (convergent_opp formula-decl nil countable_convergence nil)
    (nnreal type-eq-decl nil real_types nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (sigma const-decl "real" sigma_countable nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sigma_nn_def formula-decl nil sigma_countable nil)
    (disjoint? const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (convergent_subset formula-decl nil countable_convergence nil))
   shostak)))


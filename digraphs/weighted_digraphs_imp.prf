(weighted_digraphs_imp
 (IMP_weighted_digraphs_abs_TCC1 0
  (IMP_weighted_digraphs_abs_TCC1-1 nil 3658149719 ("" (subtype-tcc) nil nil)
   ((zero_ct formal-const-decl "{zero: Weight | identity?(+)(zero)}"
     weighted_digraphs_imp nil)
    (identity? const-decl "bool" operator_defs nil)
    (+ formal-const-decl "{f: [[Weight, Weight] -> Weight] | associative?(f)}"
       weighted_digraphs_imp nil)
    (associative? const-decl "bool" operator_defs nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Weight formal-type-decl nil weighted_digraphs_imp nil)
    (T formal-type-decl nil weighted_digraphs_imp nil)
    (wgd_dg const-decl "[wdg -> digraph_type]" weighted_digraphs_def nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]" digraphs_imp nil))
   nil
   (IMP_weighted_digraphs_abs subtype
    "weighted_digraphs_def[weighted_digraphs_imp.T, weighted_digraphs_imp.Weight, weighted_digraphs_imp.+, weighted_digraphs_imp.zero_ct].get_wgt"
    "[[W: wdg[T, Weight, +, zero_ct], (digraphs_imp[weighted_digraphs_imp.T].digraph_edges(weighted_digraphs_def[weighted_digraphs_imp.T, weighted_digraphs_imp.Weight, weighted_digraphs_imp.+, weighted_digraphs_imp.zero_ct].wgd_dg(W)))] -> weighted_digraphs_imp.Weight]")))
 (IMP_weighted_digraphs_abs_TCC2 0
  (IMP_weighted_digraphs_abs_TCC2-1 nil 3658149719
   ("" (use "digraphs_implement_digraphs_") nil nil)
   ((T formal-type-decl nil weighted_digraphs_imp nil)
    (digraphs_implement_digraphs_ formula-decl nil digraphs_imp nil))
   nil
   (IMP_weighted_digraphs_abs assuming
    "weighted_digraphs_abs[weighted_digraphs_imp.T, weighted_digraphs_imp.Weight, weighted_digraphs_imp.+, weighted_digraphs_imp.zero_ct, digraph_type[T], digraphs_imp[weighted_digraphs_imp.T].digraph_verts, digraphs_imp[weighted_digraphs_imp.T].digraph_edges, digraphs_imp[weighted_digraphs_imp.T].digraph_size, digraphs_imp[weighted_digraphs_imp.T].digraph_make, wdg[T, Weight, +, zero_ct], weighted_digraphs_def[weighted_digraphs_imp.T, weighted_digraphs_imp.Weight, weighted_digraphs_imp.+, weighted_digraphs_imp.zero_ct].wgd_dg, weighted_digraphs_def[weighted_digraphs_imp.T, weighted_digraphs_imp.Weight, weighted_digraphs_imp.+, weighted_digraphs_imp.zero_ct].get_wgt, wgt_map[T, Weight, +, zero_ct], weighted_digraphs_def[weighted_digraphs_imp.T, weighted_digraphs_imp.Weight, weighted_digraphs_imp.+, weighted_digraphs_imp.zero_ct].map_key?, weighted_digraphs_def[weighted_digraphs_imp.T, weighted_digraphs_imp.Weight, weighted_digraphs_imp.+, weighted_digraphs_imp.zero_ct].map_val, weighted_digraphs_def[weighted_digraphs_imp.T, weighted_digraphs_imp.Weight, weighted_digraphs_imp.+, weighted_digraphs_imp.zero_ct].map4dg?, weighted_digraphs_def[weighted_digraphs_imp.T, weighted_digraphs_imp.Weight, weighted_digraphs_imp.+, weighted_digraphs_imp.zero_ct].make_wdg].weighted_digraphs_abs"
    "concretedigraph_implements_abstractdigraph: ASSUMPTION digraphs_abs[weighted_digraphs_abs.T, weighted_digraphs_abs.ConcreteDigraph, weighted_digraphs_abs.vert, weighted_digraphs_abs.edges, weighted_digraphs_abs.size, weighted_digraphs_abs.make].correct_implementation")))
 (wdigraphs_implement_wdigraphs_ 0
  (wdigraphs_implement_wdigraphs_-1 nil 3658166439 ("" (grind) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (zero_ct formal-const-decl "{zero: Weight | identity?(+)(zero)}"
     weighted_digraphs_imp nil)
    (identity? const-decl "bool" operator_defs nil)
    (+ formal-const-decl "{f: [[Weight, Weight] -> Weight] | associative?(f)}"
       weighted_digraphs_imp nil)
    (associative? const-decl "bool" operator_defs nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Weight formal-type-decl nil weighted_digraphs_imp nil)
    (map_key? const-decl "[wgt_map -> [[T, T] -> bool]]" weighted_digraphs_def
     nil)
    (map4dg? const-decl "[digraph_type -> [wgt_map -> bool]]"
     weighted_digraphs_def nil)
    (map_val const-decl "[map: wgt_map, (map_key?(map)) -> Weight]"
     weighted_digraphs_def nil)
    (make_wdg const-decl "[dg: digraph_type, (map4dg?(dg)) -> wdg]"
     weighted_digraphs_def nil)
    (wgd_dg const-decl "[wdg -> digraph_type]" weighted_digraphs_def nil)
    (get_wgt const-decl "[W: wdg, (edges(dg(W))) -> Weight]"
     weighted_digraphs_def nil)
    (wgt_map type-eq-decl nil weighted_digraphs_def nil)
    (Maybe type-decl nil Maybe structures)
    (wdg type-eq-decl nil weighted_digraphs_def nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph -> nat]" digraphs_imp nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp nil)
    (digraph type-eq-decl nil digraph_def nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (correct_implementation const-decl "bool" weighted_digraphs_abs nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]" digraphs_imp nil)
    (T formal-type-decl nil weighted_digraphs_imp nil))
   shostak)))


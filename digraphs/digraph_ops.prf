(digraph_ops
 (union_TCC1 0
  (union_TCC1-2 "" 3790101450
   ("" (skosimp*)
    (("" (expand "union")
      (("" (expand "member")
        (("" (split -1)
          (("1" (typepred "G1!1")
            (("1" (inst?)
              (("1" (assert) (("1" (flatten) (("1" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (typepred "G2!1")
            (("2" (inst?)
              (("2" (assert) (("2" (flatten) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((union const-decl "set" sets nil)
    (digraph type-eq-decl nil digraph_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-type-decl nil digraph_ops nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (member const-decl "bool" sets nil))
   shostak
   (union subtype
          "(# vert := sets[digraph_ops.T].union(vert(digraph_ops.G1), vert(digraph_ops.G2)), edges := sets[[digraph_ops.T, digraph_ops.T]].union(edges(digraph_ops.G1), edges(digraph_ops.G2)) #)"
     "digraph[T]"))
  (union_TCC1-1 nil 3253634004
   ("" (skosimp*)
    (("" (expand "union")
      (("" (expand "member")
        (("" (split -1)
          (("1" (typepred "G1!1")
            (("1" (inst?)
              (("1" (assert) (("1" (flatten) (("1" (assert) nil)))))))))
           ("2" (typepred "G2!1")
            (("2" (inst?)
              (("2" (assert)
                (("2" (flatten) (("2" (assert) nil))))))))))))))))
    nil)
   ((predigraph type-eq-decl nil digraph_def nil)
    (digraph type-eq-decl nil digraph_def nil))
   nil
   (union subtype
          "(# vert := sets[digraph_ops.T].union(vert(digraph_ops.G1), vert(digraph_ops.G2)), edges := sets[[digraph_ops.T, digraph_ops.T]].union(edges(digraph_ops.G1), edges(digraph_ops.G2)) #)"
     "digraph[T]")))
 (del_vert_TCC1 0
  (del_vert_TCC1-1 nil 3253634004
   ("" (skosimp*)
    (("" (lemma "finite_subset[edgetype[T]]")
      (("" (inst?)
        (("" (inst - "edges(G!1)")
          (("" (assert) (("" (hide 2) (("" (grind) nil nil)) nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((edgetype type-eq-decl nil digraphs_utils nil)
    (T formal-type-decl nil digraph_ops nil)
    (finite_subset formula-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (in? const-decl "bool" pairs structures)
    (pair type-eq-decl nil pairs structures)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (digraph type-eq-decl nil digraph_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (del_vert subtype
    "{e | booleans.AND(edges(digraph_ops.G)(digraph_ops.e), (booleans.NOT)(pairs[digraph_ops.T].in?(digraph_ops.v, digraph_ops.e)))}"
    "finite_set[[T, T]]")))
 (del_vert_TCC2 0
  (del_vert_TCC2-1 nil 3307703836 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (digraph type-eq-decl nil digraph_def nil)
    (T formal-type-decl nil digraph_ops nil)
    (in? const-decl "bool" pairs structures)
    (/= const-decl "boolean" notequal nil) (member const-decl "bool" sets nil)
    (remove const-decl "set" sets nil))
   nil
   (del_vert subtype
    "(# vert := sets[digraph_ops.T].remove(digraph_ops.v, vert(digraph_ops.G)), edges := {e | booleans.AND(edges(digraph_ops.G)(digraph_ops.e), (booleans.NOT)(pairs[digraph_ops.T].in?(digraph_ops.v, digraph_ops.e)))} #)"
    "digraph[T]")))
 (del_edge_TCC1 0
  (del_edge_TCC1-2 "" 3790101452
   ("" (skosimp*)
    (("" (expand "remove")
      (("" (flatten)
        (("" (expand "member")
          (("" (typepred "G!1") (("" (inst?) (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((remove const-decl "set" sets nil) (member const-decl "bool" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil digraph_ops nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (digraph type-eq-decl nil digraph_def nil))
   shostak
   (del_edge subtype
    "digraph_ops.G WITH [edges := sets[edgetype[T]].remove(digraph_ops.e, edges(digraph_ops.G))]"
    "digraph[T]"))
  (del_edge_TCC1-1 nil 3253634004
   ("" (skosimp*)
    (("" (expand "remove")
      (("" (flatten)
        (("" (expand "member")
          (("" (typepred "G!1") (("" (inst?) (("" (assert) nil))))))))))))
    nil)
   ((predigraph type-eq-decl nil digraph_def nil)
    (digraph type-eq-decl nil digraph_def nil))
   nil
   (del_edge subtype
    "digraph_ops.G WITH [edges := sets[edgetype[T]].remove(digraph_ops.e, edges(digraph_ops.G))]"
    "digraph[T]")))
 (del_vert_still_in 0
  (del_vert_still_in-2 "" 3790101452
   ("" (skosimp*)
    (("" (expand "del_vert")
      (("" (expand "remove")
        (("" (expand "member") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((del_vert const-decl "digraph[T]" digraph_ops nil)
    (member const-decl "bool" sets nil) (remove const-decl "set" sets nil))
   shostak)
  (del_vert_still_in-1 nil 3253634004
   ("" (skosimp*)
    (("" (expand "del_vert")
      (("" (expand "remove") (("" (expand "member") (("" (assert) nil))))))))
    nil)
   nil nil))
 (size_del_vert 0
  (size_del_vert-1 nil 3253634004
   ("" (skosimp*)
    (("" (typepred "v!1")
      (("" (expand "del_vert")
        (("" (expand "size")
          (("" (assert) (("" (rewrite "card_remove") nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((digraph type-eq-decl nil digraph_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (T formal-type-decl nil digraph_ops nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (size const-decl "nat" digraph_def nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (card_remove formula-decl nil finite_sets nil)
    (finite_remove application-judgement "finite_set" finite_sets nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (del_vert const-decl "digraph[T]" digraph_ops nil))
   nil))
 (del_vert_le 0
  (del_vert_le-1 nil 3253634004
   ("" (skosimp*)
    (("" (expand "size")
      (("" (expand "del_vert")
        (("" (assert)
          (("" (rewrite "card_remove")
            (("" (lift-if) (("" (ground) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((size const-decl "nat" digraph_def nil)
    (finite_remove application-judgement "finite_set" finite_sets nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (T formal-type-decl nil digraph_ops nil)
    (digraph type-eq-decl nil digraph_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (card_remove formula-decl nil finite_sets nil)
    (del_vert const-decl "digraph[T]" digraph_ops nil))
   nil))
 (del_vert_ge 0
  (del_vert_ge-1 nil 3253634004
   ("" (skosimp*)
    (("" (expand "size")
      (("" (expand "del_vert")
        (("" (assert)
          (("" (rewrite "card_remove")
            (("" (lift-if) (("" (ground) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((size const-decl "nat" digraph_def nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (finite_remove application-judgement "finite_set" finite_sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (T formal-type-decl nil digraph_ops nil)
    (digraph type-eq-decl nil digraph_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (card_remove formula-decl nil finite_sets nil)
    (del_vert const-decl "digraph[T]" digraph_ops nil))
   nil))
 (edge_in_del_vert 0
  (edge_in_del_vert-2 "" 3790101453
   ("" (skosimp*) (("" (expand "del_vert") (("" (assert) nil nil)) nil)) nil)
   ((del_vert const-decl "digraph[T]" digraph_ops nil)) shostak)
  (edge_in_del_vert-1 nil 3253634004
   ("" (skosimp*) (("" (expand "del_vert") (("" (assert) nil)))) nil) nil
   nil))
 (edges_del_vert 0
  (edges_del_vert-2 "" 3790101454
   ("" (skosimp*) (("" (expand "del_vert") (("" (flatten) nil nil)) nil)) nil)
   ((del_vert const-decl "digraph[T]" digraph_ops nil)) shostak)
  (edges_del_vert-1 nil 3253634004
   ("" (skosimp*)
    (("" (expand "del_vert") (("" (flatten) (("" (propax) nil)))))) nil)
   nil nil))
 (del_vert_comm 0
  (del_vert_comm-2 "" 3790101454
   ("" (skosimp*)
    (("" (apply-extensionality 1 :hide? t)
      (("1" (expand "del_vert")
        (("1" (apply-extensionality 1 :hide? t)
          (("1" (iff 1) (("1" (ground) nil nil)) nil)) nil))
        nil)
       ("2" (expand "del_vert")
        (("2" (apply-extensionality 1 :hide? t) (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((member const-decl "bool" sets nil) (/= const-decl "boolean" notequal nil)
    (finite_remove application-judgement "finite_set" finite_sets nil)
    (set type-eq-decl nil sets nil) (remove const-decl "set" sets nil)
    (edgetype type-eq-decl nil digraphs_utils nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (pair type-eq-decl nil pairs structures)
    (in? const-decl "bool" pairs structures)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (digraph type-eq-decl nil digraph_def nil)
    (del_vert const-decl "digraph[T]" digraph_ops nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (T formal-type-decl nil digraph_ops nil))
   shostak)
  (del_vert_comm-1 nil 3253634004
   ("" (skosimp*)
    (("" (apply-extensionality 1 :hide? t)
      (("1" (expand "del_vert")
        (("1" (apply-extensionality 1 :hide? t)
          (("1" (iff 1) (("1" (ground) nil)))))))
       ("2" (expand "del_vert")
        (("2" (apply-extensionality 1 :hide? t) (("2" (grind) nil))))))))
    nil)
   ((predigraph type-eq-decl nil digraph_def nil)
    (digraph type-eq-decl nil digraph_def nil)
    (in? const-decl "bool" pairs structures)
    (pair type-eq-decl nil pairs structures)
    (edgetype type-eq-decl nil digraphs_utils nil))
   nil))
 (del_vert_empty? 0
  (del_vert_empty?-1 nil 3253634004
   ("" (skosimp*)
    (("" (lemma "card_empty?[T]")
      (("" (inst?)
        (("" (replace -1 * rl)
          (("" (hide -1)
            (("" (expand "singleton?")
              (("" (lemma "size_del_vert")
                (("" (inst?)
                  (("" (expand "size")
                    (("" (assert)
                      (("" (expand "size") (("" (assert) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-type-decl nil digraph_ops nil)
    (card_empty? formula-decl nil finite_sets nil)
    (singleton? const-decl "bool" digraphs_ nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (digraph_size const-decl "[digraph -> nat]" digraphs_imp nil)
    (size const-decl "nat" digraph_def nil)
    (size_del_vert formula-decl nil digraph_ops nil)
    (del_vert const-decl "digraph[T]" digraph_ops nil)
    (digraph type-eq-decl nil digraph_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (del_edge_lem 0
  (del_edge_lem-2 "" 3790101455
   ("" (skosimp*)
    (("" (expand "member")
      (("" (expand "del_edge")
        (("" (expand "remove") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((member const-decl "bool" sets nil) (remove const-decl "set" sets nil)
    (del_edge const-decl "digraph[T]" digraph_ops nil))
   shostak)
  (del_edge_lem-1 nil 3253634004
   ("" (skosimp*)
    (("" (expand "member")
      (("" (expand "del_edge")
        (("" (expand "remove") (("" (propax) nil))))))))
    nil)
   nil nil))
 (del_edge_lem2 0
  (del_edge_lem2-2 "" 3790101455 ("" (skosimp*) (("" (grind) nil nil)) nil)
   ((finite_remove application-judgement "finite_set" finite_sets nil)
    (remove const-decl "set" sets nil) (member const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil)
    (del_edge const-decl "digraph[T]" digraph_ops nil))
   shostak)
  (del_edge_lem2-1 nil 3253634004 ("" (skosimp*) (("" (grind) nil)) nil) nil
   nil))
 (del_edge_lem3 0
  (del_edge_lem3-2 "" 3790101456 ("" (skosimp*) (("" (grind) nil nil)) nil)
   ((finite_remove application-judgement "finite_set" finite_sets nil)
    (remove const-decl "set" sets nil) (member const-decl "bool" sets nil)
    (del_edge const-decl "digraph[T]" digraph_ops nil))
   shostak)
  (del_edge_lem3-1 nil 3253634004 ("" (skosimp*) (("" (grind) nil)) nil) nil
   nil))
 (del_edge_lem5 0
  (del_edge_lem5-2 "" 3790101456
   ("" (skosimp*)
    (("" (apply-extensionality 2 :hide? t)
      (("1" (apply-extensionality 1 :hide? t)
        (("1" (expand "del_edge") (("1" (grind) nil nil)) nil)) nil)
       ("2" (expand "del_edge") (("2" (propax) nil nil)) nil))
      nil))
    nil)
   ((set type-eq-decl nil sets nil) (remove const-decl "set" sets nil)
    (member const-decl "bool" sets nil) (/= const-decl "boolean" notequal nil)
    (finite_remove application-judgement "finite_set" finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (digraph type-eq-decl nil digraph_def nil)
    (edgetype type-eq-decl nil digraphs_utils nil)
    (del_edge const-decl "digraph[T]" digraph_ops nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (T formal-type-decl nil digraph_ops nil))
   shostak)
  (del_edge_lem5-1 nil 3253634004
   ("" (skosimp*)
    (("" (apply-extensionality 2 :hide? t)
      (("1" (apply-extensionality 1 :hide? t)
        (("1" (expand "del_edge") (("1" (grind) nil)))))
       ("2" (expand "del_edge") (("2" (propax) nil))))))
    nil)
   ((predigraph type-eq-decl nil digraph_def nil)
    (edgetype type-eq-decl nil digraphs_utils nil)
    (digraph type-eq-decl nil digraph_def nil))
   nil))
 (vert_del_edge 0
  (vert_del_edge-1 nil 3253634004 ("" (grind) nil nil)
   ((del_edge const-decl "digraph[T]" digraph_ops nil)) nil))
 (del_edge_num 0
  (del_edge_num-2 "" 3790101457
   ("" (skosimp*)
    (("" (expand "num_edges")
      (("" (case-replace "edges(del_edge(G!1,e!1)) = remove(e!1,edges(G!1))")
        (("1" (rewrite "card_remove[edgetype[T]]") nil nil)
         ("2" (hide 2)
          (("2" (apply-extensionality :hide? t)
            (("2" (iff 1)
              (("2" (prop)
                (("1" (lemma "del_edge_lem2")
                  (("1" (inst?)
                    (("1" (lemma "del_edge_lem")
                      (("1" (inst?)
                        (("1" (expand "member")
                          (("1" (assert)
                            (("1" (grind :exclude ("edges" "del_edge")) nil
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (rewrite "del_edge_lem3")
                  (("1" (hide 2) (("1" (grind :exclude "edges") nil nil)) nil)
                   ("2" (hide 2) (("2" (grind :exclude "edges") nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((num_edges const-decl "nat" digraph_ops nil)
    (finite_remove application-judgement "finite_set" finite_sets nil)
    (T formal-type-decl nil digraph_ops nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (digraph type-eq-decl nil digraph_def nil)
    (edgetype type-eq-decl nil digraphs_utils nil)
    (del_edge const-decl "digraph[T]" digraph_ops nil)
    (remove const-decl "set" sets nil)
    (card_remove formula-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (/= const-decl "boolean" notequal nil)
    (del_edge_lem3 formula-decl nil digraph_ops nil)
    (del_edge_lem2 formula-decl nil digraph_ops nil)
    (del_edge_lem formula-decl nil digraph_ops nil)
    (member const-decl "bool" sets nil))
   shostak)
  (del_edge_num-1 nil 3253634004
   ("" (skosimp*)
    (("" (expand "num_edges")
      (("" (case-replace "edges(del_edge(G!1,e!1)) = remove(e!1,edges(G!1))")
        (("1" (rewrite "card_remove[edgetype[T]]") nil)
         ("2" (hide 2)
          (("2" (apply-extensionality :hide? t)
            (("2" (iff 1)
              (("2" (prop)
                (("1" (lemma "del_edge_lem2")
                  (("1" (inst?)
                    (("1" (lemma "del_edge_lem")
                      (("1" (inst?)
                        (("1" (expand "member")
                          (("1" (assert)
                            (("1" (grind :exclude ("edges" "del_edge"))
                              nil)))))))))))))
                 ("2" (rewrite "del_edge_lem3")
                  (("1" (hide 2) (("1" (grind :exclude "edges") nil)))
                   ("2" (hide 2)
                    (("2" (grind :exclude "edges") nil))))))))))))))))))
    nil)
   ((edgetype type-eq-decl nil digraphs_utils nil)
    (digraph type-eq-decl nil digraph_def nil)
    (predigraph type-eq-decl nil digraph_def nil))
   nil))
 (del_edge_singleton 0
  (del_edge_singleton-1 nil 3253634004
   ("" (skosimp*)
    (("" (expand "singleton?")
      (("" (assert)
        (("" (expand "del_edge")
          (("" (expand "size") (("" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((singleton? const-decl "bool" digraphs_ nil)
    (del_edge const-decl "digraph[T]" digraph_ops nil)
    (size const-decl "nat" digraph_def nil)
    (T formal-type-decl nil digraph_ops nil)
    (digraph_size const-decl "[digraph -> nat]" digraphs_imp nil))
   nil))
 (del_vert_edge_comm 0
  (del_vert_edge_comm-2 "" 3790101458
   ("" (skosimp*)
    (("" (apply-extensionality 1 :hide? t)
      (("1" (apply-extensionality :hide? t) (("1" (grind) nil nil)) nil)
       ("2" (expand "del_edge")
        (("2" (expand "del_vert") (("2" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((set type-eq-decl nil sets nil) (in? const-decl "bool" pairs structures)
    (remove const-decl "set" sets nil) (member const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil)
    (finite_remove application-judgement "finite_set" finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (digraph type-eq-decl nil digraph_def nil)
    (del_vert const-decl "digraph[T]" digraph_ops nil)
    (edgetype type-eq-decl nil digraphs_utils nil)
    (del_edge const-decl "digraph[T]" digraph_ops nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (T formal-type-decl nil digraph_ops nil))
   shostak)
  (del_vert_edge_comm-1 nil 3253634004
   ("" (skosimp*)
    (("" (apply-extensionality 1 :hide? t)
      (("1" (apply-extensionality :hide? t) (("1" (grind) nil)))
       ("2" (expand "del_edge")
        (("2" (expand "del_vert") (("2" (propax) nil))))))))
    nil)
   ((predigraph type-eq-decl nil digraph_def nil)
    (edgetype type-eq-decl nil digraphs_utils nil)
    (digraph type-eq-decl nil digraph_def nil)
    (in? const-decl "bool" pairs structures))
   nil))
 (del_vert_edge 0
  (del_vert_edge-2 "" 3790101458
   ("" (skosimp*)
    (("" (rewrite "del_vert_edge_comm")
      (("" (apply-extensionality 1 :hide? t)
        (("1" (apply-extensionality 1 :hide? t) (("1" (grind) nil nil)) nil)
         ("2" (expand "del_edge") (("2" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   ((del_vert_edge_comm formula-decl nil digraph_ops nil)
    (T formal-type-decl nil digraph_ops nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (digraph type-eq-decl nil digraph_def nil)
    (edgetype type-eq-decl nil digraphs_utils nil)
    (del_vert const-decl "digraph[T]" digraph_ops nil)
    (del_edge const-decl "digraph[T]" digraph_ops nil)
    (remove const-decl "set" sets nil) (member const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil)
    (in? const-decl "bool" pairs structures)
    (finite_remove application-judgement "finite_set" finite_sets nil)
    (set type-eq-decl nil sets nil))
   shostak)
  (del_vert_edge-1 nil 3253634004
   ("" (skosimp*)
    (("" (rewrite "del_vert_edge_comm")
      (("" (apply-extensionality 1 :hide? t)
        (("1" (apply-extensionality 1 :hide? t) (("1" (grind) nil)))
         ("2" (expand "del_edge") (("2" (propax) nil))))))))
    nil)
   ((predigraph type-eq-decl nil digraph_def nil)
    (digraph type-eq-decl nil digraph_def nil)
    (edgetype type-eq-decl nil digraphs_utils nil)
    (in? const-decl "bool" pairs structures))
   nil)))


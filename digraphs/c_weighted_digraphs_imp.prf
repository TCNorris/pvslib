(c_weighted_digraphs_imp
 (IMP_weighted_digraphs_abs_TCC1 0
  (IMP_weighted_digraphs_abs_TCC1-1 nil 3658149719 ("" (subtype-tcc) nil nil)
   ((T formal-type-decl nil c_weighted_digraphs_imp nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (edges const-decl "bool" c_digraphs_def nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (zero_ct formal-const-decl "{zero: Weight | identity?(+)(zero)}"
     c_weighted_digraphs_imp nil)
    (identity? const-decl "bool" operator_defs nil)
    (+ formal-const-decl "{f: [[Weight, Weight] -> Weight] | associative?(f)}"
       c_weighted_digraphs_imp nil)
    (associative? const-decl "bool" operator_defs nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Weight formal-type-decl nil c_weighted_digraphs_imp nil)
    (wgd_dg const-decl "[wgd_type -> digraph_type]" c_weighted_digraphs_def
     nil))
   nil
   (IMP_weighted_digraphs_abs subtype
    "c_weighted_digraphs_def[c_weighted_digraphs_imp.T, c_weighted_digraphs_imp.Weight, c_weighted_digraphs_imp.+, c_weighted_digraphs_imp.zero_ct].get_wgt"
    "[[W: wgd_type[T, Weight, +, zero_ct], (c_digraphs_imp[c_weighted_digraphs_imp.T].digraph_edges(c_weighted_digraphs_def[c_weighted_digraphs_imp.T, c_weighted_digraphs_imp.Weight, c_weighted_digraphs_imp.+, c_weighted_digraphs_imp.zero_ct].wgd_dg(W)))] -> c_weighted_digraphs_imp.Weight]")))
 (IMP_weighted_digraphs_abs_TCC2 0
  (IMP_weighted_digraphs_abs_TCC2-1 nil 3658149719
   ("" (use "cdigraphs_implement_digraphs_") nil nil)
   ((T formal-type-decl nil c_weighted_digraphs_imp nil)
    (cdigraphs_implement_digraphs_ formula-decl nil c_digraphs_imp nil))
   nil
   (IMP_weighted_digraphs_abs assuming
    "weighted_digraphs_abs[c_weighted_digraphs_imp.T, c_weighted_digraphs_imp.Weight, c_weighted_digraphs_imp.+, c_weighted_digraphs_imp.zero_ct, digraph_type[T], c_digraphs_imp[c_weighted_digraphs_imp.T].digraph_verts, c_digraphs_imp[c_weighted_digraphs_imp.T].digraph_edges, c_digraphs_imp[c_weighted_digraphs_imp.T].digraph_size, c_digraphs_imp[c_weighted_digraphs_imp.T].digraph_make, wgd_type[T, Weight, +, zero_ct], c_weighted_digraphs_def[c_weighted_digraphs_imp.T, c_weighted_digraphs_imp.Weight, c_weighted_digraphs_imp.+, c_weighted_digraphs_imp.zero_ct].wgd_dg, c_weighted_digraphs_def[c_weighted_digraphs_imp.T, c_weighted_digraphs_imp.Weight, c_weighted_digraphs_imp.+, c_weighted_digraphs_imp.zero_ct].get_wgt, list_adt[[c_weighted_digraphs_imp.T, c_weighted_digraphs_imp.T, c_weighted_digraphs_imp.Weight]].list, c_weighted_digraphs_def[c_weighted_digraphs_imp.T, c_weighted_digraphs_imp.Weight, c_weighted_digraphs_imp.+, c_weighted_digraphs_imp.zero_ct].has_key?, c_weighted_digraphs_def[c_weighted_digraphs_imp.T, c_weighted_digraphs_imp.Weight, c_weighted_digraphs_imp.+, c_weighted_digraphs_imp.zero_ct].get_value, c_weighted_digraphs_def[c_weighted_digraphs_imp.T, c_weighted_digraphs_imp.Weight, c_weighted_digraphs_imp.+, c_weighted_digraphs_imp.zero_ct].all_edges_in_map?, c_weighted_digraphs_def[c_weighted_digraphs_imp.T, c_weighted_digraphs_imp.Weight, c_weighted_digraphs_imp.+, c_weighted_digraphs_imp.zero_ct].make_c_wdg].weighted_digraphs_abs"
    "concretedigraph_implements_abstractdigraph: ASSUMPTION digraphs_abs[weighted_digraphs_abs.T, weighted_digraphs_abs.ConcreteDigraph, weighted_digraphs_abs.vert, weighted_digraphs_abs.edges, weighted_digraphs_abs.size, weighted_digraphs_abs.make].correct_implementation")))
 (cwdigraphs_implement_wdigraphs_ 0
  (cwdigraphs_implement_wdigraphs_-1 nil 3658149868
   ("" (expand "correct_implementation")
    ((""
      (case "(FORALL (cd: digraph_type[T], map1: list[[T, T, Weight]]):
         all_edges_in_map?(cd)(map1) IFF
          (FORALL (e: (digraph_edges(cd))): has_key?(map1)(e)))")
      (("1" (split 1)
        (("1" (propax) nil nil)
         ("2" (skeep)
          (("2" (split 1)
            (("1" (expand "make_c_wdg") (("1" (assert) nil nil)) nil)
             ("2" (skeep)
              (("2" (expand "make_c_wdg")
                (("2" (expand "get_wgt") (("2" (propax) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (skeep)
          (("2" (expand "all_edges_in_map?")
            (("2" (expand "has_key?")
              (("2" (split 1)
                (("1" (flatten) (("1" (grind) nil nil)) nil)
                 ("2" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((has_key? const-decl "bool" c_weighted_digraphs_def nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (all_edges_in_map? const-decl "bool" c_weighted_digraphs_def nil)
    (zero_ct formal-const-decl "{zero: Weight | identity?(+)(zero)}"
     c_weighted_digraphs_imp nil)
    (identity? const-decl "bool" operator_defs nil)
    (+ formal-const-decl "{f: [[Weight, Weight] -> Weight] | associative?(f)}"
       c_weighted_digraphs_imp nil)
    (associative? const-decl "bool" operator_defs nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (Weight formal-type-decl nil c_weighted_digraphs_imp nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-type-decl nil c_weighted_digraphs_imp nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (get_wgt const-decl "Weight" c_weighted_digraphs_def nil)
    (make_c_wdg const-decl "wgd_type" c_weighted_digraphs_def nil)
    (wgd_dg const-decl "[wgd_type -> digraph_type]" c_weighted_digraphs_def
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (idx def-decl "{i: below(length(l)) | nth(l, i) = a}" more_list_props
     structures)
    (nth def-decl "T" list_props nil) (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil) (< const-decl "bool" reals nil)
    (e!1 skolem-const-decl "(digraph_edges(cd))" c_weighted_digraphs_imp nil)
    (cd skolem-const-decl "digraph_type[T]" c_weighted_digraphs_imp nil)
    (member def-decl "bool" list_props nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (edges const-decl "bool" c_digraphs_def nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (correct_implementation const-decl "bool" weighted_digraphs_abs nil))
   shostak)))


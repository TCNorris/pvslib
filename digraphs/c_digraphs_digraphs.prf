(c_digraphs_digraphs
 (eq_TCC1 0
  (eq_TCC1-1 nil 3654690301 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil c_digraphs_digraphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (digraph type-eq-decl nil digraph_def nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (size const-decl "nat" c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (/= const-decl "boolean" notequal nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (< const-decl "bool" reals nil) (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil))
   nil
   (eq subtype "c_digraphs_digraphs.i" "below[length[list[nat]](adjs(cd))]")))
 (to_digraph_TCC1 0
  (to_digraph_TCC1-1 nil 3655633029 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil c_digraphs_digraphs nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (< const-decl "bool" reals nil) (size const-decl "nat" c_digraphs_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (/= const-decl "boolean" notequal nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil))
   nil
   (to_digraph subtype "c_digraphs_digraphs.i" "below[length[T](data(cd))]")))
 (to_digraph_TCC2 0
  (to_digraph_TCC2-1 nil 3655633029 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil c_digraphs_digraphs nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (< const-decl "bool" reals nil) (size const-decl "nat" c_digraphs_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (/= const-decl "boolean" notequal nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (to_digraph subtype "c_digraphs_digraphs.j" "below[length[T](data(cd))]")))
 (to_digraph_TCC3 0
  (to_digraph_TCC3-2 nil 3656089073 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil c_digraphs_digraphs nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (< const-decl "bool" reals nil) (size const-decl "nat" c_digraphs_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (/= const-decl "boolean" notequal nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (length def-decl "nat" list_props nil))
   nil
   (to_digraph subtype "c_digraphs_digraphs.i"
    "below[length[list[nat]](adjs(cd))]"))
  (to_digraph_TCC3-1 nil 3655633029 ("" (grind) nil nil) nil nil
   (to_digraph subtype "c_digraphs_digraphs.i"
    "below[length[list[nat]](adjs(cd))]")))
 (to_digraph_TCC4 0
  (to_digraph_TCC4-2 nil 3656096882
   ("" (skeep*)
    (("" (lemma "finite_subset[[T,T]]")
      ((""
        (inst -1 "{u: T, v: T |
                    (EXISTS (i: below(size(cd))): nth[T](data(cd), i) = u) AND
                    (EXISTS (j: below(size(cd))): nth[T](data(cd), j) = v)}"
         "{u: T, v: T |
                    EXISTS (i, j: below(size(cd))):
                      nth[T](data(cd), i) = u AND
                       nth[T](data(cd), j) = v AND
                        member[nat](j, nth[list[nat]](adjs(cd), i))}")
        (("1" (assert)
          (("1" (hide 2)
            (("1" (expand "subset?")
              (("1" (skeep)
                (("1" (expand "member")
                  (("1" (skeep)
                    (("1" (split 1)
                      (("1" (inst?) nil nil) ("2" (inst?) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (grind) (("2" (typepred "cd") (("2" (grind) nil nil)) nil))
            nil))
          nil)
         ("3" (hide 2) (("3" (typepred "cd") (("3" (grind) nil nil)) nil))
          nil)
         ("4" (hide 2) (("4" (typepred "cd") (("4" (grind) nil nil)) nil))
          nil)
         ("5" (hide 2)
          (("5"
            (lemma "finite_full[({u: [T,T] |
                          (EXISTS (i: below(size(cd))): nth[T](data(cd), i) = u`1) AND
                           (EXISTS (j: below(size(cd))): nth[T](data(cd), j) = u`2)})]")
            (("1" (assert)
              (("1" (flatten)
                (("1" (hide -2)
                  (("1" (split -1)
                    (("1" (grind) nil nil)
                     ("2" (hide 2)
                      (("2"
                        (lemma
                         "is_finite_cross[({u1:T|EXISTS (i: below(size(cd))):
                                                nth[T](data(cd), i) = u1}),({u2:T|EXISTS (j: below(size(cd))):
                                                nth[T](data(cd), j) = u2})]")
                        (("1" (split -1)
                          (("1" (expand "is_finite_type")
                            (("1" (skeep -1)
                              (("1"
                                (inst 1 "N" "LAMBDA(u:[T,T]|
                                                   (EXISTS (i: below(size(cd))):
                                                      nth[T](data(cd), i) = u`1)
                                                    AND
                                                    (EXISTS (j: below(size(cd))):
                                                       nth[T](data(cd), j) = u`2)): g(u)")
                                (("1" (grind) nil nil) ("2" (grind) nil nil)
                                 ("3" (grind) nil nil) ("4" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (expand "is_finite_type")
                              (("2" (case "size(cd)=0")
                                (("1"
                                  (inst 1 "1" "LAMBDA(u:({u1: T |
                                               EXISTS (i: below(size(cd))):
                                                 nth[T](data(cd), i) = u1})): 0")
                                  (("1" (grind) nil nil)
                                   ("2" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (inst 2 "size(cd)" "LAMBDA(u1:
                                                     [{u1: T |
                                                               EXISTS (i: below(size(cd))):
                                                                 nth[T](data(cd), i) = u1}]) : epsilon({i: below(size(cd)) |
                                                                 nth[T](data(cd), i) = u1})")
                                  (("1" (expand "injective?")
                                    (("1" (skeep)
                                      (("1"
                                        (lemma "epsilon_ax[below(size(cd))]")
                                        (("1"
                                          (inst-cp
                                           -1
                                           "LAMBDA(i: below(size(cd))): nth[T](data(cd), i) = x1")
                                          (("1"
                                            (split -2)
                                            (("1"
                                              (replace -1 2 :hide? t :dir rl)
                                              (("1"
                                                (inst
                                                 -1
                                                 "LAMBDA(i: below(size(cd))): nth[T](data(cd), i) = x2")
                                                (("1"
                                                  (split -1)
                                                  (("1"
                                                    (replace
                                                     -1
                                                     2
                                                     :hide?
                                                     t
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (name-replace
                                                       "e1"
                                                       "epsilon({i: below(size(cd)) | nth[T](data(cd), i) = x1})")
                                                      (("1"
                                                        (name-replace
                                                         "e2"
                                                         "epsilon({i: below(size(cd)) | nth[T](data(cd), i) = x2})")
                                                        (("1"
                                                          (typepred "cd")
                                                          (("1"
                                                            (expand
                                                             "cdigraph")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (expand
                                                                 "no_repetitions?")
                                                                (("1"
                                                                  (inst
                                                                   -3
                                                                   "e1"
                                                                   "e2")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2" (grind) nil nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "x2")
                                                    (("2" (propax) nil nil))
                                                    nil))
                                                  nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred "x1")
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil)
                                         ("2"
                                          (inst 1 "0")
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil) ("3" (grind) nil nil)
                                   ("4" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide 2)
                            (("3" (expand "is_finite_type")
                              (("3" (case "size(cd)=0")
                                (("1"
                                  (inst 1 "1" "LAMBDA(u:({u1: T |
                                                         EXISTS (i: below(size(cd))):
                                                           nth[T](data(cd), i) = u1})): 0")
                                  (("1" (grind) nil nil)
                                   ("2" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (inst 2 "size(cd)" "LAMBDA(u1:
                                                               [{u1: T |
                                                                         EXISTS (i: below(size(cd))):
                                                                           nth[T](data(cd), i) = u1}]) : epsilon({i: below(size(cd)) |
                                                                           nth[T](data(cd), i) = u1})")
                                  (("1" (expand "injective?")
                                    (("1" (skeep)
                                      (("1"
                                        (lemma "epsilon_ax[below(size(cd))]")
                                        (("1"
                                          (inst-cp
                                           -1
                                           "LAMBDA(i: below(size(cd))): nth[T](data(cd), i) = x1")
                                          (("1"
                                            (split -2)
                                            (("1"
                                              (replace -1 2 :hide? t :dir rl)
                                              (("1"
                                                (inst
                                                 -1
                                                 "LAMBDA(i: below(size(cd))): nth[T](data(cd), i) = x2")
                                                (("1"
                                                  (split -1)
                                                  (("1"
                                                    (replace
                                                     -1
                                                     2
                                                     :hide?
                                                     t
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (name-replace
                                                       "e1"
                                                       "epsilon({i: below(size(cd)) | nth[T](data(cd), i) = x1})")
                                                      (("1"
                                                        (name-replace
                                                         "e2"
                                                         "epsilon({i: below(size(cd)) | nth[T](data(cd), i) = x2})")
                                                        (("1"
                                                          (typepred "cd")
                                                          (("1"
                                                            (expand
                                                             "cdigraph")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (expand
                                                                 "no_repetitions?")
                                                                (("1"
                                                                  (inst
                                                                   -3
                                                                   "e1"
                                                                   "e2")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2" (grind) nil nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "x2")
                                                    (("2" (propax) nil nil))
                                                    nil))
                                                  nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred "x1")
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil)
                                         ("2"
                                          (inst 1 "0")
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil) ("3" (grind) nil nil)
                                   ("4" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil) ("3" (grind) nil nil))
            nil))
          nil)
         ("6" (grind) nil nil) ("7" (grind) nil nil))
        nil))
      nil))
    nil)
   ((finite_subset formula-decl nil finite_sets nil)
    (T formal-type-decl nil c_digraphs_digraphs nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (cd skolem-const-decl "(cdigraph[T])" c_digraphs_digraphs nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (size const-decl "nat" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (nth def-decl "T" list_props nil) (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (member def-decl "bool" list_props nil)
    (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (/= const-decl "boolean" notequal nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (injective? const-decl "bool" functions nil)
    (fullset const-decl "set" sets nil)
    (epsilon_ax formula-decl nil epsilons nil)
    (pred type-eq-decl nil defined_types nil)
    (epsilon const-decl "T" epsilons nil)
    (is_finite_type const-decl "bool" finite_sets nil)
    (is_finite_cross formula-decl nil finite_cross finite_sets)
    (finite_full formula-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (to_digraph subtype
    "{(u, v: c_digraphs_digraphs.T) | EXISTS (i, j: naturalnumbers.below(c_digraphs_def[c_digraphs_digraphs.T].size(c_digraphs_digraphs.cd))): booleans.AND(list_props[c_digraphs_digraphs.T].nth(data(c_digraphs_digraphs.cd), i) = u, booleans.AND(list_props[c_digraphs_digraphs.T].nth(data(c_digraphs_digraphs.cd), j) = v, list_props[nat].member(j, list_props[list[nat]].nth(adjs(c_digraphs_digraphs.cd), i))))}"
    "finite_set[[T, T]]"))
  (to_digraph_TCC4-1 nil 3655633029 ("" (grind) nil nil)
   ((no_repetitions? const-decl "bool" more_list_props structures)) nil
   (to_digraph subtype
    "{(u, v: c_digraphs_digraphs.T) | EXISTS (i, j: naturalnumbers.below(c_digraphs_def[c_digraphs_digraphs.T].size(c_digraphs_digraphs.cd))): booleans.AND(list_props[c_digraphs_digraphs.T].nth(data(c_digraphs_digraphs.cd), i) = u, booleans.AND(list_props[c_digraphs_digraphs.T].nth(data(c_digraphs_digraphs.cd), j) = v, list_props[nat].member(j, list_props[list[nat]].nth(adjs(c_digraphs_digraphs.cd), i))))}"
    "finite_set[[T, T]]")))
 (to_digraph_TCC5 0
  (to_digraph_TCC5-1 nil 3656086108 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil c_digraphs_digraphs nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (< const-decl "bool" reals nil) (size const-decl "nat" c_digraphs_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (/= const-decl "boolean" notequal nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil))
   nil
   (to_digraph subtype "c_digraphs_digraphs.i" "below[length[T](data(cd))]")))
 (to_digraph_TCC6 0
  (to_digraph_TCC6-3 "" 3790101739
   ("" (skeep)
    (("" (expand "is_finite")
      (("" (case "size(cd)=0")
        (("1"
          (inst 1 "1" "LAMBDA(u:({u1: T |
                                         EXISTS (i: below(size(cd))):
                                           nth[T](data(cd), i) = u1})): 0")
          (("1" (grind) nil nil) ("2" (skeep*) (("2" (assert) nil nil)) nil))
          nil)
         ("2"
          (inst 2 "size(cd)" "LAMBDA(u1:
                                               [{u1: T |
                                                         EXISTS (i: below(size(cd))):
                                                           nth[T](data(cd), i) = u1}]) : epsilon({i: below(size(cd)) |
                                                           nth[T](data(cd), i) = u1})")
          (("1" (expand "injective?")
            (("1" (skeep)
              (("1" (lemma "epsilon_ax[below(size(cd))]")
                (("1"
                  (inst-cp -1
                   "LAMBDA(i: below(size(cd))): nth[T](data(cd), i) = x1")
                  (("1" (split -2)
                    (("1" (replace -1 2 :hide? t :dir rl)
                      (("1"
                        (inst -1
                         "LAMBDA(i: below(size(cd))): nth[T](data(cd), i) = x2")
                        (("1" (split -1)
                          (("1" (replace -1 2 :hide? t :dir rl)
                            (("1"
                              (name-replace "e1"
                               "epsilon({i: below(size(cd)) | nth[T](data(cd), i) = x1})")
                              (("1"
                                (name-replace "e2"
                                 "epsilon({i: below(size(cd)) | nth[T](data(cd), i) = x2})")
                                (("1" (typepred "cd")
                                  (("1" (expand "cdigraph")
                                    (("1" (flatten)
                                      (("1"
                                        (expand "no_repetitions?")
                                        (("1"
                                          (inst -3 "e1" "e2")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (typepred "x2") (("2" (propax) nil nil)) nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil)
                     ("2" (typepred "x1") (("2" (propax) nil nil)) nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil)
                 ("2" (inst 1 "0") (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((is_finite const-decl "bool" finite_sets nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (size const-decl "nat" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-type-decl nil c_digraphs_digraphs nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (cd skolem-const-decl "(cdigraph[T])" c_digraphs_digraphs nil)
    (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (injective? const-decl "bool" functions nil)
    (TRUE const-decl "bool" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (epsilon const-decl "T" epsilons nil)
    (epsilon_ax formula-decl nil epsilons nil)
    (no_repetitions? const-decl "bool" more_list_props structures))
   shostak
   (to_digraph subtype
    "{v: c_digraphs_digraphs.T | EXISTS (i: naturalnumbers.below(c_digraphs_def[c_digraphs_digraphs.T].size(c_digraphs_digraphs.cd))): list_props[c_digraphs_digraphs.T].nth(data(c_digraphs_digraphs.cd), i) = v}"
    "finite_set[T]"))
  (to_digraph_TCC6-2 nil 3656096938
   ("" (skeep)
    (("" (expand "is_finite")
      (("" (case "size(cd)=0")
        (("1"
          (inst 1 "1" "LAMBDA(u:({u1: T |
                                         EXISTS (i: below(size(cd))):
                                           nth[T](data(cd), i) = u1})): 0")
          (("1" (grind) nil nil)) nil)
         ("2"
          (inst 2 "size(cd)" "LAMBDA(u1:
                                               [{u1: T |
                                                         EXISTS (i: below(size(cd))):
                                                           nth[T](data(cd), i) = u1}]) : epsilon({i: below(size(cd)) |
                                                           nth[T](data(cd), i) = u1})")
          (("1" (expand "injective?")
            (("1" (skeep)
              (("1" (lemma "epsilon_ax[below(size(cd))]")
                (("1"
                  (inst-cp -1
                   "LAMBDA(i: below(size(cd))): nth[T](data(cd), i) = x1")
                  (("1" (split -2)
                    (("1" (replace -1 2 :hide? t :dir rl)
                      (("1"
                        (inst -1
                         "LAMBDA(i: below(size(cd))): nth[T](data(cd), i) = x2")
                        (("1" (split -1)
                          (("1" (replace -1 2 :hide? t :dir rl)
                            (("1"
                              (name-replace "e1"
                               "epsilon({i: below(size(cd)) | nth[T](data(cd), i) = x1})")
                              (("1"
                                (name-replace "e2"
                                 "epsilon({i: below(size(cd)) | nth[T](data(cd), i) = x2})")
                                (("1" (typepred "cd")
                                  (("1" (expand "cdigraph")
                                    (("1" (flatten)
                                      (("1"
                                        (expand "no_repetitions?")
                                        (("1"
                                          (inst -3 "e1" "e2")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (typepred "x2") (("2" (propax) nil nil)) nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil)
                     ("2" (typepred "x1") (("2" (propax) nil nil)) nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil)
                 ("2" (inst 1 "0") (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((is_finite const-decl "bool" finite_sets nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (size const-decl "nat" c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil))
   nil
   (to_digraph subtype
    "{v: c_digraphs_digraphs.T | EXISTS (i: naturalnumbers.below(c_digraphs_def[c_digraphs_digraphs.T].size(c_digraphs_digraphs.cd))): list_props[c_digraphs_digraphs.T].nth(data(c_digraphs_digraphs.cd), i) = v}"
    "finite_set[T]"))
  (to_digraph_TCC6-1 nil 3656086488
   ("" (skeep*)
    (("" (split 1)
      (("1" (grind) nil nil)
       ("2" (expand "eq")
        (("2" (split 1)
          (("1" (typepred "set_as_list.list2set(data(cd))")
            (("1" (replace -2 :hide? t)
              (("1" (apply-extensionality 1)
                (("1" (hide 2)
                  (("1" (iff)
                    (("1" (split 1)
                      (("1" (flatten)
                        (("1" (use "member_nth[T]")
                          (("1" (assert)
                            (("1" (skeep)
                              (("1" (inst 1 "i") (("1" (grind) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (skeep)
                          (("2" (use "nth_member[T]") (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil))
                nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (split 1)
              (("1" (flatten) (("1" (grind) nil nil)) nil)
               ("2" (flatten)
                (("2" (expand "member" -1 1)
                  (("2" (skeep)
                    (("2" (case "j=j_1")
                      (("1" (case "i=i_1")
                        (("1" (assert) nil nil)
                         ("2" (hide-all-but (-2 1))
                          (("2" (typepred "cd")
                            (("2" (expand "cdigraph")
                              (("2" (flatten)
                                (("2" (expand "no_repetitions?")
                                  (("2" (inst -3 "i" "i_1")
                                    (("2" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but (1 -2))
                        (("2" (typepred "cd")
                          (("2" (expand "cdigraph")
                            (("2" (flatten)
                              (("2" (expand "no_repetitions?")
                                (("2" (inst -3 "j" "j_1")
                                  (("2" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member_nth formula-decl nil more_list_props structures)
    (nth_member formula-decl nil more_list_props structures)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (list2set def-decl "{s: finite_set[T] | s = {x | member(x, l)}}"
     set_as_list structures)
    (no_repetitions? const-decl "bool" more_list_props structures))
   nil
   (to_digraph subtype
    "{v: c_digraphs_digraphs.T | EXISTS (i: naturalnumbers.below(c_digraphs_def[c_digraphs_digraphs.T].size(c_digraphs_digraphs.cd))): list_props[c_digraphs_digraphs.T].nth(data(c_digraphs_digraphs.cd), i) = v}"
    "finite_set[T]")))
 (to_digraph_TCC7 0
  (to_digraph_TCC7-3 nil 3656096919
   ("" (skeep*)
    (("" (split 1)
      (("1" (grind) nil nil)
       ("2" (expand "eq")
        (("2" (split 1)
          (("1" (typepred "set_as_list.list2set(data(cd))")
            (("1" (replace -2 :hide? t)
              (("1" (apply-extensionality 1)
                (("1" (hide 2)
                  (("1" (iff)
                    (("1" (split 1)
                      (("1" (flatten)
                        (("1" (use "member_nth[T]")
                          (("1" (assert)
                            (("1" (skeep)
                              (("1" (inst 1 "i") (("1" (grind) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (skeep)
                          (("2" (use "nth_member[T]") (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil))
                nil))
              nil))
            nil)
           ("2" (skeep*)
            (("2" (split 1)
              (("1" (flatten) (("1" (grind) nil nil)) nil)
               ("2" (flatten)
                (("2" (expand "member" -1 1)
                  (("2" (skeep)
                    (("2" (case "j=j_1")
                      (("1" (case "i=i_1")
                        (("1" (assert) nil nil)
                         ("2" (hide-all-but (-2 1))
                          (("2" (typepred "cd")
                            (("2" (expand "cdigraph")
                              (("2" (flatten)
                                (("2" (expand "no_repetitions?")
                                  (("2" (inst -3 "i" "i_1")
                                    (("2" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but (1 -2))
                        (("2" (typepred "cd")
                          (("2" (expand "cdigraph")
                            (("2" (flatten)
                              (("2" (expand "no_repetitions?")
                                (("2" (inst -3 "j" "j_1")
                                  (("2" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((eq const-decl "bool" c_digraphs_digraphs nil)
    (below type-eq-decl nil nat_types nil) (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (cd skolem-const-decl "(cdigraph[T])" c_digraphs_digraphs nil)
    (member_nth formula-decl nil more_list_props structures)
    (i skolem-const-decl "below(length(data(cd)))" c_digraphs_digraphs nil)
    (nth_member formula-decl nil more_list_props structures)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (injective? const-decl "bool" functions nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (member def-decl "bool" list_props nil)
    (list2set def-decl "{s: finite_set[T] | s = {x | member(x, l)}}"
     set_as_list structures)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (member const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-type-decl nil c_digraphs_digraphs nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (size const-decl "nat" c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (to_digraph subtype
    "(# vert := {v: c_digraphs_digraphs.T | EXISTS (i: naturalnumbers.below(c_digraphs_def[c_digraphs_digraphs.T].size(c_digraphs_digraphs.cd))): list_props[c_digraphs_digraphs.T].nth(data(c_digraphs_digraphs.cd), i) = v}, edges := {(u, v: c_digraphs_digraphs.T) | EXISTS (i, j: naturalnumbers.below(c_digraphs_def[c_digraphs_digraphs.T].size(c_digraphs_digraphs.cd))): booleans.AND(list_props[c_digraphs_digraphs.T].nth(data(c_digraphs_digraphs.cd), i) = u, booleans.AND(list_props[c_digraphs_digraphs.T].nth(data(c_digraphs_digraphs.cd), j) = v, list_props[nat].member(j, list_props[list[nat]].nth(adjs(c_digraphs_digraphs.cd), i))))} #)"
    "c_digraphs_digraphs.digraph_eq(c_digraphs_digraphs.cd)"))
  (to_digraph_TCC7-2 nil 3656096769
   ("" (skeep*)
    (("" (lemma "finite_subset[[T,T]]")
      ((""
        (inst -1 "{u: T, v: T |
                  (EXISTS (i: below(size(cd))): nth[T](data(cd), i) = u) AND
                  (EXISTS (j: below(size(cd))): nth[T](data(cd), j) = v)}"
         "{u: T, v: T |
                  EXISTS (i, j: below(size(cd))):
                    nth[T](data(cd), i) = u AND
                     nth[T](data(cd), j) = v AND
                      member[nat](j, nth[list[nat]](adjs(cd), i))}")
        (("1" (assert)
          (("1" (hide 2)
            (("1" (expand "subset?")
              (("1" (skeep)
                (("1" (expand "member")
                  (("1" (skeep)
                    (("1" (split 1)
                      (("1" (inst?) nil) ("2" (inst?) nil)))))))))))))))
         ("2" (hide 2)
          (("2" (grind) (("2" (typepred "cd") (("2" (grind) nil)))))))
         ("3" (hide 2) (("3" (typepred "cd") (("3" (grind) nil)))))
         ("4" (hide 2) (("4" (typepred "cd") (("4" (grind) nil)))))
         ("5" (hide 2)
          (("5"
            (lemma "finite_full[({u: [T,T] |
                      (EXISTS (i: below(size(cd))): nth[T](data(cd), i) = u`1) AND
                       (EXISTS (j: below(size(cd))): nth[T](data(cd), j) = u`2)})]")
            (("5" (assert)
              (("5" (flatten)
                (("5" (hide -2)
                  (("5" (split -1)
                    (("1" (grind) nil)
                     ("2" (hide 2)
                      (("2"
                        (lemma
                         "is_finite_cross[({u1:T|EXISTS (i: below(size(cd))):
                                          nth[T](data(cd), i) = u1}),({u2:T|EXISTS (j: below(size(cd))):
                                          nth[T](data(cd), j) = u2})]")
                        (("2" (split -1)
                          (("1" (expand "is_finite_type")
                            (("1" (skeep -1)
                              (("1"
                                (inst 1 "N" "LAMBDA(u:[T,T]|
                                           (EXISTS (i: below(size(cd))):
                                              nth[T](data(cd), i) = u`1)
                                            AND
                                            (EXISTS (j: below(size(cd))):
                                               nth[T](data(cd), j) = u`2)): g(u)")
                                (("1" (grind) nil) ("2" (grind) nil)
                                 ("3" (grind) nil) ("4" (grind) nil)))))))
                           ("2" (hide 2)
                            (("2" (expand "is_finite_type")
                              (("2" (case "size(cd)=0")
                                (("1"
                                  (inst 1 "1" "LAMBDA(u:({u1: T |
                                     EXISTS (i: below(size(cd))):
                                       nth[T](data(cd), i) = u1})): 0")
                                  (("1" (grind) nil)))
                                 ("2"
                                  (inst 2 "size(cd)" "LAMBDA(u1:
                                           [{u1: T |
                                                     EXISTS (i: below(size(cd))):
                                                       nth[T](data(cd), i) = u1}]) : epsilon({i: below(size(cd)) |
                                                       nth[T](data(cd), i) = u1})")
                                  (("1" (expand "injective?")
                                    (("1" (skeep)
                                      (("1"
                                        (lemma "epsilon_ax[below(size(cd))]")
                                        (("1"
                                          (inst-cp
                                           -1
                                           "LAMBDA(i: below(size(cd))): nth[T](data(cd), i) = x1")
                                          (("1"
                                            (split -2)
                                            (("1"
                                              (replace -1 2 :hide? t :dir rl)
                                              (("1"
                                                (inst
                                                 -1
                                                 "LAMBDA(i: below(size(cd))): nth[T](data(cd), i) = x2")
                                                (("1"
                                                  (split -1)
                                                  (("1"
                                                    (replace
                                                     -1
                                                     2
                                                     :hide?
                                                     t
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (name-replace
                                                       "e1"
                                                       "epsilon({i: below(size(cd)) | nth[T](data(cd), i) = x1})")
                                                      (("1"
                                                        (name-replace
                                                         "e2"
                                                         "epsilon({i: below(size(cd)) | nth[T](data(cd), i) = x2})")
                                                        (("1"
                                                          (typepred "cd")
                                                          (("1"
                                                            (expand
                                                             "cdigraph")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (expand
                                                                 "no_repetitions?")
                                                                (("1"
                                                                  (inst
                                                                   -3
                                                                   "e1"
                                                                   "e2")
                                                                  (("1"
                                                                    (assert)
                                                                    nil)))))))))))
                                                         ("2" (grind) nil)))
                                                       ("2" (grind) nil)))))
                                                   ("2"
                                                    (typepred "x2")
                                                    (("2" (propax) nil)))))
                                                 ("2" (grind) nil)))))
                                             ("2"
                                              (typepred "x1")
                                              (("2" (propax) nil)))))
                                           ("2" (grind) nil)))
                                         ("2"
                                          (inst 1 "0")
                                          (("2" (grind) nil)))))))))
                                   ("2" (grind) nil) ("3" (grind) nil)
                                   ("4" (grind) nil)))))))))
                           ("3" (hide 2)
                            (("3" (expand "is_finite_type")
                              (("3" (case "size(cd)=0")
                                (("1"
                                  (inst 1 "1" "LAMBDA(u:({u1: T |
                                               EXISTS (i: below(size(cd))):
                                                 nth[T](data(cd), i) = u1})): 0")
                                  (("1" (grind) nil)))
                                 ("2"
                                  (inst 2 "size(cd)" "LAMBDA(u1:
                                                     [{u1: T |
                                                               EXISTS (i: below(size(cd))):
                                                                 nth[T](data(cd), i) = u1}]) : epsilon({i: below(size(cd)) |
                                                                 nth[T](data(cd), i) = u1})")
                                  (("1" (expand "injective?")
                                    (("1" (skeep)
                                      (("1"
                                        (lemma "epsilon_ax[below(size(cd))]")
                                        (("1"
                                          (inst-cp
                                           -1
                                           "LAMBDA(i: below(size(cd))): nth[T](data(cd), i) = x1")
                                          (("1"
                                            (split -2)
                                            (("1"
                                              (replace -1 2 :hide? t :dir rl)
                                              (("1"
                                                (inst
                                                 -1
                                                 "LAMBDA(i: below(size(cd))): nth[T](data(cd), i) = x2")
                                                (("1"
                                                  (split -1)
                                                  (("1"
                                                    (replace
                                                     -1
                                                     2
                                                     :hide?
                                                     t
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (name-replace
                                                       "e1"
                                                       "epsilon({i: below(size(cd)) | nth[T](data(cd), i) = x1})")
                                                      (("1"
                                                        (name-replace
                                                         "e2"
                                                         "epsilon({i: below(size(cd)) | nth[T](data(cd), i) = x2})")
                                                        (("1"
                                                          (typepred "cd")
                                                          (("1"
                                                            (expand
                                                             "cdigraph")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (expand
                                                                 "no_repetitions?")
                                                                (("1"
                                                                  (inst
                                                                   -3
                                                                   "e1"
                                                                   "e2")
                                                                  (("1"
                                                                    (assert)
                                                                    nil)))))))))))
                                                         ("2" (grind) nil)))
                                                       ("2" (grind) nil)))))
                                                   ("2"
                                                    (typepred "x2")
                                                    (("2" (propax) nil)))))
                                                 ("2" (grind) nil)))))
                                             ("2"
                                              (typepred "x1")
                                              (("2" (propax) nil)))))
                                           ("2" (grind) nil)))
                                         ("2"
                                          (inst 1 "0")
                                          (("2" (grind) nil)))))))))
                                   ("2" (grind) nil) ("3" (grind) nil)
                                   ("4" (grind) nil)))))))))))))))))))))))))))
         ("6" (hide 2) (("6" (grind) nil))) ("7" (grind) nil))))))
    nil)
   nil nil
   (to_digraph subtype
    "(# vert := {v: c_digraphs_digraphs.T | EXISTS (i: naturalnumbers.below(c_digraphs_def[c_digraphs_digraphs.T].size(c_digraphs_digraphs.cd))): list_props[c_digraphs_digraphs.T].nth(data(c_digraphs_digraphs.cd), i) = v}, edges := {(u, v: c_digraphs_digraphs.T) | EXISTS (i, j: naturalnumbers.below(c_digraphs_def[c_digraphs_digraphs.T].size(c_digraphs_digraphs.cd))): booleans.AND(list_props[c_digraphs_digraphs.T].nth(data(c_digraphs_digraphs.cd), i) = u, booleans.AND(list_props[c_digraphs_digraphs.T].nth(data(c_digraphs_digraphs.cd), j) = v, list_props[nat].member(j, list_props[list[nat]].nth(adjs(c_digraphs_digraphs.cd), i))))} #)"
    "c_digraphs_digraphs.digraph_eq(c_digraphs_digraphs.cd)"))
  (to_digraph_TCC7-1 nil 3656096457 ("" (subtype-tcc) nil nil) nil nil
   (to_digraph subtype
    "(# vert := {v: c_digraphs_digraphs.T | EXISTS (i: naturalnumbers.below(c_digraphs_def[c_digraphs_digraphs.T].size(c_digraphs_digraphs.cd))): list_props[c_digraphs_digraphs.T].nth(data(c_digraphs_digraphs.cd), i) = v}, edges := {(u, v: c_digraphs_digraphs.T) | EXISTS (i, j: naturalnumbers.below(c_digraphs_def[c_digraphs_digraphs.T].size(c_digraphs_digraphs.cd))): booleans.AND(list_props[c_digraphs_digraphs.T].nth(data(c_digraphs_digraphs.cd), i) = u, booleans.AND(list_props[c_digraphs_digraphs.T].nth(data(c_digraphs_digraphs.cd), j) = v, list_props[nat].member(j, list_props[list[nat]].nth(adjs(c_digraphs_digraphs.cd), i))))} #)"
    "c_digraphs_digraphs.digraph_eq(c_digraphs_digraphs.cd)")))
 (no_rep_vertsl 0
  (no_rep_vertsl-2 "" 3656768292
   ("" (skeep)
    (("" (typepred "l")
      (("" (expand "vertsl?")
        (("" (flatten)
          (("" (use "same_size_eq_no_rep")
            (("" (assert)
              (("" (hide 2)
                (("" (expand "size")
                  (("" (inst 1 "vert(G)") (("" (grind) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((vertsl? const-decl "bool" c_digraphs_digraphs nil)
    (list type-decl nil list_adt nil)
    (digraph type-eq-decl nil digraph_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (T formal-type-decl nil c_digraphs_digraphs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (size const-decl "nat" digraph_def nil)
    (member const-decl "bool" sets nil)
    (set_list_eq const-decl "bool" set_as_list structures)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (same_size_eq_no_rep formula-decl nil set_as_list_props structures))
   shostak)
  (no_rep_vertsl-1 nil 3656331295
   ("" (skeep)
    (("" (typepred "l")
      (("" (expand "vertsl?")
        (("" (flatten)
          (("" (use "same_size_eq_no_rep")
            (("" (assert)
              (("" (hide 2)
                (("" (skeep)
                  (("" (expand "set_list_eq")
                    (("" (expand "size")
                      (("" (case "vert(G)=A")
                        (("1" (assert) nil nil)
                         ("2" (hide 2 -3)
                          (("2" (apply-extensionality 1)
                            (("2" (hide 2)
                              (("2" (inst -1 "x!1")
                                (("2" (replace -1 :dir rl :hide? t)
                                  (("2" (inst -1 "x!1")
                                    (("2" (grind) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_set type-eq-decl nil finite_sets nil)
    (set_list_eq const-decl "bool" set_as_list structures)
    (is_finite const-decl "bool" finite_sets nil))
   shostak))
 (vertsl_TCC1 0
  (vertsl_TCC1-1 nil 3656324415
   ("" (skeep)
    (("" (expand "vertsl?")
      (("" (typepred "set2list[T](vert(G))")
        (("" (expand "size")
          (("" (assert)
            (("" (skeep) (("" (inst?) (("" (grind) nil nil)) nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((vertsl? const-decl "bool" c_digraphs_digraphs nil)
    (size const-decl "nat" digraph_def nil)
    (empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (T formal-type-decl nil c_digraphs_digraphs nil)
    (list type-decl nil list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (set2list def-decl
     "{l: list[T] | length(l) = card(s) AND FORALL (x: T): s(x) IFF member(x, l)}"
     set_as_list structures)
    (predigraph type-eq-decl nil digraph_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (digraph type-eq-decl nil digraph_def nil))
   nil
   (vertsl subtype
    "set_as_list[c_digraphs_digraphs.T].set2list(vert(c_digraphs_digraphs.G))"
    "(c_digraphs_digraphs.vertsl?(c_digraphs_digraphs.G))")))
 (to_cdigraph_vl_TCC1 0
  (to_cdigraph_vl_TCC1-1 nil 3659367046
   ("" (skeep)
    (("" (use "no_rep_vertsl")
      (("" (assert)
        (("" (skeep)
          (("" (typepred "G")
            (("" (inst?)
              (("" (assert)
                (("" (assert)
                  (("" (flatten)
                    (("" (typepred "vl")
                      (("" (expand "vertsl?")
                        (("" (flatten)
                          (("" (inst-cp -1 "x")
                            (("" (inst -1 "y")
                              (("" (expand "member" -1 2)
                                (("" (expand "member" -2 2)
                                  (("" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((no_rep_vertsl formula-decl nil c_digraphs_digraphs nil)
    (vertsl? const-decl "bool" c_digraphs_digraphs nil)
    (list type-decl nil list_adt nil)
    (digraph type-eq-decl nil digraph_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (T formal-type-decl nil c_digraphs_digraphs nil)
    (member const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   nil
   (to_cdigraph_vl subtype "c_digraphs_digraphs.vl"
    "{vertsl: (more_list_props[c_digraphs_digraphs.T].no_repetitions?) | FORALL (x, y: c_digraphs_digraphs.T): booleans.IMPLIES(edges(c_digraphs_digraphs.G)(x, y), booleans.AND(list_props[c_digraphs_digraphs.T].member(x, vertsl), list_props[c_digraphs_digraphs.T].member(y, vertsl)))}")))
 (to_cdigraph_vl_TCC2 0
  (to_cdigraph_vl_TCC2-1 nil 3659367046
   ("" (skeep)
    (("" (split 1)
      (("1" (expand "cdigraph")
        (("1" (split 1)
          (("1" (typepred "edges_set_to_list(edges(G), vl)")
            (("1" (assert) nil nil)) nil)
           ("2" (expand "list_of_idxs")
            (("2" (expand "size")
              (("2" (typepred "edges_set_to_list(edges(G), vl)")
                (("1" (skeep* 1) (("1" (inst -4 "i" "i_1") nil nil)) nil)
                 ("2" (hide 2)
                  (("2" (use "no_rep_vertsl")
                    (("2" (assert)
                      (("2" (skeep)
                        (("2" (typepred "G")
                          (("2" (inst?)
                            (("2" (assert)
                              (("2" (typepred "vl")
                                (("2" (expand "vertsl?")
                                  (("2" (flatten)
                                    (("2" (inst-cp -1 "x")
                                      (("2"
                                        (inst -1 "y")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "member" -1 2)
                                            (("2"
                                              (expand "member" -2 2)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (use "no_rep_vertsl") nil nil)
           ("4" (skeep)
            (("4" (typepred "edges_set_to_list(edges(G), vl)")
              (("4" (inst? -5) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (expand "eq")
        (("2" (split 1)
          (("1" (typepred "vl")
            (("1" (expand "vertsl?")
              (("1" (flatten)
                (("1" (typepred "list2set(vl)")
                  (("1" (replace -2 :hide? t)
                    (("1" (apply-extensionality 1)
                      (("1" (hide 2)
                        (("1" (inst -2 "x!1")
                          (("1" (replace -2 :hide? t) (("1" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (typepred "edges_set_to_list(edges(G), vl)")
            (("1" (skeep*) (("1" (inst -3 "i" "j") nil nil)) nil)
             ("2" (hide 2)
              (("2" (use "no_rep_vertsl")
                (("2" (assert)
                  (("2" (skeep)
                    (("2" (typepred "G")
                      (("2" (inst?)
                        (("2" (assert)
                          (("2" (flatten)
                            (("2" (typepred "vl")
                              (("2" (expand "vertsl?")
                                (("2" (flatten)
                                  (("2" (inst-cp -1 "x")
                                    (("2" (inst -1 "y")
                                      (("2"
                                        (expand "member" -1 2)
                                        (("2"
                                          (expand "member" -2 2)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((eq const-decl "bool" c_digraphs_digraphs nil)
    (list2set def-decl "{s: finite_set[T] | s = {x | member(x, l)}}"
     set_as_list structures)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (T formal-type-decl nil c_digraphs_digraphs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member def-decl "bool" list_props nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil) (nth def-decl "T" list_props nil)
    (member const-decl "bool" sets nil)
    (edges_set_to_list const-decl "{adjs: list[list[nat]] |
   length(adjs) = length(vertsl) AND
    (FORALL (i, j: below(length(vertsl))):
       member(j, nth(adjs, i)) IFF
        LET vi = nth(vertsl, i), vj = nth(vertsl, j) IN
          member((vi, vj), edges_G))
     AND
     (FORALL (i: below(length(adjs)), j: below(length(nth(adjs, i)))):
        nth(nth(adjs, i), j) < length(vertsl))
      AND (FORALL (i: below(length(adjs))): no_repetitions?(nth(adjs, i)))}"
     c_digraphs_def nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (digraph type-eq-decl nil digraph_def nil)
    (vertsl? const-decl "bool" c_digraphs_digraphs nil)
    (size const-decl "nat" c_digraphs_def nil)
    (TRUE const-decl "bool" booleans nil)
    (no_rep_vertsl formula-decl nil c_digraphs_digraphs nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil))
   nil
   (to_cdigraph_vl subtype
    "(# data := c_digraphs_digraphs.vl, adjs := c_digraphs_def[c_digraphs_digraphs.T].edges_set_to_list(edges(c_digraphs_digraphs.G), c_digraphs_digraphs.vl) #)"
    "{cd: c_digraphs_digraphs.cdigraph_eq(c_digraphs_digraphs.G) | data(cd) = c_digraphs_digraphs.vl}")))
 (eq_digraph 0
  (eq_digraph-1 nil 3656097016
   ("" (skeep)
    (("" (expand "eq")
      (("" (flatten)
        (("" (expand "to_digraph")
          (("" (decompose-equality 1)
            (("1" (typepred "set_as_list.list2set(data(cd))")
              (("1" (replace -2 :hide? t)
                (("1" (apply-extensionality 1)
                  (("1" (hide 2)
                    (("1" (decompose-equality -2)
                      (("1" (iff)
                        (("1" (split 1)
                          (("1" (flatten)
                            (("1" (skeep)
                              (("1" (inst -6 "i" "j")
                                (("1" (assert)
                                  (("1" (expand "member")
                                    (("1" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (typepred "G")
                              (("2" (inst? -1)
                                (("2" (assert)
                                  (("2" (flatten)
                                    (("2" (inst-cp -4 "x!1")
                                      (("2"
                                        (inst-cp -4 "x!2")
                                        (("2"
                                          (lemma "member_nth[T]")
                                          (("2"
                                            (inst-cp -1 "data(cd)" "x!1")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (inst -1 "data(cd)" "x!2")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (skeep -1)
                                                    (("2"
                                                      (skeep -2)
                                                      (("2"
                                                        (inst 1 "i!1" "i")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (inst
                                                             -10
                                                             "i!1"
                                                             "i")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "member")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2" (grind) nil nil)
                                                         ("3"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (typepred "cd") (("2" (grind) nil nil)) nil)
                   ("3" (grind) nil nil) ("4" (grind) nil nil))
                  nil))
                nil))
              nil)
             ("2" (typepred "set_as_list.list2set(data(cd))")
              (("2" (replace -2 :hide? t)
                (("2" (decompose-equality -2)
                  (("2" (apply-extensionality 1)
                    (("1" (hide 2)
                      (("1" (inst -1 "x!1")
                        (("1" (iff)
                          (("1" (split 1)
                            (("1" (flatten)
                              (("1" (skeep -1)
                                (("1" (use "nth_member[T]")
                                  (("1" (assert) nil nil)) nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2" (assert)
                                (("2" (use "member_nth[T]")
                                  (("2" (assert)
                                    (("2" (skeep)
                                      (("2"
                                        (inst 1 "i")
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "cd") (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (grind) nil nil)
             ("4" (hide-all-but 1)
              (("4" (skeep :preds? t)
                (("4" (typepred "cd") (("4" (grind) nil nil)) nil)) nil))
              nil)
             ("5" (typepred "cd") (("5" (grind) nil nil)) nil)
             ("6" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((eq const-decl "bool" c_digraphs_digraphs nil)
    (to_digraph const-decl "digraph_eq(cd)" c_digraphs_digraphs nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (cd skolem-const-decl "(cdigraph)" c_digraphs_digraphs nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (size const-decl "nat" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (nth def-decl "T" list_props nil) (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (digraph type-eq-decl nil digraph_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil c_digraphs_digraphs nil)
    (i skolem-const-decl "below(length(data(cd)))" c_digraphs_digraphs nil)
    (i!1 skolem-const-decl "below(length(data(cd)))" c_digraphs_digraphs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member_nth formula-decl nil more_list_props structures)
    (member const-decl "bool" sets nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (/= const-decl "boolean" notequal nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (injective? const-decl "bool" functions nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (list2set def-decl "{s: finite_set[T] | s = {x | member(x, l)}}"
     set_as_list structures)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nth_member formula-decl nil more_list_props structures)
    (i skolem-const-decl "below(length(data(cd)))" c_digraphs_digraphs nil))
   shostak))
 (eq_cdigraph 0
  (eq_cdigraph-1 nil 3656427878
   ("" (skeep)
    (("" (expand "eq")
      (("" (with-labels (flatten) (("eq verts" "eq edges")))
        (("" (expand "sem_eq")
          ((""
            (with-labels (case "permutation?(data(to_cdigraph(G)), data(cd))")
             "perm data")
            (("1" (assert)
              (("1" (skeep)
                (("1" (expand "to_cdigraph")
                  (("1" (expand "to_cdigraph_vl")
                    (("1" (expand "permutation?" 1)
                      (("1" (split 1)
                        (("1" (expand "includes?")
                          (("1" (skolem 1 "v")
                            (("1" (invoke (case "%1 = 0") (! 1 1))
                              (("1" (use "count_member[T]")
                                (("1" (assert) nil nil)) nil)
                               ("2" (invoke (case "%1 = 1") (! 1 1))
                                (("1" (hide 1)
                                  (("1" (invoke (case "%1 = 1") (! 1 2))
                                    (("1" (assert) nil nil)
                                     ("2" (hide 2)
                                      (("2"
                                        (hide-all-but (1 -1))
                                        (("2"
                                          (case
                                           "member(idx(data(cd),v),nth(adjs(cd),idx(data(cd),nth(vertsl(G),i))))")
                                          (("1"
                                            (hide -2)
                                            (("1"
                                              (case
                                               "member(( nth(data(cd),idx(data(cd),nth(vertsl(G),i))) , nth(data(cd),idx(data(cd),v)) ), edges(G))")
                                              (("1"
                                                (hide -2)
                                                (("1"
                                                  (typepred
                                                   "idx(data(cd), nth(vertsl(G), i))")
                                                  (("1"
                                                    (replace -2 :hide? t)
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (typepred
                                                         "idx(data(cd), v)")
                                                        (("1"
                                                          (replace
                                                           -2
                                                           :hide?
                                                           t)
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (case
                                                               "EXISTS(j:below(length(vertsl(G)))): nth(vertsl(G),j) = v")
                                                              (("1"
                                                                (skeep -1)
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   -2
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (with-labels
                                                                     (typepred
                                                                      "edges_set_to_list(edges(G), vertsl(G))")
                                                                     (("fe every"
                                                                       "fe length"
                                                                       "fe edges"
                                                                       "fe adj size"
                                                                       "fe adj no rep"
                                                                       "UNKNOWN")))
                                                                    (("1"
                                                                      (hide
                                                                       "fe every")
                                                                      (("1"
                                                                        (inst?
                                                                         "fe edges"
                                                                         :where
                                                                         -6)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (hide-all-but
                                                                             ("fe edges"
                                                                              1
                                                                              -5))
                                                                            (("1"
                                                                              (case
                                                                               "member(nth(vertsl(G),j),filter_idxs(vertsl(G),nth(edges_set_to_list(edges(G),vertsl(G)),i)))")
                                                                              (("1"
                                                                                (replace
                                                                                 -3
                                                                                 :hide?
                                                                                 t)
                                                                                (("1"
                                                                                  (hide
                                                                                   "fe edges")
                                                                                  (("1"
                                                                                    (use
                                                                                     "no_repetitions_count[T]")
                                                                                    (("1"
                                                                                      (split
                                                                                       -1)
                                                                                      (("1"
                                                                                        (inst?)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("2"
                                                                                          (use
                                                                                           "no_rep_vertsl")
                                                                                          (("2"
                                                                                            (use
                                                                                             "no_rep_filter[T]")
                                                                                            (("2"
                                                                                              (reveal
                                                                                               "fe adj no rep")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 "fe adj no rep"
                                                                                                 "i")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "no_repetitions?"
                                                                                                   "fe adj no rep")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 ("fe edges"
                                                                                  1))
                                                                                (("2"
                                                                                  (use
                                                                                   "member_nth[nat]")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (hide
                                                                                       "fe edges")
                                                                                      (("2"
                                                                                        (skeep
                                                                                         -1)
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "filter_idxs(vertsl(G), nth(edges_set_to_list(edges(G), vertsl(G)), i))")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "filtered_from")
                                                                                            (("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (inst?)
                                                                                                (("2"
                                                                                                  (replace
                                                                                                   -3
                                                                                                   1
                                                                                                   :dir
                                                                                                   rl
                                                                                                   :hide?
                                                                                                   t)
                                                                                                  (("2"
                                                                                                    (replace
                                                                                                     -2
                                                                                                     1
                                                                                                     :dir
                                                                                                     rl
                                                                                                     :hide?
                                                                                                     t)
                                                                                                    (("2"
                                                                                                      (use
                                                                                                       "nth_member[T]")
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide 2)
                                                                (("2"
                                                                  (typepred
                                                                   "vertsl(G)")
                                                                  (("2"
                                                                    (expand
                                                                     "vertsl?")
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "v")
                                                                        (("2"
                                                                          (typepred
                                                                           "G")
                                                                          (("2"
                                                                            (inst?)
                                                                            (("2"
                                                                              (expand
                                                                               "member"
                                                                               -4)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   "member"
                                                                                   -2
                                                                                   2)
                                                                                  (("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (hide-all-but
                                                                                         (-4
                                                                                          1))
                                                                                        (("2"
                                                                                          (use
                                                                                           "member_nth[T]")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but (-1 1))
                                                (("2"
                                                  (reveal "eq edges")
                                                  (("2"
                                                    (inst?)
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (lemma "count_member[T]")
                                            (("2"
                                              (inst? -1 :where -2)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (hide -2 2)
                                                  (("2"
                                                    (use "member_nth[T]")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (hide -2)
                                                        (("2"
                                                          (skolem -1 "i_v")
                                                          (("2"
                                                            (typepred
                                                             "filter_idxs(data(cd),
                                                                   nth(adjs(cd), idx(data(cd), nth(vertsl(G), i))))")
                                                            (("2"
                                                              (expand
                                                               "filtered_from")
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (inst?)
                                                                  (("1"
                                                                    (typepred
                                                                     "idx(data(cd),v)")
                                                                    (("1"
                                                                      (replace
                                                                       -5
                                                                       -4
                                                                       :hide?
                                                                       t)
                                                                      (("1"
                                                                        (replace
                                                                         -4
                                                                         1
                                                                         :hide?
                                                                         t)
                                                                        (("1"
                                                                          (use
                                                                           "idx_nth_no_rep[T]")
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             1
                                                                             :hide?
                                                                             t)
                                                                            (("1"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("1"
                                                                                (use
                                                                                 "nth_member[nat]")
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             1)
                                                                            (("2"
                                                                              (typepred
                                                                               "cd")
                                                                              (("2"
                                                                                (expand
                                                                                 "cdigraph")
                                                                                (("2"
                                                                                  (flatten)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (typepred
                                                                     "i_v")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (hide 2)
                                            (("3"
                                              (use "count_member[T]")
                                              (("3"
                                                (assert)
                                                (("3"
                                                  (hide -2)
                                                  (("3"
                                                    (use "member_nth[T]")
                                                    (("3"
                                                      (assert)
                                                      (("3"
                                                        (hide -2)
                                                        (("3"
                                                          (skolem -1 "i_v")
                                                          (("3"
                                                            (typepred
                                                             "filter_idxs(data(cd),
                                                                   nth(adjs(cd), idx(data(cd), nth(vertsl(G), i))))")
                                                            (("3"
                                                              (expand
                                                               "filtered_from")
                                                              (("3"
                                                                (flatten)
                                                                (("3"
                                                                  (inst?)
                                                                  (("1"
                                                                    (replace
                                                                     -3
                                                                     -2
                                                                     :hide?
                                                                     t)
                                                                    (("1"
                                                                      (replace
                                                                       -2
                                                                       1
                                                                       :hide?
                                                                       t)
                                                                      (("1"
                                                                        (use
                                                                         "nth_member[T]")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (typepred
                                                                     "i_v")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide-all-but 1)
                                  (("2" (use "no_repetitions_count[T]")
                                    (("2" (split -1)
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (use "count_member[T]")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (reveal 1)
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "cd")
                                        (("2"
                                          (expand "cdigraph")
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (hide-all-but (-3 1 -4))
                                              (("2"
                                                (inst
                                                 -2
                                                 "idx(data(cd), nth(vertsl(G), i))")
                                                (("2"
                                                  (expand
                                                   "no_repetitions?"
                                                   -2)
                                                  (("2"
                                                    (use "no_rep_filter[T]")
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "includes?")
                          (("2" (skolem 1 "v")
                            (("2" (invoke (case "%1 = 0") (! 1 1))
                              (("1" (use "count_member[T]")
                                (("1" (assert) nil nil)) nil)
                               ("2" (invoke (case "%1 = 1") (! 1 1))
                                (("1" (hide 1)
                                  (("1" (invoke (case "%1 = 1") (! 1 2))
                                    (("1" (assert) nil nil)
                                     ("2" (hide 2)
                                      (("2"
                                        (hide-all-but (1 -1))
                                        (("2"
                                          (case
                                           "member(v, filter_idxs(vertsl(G), nth(edges_set_to_list(edges(G), vertsl(G)), i)))")
                                          (("1"
                                            (hide -2)
                                            (("1"
                                              (use "member_nth[T]")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (skolem -1 "i_v")
                                                  (("1"
                                                    (hide -2)
                                                    (("1"
                                                      (typepred
                                                       "filter_idxs(vertsl(G), nth(edges_set_to_list(edges(G), vertsl(G)), i))")
                                                      (("1"
                                                        (expand
                                                         "filtered_from")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (inst -2 "i_v")
                                                            (("1"
                                                              (name
                                                               "j"
                                                               "nth(nth(edges_set_to_list(edges(G), vertsl(G)), i), i_v)")
                                                              (("1"
                                                                (use
                                                                 "nth_member[nat]")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (replace
                                                                     -2
                                                                     :hide?
                                                                     t)
                                                                    (("1"
                                                                      (replace
                                                                       -4
                                                                       :hide?
                                                                       t)
                                                                      (("1"
                                                                        (hide
                                                                         -2)
                                                                        (("1"
                                                                          (typepred
                                                                           "edges_set_to_list(edges(G), vertsl(G))")
                                                                          (("1"
                                                                            (inst
                                                                             -3
                                                                             "i"
                                                                             "j")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (hide-all-but
                                                                                 (-3
                                                                                  1
                                                                                  -7))
                                                                                (("1"
                                                                                  (replace
                                                                                   -2
                                                                                   :hide?
                                                                                   t
                                                                                   :dir
                                                                                   rl)
                                                                                  (("1"
                                                                                    (typepred
                                                                                     "idx(data(cd),nth(vertsl(G),i))")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -2
                                                                                       -3
                                                                                       :hide?
                                                                                       t
                                                                                       :dir
                                                                                       rl)
                                                                                      (("1"
                                                                                        (hide
                                                                                         -1)
                                                                                        (("1"
                                                                                          (typepred
                                                                                           "idx(data(cd),v)")
                                                                                          (("1"
                                                                                            (replace
                                                                                             -2
                                                                                             -3
                                                                                             :hide?
                                                                                             t
                                                                                             :dir
                                                                                             rl)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -1)
                                                                                              (("1"
                                                                                                (reveal
                                                                                                 "eq edges")
                                                                                                (("1"
                                                                                                  (inst?)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (use
                                                                                                         "member_nth[nat]")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (hide
                                                                                                             "eq edges")
                                                                                                            (("1"
                                                                                                              (skolem
                                                                                                               -1
                                                                                                               "i__")
                                                                                                              (("1"
                                                                                                                (typepred
                                                                                                                 "filter_idxs(data(cd),
                                                                            nth(adjs(cd), idx(data(cd), nth(vertsl(G), i))))")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "filtered_from")
                                                                                                                  (("1"
                                                                                                                    (flatten)
                                                                                                                    (("1"
                                                                                                                      (inst?)
                                                                                                                      (("1"
                                                                                                                        (hide
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -2
                                                                                                                           -1
                                                                                                                           :hide?
                                                                                                                           t)
                                                                                                                          (("1"
                                                                                                                            (case
                                                                                                                             "nth(data(cd), idx(data(cd), v)) = v")
                                                                                                                            (("1"
                                                                                                                              (replace
                                                                                                                               -1
                                                                                                                               :hide?
                                                                                                                               t)
                                                                                                                              (("1"
                                                                                                                                (use
                                                                                                                                 "no_repetitions_count[T]")
                                                                                                                                (("1"
                                                                                                                                  (split
                                                                                                                                   -1)
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     -1
                                                                                                                                     "v")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (hide
                                                                                                                                         2)
                                                                                                                                        (("1"
                                                                                                                                          (use
                                                                                                                                           "nth_member[T]")
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (hide-all-but
                                                                                                                                     1)
                                                                                                                                    (("2"
                                                                                                                                      (use
                                                                                                                                       "no_rep_filter[T]")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (hide
                                                                                                                                           2)
                                                                                                                                          (("1"
                                                                                                                                            (typepred
                                                                                                                                             "cd")
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "cdigraph")
                                                                                                                                              (("1"
                                                                                                                                                (flatten)
                                                                                                                                                (("1"
                                                                                                                                                  (inst
                                                                                                                                                   -4
                                                                                                                                                   "idx(data(cd), nth(vertsl(G), i))")
                                                                                                                                                  (("1"
                                                                                                                                                    (hide-all-but
                                                                                                                                                     (-4
                                                                                                                                                      1))
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       "no_repetitions?")
                                                                                                                                                      (("1"
                                                                                                                                                        (propax)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (typepred
                                                                                                                                                     "idx[T](data(cd), nth[T](vertsl(G), i))")
                                                                                                                                                    (("2"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("3"
                                                                                                                                                    (typepred
                                                                                                                                                     "vertsl(G)")
                                                                                                                                                    (("3"
                                                                                                                                                      (expand
                                                                                                                                                       "vertsl?")
                                                                                                                                                      (("3"
                                                                                                                                                        (flatten)
                                                                                                                                                        (("3"
                                                                                                                                                          (reveal
                                                                                                                                                           "eq verts")
                                                                                                                                                          (("3"
                                                                                                                                                            (replace
                                                                                                                                                             "eq verts"
                                                                                                                                                             :dir
                                                                                                                                                             rl
                                                                                                                                                             :hide?
                                                                                                                                                             t)
                                                                                                                                                            (("3"
                                                                                                                                                              (inst
                                                                                                                                                               -1
                                                                                                                                                               "nth[T](vertsl(G), i)")
                                                                                                                                                              (("3"
                                                                                                                                                                (typepred
                                                                                                                                                                 "list2set(data(cd))")
                                                                                                                                                                (("3"
                                                                                                                                                                  (replace
                                                                                                                                                                   -2
                                                                                                                                                                   :hide?
                                                                                                                                                                   t)
                                                                                                                                                                  (("3"
                                                                                                                                                                    (expand
                                                                                                                                                                     "member"
                                                                                                                                                                     -2
                                                                                                                                                                     2)
                                                                                                                                                                    (("3"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("3"
                                                                                                                                                                        (use
                                                                                                                                                                         "nth_member[T]")
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("4"
                                                                                                                                                    (typepred
                                                                                                                                                     "i")
                                                                                                                                                    (("4"
                                                                                                                                                      (grind)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (hide
                                                                                                                                         2)
                                                                                                                                        (("2"
                                                                                                                                          (typepred
                                                                                                                                           "cd")
                                                                                                                                          (("2"
                                                                                                                                            (expand
                                                                                                                                             "cdigraph")
                                                                                                                                            (("2"
                                                                                                                                              (flatten)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (hide-all-but
                                                                                                                               1)
                                                                                                                              (("2"
                                                                                                                                (typepred
                                                                                                                                 "idx(data(cd),v)")
                                                                                                                                (("2"
                                                                                                                                  (propax)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (reveal
                                                                                             -3
                                                                                             "perm data")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "permutation?")
                                                                                              (("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "includes?"
                                                                                                   -3)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -3
                                                                                                     "v")
                                                                                                    (("2"
                                                                                                      (hide-all-but
                                                                                                       (-1
                                                                                                        -3
                                                                                                        1))
                                                                                                      (("2"
                                                                                                        (lemma
                                                                                                         "count_nth[T]")
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "vertsl(G)"
                                                                                                           "j")
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             "count_member[T]")
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "v"
                                                                                                               "data(cd)")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (typepred "i_v")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (use "count_member[T]")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide-all-but 1)
                                  (("2" (use "no_repetitions_count[T]")
                                    (("2" (split -1)
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (use "count_member[T]")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (reveal 1)
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (use "no_rep_filter[T]")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (hide 2)
                                              (("2"
                                                (typepred
                                                 "edges_set_to_list(edges(G), vertsl(G))")
                                                (("1"
                                                  (inst -5 "i")
                                                  (("1"
                                                    (hide-all-but (1 -5))
                                                    (("1"
                                                      (expand
                                                       "no_repetitions?")
                                                      (("1" (propax) nil nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "i")
                                                    (("2" (grind) nil nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (use "no_rep_vertsl")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (skeep)
                                                        (("2"
                                                          (typepred "G")
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (typepred
                                                                   "vertsl(G)")
                                                                  (("2"
                                                                    (expand
                                                                     "vertsl?")
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (inst-cp
                                                                         -1
                                                                         "x")
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "y")
                                                                          (("2"
                                                                            (expand
                                                                             "member"
                                                                             -1
                                                                             2)
                                                                            (("2"
                                                                              (expand
                                                                               "member"
                                                                               -2
                                                                               2)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (expand "to_cdigraph")
                (("2" (typepred "vertsl(G)")
                  (("2" (expand "vertsl?")
                    (("2" (flatten)
                      (("2" (expand "permutation?")
                        (("2" (split "perm data")
                          (("1" (expand "includes?")
                            (("1" (skeep)
                              (("1" (case "count(t)(data(cd)) = 0")
                                (("1" (use "count_member[T]")
                                  (("1" (assert) nil nil)) nil)
                                 ("2" (use "count_member[T]")
                                  (("2" (assert)
                                    (("2" (typepred "list2set(data(cd))")
                                      (("2"
                                        (replace -2 :hide? t)
                                        (("2"
                                          (replace
                                           "eq verts"
                                           :dir
                                           rl
                                           :hide?
                                           t)
                                          (("2"
                                            (inst -3 "t")
                                            (("2"
                                              (expand "member" -3 2)
                                              (("2"
                                                (lemma "count_member[T]")
                                                (("2"
                                                  (inst -1 "t" "vertsl(G)")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (case
                                                       "count(t)(data(cd)) = 1")
                                                      (("1" (assert) nil nil)
                                                       ("2"
                                                        (hide-all-but 1)
                                                        (("2"
                                                          (typepred "cd")
                                                          (("2"
                                                            (expand
                                                             "cdigraph")
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (hide-all-but
                                                                 (1 -3))
                                                                (("2"
                                                                  (use
                                                                   "no_repetitions_count[T]")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (inst?)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "includes?")
                            (("2" (skeep)
                              (("2" (case "count(t)(vertsl(G)) = 0")
                                (("1" (use "count_member[T]")
                                  (("1" (assert) nil nil)) nil)
                                 ("2" (use "count_member[T]")
                                  (("2" (assert)
                                    (("2" (typepred "list2set(data(cd))")
                                      (("2"
                                        (replace -2 :hide? t)
                                        (("2"
                                          (replace
                                           "eq verts"
                                           :dir
                                           rl
                                           :hide?
                                           t)
                                          (("2"
                                            (inst -3 "t")
                                            (("2"
                                              (expand "member" -3 2)
                                              (("2"
                                                (lemma "count_member[T]")
                                                (("2"
                                                  (inst -1 "t" "data(cd)")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (case
                                                       "count(t)(vertsl(G)) = 1")
                                                      (("1" (assert) nil nil)
                                                       ("2"
                                                        (use "no_rep_vertsl")
                                                        (("2"
                                                          (use
                                                           "no_repetitions_count[T]")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((eq const-decl "bool" c_digraphs_digraphs nil)
    (sem_eq const-decl "bool" c_digraphs_def nil)
    (to_cdigraph const-decl "cdigraph_eq(G)" c_digraphs_digraphs nil)
    (cdigraph_eq type-eq-decl nil c_digraphs_digraphs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (digraph type-eq-decl nil digraph_def nil)
    (permutation? const-decl "bool" permutations_list structures)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil c_digraphs_digraphs nil)
    (to_cdigraph_vl const-decl "{cd: cdigraph_eq(G) | data(cd) = vl}"
     c_digraphs_digraphs nil)
    (i_v skolem-const-decl "below(length(filter_idxs(vertsl(G),
                         nth(edges_set_to_list(edges(G), vertsl(G)), i))))"
     c_digraphs_digraphs nil)
    (list2set def-decl "{s: finite_set[T] | s = {x | member(x, l)}}"
     set_as_list structures)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (empty? const-decl "bool" sets nil)
    (count_nth formula-decl nil permutations_list structures)
    (includes? const-decl "bool" permutations_list structures)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (edges_set_to_list const-decl "{adjs: list[list[nat]] |
   length(adjs) = length(vertsl) AND
    (FORALL (i, j: below(length(vertsl))):
       member(j, nth(adjs, i)) IFF
        LET vi = nth(vertsl, i), vj = nth(vertsl, j) IN
          member((vi, vj), edges_G))
     AND
     (FORALL (i: below(length(adjs)), j: below(length(nth(adjs, i)))):
        nth(nth(adjs, i), j) < length(vertsl))
      AND (FORALL (i: below(length(adjs))): no_repetitions?(nth(adjs, i)))}"
     c_digraphs_def nil)
    (nth_member formula-decl nil more_list_props structures)
    (member_nth formula-decl nil more_list_props structures)
    (no_repetitions_count formula-decl nil permutations_list structures)
    (no_rep_vertsl formula-decl nil c_digraphs_digraphs nil)
    (no_rep_filter formula-decl nil more_list_props structures)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (idx_nth_no_rep formula-decl nil more_list_props structures)
    (i_v skolem-const-decl "below(length(filter_idxs(data(cd),
                         nth(adjs(cd), idx(data(cd), nth(vertsl(G), i))))))"
     c_digraphs_digraphs nil)
    (i skolem-const-decl "below(length(data(to_cdigraph(G))))"
       c_digraphs_digraphs nil)
    (G skolem-const-decl "digraph[T]" c_digraphs_digraphs nil)
    (cd skolem-const-decl "(cdigraph)" c_digraphs_digraphs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (i_v skolem-const-decl "below(length(filter_idxs(data(cd),
                         nth(adjs(cd), idx(data(cd), nth(vertsl(G), i))))))"
     c_digraphs_digraphs nil)
    (count_member formula-decl nil permutations_list structures)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (vertsl const-decl "(vertsl?(G))" c_digraphs_digraphs nil)
    (vertsl? const-decl "bool" c_digraphs_digraphs nil)
    (idx def-decl "{i: below(length(l)) | nth(l, i) = a}" more_list_props
     structures)
    (member def-decl "bool" list_props nil)
    (filter_idxs def-decl "(filtered_from(l, idxs))" more_list_props
     structures)
    (filtered_from const-decl "bool" more_list_props structures)
    (nth def-decl "T" list_props nil) (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil) (< const-decl "bool" reals nil)
    (count def-decl "nat" permutations_list structures)
    (= const-decl "[T, T -> boolean]" equalities nil))
   shostak))
 (eq_same_size 0
  (eq_same_size-2 "" 3790101757
   ("" (skeep)
    (("" (expand "size")
      (("" (expand "eq")
        (("" (flatten)
          (("" (replace -1 :dir rl :hide? t)
            (("" (use "eq_no_rep_same_size")
              (("" (assert)
                (("" (hide 2)
                  (("" (split 1)
                    (("1" (typepred "cd")
                      (("1" (expand "cdigraph") (("1" (flatten) nil nil))
                        nil))
                      nil)
                     ("2" (expand "set_list_eq")
                      (("2" (skeep)
                        (("2" (typepred "list2set(data(cd))")
                          (("2" (replace -2 :hide? t) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((size const-decl "nat" c_digraphs_def nil)
    (size const-decl "nat" digraph_def nil)
    (T formal-type-decl nil c_digraphs_digraphs nil)
    (eq_no_rep_same_size formula-decl nil set_as_list_props structures)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (list2set def-decl "{s: finite_set[T] | s = {x | member(x, l)}}"
     set_as_list structures)
    (member def-decl "bool" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set_list_eq const-decl "bool" set_as_list structures)
    (eq const-decl "bool" c_digraphs_digraphs nil))
   shostak)
  (eq_same_size-1 nil 3659368901
   ("" (skeep)
    (("" (expand "size")
      (("" (expand "digraph_verts")
        (("" (expand "eq")
          (("" (flatten)
            (("" (replace -1 :dir rl :hide? t)
              (("" (use "eq_no_rep_same_size")
                (("" (assert)
                  (("" (hide 2)
                    (("" (split 1)
                      (("1" (typepred "cd")
                        (("1" (expand "cdigraph") (("1" (flatten) nil nil))
                          nil))
                        nil)
                       ("2" (expand "set_list_eq")
                        (("2" (skeep)
                          (("2" (typepred "list2set(data(cd))")
                            (("2" (replace -2 :hide? t)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((size const-decl "nat" c_digraphs_def nil)
    (size const-decl "nat" digraph_def nil)
    (eq_no_rep_same_size formula-decl nil set_as_list_props structures)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (list2set def-decl "{s: finite_set[T] | s = {x | member(x, l)}}"
     set_as_list structures)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set_list_eq const-decl "bool" set_as_list structures))
   shostak)))


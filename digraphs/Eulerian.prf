(Eulerian
 (no_repeat_subseq?_TCC1 0
  (no_repeat_subseq?_TCC1-1 nil 3561330533 ("" (subtype-tcc) nil nil) nil nil
   (no_repeat_subseq? subtype "Eulerian.i" "below[w`length]")))
 (no_repeat_subseq?_TCC2 0
  (no_repeat_subseq?_TCC2-1 nil 3561330533 ("" (subtype-tcc) nil nil) nil nil
   (no_repeat_subseq? subtype "Eulerian.j" "below[w`length]")))
 (no_repeat_subseq?_TCC3 0
  (no_repeat_subseq?_TCC3-1 nil 3561330533 ("" (subtype-tcc) nil nil) nil nil
   (no_repeat_subseq? subtype "(number_fields.+)(Eulerian.i, 1)"
    "below[w`length]")))
 (no_repeat_subseq?_TCC4 0
  (no_repeat_subseq?_TCC4-1 nil 3561330533 ("" (subtype-tcc) nil nil) nil nil
   (no_repeat_subseq? subtype "(number_fields.+)(Eulerian.j, 1)"
    "below[w`length]")))
 (cycle_is_pre_Eulerian_circuit 0
  (cycle_is_pre_Eulerian_circuit-1 nil 3564331623
   ("" (skeep)
    (("" (expand "cycle?")
      (("" (expand "pre_Eulerian_circuit?")
        (("" (flatten)
          (("" (assert)
            (("" (expand "pre_Eulerian_walk?")
              (("" (expand "circuit?")
                (("" (expand "pre_circuit?")
                  (("" (flatten)
                    (("" (assert)
                      (("" (expand "no_repeat_subseq?")
                        (("" (expand "finseq_appl")
                          (("" (skeep)
                            (("" (inst -4 "i" "j") (("" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cycle? const-decl "bool" cycles_ nil)
    (pre_Eulerian_walk? const-decl "bool" Eulerian nil)
    (pre_circuit? const-decl "bool" circuits_ nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil Eulerian nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (digraph type-eq-decl nil digraph_def nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]" digraphs_imp nil)
    (digraph_size const-decl "[digraph -> nat]" digraphs_imp nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (prewalk type-eq-decl nil walks_ nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (no_repeat_subseq? const-decl "bool" Eulerian nil)
    (circuit? const-decl "bool" circuits_ nil)
    (pre_Eulerian_circuit? const-decl "bool" Eulerian nil))
   shostak))
 (pre_Eulerian_circuit_is_a_circuit 0
  (pre_Eulerian_circuit_is_a_circuit-1 nil 3559650097
   ("" (auto-rewrite "finseq_appl")
    (("" (skeep)
      ((""
        (expand* "pre_Eulerian_circuit?" "circuit?" "pre_Eulerian_walk?"
         "pre_circuit?")
        (("" (flatten) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (pre_Eulerian_circuit? const-decl "bool" Eulerian nil)
    (pre_Eulerian_walk? const-decl "bool" Eulerian nil)
    (pre_circuit? const-decl "bool" circuits_ nil)
    (circuit? const-decl "bool" circuits_ nil))
   shostak))
 (Eulerian_circuit_is_circuit 0
  (Eulerian_circuit_is_circuit-1 nil 3561331484
   ("" (auto-rewrite "finseq_appl")
    (("" (skeep)
      ((""
        (expand* "Eulerian_circuit?" "pre_Eulerian_circuit?" "circuit?"
         "pre_circuit?" "pre_Eulerian_walk?")
        (("" (flatten) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (Eulerian_circuit? const-decl "bool" Eulerian nil)
    (circuit? const-decl "bool" circuits_ nil)
    (pre_Eulerian_walk? const-decl "bool" Eulerian nil)
    (pre_circuit? const-decl "bool" circuits_ nil)
    (pre_Eulerian_circuit? const-decl "bool" Eulerian nil))
   shostak))
 (Eulerian_walk_is_Eulerian_circuit 0
  (Eulerian_walk_is_Eulerian_circuit-1 nil 3561331889
   ("" (auto-rewrite "finseq_appl")
    (("" (skeep)
      ((""
        (expand* "Eulerian_circuit?" "pre_Eulerian_circuit?" "Eulerian_walk?"
         "pre_Eulerian_walk?")
        (("" (flatten) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((Eulerian_circuit? const-decl "bool" Eulerian nil)
    (Eulerian_walk? const-decl "bool" Eulerian nil)
    (pre_Eulerian_walk? const-decl "bool" Eulerian nil)
    (pre_Eulerian_circuit? const-decl "bool" Eulerian nil))
   shostak))
 (circuit_subwalk_pre_Eulerian_TCC1 0
  (circuit_subwalk_pre_Eulerian_TCC1-1 nil 3563040767
   ("" (subtype-tcc) nil nil)
   ((prewalk type-eq-decl nil walks_ nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil) (> const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil Eulerian nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph -> nat]" digraphs_imp nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]" digraphs_imp nil)
    (digraph type-eq-decl nil digraph_def nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (verts_in? const-decl "bool" walks_ nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (edge? const-decl "bool" digraphs_ nil)
    (walk? const-decl "bool" walks_ nil)
    (pre_circuit? const-decl "bool" circuits_ nil)
    (circuit? const-decl "bool" circuits_ nil))
   nil
   (circuit_subwalk_pre_Eulerian subtype "Eulerian.w"
    "walks_[Eulerian.T, digraph_type[T], digraphs_imp[Eulerian.T].digraph_verts, digraphs_imp[Eulerian.T].digraph_edges, digraphs_imp[Eulerian.T].digraph_size, digraphs_imp[Eulerian.T].digraph_make].Walk(Eulerian.G)")))
 (circuit_subwalk_pre_Eulerian 0
  (circuit_subwalk_pre_Eulerian-1 nil 3563040846
   ("" (skeep)
    (("" (lemma "circuit_subwalk_cycle")
      (("" (inst -1 "G" "w")
        (("" (assert)
          (("" (skeep)
            (("" (inst 1 "w1")
              (("" (assert)
                (("" (rewrite "cycle_is_pre_Eulerian_circuit") nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph -> nat]" digraphs_imp nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]" digraphs_imp nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp nil)
    (digraph type-eq-decl nil digraph_def nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (T formal-type-decl nil Eulerian nil)
    (circuit_subwalk_cycle formula-decl nil cycles_ nil)
    (cycle_is_pre_Eulerian_circuit formula-decl nil Eulerian nil)
    (prewalk type-eq-decl nil walks_ nil) (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil))
   shostak))
 (pre_Eulerian_circuit_prefix_TCC1 0
  (pre_Eulerian_circuit_prefix_TCC1-1 nil 3563121186
   ("" (subtype-tcc) nil nil)
   ((T formal-type-decl nil Eulerian nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph -> nat]" digraphs_imp nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]" digraphs_imp nil)
    (digraph type-eq-decl nil digraph_def nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (verts_in? const-decl "bool" walks_ nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (edge? const-decl "bool" digraphs_ nil)
    (walk? const-decl "bool" walks_ nil)
    (no_repeat_subseq? const-decl "bool" Eulerian nil)
    (pre_Eulerian_walk? const-decl "bool" Eulerian nil)
    (pre_circuit? const-decl "bool" circuits_ nil)
    (circuit? const-decl "bool" circuits_ nil)
    (pre_Eulerian_circuit? const-decl "bool" Eulerian nil)
    (O const-decl "finseq" finite_sequences nil))
   nil
   (pre_Eulerian_circuit_prefix subtype
    "finite_sequences[Eulerian.T].o(Eulerian.w1, Eulerian.w2)"
    "prewalk[T, digraph_type[T], digraph_verts[T], digraph_edges[T], digraph_size[T], digraph_make[T]]")))
 (pre_Eulerian_circuit_prefix 0
  (pre_Eulerian_circuit_prefix-1 nil 3563121188
   ("" (skeep)
    (("" (lemma "cycle_prefix")
      (("" (inst -1 "G" "w")
        (("" (assert)
          (("" (split)
            (("1" (rewrite "cycle_is_pre_Eulerian_circuit") nil nil)
             ("2" (skeep)
              (("2" (inst 2 "w1" "w2")
                (("2" (assert)
                  (("2" (hide-all-but (-2 2))
                    (("2" (rewrite "cycle_is_pre_Eulerian_circuit") nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph -> nat]" digraphs_imp nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]" digraphs_imp nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp nil)
    (digraph type-eq-decl nil digraph_def nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (T formal-type-decl nil Eulerian nil)
    (cycle_prefix formula-decl nil cycles_ nil)
    (cycle_is_pre_Eulerian_circuit formula-decl nil Eulerian nil)
    (prewalk type-eq-decl nil walks_ nil) (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil))
   shostak))
 (pre_Eulerian_circuit_o_circuit_TCC1 0
  (pre_Eulerian_circuit_o_circuit_TCC1-1 nil 3563123153
   ("" (subtype-tcc) nil nil)
   ((prewalk type-eq-decl nil walks_ nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil) (> const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (T formal-type-decl nil Eulerian nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph -> nat]" digraphs_imp nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]" digraphs_imp nil)
    (digraph type-eq-decl nil digraph_def nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (verts_in? const-decl "bool" walks_ nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (edge? const-decl "bool" digraphs_ nil)
    (walk? const-decl "bool" walks_ nil)
    (no_repeat_subseq? const-decl "bool" Eulerian nil)
    (pre_Eulerian_walk? const-decl "bool" Eulerian nil)
    (pre_circuit? const-decl "bool" circuits_ nil)
    (circuit? const-decl "bool" circuits_ nil)
    (pre_Eulerian_circuit? const-decl "bool" Eulerian nil)
    (rest const-decl "finseq" seq_extras structures)
    (O const-decl "finseq" finite_sequences nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   nil
   (pre_Eulerian_circuit_o_circuit subtype
    "finite_sequences[Eulerian.T].o(Eulerian.w1, seq_extras[Eulerian.T].rest(Eulerian.w2))"
    "prewalk[T, digraph_type[T], digraph_verts[T], digraph_edges[T], digraph_size[T], digraph_make[T]]")))
 (pre_Eulerian_circuit_o_circuit 0
  (pre_Eulerian_circuit_o_circuit-1 nil 3563036557
   ("" (skeep)
    (("" (lemma "cycle_o_circuit")
      (("" (inst -1 "G" "w")
        (("" (assert)
          (("" (split)
            (("1" (hide -2 2)
              (("1" (rewrite "cycle_is_pre_Eulerian_circuit") nil nil)) nil)
             ("2" (skeep)
              (("2" (inst 2 "w1" "w2")
                (("2" (assert)
                  (("2" (hide-all-but (-2 2))
                    (("2" (rewrite "cycle_is_pre_Eulerian_circuit") nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph -> nat]" digraphs_imp nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]" digraphs_imp nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp nil)
    (digraph type-eq-decl nil digraph_def nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (T formal-type-decl nil Eulerian nil)
    (cycle_o_circuit formula-decl nil cycles_ nil)
    (cycle_is_pre_Eulerian_circuit formula-decl nil Eulerian nil)
    (prewalk type-eq-decl nil walks_ nil) (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil))
   shostak)))


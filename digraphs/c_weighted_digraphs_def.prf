(c_weighted_digraphs_def
 (weight_TCC1 0
  (weight_TCC1-1 nil 3657991166 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil c_weighted_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (edges const-decl "bool" c_digraphs_def nil)
    (Weight formal-type-decl nil c_weighted_digraphs_def nil)
    (member def-decl "bool" list_props nil)
    (idx def-decl "{i: below(length(l)) | nth(l, i) = a}" more_list_props
     structures)
    (nth def-decl "T" list_props nil) (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil) (< const-decl "bool" reals nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (/= const-decl "boolean" notequal nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (size const-decl "nat" c_digraphs_def nil))
   nil
   (weight subtype "c_weighted_digraphs_def.l"
    "(list_adt[[c_weighted_digraphs_def.T, c_weighted_digraphs_def.T, c_weighted_digraphs_def.Weight]].cons?)")))
 (weight_TCC2 0
  (weight_TCC2-1 nil 3657991166
   ("" (skeep)
    (("" (typepred "l")
      (("" (skeep)
        (("" (expand "member" -1)
          (("" (lift-if -1)
            (("" (split -1)
              (("1" (propax) nil nil)
               ("2" (flatten)
                (("2" (assert)
                  (("2" (split -1)
                    (("1" (decompose-equality -1) (("1" (assert) nil nil))
                      nil)
                     ("2" (inst 3 "w") nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((digraph_type type-eq-decl nil c_digraphs_imp nil)
    (edges const-decl "bool" c_digraphs_def nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (member def-decl "bool" list_props nil) (list type-decl nil list_adt nil)
    (T formal-type-decl nil c_weighted_digraphs_def nil)
    (Weight formal-type-decl nil c_weighted_digraphs_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil))
   nil
   (weight subtype
    "list_adt[[c_weighted_digraphs_def.T, c_weighted_digraphs_def.T, c_weighted_digraphs_def.Weight]].cdr(c_weighted_digraphs_def.l)"
    "{l: list_adt[[c_weighted_digraphs_def.T, c_weighted_digraphs_def.T, c_weighted_digraphs_def.Weight]].list | EXISTS (w: c_weighted_digraphs_def.Weight): list_props[[c_weighted_digraphs_def.T, c_weighted_digraphs_def.T, c_weighted_digraphs_def.Weight]].member((c_weighted_digraphs_def.e`1, c_weighted_digraphs_def.e`2, w), l)}")))
 (weight_TCC3 0
  (weight_TCC3-1 nil 3657991166
   ("" (skeep)
    (("" (expand "length" 2 2)
      (("" (typepred "l")
        (("" (skeep)
          (("" (expand "member" -1)
            (("" (lift-if -1)
              (("" (split -1)
                (("1" (propax) nil nil)
                 ("2" (flatten) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Weight formal-type-decl nil c_weighted_digraphs_def nil)
    (T formal-type-decl nil c_weighted_digraphs_def nil)
    (list type-decl nil list_adt nil) (member def-decl "bool" list_props nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (edges const-decl "bool" c_digraphs_def nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil))
   nil
   (weight termination
    "c_weighted_digraphs_def.weight(c_weighted_digraphs_def.dg)(c_weighted_digraphs_def.e, list_adt[[c_weighted_digraphs_def.T, c_weighted_digraphs_def.T, c_weighted_digraphs_def.Weight]].cdr(c_weighted_digraphs_def.l))"
    "nil")))
 (get_value_TCC1 0
  (get_value_TCC1-2 "" 3790101882 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil c_weighted_digraphs_def nil)
    (Weight formal-type-decl nil c_weighted_digraphs_def nil)
    (list type-decl nil list_adt nil)
    (has_key? const-decl "bool" c_weighted_digraphs_def nil)
    (member def-decl "bool" list_props nil))
   shostak
   (get_value subtype "c_weighted_digraphs_def.map1"
    "(list_adt[[c_weighted_digraphs_def.T, c_weighted_digraphs_def.T, c_weighted_digraphs_def.Weight]].cons?)"))
  (get_value_TCC1-1 nil 3658149318 ("" (grind)) nil nil
   (get_value subtype "c_weighted_digraphs_def.map1"
    "(list_adt[[c_weighted_digraphs_def.T, c_weighted_digraphs_def.T, c_weighted_digraphs_def.Weight]].cons?)")))
 (get_value_TCC2 0
  (get_value_TCC2-1 nil 3658149318
   ("" (skeep)
    (("" (typepred "key")
      (("" (expand "has_key?" -1)
        (("" (skeep -1) (("" (expand "member" -1) (("" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((has_key? const-decl "bool" c_weighted_digraphs_def nil)
    (list type-decl nil list_adt nil)
    (Weight formal-type-decl nil c_weighted_digraphs_def nil)
    (T formal-type-decl nil c_weighted_digraphs_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (member def-decl "bool" list_props nil))
   shostak
   (get_value subtype "c_weighted_digraphs_def.key"
    "(c_weighted_digraphs_def.has_key?(list_adt[[c_weighted_digraphs_def.T, c_weighted_digraphs_def.T, c_weighted_digraphs_def.Weight]].cdr(c_weighted_digraphs_def.map1)))")))
 (get_value_TCC3 0
  (get_value_TCC3-1 nil 3658149318
   ("" (skeep)
    (("" (expand "length" 2 2)
      (("" (typepred "key") (("" (grind) nil nil)) nil)) nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (member def-decl "bool" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil c_weighted_digraphs_def nil)
    (Weight formal-type-decl nil c_weighted_digraphs_def nil)
    (list type-decl nil list_adt nil)
    (has_key? const-decl "bool" c_weighted_digraphs_def nil))
   shostak
   (get_value termination
    "c_weighted_digraphs_def.get_value(list_adt[[c_weighted_digraphs_def.T, c_weighted_digraphs_def.T, c_weighted_digraphs_def.Weight]].cdr(c_weighted_digraphs_def.map1), c_weighted_digraphs_def.key)"
    "nil")))
 (keys_no_rep?_TCC1 0
  (keys_no_rep?_TCC1-1 nil 3658576876
   (""
    (inst 1
     "LAMBDA(map: list[[T, T, Weight]]): NOT (EXISTS ((k1, k2: T), (v1, v2: Weight)):
                                member[[T, T, Weight]]((k1, k2, v1), map) AND
                                 member[[T, T, Weight]]((k1, k2, v2), map) AND
                                  (EXISTS (i,
                                           j:
                                           below(length[[T, T, Weight]](map))):
                                     i /= j AND
                                      nth[[T, T, Weight]](map, i) =
                                       (k1, k2, v1)
                                       AND
                                       nth[[T, T, Weight]](map, j) =
                                        (k1, k2, v2)))")
    nil nil)
   ((nth def-decl "T" list_props nil) (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (member def-decl "bool" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (Weight formal-type-decl nil c_weighted_digraphs_def nil)
    (T formal-type-decl nil c_weighted_digraphs_def nil))
   nil
   (keys_no_rep? existence ""
    "[map: list_adt[[c_weighted_digraphs_def.T, c_weighted_digraphs_def.T, c_weighted_digraphs_def.Weight]].list -> {b: booleans.bool | booleans.IFF(b, (booleans.NOT)(EXISTS ((k1, k2: c_weighted_digraphs_def.T), (v1, v2: c_weighted_digraphs_def.Weight)): booleans.AND(list_props[[c_weighted_digraphs_def.T, c_weighted_digraphs_def.T, c_weighted_digraphs_def.Weight]].member((k1, k2, v1), map), booleans.AND(list_props[[c_weighted_digraphs_def.T, c_weighted_digraphs_def.T, c_weighted_digraphs_def.Weight]].member((k1, k2, v2), map), EXISTS (i, j: naturalnumbers.below(list_props[[c_weighted_digraphs_def.T, c_weighted_digraphs_def.T, c_weighted_digraphs_def.Weight]].length(map))): booleans.AND(i /= j, booleans.AND(list_props[[c_weighted_digraphs_def.T, c_weighted_digraphs_def.T, c_weighted_digraphs_def.Weight]].nth(map, i) = (k1, k2, v1), list_props[[c_weighted_digraphs_def.T, c_weighted_digraphs_def.T, c_weighted_digraphs_def.Weight]].nth(map, j) = (k1, k2, v2)))))))}]")))
 (keys_no_rep?_cdr 0
  (keys_no_rep?_cdr-1 nil 3658582972
   ("" (skeep)
    (("" (invoke (typepred "%1") (! -1))
      (("" (hide -2)
        (("" (invoke (typepred "%1") (! 1))
          (("" (hide -1)
            (("" (assert)
              (("" (hide -2 2)
                (("" (skeep)
                  (("" (inst?)
                    (("" (inst 1 "v2")
                      (("" (assert)
                        (("" (split 1)
                          (("1" (grind) nil nil) ("2" (grind) nil nil)
                           ("3" (skeep)
                            (("3" (inst 1 "i+1" "j+1")
                              (("1" (assert)
                                (("1" (expand "nth" 1)
                                  (("1" (propax) nil nil)) nil))
                                nil)
                               ("2" (grind) nil nil) ("3" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-type-decl nil c_weighted_digraphs_def nil)
    (Weight formal-type-decl nil c_weighted_digraphs_def nil)
    (list type-decl nil list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil) (nth def-decl "T" list_props nil)
    (keys_no_rep? const-decl "{b: bool |
   b IFF
    NOT EXISTS ((k1, k2: T), (v1, v2: Weight)):
          member((k1, k2, v1), map) AND
           member((k1, k2, v2), map) AND
            (EXISTS (i, j: below(length(map))):
               i /= j AND
                nth(map, i) = (k1, k2, v1) AND nth(map, j) = (k1, k2, v2))}"
     c_weighted_digraphs_def nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (map skolem-const-decl "list[[T, T, Weight]]" c_weighted_digraphs_def nil)
    (i skolem-const-decl "below(length(map))" c_weighted_digraphs_def nil)
    (kv skolem-const-decl "[T, T, Weight]" c_weighted_digraphs_def nil)
    (j skolem-const-decl "below(length(map))" c_weighted_digraphs_def nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   shostak))
 (keys_no_rep?_cons 0
  (keys_no_rep?_cons-1 nil 3658598886
   ("" (skeep)
    (("" (invoke (typepred "%1") (! 2))
      (("" (assert)
        (("" (hide -1 2)
          (("" (invoke (typepred "%1") (! -2))
            (("" (assert)
              (("" (hide -1 -3)
                (("" (skeep)
                  (("" (expand "has_key?")
                    (("" (expand "member" -1)
                      (("" (expand "member" -2)
                        (("" (case "(k1, k2, v1) = kv")
                          (("1" (case "(k1, k2, v2) = kv")
                            (("1" (assert)
                              (("1" (hide -3 -4)
                                (("1" (skeep)
                                  (("1" (case "i=0")
                                    (("1" (replace -1 :hide? t)
                                      (("1"
                                        (inst 3 "v2")
                                        (("1"
                                          (expand "nth" -4)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lemma
                                               "nth_member[[T,T,Weight]]")
                                              (("1"
                                                (inst? -1 :where -5)
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (case "j=0")
                                      (("1"
                                        (replace -1 :hide? t)
                                        (("1"
                                          (inst 4 "v1")
                                          (("1"
                                            (lemma "nth_member[[T,T,Weight]]")
                                            (("1"
                                              (expand "nth" -4)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst? -1 :where -4)
                                                  (("1" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "nth" -3)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "nth" -4)
                                            (("2"
                                              (inst 3 "k1" "k2" "v1" "v2")
                                              (("2"
                                                (split 3)
                                                (("1"
                                                  (use
                                                   "nth_member[[T,T,Weight]]")
                                                  (("1" (assert) nil nil))
                                                  nil)
                                                 ("2"
                                                  (use
                                                   "nth_member[[T,T,Weight]]")
                                                  (("2" (assert) nil nil))
                                                  nil)
                                                 ("3"
                                                  (inst 1 "i-1" "j-1")
                                                  (("3" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2" (hide -2)
                                (("2" (split -2)
                                  (("1" (propax) nil nil)
                                   ("2" (inst 3 "v2") (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (split -1)
                            (("1" (propax) nil nil)
                             ("2" (case "(k1, k2, v2) = kv")
                              (("1" (hide -3)
                                (("1" (inst 3 "v1") (("1" (assert) nil nil))
                                  nil))
                                nil)
                               ("2" (split -2)
                                (("1" (propax) nil nil)
                                 ("2" (inst 3 "k1" "k2" "v1" "v2")
                                  (("2" (assert)
                                    (("2" (skeep -3)
                                      (("2"
                                        (expand "nth" -3)
                                        (("2"
                                          (lift-if -3)
                                          (("2"
                                            (split -3)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (flatten)
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (expand "nth" -4)
                                                (("2"
                                                  (lift-if -4)
                                                  (("2"
                                                    (split -4)
                                                    (("1"
                                                      (flatten)
                                                      (("1" (assert) nil nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (inst 5 "i-1" "j-1")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-type-decl nil c_weighted_digraphs_def nil)
    (Weight formal-type-decl nil c_weighted_digraphs_def nil)
    (list type-decl nil list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil) (nth def-decl "T" list_props nil)
    (keys_no_rep? const-decl "{b: bool |
   b IFF
    NOT EXISTS ((k1, k2: T), (v1, v2: Weight)):
          member((k1, k2, v1), map) AND
           member((k1, k2, v2), map) AND
            (EXISTS (i, j: below(length(map))):
               i /= j AND
                nth(map, i) = (k1, k2, v1) AND nth(map, j) = (k1, k2, v2))}"
     c_weighted_digraphs_def nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (kv skolem-const-decl "[T, T, Weight]" c_weighted_digraphs_def nil)
    (map skolem-const-decl "list[[T, T, Weight]]" c_weighted_digraphs_def nil)
    (i skolem-const-decl "below(length(cons(kv, map)))"
       c_weighted_digraphs_def nil)
    (j skolem-const-decl "below(length(cons(kv, map)))"
     c_weighted_digraphs_def nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nth_member formula-decl nil more_list_props structures)
    (has_key? const-decl "bool" c_weighted_digraphs_def nil))
   shostak))
 (keys_no_rep?_no_rep 0
  (keys_no_rep?_no_rep-1 nil 3658595603
   ("" (skeep)
    (("" (invoke (typepred "%1") (! -1))
      (("" (assert)
        (("" (hide -1)
          (("" (hide -1)
            (("" (expand "no_repetitions?")
              (("" (skeep)
                ((""
                  (inst 1 "nth(map,i)`1" "nth(map,i)`2" "nth(map,i)`3"
                   "nth(map,j)`3")
                  ((""
                    (case "(nth(map, i)`1, nth(map, i)`2, nth(map, i)`3) = nth(map,i)")
                    (("1" (replace -1 :hide? t)
                      (("1"
                        (case "(nth(map, i)`1, nth(map, i)`2, nth(map, j)`3) = nth(map,j)")
                        (("1" (replace -1 :hide? t)
                          (("1" (split 1)
                            (("1" (use "nth_member[[T,T,Weight]]")
                              (("1" (assert) nil nil)) nil)
                             ("2" (use "nth_member[[T,T,Weight]]")
                              (("2" (assert) nil nil)) nil)
                             ("3" (expand "/=")
                              (("3" (assert) (("3" (inst?) nil nil)) nil))
                              nil))
                            nil))
                          nil)
                         ("2" (apply-extensionality) nil nil))
                        nil))
                      nil)
                     ("2" (apply-extensionality) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-type-decl nil c_weighted_digraphs_def nil)
    (Weight formal-type-decl nil c_weighted_digraphs_def nil)
    (list type-decl nil list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil) (nth def-decl "T" list_props nil)
    (keys_no_rep? const-decl "{b: bool |
   b IFF
    NOT EXISTS ((k1, k2: T), (v1, v2: Weight)):
          member((k1, k2, v1), map) AND
           member((k1, k2, v2), map) AND
            (EXISTS (i, j: below(length(map))):
               i /= j AND
                nth(map, i) = (k1, k2, v1) AND nth(map, j) = (k1, k2, v2))}"
     c_weighted_digraphs_def nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (nth_member formula-decl nil more_list_props structures))
   shostak))
 (keys_no_rep?_append 0
  (keys_no_rep?_append-1 nil 3658583111
   ("" (induct "map1")
    (("1" (grind)
      (("1" (invoke (typepred "%1") (! 1)) (("1" (grind) nil nil)) nil)) nil)
     ("2" (skeep 1 :but (("cons1_var" "key_value") ("cons2_var" "map_")))
      (("2" (skeep)
        (("2" (split 1)
          (("1" (flatten)
            (("1" (expand "append" 1)
              (("1" (lemma "keys_no_rep?_cons")
                (("1" (inst? -1 :where 1)
                  (("1" (assert)
                    (("1" (hide 2)
                      (("1" (inst -3 "key_value`1" "key_value`2")
                        (("1" (split -3)
                          (("1" (case "keys_no_rep?(append(map_, map2))")
                            (("1" (assert)
                              (("1" (expand "has_key?")
                                (("1" (skeep -2)
                                  (("1" (use "member_append_fi[[T,T,Weight]]")
                                    (("1" (assert)
                                      (("1"
                                        (hide -3)
                                        (("1"
                                          (split -1)
                                          (("1"
                                            (case "w=key_value`3")
                                            (("1"
                                              (replace -1 :hide? t)
                                              (("1"
                                                (case
                                                 "no_repetitions?(cons(key_value,map_))")
                                                (("1"
                                                  (hide-all-but (-2 -1))
                                                  (("1"
                                                    (use
                                                     "member_nth[[T,T,Weight]]")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (expand
                                                           "no_repetitions?")
                                                          (("1"
                                                            (inst
                                                             -2
                                                             "i+1"
                                                             "0")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "nth"
                                                                 1
                                                                 1)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (grind)
                                                              nil
                                                              nil)
                                                             ("3"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but (1 -3))
                                                  (("2"
                                                    (use
                                                     "keys_no_rep?_no_rep")
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (1 -3 -1))
                                              (("2"
                                                (invoke
                                                 (typepred "%1")
                                                 (! -2))
                                                (("2"
                                                  (hide -2)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (hide -2)
                                                      (("2"
                                                        (inst
                                                         1
                                                         "key_value`1"
                                                         "key_value`2"
                                                         "w"
                                                         "key_value`3")
                                                        (("2"
                                                          (split 1)
                                                          (("1"
                                                            (expand
                                                             "member"
                                                             1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "member"
                                                             1)
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (use
                                                             "member_nth[[T,T,Weight]]")
                                                            (("3"
                                                              (assert)
                                                              (("3"
                                                                (skeep)
                                                                (("3"
                                                                  (inst
                                                                   1
                                                                   "i+1"
                                                                   "0")
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil
                                                                    nil)
                                                                   ("3"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (inst?) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (inst -3 "map2")
                              (("2" (assert)
                                (("2" (hide 1 3)
                                  (("2" (split 2)
                                    (("1" (use "keys_no_rep?_cdr")
                                      (("1" (assert) nil nil)) nil)
                                     ("2" (reveal -2)
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (inst -1 "k1" "k2")
                                          (("2"
                                            (split -1)
                                            (("1" (propax) nil nil)
                                             ("2"
                                              (skeep -1)
                                              (("2"
                                                (inst 1 "v1")
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (inst 1 "key_value`3") (("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (expand "append" -1)
              (("2" (use "keys_no_rep?_cdr")
                (("2" (assert)
                  (("2" (inst -3 "map2")
                    (("2" (assert)
                      (("2" (flatten)
                        (("2" (assert)
                          (("2" (split 1)
                            (("1" (hide-all-but (-2 1))
                              (("1" (invoke (typepred "%1") (! -1))
                                (("1" (hide -2)
                                  (("1" (assert)
                                    (("1" (hide -1)
                                      (("1"
                                        (invoke (typepred "%1") (! 2))
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (inst
                                                       2
                                                       "k1"
                                                       "k2"
                                                       "v1"
                                                       "v2")
                                                      (("1"
                                                        (split 2)
                                                        (("1"
                                                          (hide-all-but
                                                           (-1 1))
                                                          (("1"
                                                            (expand
                                                             "member"
                                                             -1)
                                                            (("1"
                                                              (expand
                                                               "member"
                                                               1)
                                                              (("1"
                                                                (ground)
                                                                (("1"
                                                                  (use
                                                                   "member_append_l[[T,T,Weight]]")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (1 -2))
                                                          (("2"
                                                            (expand "member")
                                                            (("2"
                                                              (ground)
                                                              (("2"
                                                                (use
                                                                 "member_append_l[[T,T,Weight]]")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (inst 1 "i" "j")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (split 1)
                                                              (("1"
                                                                (case "i=0")
                                                                (("1"
                                                                  (replace -1)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "nth"
                                                                   2)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (use
                                                                       "nth_append[[T,T,Weight]]")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (split
                                                                           -1)
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             :hide?
                                                                             t)
                                                                            (("1"
                                                                              (typepred
                                                                               "i")
                                                                              (("1"
                                                                                (expand
                                                                                 "length"
                                                                                 -1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (typepred
                                                                             "i")
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (case "j=0")
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   :hide?
                                                                   t)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "nth")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (lemma
                                                                       "nth_append[[T,T,Weight]]")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "map_"
                                                                         "map2"
                                                                         "j-1")
                                                                        (("2"
                                                                          (split
                                                                           -1)
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             :hide?
                                                                             t)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (lift-if
                                                                                 2)
                                                                                (("1"
                                                                                  (split
                                                                                   2)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "j")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "length"
                                                                                         -1)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (typepred
                                                                             "j")
                                                                            (("2"
                                                                              (expand
                                                                               "length"
                                                                               -1)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (typepred "j")
                                                            (("2"
                                                              (expand
                                                               "length")
                                                              (("2"
                                                                (use
                                                                 "length_append[[T,T,Weight]]")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (typepred "i")
                                                            (("3"
                                                              (expand
                                                               "length")
                                                              (("3"
                                                                (use
                                                                 "length_append[[T,T,Weight]]")
                                                                (("3"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skeep)
                              (("2" (inst -7 "k1" "k2")
                                (("2" (split -7)
                                  (("1" (propax) nil nil)
                                   ("2" (skeep -1)
                                    (("2" (expand "member" -1)
                                      (("2"
                                        (case "(k1, k2, v1) = key_value")
                                        (("1"
                                          (hide -2)
                                          (("1"
                                            (skeep -2)
                                            (("1"
                                              (invoke (typepred "%1") (! -4))
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide -1)
                                                  (("1"
                                                    (inst
                                                     1
                                                     "k1"
                                                     "k2"
                                                     "key_value`3"
                                                     "v2")
                                                    (("1"
                                                      (split 1)
                                                      (("1" (grind) nil nil)
                                                       ("2"
                                                        (expand "member" 1)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (use
                                                             "member_append_r[[T,T,Weight]]")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (expand "/=")
                                                        (("3"
                                                          (case
                                                           "v2 = key_value`3")
                                                          (("1"
                                                            (replace
                                                             -1
                                                             :hide?
                                                             t)
                                                            (("1"
                                                              (hide-all-but
                                                               (-2 -4))
                                                              (("1"
                                                                (case
                                                                 "no_repetitions?(cons(key_value, append(map_, map2)))")
                                                                (("1"
                                                                  (hide -3)
                                                                  (("1"
                                                                    (expand
                                                                     "no_repetitions?")
                                                                    (("1"
                                                                      (use
                                                                       "member_nth[[T,T,Weight]]")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (hide
                                                                           -3)
                                                                          (("1"
                                                                            (skeep
                                                                             -1)
                                                                            (("1"
                                                                              (inst
                                                                               -2
                                                                               "i+1+length(map_)"
                                                                               "0")
                                                                              (("1"
                                                                                (split
                                                                                 -2)
                                                                                (("1"
                                                                                  (expand
                                                                                   "/=")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "nth"
                                                                                     1
                                                                                     1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (lift-if
                                                                                         1)
                                                                                        (("1"
                                                                                          (split
                                                                                           1)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (use
                                                                                               "nth_append[[T,T,Weight]]")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (replace
                                                                                                   -1
                                                                                                   :hide?
                                                                                                   t)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "nth"
                                                                                                     2
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (reveal
                                                                                                       -7)
                                                                                                      (("2"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "length"
                                                                                 1)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (expand
                                                                                 "length"
                                                                                 1
                                                                                 2)
                                                                                (("3"
                                                                                  (use
                                                                                   "length_append[[T,T,Weight]]")
                                                                                  (("3"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (1 -2))
                                                                  (("2"
                                                                    (use
                                                                     "keys_no_rep?_no_rep")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (use
                                                             "member_nth[[T,T,Weight]]")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (skeep -1)
                                                                (("2"
                                                                  (inst
                                                                   2
                                                                   "0"
                                                                   "i+1+length(map_)")
                                                                  (("1"
                                                                    (split 2)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "nth"
                                                                       1)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (expand
                                                                       "nth"
                                                                       1)
                                                                      (("3"
                                                                        (assert)
                                                                        (("3"
                                                                          (lift-if
                                                                           1)
                                                                          (("3"
                                                                            (split
                                                                             1)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (use
                                                                                 "nth_append[[T,T,Weight]]")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "length"
                                                                     1
                                                                     2)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (use
                                                                         "length_append[[T,T,Weight]]")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (expand
                                                                     "length"
                                                                     1
                                                                     1)
                                                                    (("3"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (split -1)
                                          (("1" (propax) nil nil)
                                           ("2" (inst? 2) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil) (nth def-decl "T" list_props nil)
    (keys_no_rep? const-decl "{b: bool |
   b IFF
    NOT EXISTS ((k1, k2: T), (v1, v2: Weight)):
          member((k1, k2, v1), map) AND
           member((k1, k2, v2), map) AND
            (EXISTS (i, j: below(length(map))):
               i /= j AND
                nth(map, i) = (k1, k2, v1) AND nth(map, j) = (k1, k2, v2))}"
     c_weighted_digraphs_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (append def-decl "list[T]" list_props nil)
    (Weight formal-type-decl nil c_weighted_digraphs_def nil)
    (T formal-type-decl nil c_weighted_digraphs_def nil)
    (list_induction formula-decl nil list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (keys_no_rep?_cdr formula-decl nil c_weighted_digraphs_def nil)
    (i skolem-const-decl "below(length(map_))" c_weighted_digraphs_def nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (member_nth formula-decl nil more_list_props structures)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (key_value skolem-const-decl "[T, T, Weight]" c_weighted_digraphs_def nil)
    (i skolem-const-decl "below(length(map_))" c_weighted_digraphs_def nil)
    (map_ skolem-const-decl "list[[T, T, Weight]]" c_weighted_digraphs_def
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (keys_no_rep?_no_rep formula-decl nil c_weighted_digraphs_def nil)
    (member_append_fi formula-decl nil more_list_props structures)
    (has_key? const-decl "bool" c_weighted_digraphs_def nil)
    (keys_no_rep?_cons formula-decl nil c_weighted_digraphs_def nil)
    (length_append formula-decl nil list_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nth_append formula-decl nil more_list_props structures)
    (j skolem-const-decl "below(length(cons(key_value, map_)))"
     c_weighted_digraphs_def nil)
    (map2 skolem-const-decl "list[[T, T, Weight]]" c_weighted_digraphs_def
     nil)
    (i skolem-const-decl "below(length(cons(key_value, map_)))"
       c_weighted_digraphs_def nil)
    (member_append_l formula-decl nil more_list_props structures)
    (member_append_r formula-decl nil more_list_props structures)
    (i skolem-const-decl "below(length(map2))" c_weighted_digraphs_def nil)
    (i skolem-const-decl "below(length(map2))" c_weighted_digraphs_def nil))
   shostak))
 (get_val_no_rep_TCC1 0
  (get_val_no_rep_TCC1-1 nil 3658572622 ("" (subtype-tcc) nil nil)
   ((Weight formal-type-decl nil c_weighted_digraphs_def nil)
    (has_key? const-decl "bool" c_weighted_digraphs_def nil))
   nil
   (get_val_no_rep subtype "c_weighted_digraphs_def.key"
    "(c_weighted_digraphs_def.has_key?(c_weighted_digraphs_def.map))")))
 (get_val_no_rep 0
  (get_val_no_rep-1 nil 3658572707
   ("" (induct "map")
    (("1" (grind) nil nil)
     ("2" (skeep 1 :but (("cons1_var" "key_value") ("cons2_var" "map_")))
      (("2" (skeep)
        (("2" (expand "member" -3)
          (("2" (case "(key`1, key`2, value) = key_value")
            (("1" (hide -4) (("1" (grind) nil nil)) nil)
             ("2" (split -3)
              (("1" (propax) nil nil)
               ("2" (expand "get_value" 2)
                (("2" (lift-if 2)
                  (("2" (split 2)
                    (("1" (flatten)
                      (("1" (typepred "keys_no_rep?(cons(key_value, map_))")
                        (("1" (hide -2)
                          (("1" (assert)
                            (("1"
                              (inst 1 "key`1" "key`2" "value" "key_value`3")
                              (("1" (split 1)
                                (("1" (expand "member" 1)
                                  (("1" (propax) nil nil)) nil)
                                 ("2" (expand "member" 1)
                                  (("2" (propax) nil nil)) nil)
                                 ("3" (use "member_nth[[T,T,Weight]]")
                                  (("3" (assert)
                                    (("3" (skeep -1)
                                      (("3"
                                        (inst 1 "i+1" "0")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "nth" 1)
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "length" 1)
                                          (("2" (assert) nil nil))
                                          nil)
                                         ("3"
                                          (expand "length" 1)
                                          (("3"
                                            (typepred "i")
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (inst -2 "key" "value")
                        (("2" (assert)
                          (("2" (hide-all-but (-2 4))
                            (("2" (use "keys_no_rep?_cdr")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (grind) nil nil))
    nil)
   ((has_key? const-decl "bool" c_weighted_digraphs_def nil)
    (keys_no_rep? const-decl "{b: bool |
   b IFF
    NOT EXISTS ((k1, k2: T), (v1, v2: Weight)):
          member((k1, k2, v1), map) AND
           member((k1, k2, v2), map) AND
            (EXISTS (i, j: below(length(map))):
               i /= j AND
                nth(map, i) = (k1, k2, v1) AND nth(map, j) = (k1, k2, v2))}"
     c_weighted_digraphs_def nil)
    (nth def-decl "T" list_props nil) (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (member def-decl "bool" list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (get_value def-decl "Weight" c_weighted_digraphs_def nil)
    (Weight formal-type-decl nil c_weighted_digraphs_def nil)
    (T formal-type-decl nil c_weighted_digraphs_def nil)
    (list_induction formula-decl nil list_adt nil)
    (keys_no_rep?_cdr formula-decl nil c_weighted_digraphs_def nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (key_value skolem-const-decl "[T, T, Weight]" c_weighted_digraphs_def nil)
    (i skolem-const-decl "below(length(map_))" c_weighted_digraphs_def nil)
    (map_ skolem-const-decl "list[[T, T, Weight]]" c_weighted_digraphs_def
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member_nth formula-decl nil more_list_props structures)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil))
   shostak))
 (get_val_member 0
  (get_val_member-1 nil 3658600187
   ("" (induct "map")
    (("1" (grind) nil nil)
     ("2" (skeep 1 :but (("cons1_var" "kv") ("cons2_var" "map_")))
      (("2" (skeep)
        (("2" (expand "get_value" -2)
          (("2" (lift-if -2)
            (("2" (split -2)
              (("1" (flatten) (("1" (grind) nil nil)) nil)
               ("2" (flatten)
                (("2" (inst?) (("2" (assert) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (has_key? const-decl "bool" c_weighted_digraphs_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (get_value def-decl "Weight" c_weighted_digraphs_def nil)
    (member def-decl "bool" list_props nil)
    (Weight formal-type-decl nil c_weighted_digraphs_def nil)
    (T formal-type-decl nil c_weighted_digraphs_def nil)
    (list_induction formula-decl nil list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil))
   shostak))
 (get_wgt_TCC1 0
  (get_wgt_TCC1-1 nil 3658149318
   ("" (skeep)
    (("" (typepred "wgt(W)")
      (("" (expand "all_edges_in_map?")
        (("" (expand "has_key?") (("" (inst?) nil nil)) nil)) nil))
      nil))
    nil)
   ((wgd_type type-eq-decl nil c_weighted_digraphs_def nil)
    (all_edges_in_map? const-decl "bool" c_weighted_digraphs_def nil)
    (Weight formal-type-decl nil c_weighted_digraphs_def nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-type-decl nil c_weighted_digraphs_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (has_key? const-decl "bool" c_weighted_digraphs_def nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (edges const-decl "bool" c_digraphs_def nil))
   shostak
   (get_wgt subtype "c_weighted_digraphs_def.e"
    "(c_weighted_digraphs_def.has_key?(wgt(c_weighted_digraphs_def.W)))"))))


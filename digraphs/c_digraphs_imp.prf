(c_digraphs_imp
 (cdigraphs_implement_digraphs_ 0
  (cdigraphs_implement_digraphs_-1 nil 3657035870
   ("" (expand "correct_implementation")
    (("" (expand "correct_implementation_")
      (("" (split 1)
        (("1" (skeep)
          (("1" (use "vert_finite")
            (("1" (expand "digraph_verts") (("1" (propax) nil nil)) nil))
            nil))
          nil)
         ("2" (expand "digraph_edges")
          (("2" (skeep) (("2" (use "edges_finite") nil nil)) nil)) nil)
         ("3" (expand "digraph_edges")
          (("3" (expand "digraph_verts")
            (("3" (skeep) (("3" (skeep) (("3" (grind) nil nil)) nil)) nil))
            nil))
          nil)
         ("4" (expand "digraph_verts")
          (("4" (expand "digraph_edges")
            (("4" (expand "digraph_make")
              (("4" (skeep)
                (("4" (typepred "make(v, e)") (("4" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("5" (expand "digraph_size")
          (("5" (expand "restrict")
            (("5" (expand "size")
              (("5" (expand "digraph_verts")
                (("5" (expand "vert")
                  (("5" (skeep)
                    (("5" (use "eq_no_rep_same_size[T]")
                      (("1" (assert)
                        (("1" (hide 2)
                          (("1" (split 1)
                            (("1" (typepred "G")
                              (("1" (expand "cdigraph")
                                (("1" (flatten) nil nil)) nil))
                              nil)
                             ("2" (expand "set_list_eq")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (expand "is_finite")
                          (("2"
                            (inst 1 "length(data(G))"
                             "LAMBDA(x:(LAMBDA (x: T): member[T](x, data(G)))): idx(data(G),x)")
                            (("2" (expand "injective?")
                              (("2" (skeep)
                                (("2" (use "idx_inj[T]")
                                  (("1" (assert) nil nil)
                                   ("2" (typepred "G")
                                    (("2" (expand "cdigraph")
                                      (("2" (flatten) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((correct_implementation_ const-decl "bool" digraphs_abs nil)
    (size const-decl "nat" c_digraphs_def nil)
    (eq_no_rep_same_size formula-decl nil set_as_list_props structures)
    (member def-decl "bool" list_props nil)
    (G skolem-const-decl "digraph_type" c_digraphs_imp nil)
    (set_list_eq const-decl "bool" set_as_list structures)
    (injective? const-decl "bool" functions nil)
    (idx_inj formula-decl nil more_list_props structures)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (length def-decl "nat" list_props nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nth def-decl "T" list_props nil)
    (idx def-decl "{i: below(length(l)) | nth(l, i) = a}" more_list_props
     structures)
    (restrict const-decl "R" restrict nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (edge_type type-eq-decl nil digraphs_abs nil)
    (vert_type type-eq-decl nil digraphs_abs nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp nil)
    (make const-decl "{cd: (cdigraph) | vert(cd) = v AND edges(cd) = e}"
     c_digraphs_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (edges const-decl "bool" c_digraphs_def nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (edges_finite formula-decl nil c_digraphs_def nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]" c_digraphs_imp
     nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (T formal-type-decl nil c_digraphs_imp nil)
    (vert_finite formula-decl nil c_digraphs_def nil)
    (correct_implementation const-decl "bool" digraphs_abs nil))
   shostak)))


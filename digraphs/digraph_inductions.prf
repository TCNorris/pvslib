(digraph_inductions
 (size_prep 0
  (size_prep-1 nil 3307703874 ("" (grind) nil nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (digraph type-eq-decl nil digraph_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (T formal-type-decl nil digraph_inductions nil)
    (size const-decl "nat" digraph_def nil))
   nil))
 (digraph_induction_vert 0
  (digraph_induction_vert-1 nil 3307703874
   ("" (skosimp)
    (("" (lemma "size_prep")
      (("" (inst -1 "P!1")
        (("" (flatten)
          (("" (hide -1)
            (("" (split -1)
              (("1" (propax) nil nil)
               ("2" (hide 2)
                (("2" (induct "n" 1 "NAT_induction")
                  (("2" (skosimp*)
                    (("2" (inst -3 "G!1")
                      (("2" (split -3)
                        (("1" (propax) nil nil)
                         ("2" (skosimp*)
                          (("2" (inst -2 "size(GG!1)")
                            (("2" (assert) (("2" (inst?) nil nil)) nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((size_prep formula-decl nil digraph_inductions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NAT_induction formula-decl nil naturalnumbers nil)
    (size const-decl "nat" digraph_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (pred type-eq-decl nil defined_types nil)
    (digraph type-eq-decl nil digraph_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (T formal-type-decl nil digraph_inductions nil))
   nil))
 (digraph_induction_vert_not 0
  (digraph_induction_vert_not-1 nil 3307703874
   ("" (skosimp*)
    (("" (lemma "digraph_induction_vert")
      (("" (inst -1 "(LAMBDA (GG: digraph[T]): NOT P!1(GG))")
        (("" (prop)
          (("1" (inst?) nil nil)
           ("2" (skosimp*)
            (("2" (inst -3 "G!2")
              (("2" (assert)
                (("2" (skosimp*)
                  (("2" (inst -1 "GG!1") (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((digraph_induction_vert formula-decl nil digraph_inductions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (digraph type-eq-decl nil digraph_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (T formal-type-decl nil digraph_inductions nil))
   nil))
 (num_edges_prep 0
  (num_edges_prep-1 nil 3307703874
   ("" (skosimp*)
    (("" (prop)
      (("1" (skosimp*) (("1" (inst?) nil nil)) nil)
       ("2" (skosimp*) (("2" (inst?) (("2" (inst?) nil nil)) nil)) nil))
      nil))
    nil)
   ((num_edges const-decl "nat" digraph_ops nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-type-decl nil digraph_inductions nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (digraph type-eq-decl nil digraph_def nil))
   nil))
 (digraph_induction_edge 0
  (digraph_induction_edge-1 nil 3307703874
   ("" (skosimp)
    (("" (lemma "num_edges_prep")
      (("" (inst -1 "P!1")
        (("" (flatten)
          (("" (hide -1)
            (("" (split -1)
              (("1" (propax) nil nil)
               ("2" (hide 2)
                (("2" (induct "n" 1 "NAT_induction")
                  (("2" (skosimp*)
                    (("2" (inst -3 "G!1")
                      (("2" (split -3)
                        (("1" (propax) nil nil)
                         ("2" (skosimp*)
                          (("2" (inst -2 "num_edges(GG!1)")
                            (("2" (assert) (("2" (inst?) nil nil)) nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((num_edges_prep formula-decl nil digraph_inductions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NAT_induction formula-decl nil naturalnumbers nil)
    (num_edges const-decl "nat" digraph_ops nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (pred type-eq-decl nil defined_types nil)
    (digraph type-eq-decl nil digraph_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (T formal-type-decl nil digraph_inductions nil))
   nil)))


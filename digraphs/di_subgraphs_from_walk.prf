(di_subgraphs_from_walk
 (G_from_TCC1 0
  (G_from_TCC1-1 nil 3253624239
   ("" (skosimp*)
    (("" (typepred "w!1")
      (("" (split +)
        (("1" (skosimp*)
          (("1" (expand "walk?")
            (("1" (flatten)
              (("1" (expand "verts_of")
                (("1" (expand "verts_in?")
                  (("1" (expand "finseq_appl")
                    (("1" (hide -4)
                      (("1" (expand "edges_of")
                        (("1" (skosimp*)
                          (("1" (replace -1)
                            (("1" (hide -1)
                              (("1" (expand "finseq_appl")
                                (("1" (split +)
                                  (("1" (inst?) nil nil)
                                   ("2" (inst?) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "di_subgraph?")
          (("2" (assert)
            (("2" (expand "walk?")
              (("2" (flatten)
                (("2" (expand "subset?")
                  (("2" (expand "member")
                    (("2" (expand "verts_of")
                      (("2" (expand "edges_of")
                        (("2" (expand "finseq_appl")
                          (("2" (split +)
                            (("1" (skosimp*)
                              (("1" (expand "verts_in?")
                                (("1" (inst?) (("1" (assert) nil nil)) nil))
                                nil))
                              nil)
                             ("2" (skosimp*)
                              (("2" (expand "edge?")
                                (("2" (inst?) (("2" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Walk type-eq-decl nil walks_ nil) (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph -> nat]" digraphs_imp nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]" digraphs_imp nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp nil)
    (digraph type-eq-decl nil digraph_def nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil di_subgraphs_from_walk nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (verts_of const-decl "finite_set[T]" walks_ nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (edges_of const-decl "finite_set[edgetype[T]]" walks_ nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (verts_in? const-decl "bool" walks_ nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member const-decl "bool" sets nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (edge? const-decl "bool" digraphs_ nil)
    (subset? const-decl "bool" sets nil)
    (di_subgraph? const-decl "bool" di_subgraphs_ nil))
   nil
   (G_from subtype
    "(# vert := walks_[di_subgraphs_from_walk.T, digraph_type[di_subgraphs_from_walk.T], digraphs_imp[di_subgraphs_from_walk.T].digraph_verts, digraphs_imp[di_subgraphs_from_walk.T].digraph_edges, digraphs_imp[di_subgraphs_from_walk.T].digraph_size, digraphs_imp[di_subgraphs_from_walk.T].digraph_make].verts_of(di_subgraphs_from_walk.w), edges := walks_[di_subgraphs_from_walk.T, digraph_type[di_subgraphs_from_walk.T], digraphs_imp[di_subgraphs_from_walk.T].digraph_verts, digraphs_imp[di_subgraphs_from_walk.T].digraph_edges, digraphs_imp[di_subgraphs_from_walk.T].digraph_size, digraphs_imp[di_subgraphs_from_walk.T].digraph_make].edges_of(di_subgraphs_from_walk.w) #)"
    "di_subgraphs_[di_subgraphs_from_walk.T, digraph_type[T], digraphs_imp[di_subgraphs_from_walk.T].digraph_verts, digraphs_imp[di_subgraphs_from_walk.T].digraph_edges, digraphs_imp[di_subgraphs_from_walk.T].digraph_size, digraphs_imp[di_subgraphs_from_walk.T].digraph_make].di_subgraph(di_subgraphs_from_walk.G)")))
 (G_from_vert 0
  (G_from_vert-2 "" 3790101481
   ("" (skosimp*) (("" (expand "G_from") (("" (propax) nil nil)) nil)) nil)
   ((G_from const-decl "di_subgraph(G)" di_subgraphs_from_walk nil)) shostak)
  (G_from_vert-1 nil 3253624239
   ("" (skosimp*) (("" (expand "G_from") (("" (propax) nil)))) nil) nil nil))
 (vert_G_from 0
  (vert_G_from-2 "" 3790101481
   ("" (skosimp*)
    (("" (expand "G_from")
      (("" (expand "verts_of") (("" (inst?) nil nil)) nil)) nil))
    nil)
   ((G_from const-decl "di_subgraph(G)" di_subgraphs_from_walk nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Walk type-eq-decl nil walks_ nil) (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph -> nat]" digraphs_imp nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]" digraphs_imp nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp nil)
    (digraph type-eq-decl nil digraph_def nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil di_subgraphs_from_walk nil)
    (below type-eq-decl nil nat_types nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (verts_of const-decl "finite_set[T]" walks_ nil))
   shostak)
  (vert_G_from-1 nil 3253624239
   ("" (skosimp*)
    (("" (expand "G_from") (("" (expand "verts_of") (("" (inst?) nil))))))
    nil)
   ((Walk type-eq-decl nil walks_ nil) (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (is_finite const-decl "bool" finite_sets nil)
    (digraph_size const-decl "[digraph -> nat]" digraphs_imp nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]" digraphs_imp nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp nil)
    (digraph type-eq-decl nil digraph_def nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (verts_of const-decl "finite_set[T]" walks_ nil))
   nil))
 (edge?_G_from_TCC1 0
  (edge?_G_from_TCC1-2 "" 3790101481
   ("" (skosimp*) (("" (assert) nil nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (edge?_G_from subtype "di_subgraphs_from_walk.i" "below[length(w)]"))
  (edge?_G_from_TCC1-1 nil 3253624239 ("" (skosimp*) (("" (assert) nil)) nil)
   nil nil
   (edge?_G_from subtype "di_subgraphs_from_walk.i" "below[length(w)]")))
 (edge?_G_from_TCC2 0
  (edge?_G_from_TCC2-1 nil 3253624239 ("" (subtype-tcc) nil nil) nil nil
   (edge?_G_from subtype "(number_fields.+)(di_subgraphs_from_walk.i, 1)"
    "below[length(w)]")))
 (edge?_G_from 0
  (edge?_G_from-2 "" 3790101482
   ("" (skosimp*)
    (("" (expand "G_from")
      (("" (expand "edge?")
        (("" (typepred "w!1")
          (("" (expand "walk?")
            (("" (flatten)
              (("" (inst?)
                (("" (assert)
                  (("" (expand "edge?")
                    (("" (assert)
                      (("" (expand "edges_of") (("" (inst + "i!1") nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((G_from const-decl "di_subgraph(G)" di_subgraphs_from_walk nil)
    (Walk type-eq-decl nil walks_ nil) (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph -> nat]" digraphs_imp nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]" digraphs_imp nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp nil)
    (digraph type-eq-decl nil digraph_def nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil di_subgraphs_from_walk nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (edges_of const-decl "finite_set[edgetype[T]]" walks_ nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (edge? const-decl "bool" digraphs_ nil))
   shostak)
  (edge?_G_from-1 nil 3253624239
   ("" (skosimp*)
    (("" (expand "G_from")
      (("" (expand "edge?")
        (("" (typepred "w!1")
          (("" (expand "walk?")
            (("" (flatten)
              (("" (inst?)
                (("" (assert)
                  (("" (expand "edge?")
                    (("" (flatten)
                      (("" (assert)
                        (("" (expand "edges_of")
                          (("" (inst + "i!1")
                            (("" (assert) nil))))))))))))))))))))))))))
    nil)
   ((Walk type-eq-decl nil walks_ nil) (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (is_finite const-decl "bool" finite_sets nil)
    (digraph_size const-decl "[digraph -> nat]" digraphs_imp nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]" digraphs_imp nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp nil)
    (digraph type-eq-decl nil digraph_def nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (edges_of const-decl "finite_set[edgetype[T]]" walks_ nil)
    (edge? const-decl "bool" digraphs_ nil))
   nil))
 (vert_G_from_not 0
  (vert_G_from_not-2 "" 3790101483
   ("" (skosimp*)
    (("" (expand "subset?")
      (("" (skosimp*)
        (("" (rewrite "G_from_vert")
          (("" (inst?)
            (("" (assert)
              (("" (expand "remove")
                (("" (expand "member") (("" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset? const-decl "bool" sets nil)
    (G_from_vert formula-decl nil di_subgraphs_from_walk nil)
    (T formal-type-decl nil di_subgraphs_from_walk nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (digraph type-eq-decl nil digraph_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]" digraphs_imp nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (digraph_size const-decl "[digraph -> nat]" digraphs_imp nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (prewalk type-eq-decl nil walks_ nil) (walk? const-decl "bool" walks_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (finite_remove application-judgement "finite_set[T]"
     di_subgraphs_from_walk nil)
    (member const-decl "bool" sets nil) (remove const-decl "set" sets nil))
   shostak)
  (vert_G_from_not-1 nil 3253624239
   ("" (skosimp*)
    (("" (expand "subset?")
      (("" (skosimp*)
        (("" (rewrite "G_from_vert")
          (("" (inst?)
            (("" (assert)
              (("" (expand "remove")
                (("" (expand "member")
                  (("" (assert) (("" (grind) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (digraph type-eq-decl nil digraph_def nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]" digraphs_imp nil)
    (digraph_size const-decl "[digraph -> nat]" digraphs_imp nil)
    (is_finite const-decl "bool" finite_sets nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (prewalk type-eq-decl nil walks_ nil) (walk? const-decl "bool" walks_ nil)
    (Walk type-eq-decl nil walks_ nil))
   nil))
 (del_vert_di_subgraph 0
  (del_vert_di_subgraph-2 nil 3253630386
   ("" (skosimp*)
    (("" (expand "di_subgraph?")
      (("" (assert)
        (("" (prop)
          (("1" (hide -2)
            (("1" (expand "del_vert")
              (("1" (rewrite "vert_G_from_not") nil nil)) nil))
            nil)
           ("2" (lemma "vert_G_from_not")
            (("2" (inst?)
              (("2" (inst?)
                (("2" (assert)
                  (("2" (expand "subset?" +)
                    (("2" (skosimp*)
                      (("2" (expand "member")
                        (("2" (rewrite "edge_in_del_vert")
                          (("1" (hide -1 -3 2 3)
                            (("1" (expand "subset?")
                              (("1" (inst?)
                                (("1" (expand "member")
                                  (("1" (propax) nil nil)) nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -4 -5 1)
                            (("2" (expand "subset?")
                              (("2" (inst?)
                                (("2" (expand "member")
                                  (("2" (name-replace SG "G_from(G!1, w!1)")
                                    (("2" (typepred "SG")
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "remove")
                                            (("2"
                                              (expand "in?")
                                              (("2"
                                                (flatten)
                                                (("2" (ground) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((di_subgraph? const-decl "bool" di_subgraphs_ nil)
    (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (edgetype type-eq-decl nil digraphs_utils nil)
    (edge_in_del_vert formula-decl nil digraph_ops nil)
    (finite_remove application-judgement "finite_set[T]"
     di_subgraphs_from_walk nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (in? const-decl "bool" pairs structures)
    (remove const-decl "set" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (di_subgraph type-eq-decl nil di_subgraphs_ nil)
    (G_from const-decl "di_subgraph(G)" di_subgraphs_from_walk nil)
    (vert_G_from_not formula-decl nil di_subgraphs_from_walk nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (digraph type-eq-decl nil digraph_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (digraph_size const-decl "[digraph -> nat]" digraphs_imp nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (prewalk type-eq-decl nil walks_ nil) (walk? const-decl "bool" walks_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (del_vert const-decl "digraph[T]" digraph_ops nil)
    (T formal-type-decl nil di_subgraphs_from_walk nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]" digraphs_imp nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil))
   nil)
  (del_vert_di_subgraph-1 nil 3253624239
   ("" (skosimp*)
    (("" (expand "di_subgraph?")
      (("" (prop)
        (("1" (hide -2)
          (("1" (expand "del_vert") (("1" (rewrite "vert_G_from_not") nil)))))
         ("2" (lemma "vert_G_from_not")
          (("2" (inst?)
            (("2" (inst?)
              (("2" (assert)
                (("2" (expand "subset?" +)
                  (("2" (skosimp*)
                    (("2" (expand "member")
                      (("2" (rewrite "edge_in_del_vert")
                        (("1" (hide -1 -3 2 3)
                          (("1" (expand "subset?")
                            (("1" (inst?)
                              (("1" (expand "member")
                                (("1" (propax) nil)))))))))
                         ("2" (hide -4 -5 1)
                          (("2" (expand "subset?")
                            (("2" (inst?)
                              (("2" (expand "member")
                                (("2" (name-replace sg "G_from(G!1, w!1)")
                                  (("2" (typepred "SG")
                                    (("2" (inst?)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "remove")
                                          (("2"
                                            (expand "in?")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (ground)
                                                nil))))))))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil)))


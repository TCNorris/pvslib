(c_digraphs
 (IMP_digraphs__TCC1 0
  (IMP_digraphs__TCC1-2 nil 3662143309
   ("" (use "cdigraphs_implement_digraphs_") nil nil)
   ((T formal-type-decl nil c_digraphs nil)
    (cdigraphs_implement_digraphs_ formula-decl nil c_digraphs_imp nil))
   nil
   (IMP_digraphs_ assuming
    "digraphs_[c_digraphs.T, digraph_type[T], c_digraphs_imp[c_digraphs.T].digraph_verts, c_digraphs_imp[c_digraphs.T].digraph_edges, c_digraphs_imp[c_digraphs.T].digraph_size, c_digraphs_imp[c_digraphs.T].digraph_make].digraphs_"
    "concretedigraph_implements_abstractdigraph: ASSUMPTION digraphs_abs[digraphs_.T, digraphs_.ConcreteDigraph, digraphs_.vert, digraphs_.edges, digraphs_.size, digraphs_.make].correct_implementation"))
  (IMP_digraphs__TCC1-1 nil 3662143241 ("" (assuming-tcc) nil nil) nil nil
   (IMP_digraphs_ assuming
    "digraphs_[c_digraphs.T, digraph_type[T], c_digraphs_imp[c_digraphs.T].digraph_verts, c_digraphs_imp[c_digraphs.T].digraph_edges, c_digraphs_imp[c_digraphs.T].digraph_size, c_digraphs_imp[c_digraphs.T].digraph_make].digraphs_"
    "concretedigraph_implements_abstractdigraph: ASSUMPTION digraphs_abs[digraphs_.T, digraphs_.ConcreteDigraph, digraphs_.vert, digraphs_.edges, digraphs_.size, digraphs_.make].correct_implementation")))
 (data_vert_list 0
  (data_vert_list-2 "" 3790101872
   ("" (skeep)
    (("" (split 1)
      (("1" (expand "vert?")
        (("1" (assert)
          (("1" (expand "vert")
            (("1" (use "every_nth[T]")
              (("1" (assert)
                (("1" (hide 2)
                  (("1" (skeep) (("1" (use "nth_member[T]") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "vert_list")
        (("2" (typepred "C")
          (("2" (expand "cdigraph")
            (("2" (flatten)
              (("2" (skeep)
                (("2" (typepred "v")
                  (("2" (expand "vert?")
                    (("2" (expand "digraph_verts")
                      (("2" (expand "vert")
                        (("2" (use "member_nth[T]")
                          (("2" (assert)
                            (("2" (skeep -1)
                              (("2" (inst 1 "i")
                                (("2" (split 1)
                                  (("1" (propax) nil nil)
                                   ("2" (skeep)
                                    (("2" (expand "no_repetitions?" -6)
                                      (("2"
                                        (inst -6 "i" "j")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((vert_list const-decl "bool" digraphs_ nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (member_nth formula-decl nil more_list_props structures)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (vert type-eq-decl nil digraphs_ nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (vert? const-decl "bool" digraphs_ nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (nth_member formula-decl nil more_list_props structures)
    (< const-decl "bool" reals nil) (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil) (nth def-decl "T" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (member def-decl "bool" list_props nil)
    (number nonempty-type-decl nil numbers nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (every_nth formula-decl nil list_props nil)
    (T formal-type-decl nil c_digraphs nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]" c_digraphs_imp
     nil))
   shostak
   (data_vert_list subtype "data(c_digraphs.C)"
    "digraphs_[c_digraphs.T, digraph_type[T], c_digraphs_imp[c_digraphs.T].digraph_verts, c_digraphs_imp[c_digraphs.T].digraph_edges, c_digraphs_imp[c_digraphs.T].digraph_size, c_digraphs_imp[c_digraphs.T].digraph_make].VertList(c_digraphs.C)"))
  (data_vert_list-1 nil 3661532625
   ("" (skeep)
    (("" (split 1)
      (("1" (expand "vert?")
        (("1" (assert)
          (("1" (expand "vert")
            (("1" (use "every_nth[T]")
              (("1" (assert)
                (("1" (hide 2)
                  (("1" (skeep) (("1" (use "nth_member[T]") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "vert_list")
        (("2" (typepred "C")
          (("2" (expand "cdigraph")
            (("2" (flatten)
              (("2" (skeep)
                (("2" (typepred "v")
                  (("2" (expand "vert?")
                    (("2" (expand "digraph_verts")
                      (("2" (expand "vert")
                        (("2" (use "member_nth[T]")
                          (("2" (assert)
                            (("2" (skeep -1)
                              (("2" (inst 1 "i")
                                (("1" (split 1)
                                  (("1" (hide-all-but (-1 1))
                                    (("1"
                                      (use
                                       "nth_overloading[T,digraphs_
                    [T, c_digraphs_imp[T].digraph_type,
                     c_digraphs_imp[T].digraph_verts,
                     c_digraphs_imp[T].digraph_edges,
                     c_digraphs_imp[T].digraph_size,
                     c_digraphs_imp[T].digraph_make].vert(C)]")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2"
                                          (use
                                           "length_overloading[T,digraphs_
                    [T, c_digraphs_imp[T].digraph_type,
                     c_digraphs_imp[T].digraph_verts,
                     c_digraphs_imp[T].digraph_edges,
                     c_digraphs_imp[T].digraph_size,
                     c_digraphs_imp[T].digraph_make].vert(C)]")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (skeep)
                                    (("2" (expand "no_repetitions?" -6)
                                      (("2"
                                        (inst -6 "i" "j")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide-all-but (-1 -6))
                                            (("1"
                                              (use
                                               "nth_overloading[T,digraphs_
                    [T, c_digraphs_imp[T].digraph_type,
                     c_digraphs_imp[T].digraph_verts,
                     c_digraphs_imp[T].digraph_edges,
                     c_digraphs_imp[T].digraph_size,
                     c_digraphs_imp[T].digraph_make].vert(C)]")
                                              (("1"
                                                (replace -1 :hide? t)
                                                (("1"
                                                  (use
                                                   "nth_overloading[T,digraphs_
                    [T, c_digraphs_imp[T].digraph_type,
                     c_digraphs_imp[T].digraph_verts,
                     c_digraphs_imp[T].digraph_edges,
                     c_digraphs_imp[T].digraph_size,
                     c_digraphs_imp[T].digraph_make].vert(C)]")
                                                  (("1"
                                                    (replace -1 :hide? t)
                                                    (("1" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2"
                                                  (use
                                                   "length_overloading[T,digraphs_
                    [T, c_digraphs_imp[T].digraph_type,
                     c_digraphs_imp[T].digraph_verts,
                     c_digraphs_imp[T].digraph_edges,
                     c_digraphs_imp[T].digraph_size,
                     c_digraphs_imp[T].digraph_make].vert(C)]")
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2"
                                            (typepred "j")
                                            (("2"
                                              (use
                                               "length_overloading[T,digraphs_
                    [T, c_digraphs_imp[T].digraph_type,
                     c_digraphs_imp[T].digraph_verts,
                     c_digraphs_imp[T].digraph_edges,
                     c_digraphs_imp[T].digraph_size,
                     c_digraphs_imp[T].digraph_make].vert(C)]")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide-all-but 1)
                                  (("2" (typepred "i")
                                    (("2"
                                      (use
                                       "length_overloading[T,digraphs_
                    [T, c_digraphs_imp[T].digraph_type,
                     c_digraphs_imp[T].digraph_verts,
                     c_digraphs_imp[T].digraph_edges,
                     c_digraphs_imp[T].digraph_size,
                     c_digraphs_imp[T].digraph_make].vert(C)]")
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((digraph_verts const-decl "[digraph_type -> [T -> bool]]" c_digraphs_imp
     nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (nth_member formula-decl nil more_list_props structures)
    (vert const-decl "bool" c_digraphs_def nil)
    (vert? const-decl "bool" digraphs_ nil)
    (vert type-eq-decl nil digraphs_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (is_finite const-decl "bool" finite_sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (member_nth formula-decl nil more_list_props structures)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (vert_list const-decl "bool" digraphs_ nil))
   nil
   (data_vert_list subtype "data(c_digraphs.C)"
    "digraphs_[c_digraphs.T, digraph_type[T], c_digraphs_imp[c_digraphs.T].digraph_verts, c_digraphs_imp[c_digraphs.T].digraph_edges, c_digraphs_imp[c_digraphs.T].digraph_size, c_digraphs_imp[c_digraphs.T].digraph_make].VertList(c_digraphs.C)")))
 (fully_connected_edges_TCC1 0
  (fully_connected_edges_TCC1-1 nil 3662123336
   ("" (skeep) (("" (use "msrl_nat") (("" (assert) nil nil)) nil)) nil)
   ((msrl_nat judgement-tcc nil subrange_list structures)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (msrl_nat application-judgement "list[nat]" subrange_list structures))
   nil
   (fully_connected_edges subtype "c_digraphs.i"
    "below[length[list[nat]](ll)]")))
 (fully_connected_edges_TCC2 0
  (fully_connected_edges_TCC2-3 nil 3662145002
   ("" (skeep) (("" (use "msrl_nat") (("" (assert) nil nil)) nil)) nil)
   ((msrl_nat judgement-tcc nil subrange_list structures)
    (size skolem-const-decl "nat" c_digraphs nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (msrl_nat application-judgement "list[nat]" subrange_list structures)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (fully_connected_edges subtype
    "subrange_list.make_srl(0, (number_fields.-)(c_digraphs.size, 1))"
    "list[nat]"))
  (fully_connected_edges_TCC2-2 nil 3662142234
   ("" (skeep)
    (("" (typepred "clone_times(size)(make_srl(0, size-1))")
      (("1" (assert)
        (("1" (skeep)
          (("1" (split 1)
            (("1" (inst? -3)
              (("1" (replace -3 :hide? t)
                (("1" (skeep)
                  (("1" (typepred "make_srl(0, size-1)")
                    (("1" (hide-all-but (-2 1))
                      (("1" (expand "subrange_list?")
                        (("1" (flatten)
                          (("1" (inst -1 "nth[nat](make_srl(0, size-1), j)")
                            (("1" (assert)
                              (("1" (hide 2)
                                (("1" (use "nth_member[nat]")
                                  (("1" (assert)
                                    (("1" (use "member_overloading[int,nat]")
                                      (("1" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (inst? -3)
              (("2" (replace -3 :hide? t)
                (("2" (typepred "make_srl(0, size-1)")
                  (("2" (hide-all-but (-2 1))
                    (("2" (expand "subrange_list?")
                      (("2" (flatten)
                        (("2" (expand "no_repetitions?")
                          (("2" (hide -1)
                            (("2" (skeep)
                              (("2" (inst -1 "i!1" "j")
                                (("1" (assert)
                                  (("1" (use "nth_overloading[int,nat]")
                                    (("1" (assert)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (use "nth_overloading[int,nat]")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (typepred "j")
                                  (("2" (use "length_overloading[int,nat]")
                                    (("2" (assert) nil nil)) nil))
                                  nil)
                                 ("3" (typepred "i!1")
                                  (("3" (use "length_overloading[int,nat]")
                                    (("3" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (use "msrl_nat") (("2" (assert) nil nil)) nil))
      nil))
    nil)
   ((msrl_nat judgement-tcc nil subrange_list structures)
    (msrl_nat application-judgement "list[nat]" subrange_list structures)
    (member_overloading formula-decl nil list_exp_ol structures)
    (nth_member formula-decl nil more_list_props structures)
    (nth_overloading formula-decl nil list_exp_ol structures)
    (length_overloading formula-decl nil list_exp_ol structures)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (subrange_list? const-decl "bool" subrange_list structures)
    (subrange_list type-eq-decl nil subrange_list structures)
    (make_srl const-decl "subrange_list(i, j)" subrange_list structures))
   nil
   (fully_connected_edges subtype
    "subrange_list.make_srl(0, (number_fields.-)(c_digraphs.size, 1))"
    "list[nat]"))
  (fully_connected_edges_TCC2-1 nil 3662141875 ("" (subtype-tcc) nil nil) nil
   nil
   (fully_connected_edges subtype
    "subrange_list.make_srl(0, (number_fields.-)(c_digraphs.size, 1))"
    "list[nat]")))
 (fully_connected_edges_TCC3 0
  (fully_connected_edges_TCC3-3 "" 3790101873
   ("" (skeep)
    (("" (typepred "clone_times[nat](size)(make_srl(0, size-1))")
      (("1" (assert)
        (("1" (skeep)
          (("1" (split 1)
            (("1" (inst? -3)
              (("1" (replace -3 :hide? t)
                (("1" (skeep)
                  (("1" (typepred "make_srl(0, size-1)")
                    (("1" (hide-all-but (-2 1))
                      (("1" (expand "subrange_list?")
                        (("1" (flatten)
                          (("1" (inst -1 "nth[nat](make_srl(0, size-1), j)")
                            (("1" (assert)
                              (("1" (hide 2)
                                (("1" (use "nth_member[nat]") nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (inst? -3)
              (("2" (replace -3 :hide? t)
                (("2" (typepred "make_srl(0, size-1)")
                  (("2" (hide-all-but (-2 1))
                    (("2" (expand "subrange_list?")
                      (("2" (flatten)
                        (("2" (expand "no_repetitions?")
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (use "msrl_nat") (("2" (assert) nil nil)) nil))
      nil))
    nil)
   ((msrl_nat judgement-tcc nil subrange_list structures)
    (size skolem-const-decl "nat" c_digraphs nil)
    (msrl_nat application-judgement "list[nat]" subrange_list structures)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth_member formula-decl nil more_list_props structures)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil) (nth def-decl "T" list_props nil)
    (clone_times def-decl
     "{r: list[list[nat]] | length(r) = n AND FORALL (i: below(n)): nth(r, i) = l}"
     more_list_props structures)
    (subrange_list? const-decl "bool" subrange_list structures)
    (subrange_list type-eq-decl nil subrange_list structures)
    (make_srl const-decl "subrange_list(i, j)" subrange_list structures)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil))
   shostak
   (fully_connected_edges subtype
    "more_list_props[nat].clone_times(c_digraphs.size)(subrange_list.make_srl(0, (number_fields.-)(c_digraphs.size, 1)))"
    "{ll: list_adt[list[nat]].list | booleans.AND(list_props[list[nat]].length(ll) = c_digraphs.size, FORALL (i: naturalnumbers.below(c_digraphs.size)): booleans.AND(FORALL (j: naturalnumbers.below(list_props[nat].length(list_props[list[nat]].nth(ll, i)))): reals.<(list_props[nat].nth(list_props[list[nat]].nth(ll, i), j), c_digraphs.size), more_list_props[nat].no_repetitions?(list_props[list[nat]].nth(ll, i))))}"))
  (fully_connected_edges_TCC3-2 nil 3662144858
   ("" (skeep)
    (("" (typepred "clone_times[nat](size)(make_srl(0, size-1))")
      (("1" (assert)
        (("1" (skeep)
          (("1" (split 1)
            (("1" (inst? -3)
              (("1" (replace -3 :hide? t)
                (("1" (skeep)
                  (("1" (typepred "make_srl(0, size-1)")
                    (("1" (hide-all-but (-2 1))
                      (("1" (expand "subrange_list?")
                        (("1" (flatten)
                          (("1" (inst -1 "nth[nat](make_srl(0, size-1), j)")
                            (("1" (assert)
                              (("1" (hide 2)
                                (("1" (use "nth_member[nat]")
                                  (("1" (assert)
                                    (("1" (use "member_overloading[int,nat]")
                                      (("1" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (inst? -3)
              (("2" (replace -3 :hide? t)
                (("2" (typepred "make_srl(0, size-1)")
                  (("2" (hide-all-but (-2 1))
                    (("2" (expand "subrange_list?")
                      (("2" (flatten)
                        (("2" (expand "no_repetitions?")
                          (("2" (hide -1)
                            (("2" (skeep)
                              (("2" (inst -1 "i!1" "j")
                                (("1" (assert)
                                  (("1" (use "nth_overloading[int,nat]")
                                    (("1" (assert)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (use "nth_overloading[int,nat]")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (typepred "j")
                                  (("2" (use "length_overloading[int,nat]")
                                    (("2" (assert) nil nil)) nil))
                                  nil)
                                 ("3" (typepred "i!1")
                                  (("3" (use "length_overloading[int,nat]")
                                    (("3" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (use "msrl_nat") (("2" (assert) nil nil)) nil))
      nil))
    nil)
   ((make_srl const-decl "subrange_list(i, j)" subrange_list structures)
    (subrange_list type-eq-decl nil subrange_list structures)
    (subrange_list? const-decl "bool" subrange_list structures)
    (clone_times def-decl
     "{r: list[list[nat]] | length(r) = n AND FORALL (i: below(n)): nth(r, i) = l}"
     more_list_props structures)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (nth_member formula-decl nil more_list_props structures)
    (msrl_nat application-judgement "list[nat]" subrange_list structures)
    (msrl_nat judgement-tcc nil subrange_list structures))
   nil
   (fully_connected_edges subtype
    "more_list_props[nat].clone_times(c_digraphs.size)(subrange_list.make_srl(0, (number_fields.-)(c_digraphs.size, 1)))"
    "{ll: list_adt[list[nat]].list | booleans.AND(list_props[list[nat]].length(ll) = c_digraphs.size, FORALL (i: naturalnumbers.below(c_digraphs.size)): booleans.AND(FORALL (j: naturalnumbers.below(list_props[nat].length(list_props[list[nat]].nth(ll, i)))): reals.<(list_props[nat].nth(list_props[list[nat]].nth(ll, i), j), c_digraphs.size), more_list_props[nat].no_repetitions?(list_props[list[nat]].nth(ll, i))))}"))
  (fully_connected_edges_TCC3-1 nil 3662142453 ("" (subtype-tcc) nil nil)
   ((length_null formula-decl nil more_list_props structures)
    (no_repetitions? const-decl "bool" more_list_props structures))
   nil
   (fully_connected_edges subtype
    "more_list_props[nat].clone_times(c_digraphs.size)(subrange_list.make_srl(0, (number_fields.-)(c_digraphs.size, 1)))"
    "{ll: list_adt[list[nat]].list | booleans.AND(list_props[list[nat]].length(ll) = c_digraphs.size, FORALL (i: naturalnumbers.below(c_digraphs.size)): booleans.AND(FORALL (j: naturalnumbers.below(list_props[nat].length(list_props[list[nat]].nth(ll, i)))): reals.<(list_props[nat].nth(list_props[list[nat]].nth(ll, i), j), c_digraphs.size), more_list_props[nat].no_repetitions?(list_props[list[nat]].nth(ll, i))))}")))
 (fully_connected_edges_TCC4 0
  (fully_connected_edges_TCC4-2 "" 3744338124 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (length def-decl "nat" list_props nil)
    (/= const-decl "boolean" notequal nil)
    (no_repetitions? const-decl "bool" more_list_props structures))
   shostak
   (fully_connected_edges subtype "list_adt[list[nat]].null"
    "{ll: list_adt[list[nat]].list | booleans.AND(list_props[list[nat]].length(ll) = c_digraphs.size, FORALL (i: naturalnumbers.below(c_digraphs.size)): booleans.AND(FORALL (j: naturalnumbers.below(list_props[nat].length(list_props[list[nat]].nth(ll, i)))): reals.<(list_props[nat].nth(list_props[list[nat]].nth(ll, i), j), c_digraphs.size), more_list_props[nat].no_repetitions?(list_props[list[nat]].nth(ll, i))))}"))
  (fully_connected_edges_TCC4-1 nil 3662144805 ("" (subtype-tcc) nil nil)
   ((no_repetitions? const-decl "bool" more_list_props structures)) nil
   (fully_connected_edges subtype "list_adt[list[nat]].null"
    "{ll: list_adt[list[nat]].list | booleans.AND(list_props[list[nat]].length(ll) = c_digraphs.size, FORALL (i: naturalnumbers.below(c_digraphs.size)): booleans.AND(FORALL (j: naturalnumbers.below(list_props[nat].length(list_props[list[nat]].nth(ll, i)))): reals.<(list_props[nat].nth(list_props[list[nat]].nth(ll, i), j), c_digraphs.size), more_list_props[nat].no_repetitions?(list_props[list[nat]].nth(ll, i))))}")))
 (make_fully_connected_TCC1 0
  (make_fully_connected_TCC1-1 nil 3662123336
   ("" (skeep)
    (("" (expand "cdigraph")
      (("" (typepred "fully_connected_edges(length[T](vl))")
        (("" (hide -1)
          (("" (assert)
            (("" (split)
              (("1" (expand "list_of_idxs")
                (("1" (expand "size")
                  (("1" (skeep)
                    (("1" (skeep)
                      (("1" (inst?)
                        (("1" (flatten) (("1" (inst?) nil nil)) nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep) (("2" (inst?) (("2" (flatten) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdigraph const-decl "bool" c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (size const-decl "nat" c_digraphs_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil) (nth def-decl "T" list_props nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (fully_connected_edges const-decl "{ll: list[list[nat]] |
   length(ll) = size AND
    FORALL (i: below(size)):
      LET l = nth(ll, i) IN
        (FORALL (j: below(length(l))): nth(l, j) < size) AND
         no_repetitions?(l)}" c_digraphs nil)
    (T formal-type-decl nil c_digraphs nil))
   nil
   (make_fully_connected subtype
    "(# data := c_digraphs.vl, adjs := c_digraphs.fully_connected_edges(list_props[c_digraphs.T].length(c_digraphs.vl)) #)"
    "(c_digraphs_def[c_digraphs.T].cdigraph)")))
 (mfc_is_fully_connected 0
  (mfc_is_fully_connected-2 "" 3790101875
   ("" (skeep)
    (("" (assert)
      (("" (flatten)
        (("" (assert)
          (("" (expand "make_fully_connected")
            (("" (expand "vert")
              (("" (expand "fully_connected_edges")
                (("" (lift-if 1)
                  (("" (split 1)
                    (("1" (flatten)
                      (("1" (invoke (typepred "%1") (! 1 2 1))
                        (("1" (inst? -3 :where 1)
                          (("1" (replace -3 1 :hide? t)
                            (("1" (invoke (typepred "%1") (! 1 2))
                              (("1" (expand "subrange_list?")
                                (("1" (flatten)
                                  (("1" (inst? -2 :where 1)
                                    (("1" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((edges const-decl "bool" c_digraphs_def nil)
    (T formal-type-decl nil c_digraphs nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil) (nth def-decl "T" list_props nil)
    (clone_times def-decl
     "{r: list[list[nat]] | length(r) = n AND FORALL (i: below(n)): nth(r, i) = l}"
     more_list_props structures)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (subrange_list? const-decl "bool" subrange_list structures)
    (subrange_list type-eq-decl nil subrange_list structures)
    (make_srl const-decl "subrange_list(i, j)" subrange_list structures)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (member def-decl "bool" list_props nil)
    (idx def-decl "{i: below(length(l)) | nth(l, i) = a}" more_list_props
     structures)
    (fully_connected_edges const-decl "{ll: list[list[nat]] |
   length(ll) = size AND
    FORALL (i: below(size)):
      LET l = nth(ll, i) IN
        (FORALL (j: below(length(l))): nth(l, j) < size) AND
         no_repetitions?(l)}" c_digraphs nil)
    (make_fully_connected const-decl "(cdigraph)" c_digraphs nil))
   shostak)
  (mfc_is_fully_connected-1 nil 3665226239
   ("" (skeep)
    (("" (assert)
      (("" (flatten)
        (("" (assert)
          (("" (expand "make_fully_connected")
            (("" (expand "vert")
              (("" (expand "fully_connected_edges")
                (("" (lift-if 1)
                  (("" (split 1)
                    (("1" (flatten)
                      (("1" (invoke (typepred "%1") (! 1 2 1))
                        (("1" (inst? -3 :where 1)
                          (("1" (replace -3 1 :hide? t)
                            (("1" (invoke (typepred "%1") (! 1 2))
                              (("1" (expand "subrange_list?")
                                (("1" (flatten)
                                  (("1" (inst? -2 :where 1)
                                    (("1" (assert)
                                      (("1"
                                        (hide-all-but (-2 1))
                                        (("1"
                                          (use "member_parm[int]")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((edges const-decl "bool" c_digraphs_def nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (idx def-decl "{i: below(length(l)) | nth(l, i) = a}" more_list_props
     structures)
    (make_srl const-decl "subrange_list(i, j)" subrange_list structures)
    (subrange_list type-eq-decl nil subrange_list structures)
    (subrange_list? const-decl "bool" subrange_list structures)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (clone_times def-decl
     "{r: list[list[nat]] | length(r) = n AND FORALL (i: below(n)): nth(r, i) = l}"
     more_list_props structures))
   shostak)))


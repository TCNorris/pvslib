(digraphs_imp
 (digraphs_implement_digraphs_ 0
  (digraphs_implement_digraphs_-1 nil 3657370884
   ("" (expand "correct_implementation")
    (("" (expand "correct_implementation_")
      (("" (expand "digraph_verts")
        (("" (expand "digraph_edges")
          (("" (split 1)
            (("1" (skeep)
              (("1" (skeep)
                (("1" (typepred "G")
                  (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (grind) nil nil)
             ("3" (expand "digraph_size")
              (("3" (expand "size") (("3" (propax) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((correct_implementation_ const-decl "bool" digraphs_abs nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]" digraphs_imp nil)
    (digraph_size const-decl "[digraph -> nat]" digraphs_imp nil)
    (size const-decl "nat" digraph_def nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (make const-decl "digraph" digraph_def nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-type-decl nil digraphs_imp nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp nil)
    (correct_implementation const-decl "bool" digraphs_abs nil))
   shostak)))


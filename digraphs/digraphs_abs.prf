(digraphs_abs
 (correct_implementation__TCC1 0
  (correct_implementation__TCC1-1 nil 3660743015 ("" (subtype-tcc) nil nil)
   ((injective? const-decl "bool" functions nil)
    (is_finite const-decl "bool" finite_sets nil))
   nil
   (correct_implementation_ subtype "digraphs_abs.vert(digraphs_abs.G)"
    "finite_set[T]")))
 (vert_is_finite 0
  (vert_is_finite-1 nil 3657644038 ("" (grind) nil nil)
   ((ConcreteDigraph formal-type-decl nil digraphs_abs nil)
    (injective? const-decl "bool" functions nil)
    (is_finite const-decl "bool" finite_sets nil)
    (correct_implementation_ const-decl "bool" digraphs_abs nil)
    (correct_implementation const-decl "bool" digraphs_abs nil))
   shostak))
 (edges_is_finite 0
  (edges_is_finite-1 nil 3657644247 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ConcreteDigraph formal-type-decl nil digraphs_abs nil)
    (injective? const-decl "bool" functions nil)
    (is_finite const-decl "bool" finite_sets nil)
    (correct_implementation_ const-decl "bool" digraphs_abs nil)
    (correct_implementation const-decl "bool" digraphs_abs nil))
   shostak))
 (edges_in_verts 0
  (edges_in_verts-1 nil 3657644258 ("" (grind) nil nil)
   ((ConcreteDigraph formal-type-decl nil digraphs_abs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (x!1 skolem-const-decl "T" digraphs_abs nil)
    (G!1 skolem-const-decl "ConcreteDigraph" digraphs_abs nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]" digraphs_abs
     nil)
    (T formal-type-decl nil digraphs_abs nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (injective? const-decl "bool" functions nil)
    (is_finite const-decl "bool" finite_sets nil)
    (correct_implementation_ const-decl "bool" digraphs_abs nil)
    (correct_implementation const-decl "bool" digraphs_abs nil))
   shostak))
 (make_ok 0
  (make_ok-1 nil 3657644987
   ("" (skeep)
    (("" (expand "correct_implementation")
      (("" (expand "correct_implementation_")
        (("" (flatten) (("" (inst? -4) nil nil)) nil)) nil))
      nil))
    nil)
   ((correct_implementation const-decl "bool" digraphs_abs nil)
    (T formal-type-decl nil digraphs_abs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (vert_type type-eq-decl nil digraphs_abs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (edge_type type-eq-decl nil digraphs_abs nil)
    (correct_implementation_ const-decl "bool" digraphs_abs nil))
   shostak))
 (make_ok_v 0
  (make_ok_v-1 nil 3657878486
   ("" (skeep)
    (("" (expand "correct_implementation")
      (("" (expand "correct_implementation_")
        (("" (flatten) (("" (inst? -4) (("" (flatten) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((correct_implementation const-decl "bool" digraphs_abs nil)
    (edge_type type-eq-decl nil digraphs_abs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vert_type type-eq-decl nil digraphs_abs nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil digraphs_abs nil)
    (correct_implementation_ const-decl "bool" digraphs_abs nil))
   shostak))
 (make_ok_e 0
  (make_ok_e-1 nil 3657878546
   ("" (skeep)
    (("" (expand "correct_implementation")
      (("" (expand "correct_implementation_")
        (("" (flatten) (("" (inst? -4) (("" (flatten) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((correct_implementation const-decl "bool" digraphs_abs nil)
    (edge_type type-eq-decl nil digraphs_abs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vert_type type-eq-decl nil digraphs_abs nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil digraphs_abs nil)
    (correct_implementation_ const-decl "bool" digraphs_abs nil))
   nil))
 (size_def_TCC1 0
  (size_def_TCC1-1 nil 3660743592 ("" (use "vert_is_finite") nil nil)
   ((vert_is_finite formula-decl nil digraphs_abs nil)) nil
   (size_def subtype "digraphs_abs.vert(digraphs_abs.G)" "finite_set[T]")))
 (size_def 0
  (size_def-1 nil 3660743600
   ("" (skeep)
    (("" (expand "correct_implementation")
      (("" (expand "correct_implementation_")
        (("" (flatten) (("" (inst? -5) nil nil)) nil)) nil))
      nil))
    nil)
   ((correct_implementation const-decl "bool" digraphs_abs nil)
    (ConcreteDigraph formal-type-decl nil digraphs_abs nil)
    (correct_implementation_ const-decl "bool" digraphs_abs nil))
   shostak)))


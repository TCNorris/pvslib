(sigma_posnat
 (IMP_sigma_TCC1 0
  (IMP_sigma_TCC1-1 nil 3352459361 ("" (assuming-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (IMP_sigma assuming "sigma[posnat].sigma"
    "connected_domain: ASSUMPTION (FORALL (x, y: sigma.T), (z: integers.integer): booleans.IMPLIES(booleans.AND(reals.<=(x, z), reals.<=(z, y)), sigma.T_pred(z)))")))
 (int_is_T_high 0
  (int_is_T_high-2 "" 3790088497
   ("" (skosimp*) (("" (inst-cp + "1") (("" (assert) nil nil)) nil)) nil) nil
   shostak (int_is_T_high subtype "sigma_posnat.x" "T_high[posnat]"))
  (int_is_T_high-1 nil 3352459918
   ("" (skosimp*)
    (("" (inst-cp + "1")
      (("" (inst + "x!1") (("1" (assert) nil nil) ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil (int_is_T_high subtype "sigma_posnat.x" "T_high[posnat]")))
 (posnat_is_T_low 0
  (posnat_is_T_low-1 nil 3352459918 ("" (judgement-tcc) nil nil) nil nil
   (posnat_is_T_low subtype "sigma_posnat.x" "T_low[posnat]")))
 (sigma_shift 0
  (sigma_shift-1 nil 3352459361
   ("" (skosimp*) (("" (rewrite "sigma_shift_T") nil nil)) nil)
   ((nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (sigma_shift_T formula-decl nil sigma nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (T_high type-eq-decl nil sigma nil)
    (T_low type-eq-decl nil sigma nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil))
   nil))
 (sigma_shift_neg_TCC1 0
  (sigma_shift_neg_TCC1-2 "" 3790088497
   ("" (skosimp*) (("" (assert) nil nil)) nil) nil shostak
   (sigma_shift_neg subtype
    "(number_fields.-)(sigma_posnat.low, sigma_posnat.m)" "T_low[posnat]"))
  (sigma_shift_neg_TCC1-1 nil 3352459361
   ("" (skosimp*)
    (("" (inst + "low!1 - m!1")
      (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (sigma_shift_neg subtype
    "(number_fields.-)(sigma_posnat.low, sigma_posnat.m)" "T_low[posnat]")))
 (sigma_shift_neg_TCC2 0
  (sigma_shift_neg_TCC2-2 "" 3790088497
   ("" (skosimp*) (("" (assert) nil nil)) nil) nil shostak
   (sigma_shift_neg subtype
    "(number_fields.-)(sigma_posnat.n, sigma_posnat.m)" "posnat"))
  (sigma_shift_neg_TCC2-1 nil 3352459361
   ("" (skosimp*)
    (("" (assert) (("" (inst + "1") (("" (assert) nil nil)) nil)) nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (sigma_shift_neg subtype
    "(number_fields.-)(sigma_posnat.n, sigma_posnat.m)" "posnat")))
 (sigma_shift_neg 0
  (sigma_shift_neg-1 nil 3352459361
   ("" (skosimp*)
    (("" (lemma "sigma_shift_T2")
      (("" (inst?)
        (("" (inst - "high!1" "low!1" "0 - m!1")
          (("" (assert)
            (("" (prop)
              (("1" (replace -1 :hide? t)
                (("1" (rewrite "sigma_eq")
                  (("1" (skosimp*) (("1" (assert) nil nil)) nil)) nil))
                nil)
               ("2" (case "high!1<low!1")
                (("1" (expand "sigma") (("1" (assert) nil nil)) nil)
                 ("2" (assert) nil nil))
                nil)
               ("3" (assert)
                (("3" (expand "sigma") (("3" (propax) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sigma_shift_T2 formula-decl nil sigma nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (T_high type-eq-decl nil sigma nil)
    (T_low type-eq-decl nil sigma nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (sigma_eq formula-decl nil sigma nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (sigma def-decl "real" sigma nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil))
   nil))
 (sigma_split_ge 0
  (sigma_split_ge-2 "" 3790088498
   ("" (skosimp*) (("" (rewrite "sigma_split") nil nil)) nil) nil shostak)
  (sigma_split_ge-1 nil 3352459361
   ("" (skosimp*)
    (("" (rewrite "sigma_split")
      (("1" (expand "sigma") (("1" (lift-if) (("1" (assert) nil nil)) nil))
        nil)
       ("2" (expand "sigma") (("2" (lift-if) (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((sigma_split formula-decl nil sigma nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (T_high type-eq-decl nil sigma nil)
    (T_low type-eq-decl nil sigma nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil))
   nil)))


(power_props
 (pow_0_0 0
  (pow_0_0-1 nil 3307281813 ("" (grind) nil nil)
   ((expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (nat_expt application-judgement "nat" exponentiation nil))
   shostak))
 (pow_sq_TCC1 0
  (pow_sq_TCC1-1 nil 3318335667 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (pow_sq subtype "2"
    "{i: integers.int | booleans.OR(power_props.x /= 0, reals.>=(i, 0))}")))
 (pow_sq 0
  (pow_sq-1 nil 3318335670 ("" (grind) nil nil)
   ((expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (sq const-decl "nonneg_real" sq nil))
   shostak))
 (pow_neg_n_odd_TCC1 0
  (pow_neg_n_odd_TCC1-1 nil 3546006073 ("" (subtype-tcc) nil nil)
   ((even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (pow_neg_n_odd subtype
    "((number_fields.+)(number_fields.*(2, power_props.n), 1))"
    "{i: integers.int | booleans.OR(((number_fields.-)(power_props.x)) /= 0, reals.>=(i, 0))}")))
 (pow_neg_n_odd_TCC2 0
  (pow_neg_n_odd_TCC2-1 nil 3546006073 ("" (subtype-tcc) nil nil)
   ((even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (pow_neg_n_odd subtype
    "((number_fields.+)(number_fields.*(2, power_props.n), 1))"
    "{i: integers.int | booleans.OR(power_props.x /= 0, reals.>=(i, 0))}")))
 (pow_neg_n_odd 0
  (pow_neg_n_odd-1 nil 3546006073
   ("" (skeep)
    (("" (case "x=0")
      (("1" (grind) nil nil)
       ("2" (rewrite "expt_plus")
        (("2" (rewrite "expt_plus")
          (("2" (rewrite "expt_times")
            (("2" (rewrite "expt_times")
              (("2" (rewrite "pow_sq")
                (("2" (rewrite "pow_sq")
                  (("2" (rewrite "sq_neg")
                    (("2" (rewrite "expt_x1")
                      (("2" (rewrite "expt_x1") (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (nnreal_exp application-judgement "nnreal" exponentiation nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (sq_neg formula-decl nil sq nil) (pow_sq formula-decl nil power_props nil)
    (expt_times formula-decl nil exponentiation nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (expt_plus formula-decl nil exponentiation nil))
   nil))
 (pow_neg_odd_TCC1 0
  (pow_neg_odd_TCC1-1 nil 3546003881 ("" (subtype-tcc) nil nil)
   ((odd? const-decl "bool" integers nil)
    (/= const-decl "boolean" notequal nil)
    (even_times_int_is_even application-judgement "even_int" integers nil))
   nil
   (pow_neg_odd subtype "power_props.n"
    "{i: integers.int | booleans.OR(((number_fields.-)(power_props.x)) /= 0, reals.>=(i, 0))}")))
 (pow_neg_odd_TCC2 0
  (pow_neg_odd_TCC2-1 nil 3546003881 ("" (subtype-tcc) nil nil)
   ((odd? const-decl "bool" integers nil)
    (/= const-decl "boolean" notequal nil)
    (even_times_int_is_even application-judgement "even_int" integers nil))
   nil
   (pow_neg_odd subtype "power_props.n"
    "{i: integers.int | booleans.OR(power_props.x /= 0, reals.>=(i, 0))}")))
 (pow_neg_odd 0
  (pow_neg_odd-1 nil 3307287721
   ("" (skeep)
    (("" (expand "odd?")
      (("" (skeep -1)
        (("" (case "j>=0")
          (("1" (replaces -2) (("1" (rewrite "pow_neg_n_odd") nil nil)) nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((even_times_int_is_even application-judgement "even_int" integers nil)
    (odd? const-decl "bool" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pow_neg_n_odd formula-decl nil power_props nil)
    (TRUE const-decl "bool" booleans nil))
   nil))
 (pow_neg_n_even_TCC1 0
  (pow_neg_n_even_TCC1-1 nil 3546006109 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (pow_neg_n_even subtype "(number_fields.*(2, power_props.n))"
    "{i: integers.int | booleans.OR(((number_fields.-)(power_props.x)) /= 0, reals.>=(i, 0))}")))
 (pow_neg_n_even_TCC2 0
  (pow_neg_n_even_TCC2-1 nil 3546006109 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (pow_neg_n_even subtype "(number_fields.*(2, power_props.n))"
    "{i: integers.int | booleans.OR(power_props.x /= 0, reals.>=(i, 0))}")))
 (pow_neg_n_even 0
  (pow_neg_n_even-1 nil 3546006109
   ("" (skeep)
    (("" (case "x=0")
      (("1" (grind) nil nil)
       ("2" (rewrite "expt_times")
        (("2" (rewrite "expt_times")
          (("2" (rewrite "pow_sq")
            (("2" (rewrite "pow_sq") (("2" (rewrite "sq_neg") nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (^ const-decl "real" exponentiation nil) (sq_neg formula-decl nil sq nil)
    (pow_sq formula-decl nil power_props nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (expt_times formula-decl nil exponentiation nil))
   nil))
 (pow_neg_even_TCC1 0
  (pow_neg_even_TCC1-1 nil 3546006176 ("" (subtype-tcc) nil nil)
   ((even? const-decl "bool" integers nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (pow_neg_even subtype "power_props.n"
    "{i: integers.int | booleans.OR(((number_fields.-)(power_props.x)) /= 0, reals.>=(i, 0))}")))
 (pow_neg_even_TCC2 0
  (pow_neg_even_TCC2-1 nil 3546006176 ("" (subtype-tcc) nil nil)
   ((even? const-decl "bool" integers nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (pow_neg_even subtype "power_props.n"
    "{i: integers.int | booleans.OR(power_props.x /= 0, reals.>=(i, 0))}")))
 (pow_neg_even 0
  (pow_neg_even-1 nil 3307287744
   ("" (skeep)
    (("" (expand "even?")
      (("" (skeep -1)
        (("" (case "j>=0")
          (("1" (replaces -2) (("1" (rewrite "pow_neg_n_even") nil nil)) nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((even? const-decl "bool" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (pow_neg_n_even formula-decl nil power_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (TRUE const-decl "bool" booleans nil)
    (even_times_int_is_even application-judgement "even_int" integers nil))
   nil))
 (pow_pos_TCC1 0
  (pow_pos_TCC1-1 nil 3307288079 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) shostak
   (pow_pos subtype "power_props.n"
    "{i: integers.int | booleans.OR(power_props.x /= 0, reals.>=(i, 0))}")))
 (pow_pos 0
  (pow_pos-1 nil 3307282465
   ("" (skeep)
    (("" (case "x=0")
      (("1" (grind) nil nil)
       ("2" (use "posreal_exp")
        (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (> const-decl "bool" reals nil)
    (x skolem-const-decl "real" power_props nil)
    (>= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (posreal_exp judgement-tcc nil exponentiation nil))
   nil))
 (pow_even_n_pos 0
  (pow_even_n_pos-1 nil 3545998410
   ("" (skeep)
    (("" (case "x>=0")
      (("1" (rewrite "pow_pos") nil nil)
       ("2" (lemma "pow_neg_n_even")
        (("2" (inst?)
          (("2" (replaces -1 :dir rl) (("2" (rewrite "pow_pos") nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (pow_pos formula-decl nil power_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (pow_neg_n_even formula-decl nil power_props nil))
   nil))
 (pow_even_pos 0
  (pow_even_pos-1 nil 3307282506
   ("" (skeep)
    (("" (expand "even?")
      (("" (skeep -1)
        (("" (case "j>=0")
          (("1" (replaces -2) (("1" (rewrite "pow_even_n_pos") nil nil)) nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((even? const-decl "bool" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (pow_even_n_pos formula-decl nil power_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (TRUE const-decl "bool" booleans nil)
    (even_times_int_is_even application-judgement "even_int" integers nil))
   nil))
 (pow_odd_n_neg 0
  (pow_odd_n_neg-1 nil 3545998363
   ("" (skeep)
    (("" (case "x=0")
      (("1" (grind) nil nil)
       ("2" (rewrite "expt_plus")
        (("2" (case-replace "2*n=n*2")
          (("1" (hide -1)
            (("1" (rewrite "expt_times")
              (("1" (rewrite "expt_x1")
                (("1" (rewrite "pow_sq") (("1" (grind-reals) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (expt_times formula-decl nil exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (pow_sq formula-decl nil power_props nil)
    (neg_times_le formula-decl nil real_props nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (expt_plus formula-decl nil exponentiation nil))
   nil))
 (pow_odd_neg 0
  (pow_odd_neg-1 nil 3307282587
   ("" (skeep)
    (("" (expand "odd?")
      (("" (skeep -1)
        (("" (case "j >= 0")
          (("1" (replaces -2) (("1" (rewrite "pow_odd_n_neg") nil nil)) nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((even_times_int_is_even application-judgement "even_int" integers nil)
    (odd? const-decl "bool" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pow_odd_n_neg formula-decl nil power_props nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (pow_incr_pos_TCC1 0
  (pow_incr_pos_TCC1-1 nil 3307288079 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) shostak
   (pow_incr_pos subtype "power_props.n"
    "{i: integers.int | booleans.OR(power_props.y /= 0, reals.>=(i, 0))}")))
 (pow_incr_pos 0
  (pow_incr_pos-1 nil 3307282932
   ("" (skeep)
    (("" (splash -3)
      (("1" (case-replace "x=0")
        (("1" (rewrite "pow_0_0")
          (("1" (use "pow_pos") (("1" (assert) nil nil)) nil)) nil)
         ("2" (assert) nil nil))
        nil)
       ("2" (rewrite "both_sides_expt_pos_le") (("2" (grind) nil nil)) nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (pow_0_0 formula-decl nil power_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (pow_pos formula-decl nil power_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (both_sides_expt_pos_le formula-decl nil exponentiation nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil))
   nil))
 (pow_incr_odd_TCC1 0
  (pow_incr_odd_TCC1-1 nil 3307288079 ("" (subtype-tcc) nil nil)
   ((odd? const-decl "bool" integers nil)
    (/= const-decl "boolean" notequal nil)
    (even_times_int_is_even application-judgement "even_int" integers nil))
   shostak
   (pow_incr_odd subtype "power_props.n"
    "{i: integers.int | booleans.OR(power_props.y /= 0, reals.>=(i, 0))}")))
 (pow_incr_odd 0
  (pow_incr_odd-1 nil 3307284124
   ("" (skeep)
    (("" (case "x>=0")
      (("1" (rewrite "pow_incr_pos")
        (("1" (flatten) (("1" (grind) nil nil)) nil)) nil)
       ("2" (assert)
        (("2" (hide -2)
          (("2" (expand "odd?")
            (("2" (skeep -1)
              (("2" (case "j >=0")
                (("1" (replace -2)
                  (("1" (lemma "pow_odd_n_neg")
                    (("1" (inst -1 "j" "x")
                      (("1" (assert)
                        (("1" (case "y<=0")
                          (("1" (lemma "pow_neg_n_odd")
                            (("1" (inst -1 "j" "-x")
                              (("1" (assert)
                                (("1" (replaces -1)
                                  (("1" (lemma "pow_neg_n_odd")
                                    (("1" (inst -1 "j" "-y")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (replaces -4 :dir rl)
                                            (("1"
                                              (lemma "pow_incr_pos")
                                              (("1"
                                                (inst -1 "n" "-y" "-x")
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma "pow_pos")
                            (("2" (inst -1 "n" "y") (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (odd? const-decl "bool" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (pow_incr_pos formula-decl nil power_props nil)
    (j skolem-const-decl "int" power_props nil)
    (<= const-decl "bool" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (TRUE const-decl "bool" booleans nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (pow_neg_n_odd formula-decl nil power_props nil)
    (pow_pos formula-decl nil power_props nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (pow_odd_n_neg formula-decl nil power_props nil))
   shostak))
 (pow_decr_even_TCC1 0
  (pow_decr_even_TCC1-1 nil 3307288080 ("" (subtype-tcc) nil nil)
   ((even? const-decl "bool" integers nil)
    (/= const-decl "boolean" notequal nil))
   shostak
   (pow_decr_even subtype "power_props.n"
    "{i: integers.int | booleans.OR(power_props.y /= 0, reals.>=(i, 0))}")))
 (pow_decr_even 0
  (pow_decr_even-1 nil 3307287495
   ("" (skeep)
    (("" (assert)
      (("" (expand "even?")
        (("" (skeep -1)
          (("" (replace -1)
            (("" (case "j >= 0")
              (("1" (lemma "pow_neg_n_even")
                (("1" (inst -1 "j" "-x")
                  (("1" (lemma "pow_neg_n_even")
                    (("1" (inst -1 "j" "-y")
                      (("1" (assert)
                        (("1" (replaces (-1 -2))
                          (("1" (replaces -2 :dir rl)
                            (("1" (rewrite "pow_incr_pos")
                              (("1" (flatten) (("1" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (j skolem-const-decl "int" power_props nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (TRUE const-decl "bool" booleans nil)
    (pow_incr_pos formula-decl nil power_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (pow_neg_n_even formula-decl nil power_props nil)
    (even? const-decl "bool" integers nil))
   shostak)))


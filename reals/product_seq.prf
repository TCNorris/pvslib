(product_seq
 (product_TCC1 0
  (product_TCC1-1 nil 3407849048 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil
   (product subtype "(number_fields.-)(length(product_seq.fs), 1)"
    "naturalnumbers.below(length(product_seq.fs))")))
 (len0 0
  (len0-1 nil 3407849052 ("" (grind) nil nil)
   ((product const-decl "posnat" product_seq nil)) shostak))
 (product_mult 0
  (product_mult-1 nil 3407849048
   ("" (skosimp*)
    (("" (expand "product")
      (("" (lemma "product_rec_mult")
        (("" (inst?)
          (("1" (lift-if)
            (("1" (lift-if)
              (("1" (lift-if)
                (("1" (ground)
                  (("1" (hide -3 1) (("1" (grind) nil nil)) nil)
                   ("2" (expand "o ") (("2" (assert) nil nil)) nil)
                   ("3" (lift-if)
                    (("3" (lift-if)
                      (("3" (ground)
                        (("1" (expand "o ") (("1" (assert) nil nil)) nil)
                         ("2" (expand "o ") (("2" (assert) nil nil)) nil)
                         ("3" (lift-if)
                          (("3" (ground)
                            (("1" (expand "o ") (("1" (assert) nil nil)) nil)
                             ("2" (expand "o ") (("2" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("4" (lift-if)
                          (("4" (ground)
                            (("1" (expand "o ") (("1" (assert) nil nil)) nil)
                             ("2" (expand "o ") (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert) (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((product const-decl "posnat" product_seq nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (fs2!1 skolem-const-decl "finite_sequence[posnat]" product_seq nil)
    (fs1!1 skolem-const-decl "finite_sequence[posnat]" product_seq nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (product_rec_mult formula-decl nil product_seq_scaf nil))
   nil))
 (product_empty_seq 0
  (product_empty_seq-1 nil 3407849048 ("" (grind) nil nil)
   ((empty_seq const-decl "finseq" finite_sequences nil)
    (product const-decl "posnat" product_seq nil))
   nil))
 (product_split_TCC1 0
  (product_split_TCC1-1 nil 3407849048 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (product_split subtype "(number_fields.-)(length(product_seq.fs), 2)"
    "nat")))
 (product_split_TCC2 0
  (product_split_TCC2-1 nil 3407849048 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (product_split subtype "(number_fields.-)(length(product_seq.fs), 1)"
    "below[fs`length]")))
 (product_split 0
  (product_split-1 nil 3407849048
   ("" (skosimp*)
    (("" (expand "product")
      (("" (lift-if)
        (("" (lift-if)
          (("" (ground)
            (("" (lift-if)
              (("" (ground)
                (("1" (expand "^")
                  (("1" (expand "min") (("1" (assert) nil nil)) nil)) nil)
                 ("2" (expand "product_rec" 2 1)
                  (("2" (expand "^" 2 2)
                    (("2" (expand "min")
                      (("2" (lemma "product_rec_caret")
                        (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((product const-decl "posnat" product_seq nil)
    (product_rec def-decl "posnat" product_seq_scaf nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (product_rec_caret formula-decl nil product_seq_scaf nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (^ const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (product_ge 0
  (product_ge-2 "" 3790089470
   ("" (skosimp*)
    (("" (lemma "product_mult")
      (("" (inst -1 "fs!1^(0,n!1)" "fs!1^(n!1+1,length(fs!1)-1)")
        ((""
          (case-replace
           "fs!1 ^ (0, n!1) o fs!1 ^ (n!1 + 1, length(fs!1) - 1) = fs!1")
          (("1" (hide -1)
            (("1" (replace -1)
              (("1" (hide -1)
                (("1" (case-replace "n!1 = 0")
                  (("1" (expand "^" 1 1)
                    (("1" (expand "product" 1 1)
                      (("1" (expand "min")
                        (("1" (expand "product_rec")
                          (("1" (case-replace "fs!1`seq(0) = seq(fs!1)(0)")
                            (("1" (hide -1)
                              (("1" (expand "^")
                                (("1" (expand "product")
                                  (("1" (expand "min")
                                    (("1" (lift-if)
                                      (("1"
                                        (ground)
                                        (("1"
                                          (expand "empty_seq")
                                          (("1" (propax) nil nil))
                                          nil)
                                         ("2"
                                          (expand "empty_seq")
                                          (("2" (propax) nil nil))
                                          nil)
                                         ("3"
                                          (lemma "both_sides_times_pos_ge1")
                                          (("3"
                                            (inst -1 "seq(fs!1)(0)" "_" "1")
                                            (("3"
                                              (hide -2 1 2)
                                              (("3"
                                                (name
                                                 "PR"
                                                 "product_rec((# length := length(fs!1) - 1,
                                  seq :=
                                    (LAMBDA (x:
                                             below[min(length(fs!1)
                                                           - 1,
                                                       length(fs!1)
                                                           - 1)]):
                                       seq(fs!1)(1 + x))
                                  #),
                               length(fs!1) - 2)         ")
                                                (("1"
                                                  (inst - "PR")
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (flatten)
                                                      (("1" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skosimp*)
                                                  (("2"
                                                    (expand "min")
                                                    (("2" (propax) nil nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (skosimp*)
                                                  (("3"
                                                    (typepred "x!1")
                                                    (("3"
                                                      (expand "min")
                                                      (("3" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (expand "min")
                                                  (("4" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (case-replace "n!1 = length(fs!1) - 1")
                    (("1" (hide -1)
                      (("1" (expand "^" 2 2)
                        (("1" (rewrite "product_empty_seq")
                          (("1" (assert)
                            (("1" (expand "^")
                              (("1" (expand "product")
                                (("1" (expand "min")
                                  (("1" (expand "product_rec")
                                    (("1"
                                      (case-replace
                                       "fs!1`seq(length(fs!1) - 1) = seq(fs!1)(length(fs!1) - 1)")
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (name
                                           "PR2"
                                           "product_rec((# length := length(fs!1),
                      seq
                        := LAMBDA (x: below[min(length(fs!1), fs!1`length)]):
                             fs!1`seq(x) #),
                   length(fs!1) - 2)")
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (lemma
                                               "both_sides_times_pos_ge1")
                                              (("1"
                                                (inst
                                                 -1
                                                 "seq(fs!1)(length(fs!1)-1)"
                                                 "PR2"
                                                 "1")
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skosimp*)
                                            (("2"
                                              (expand "min")
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (skosimp*)
                                            (("3"
                                              (typepred "x!1")
                                              (("3"
                                                (expand "min")
                                                (("3" (propax) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "product_split")
                      (("2" (inst?)
                        (("2" (assert)
                          (("2" (split -1)
                            (("1" (replace -1)
                              (("1" (hide -1)
                                (("1" (expand "^")
                                  (("1" (expand "min")
                                    (("1"
                                      (case-replace
                                       "fs!1`seq(n!1) = seq(fs!1)(n!1)")
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (name
                                             "PR4"
                                             "       product((# length := length(fs!1) - 1 - n!1,
                  seq
                    := LAMBDA (x:
                                 below[min(length(fs!1) - 1 - n!1,
                                           fs!1`length - 1 - n!1)]):
                         fs!1`seq(1 + x + n!1) #))")
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (name
                                                 "PR6"
                                                 "       product((# length := n!1,
                  seq
                    := LAMBDA (x_433:
                                 below[min(min(1 + n!1, fs!1`length) - 1,
                                           min(1 + n!1, fs!1`length))]):
                         fs!1`seq(x_433) #))
")
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (lemma
                                                     "both_sides_times_pos_ge1")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "seq(fs!1)(n!1)"
                                                       "PR4*PR6"
                                                       "1")
                                                      (("1" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skosimp*)
                                                  (("2"
                                                    (expand "min")
                                                    (("2" (propax) nil nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (skosimp*)
                                                  (("3"
                                                    (typepred "x!1")
                                                    (("3"
                                                      (expand "min")
                                                      (("3" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (expand "min")
                                                  (("4" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skosimp*)
                                              (("2"
                                                (expand "min")
                                                (("2" (propax) nil nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (skosimp*)
                                              (("3"
                                                (assert)
                                                (("3"
                                                  (typepred "x!1")
                                                  (("3"
                                                    (expand "min")
                                                    (("3" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("4"
                                              (expand "min")
                                              (("4" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide -1 2)
                              (("2" (expand "^")
                                (("2" (expand "min") (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide -1 2)
            (("2" (apply-extensionality 1 :hide? t)
              (("1" (grind) nil nil)
               ("2" (apply-extensionality 1 :hide? t)
                (("2" (typepred "x!1")
                  (("2" (expand "o ")
                    (("2" (expand "^")
                      (("2" (assert)
                        (("2" (expand "min")
                          (("2" (lift-if)
                            (("2" (ground)
                              (("1" (expand "empty_seq")
                                (("1" (propax) nil nil)) nil)
                               ("2" (expand "empty_seq")
                                (("2" (propax) nil nil)) nil)
                               ("3" (expand "empty_seq")
                                (("3" (propax) nil nil)) nil)
                               ("4" (expand "empty_seq")
                                (("4" (propax) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (product_ge-1 nil 3407849048
   ("" (skosimp*)
    (("" (lemma "product_mult")
      (("" (inst -1 "fs!1^(0,n!1)" "fs!1^(n!1+1,length(fs!1)-1)")
        ((""
          (case-replace
           "fs!1 ^ (0, n!1) o fs!1 ^ (n!1 + 1, length(fs!1) - 1) = fs!1")
          (("1" (hide -1)
            (("1" (replace -1)
              (("1" (hide -1)
                (("1" (case-replace "n!1 = 0")
                  (("1" (expand "^" 1 1)
                    (("1" (expand "product" 1 1)
                      (("1" (expand "min")
                        (("1" (expand "product_rec")
                          (("1" (case-replace "fs!1`seq(0) = seq(fs!1)(0)")
                            (("1" (hide -1)
                              (("1" (expand "^")
                                (("1" (expand "product")
                                  (("1" (expand "min")
                                    (("1" (lift-if)
                                      (("1"
                                        (ground)
                                        (("1"
                                          (expand "empty_seq")
                                          (("1" (propax) nil nil))
                                          nil)
                                         ("2"
                                          (expand "empty_seq")
                                          (("2" (propax) nil nil))
                                          nil)
                                         ("3"
                                          (lemma "both_sides_times_pos_ge1")
                                          (("3"
                                            (inst -1 "seq(fs!1)(0)" "_" "1")
                                            (("3"
                                              (hide -2 1 2)
                                              (("3"
                                                (name
                                                 "PR"
                                                 "product_rec((# length := length(fs!1) - 1,
                                  seq :=
                                    (LAMBDA (x:
                                             below[min(length(fs!1)
                                                           - 1,
                                                       length(fs!1)
                                                           - 1)]):
                                       seq(fs!1)(1 + x))
                                  #),
                               length(fs!1) - 2)         ")
                                                (("1"
                                                  (inst - "PR")
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (flatten)
                                                      (("1" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skosimp*)
                                                  (("2"
                                                    (expand "min")
                                                    (("2" (propax) nil nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (skosimp*)
                                                  (("3"
                                                    (typepred "x!1")
                                                    (("3"
                                                      (expand "min")
                                                      (("3" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (expand "min")
                                                  (("4" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (case-replace "n!1 = length(fs!1) - 1")
                    (("1" (hide -1)
                      (("1" (expand "^" 2 2)
                        (("1" (rewrite "product_empty_seq")
                          (("1" (assert)
                            (("1" (expand "^")
                              (("1" (expand "product")
                                (("1" (expand "min")
                                  (("1" (expand "product_rec")
                                    (("1"
                                      (case-replace
                                       "fs!1`seq(length(fs!1) - 1) = seq(fs!1)(length(fs!1) - 1)")
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (name
                                           "PR2"
                                           "product_rec((# length := length(fs!1),
                      seq
                        := LAMBDA (x: below[min(length(fs!1), fs!1`length)]):
                             fs!1`seq(x) #),
                   length(fs!1) - 2)")
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (lemma
                                               "both_sides_times_pos_ge1")
                                              (("1"
                                                (inst
                                                 -1
                                                 "seq(fs!1)(length(fs!1)-1)"
                                                 "PR2"
                                                 "1")
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skosimp*)
                                            (("2"
                                              (expand "min")
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (skosimp*)
                                            (("3"
                                              (typepred "x!1")
                                              (("3"
                                                (expand "min")
                                                (("3" (propax) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "product_split")
                      (("2" (inst?)
                        (("2" (assert)
                          (("2" (split -1)
                            (("1" (replace -1)
                              (("1" (hide -1)
                                (("1" (expand "^")
                                  (("1" (expand "min")
                                    (("1"
                                      (case-replace
                                       "fs!1`seq(n!1) = seq(fs!1)(n!1)")
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (name
                                             "PR4"
                                             "       product((# length := length(fs!1) - 1 - n!1,
                  seq
                    := LAMBDA (x:
                                 below[min(length(fs!1) - 1 - n!1,
                                           fs!1`length - 1 - n!1)]):
                         fs!1`seq(1 + x + n!1) #))")
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (name
                                                 "PR6"
                                                 "       product((# length := n!1,
                  seq
                    := LAMBDA (x_433:
                                 below[min(min(1 + n!1, fs!1`length) - 1,
                                           min(1 + n!1, fs!1`length))]):
                         fs!1`seq(x_433) #))
")
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (lemma
                                                     "both_sides_times_pos_ge1")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "seq(fs!1)(n!1)"
                                                       "PR4*PR6"
                                                       "1")
                                                      (("1" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skosimp*)
                                                  (("2"
                                                    (expand "min")
                                                    (("2" (propax) nil nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (skosimp*)
                                                  (("3"
                                                    (typepred "x!1")
                                                    (("3"
                                                      (expand "min")
                                                      (("3" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (expand "min")
                                                  (("4" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skosimp*)
                                              (("2"
                                                (expand "min")
                                                (("2" (propax) nil nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (skosimp*)
                                              (("3"
                                                (assert)
                                                (("3"
                                                  (typepred "x!1")
                                                  (("3"
                                                    (expand "min")
                                                    (("3" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("4"
                                              (expand "min")
                                              (("4" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide -1 2)
                              (("2" (expand "^")
                                (("2" (expand "min") (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide -1 2)
            (("2" (apply-extensionality 1 :hide? t)
              (("1" (grind) nil nil)
               ("2" (apply-extensionality 1 :hide? t)
                (("1" (typepred "x!1")
                  (("1" (expand "o ")
                    (("1" (expand "^")
                      (("1" (assert)
                        (("1" (expand "min")
                          (("1" (lift-if)
                            (("1" (ground)
                              (("1" (expand "empty_seq")
                                (("1" (propax) nil nil)) nil)
                               ("2" (expand "empty_seq")
                                (("2" (propax) nil nil)) nil)
                               ("3" (expand "empty_seq")
                                (("3" (propax) nil nil)) nil)
                               ("4" (expand "empty_seq")
                                (("4" (propax) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skosimp*) (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((product_mult formula-decl nil product_seq nil)
    (O const-decl "finseq" finite_sequences nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (product const-decl "posnat" product_seq nil)
    (product_rec def-decl "posnat" product_seq_scaf nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}" real_defs
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (product_split formula-decl nil product_seq nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (product_empty_seq formula-decl nil product_seq nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}" real_defs
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (^ const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil))
 (product_concat1 0
  (product_concat1-2 "" 3790089471
   ("" (skosimp*)
    (("" (case "length(fs!1) = 0")
      (("1" (expand "product")
        (("1" (assert)
          (("1" (lift-if)
            (("1" (prop)
              (("1" (expand "o ")
                (("1" (expand "gen_seq1") (("1" (assert) nil nil)) nil)) nil)
               ("2" (expand "o ")
                (("2" (expand "gen_seq1")
                  (("2" (expand "product_rec") (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "product" 2 2)
        (("2" (lift-if)
          (("2" (prop)
            (("1" (expand "o ") (("1" (assert) nil nil)) nil)
             ("2" (expand "product_rec")
              (("2" (lift-if)
                (("2" (prop)
                  (("1" (expand "o ")
                    (("1" (expand "gen_seq1" -1) (("1" (propax) nil nil))
                      nil))
                    nil)
                   ("2"
                    (case-replace
                     "product_rec(fs!1 o gen_seq1(nn!1), length(fs!1 o gen_seq1(nn!1)) - 2) = product(fs!1)")
                    (("1" (expand "o " 2)
                      (("1" (lift-if)
                        (("1" (assert)
                          (("1" (expand "gen_seq1" 2) (("1" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 3)
                      (("2" (lemma "product_rec_caret")
                        (("2" (inst?)
                          (("1" (inst -1 "length(fs!1) - 1")
                            (("1" (split -1)
                              (("1" (replace -1)
                                (("1" (hide -1)
                                  (("1" (grind)
                                    (("1"
                                      (case-replace
                                       "(# length := length(fs!1),
                     seq :=
                       (LAMBDA (x: below[length(fs!1)]):
                          seq(fs!1)(x))
                     #) = fs!1")
                                      (("1"
                                        (apply-extensionality :hide? t)
                                        (("1"
                                          (apply-extensionality 1 :hide? t)
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (expand "o " 1)
                                (("2" (expand "gen_seq1" 1)
                                  (("2" (assert) nil nil)) nil))
                                nil)
                               ("3" (expand "o " 1)
                                (("3" (expand "gen_seq1" 1)
                                  (("3" (assert) nil nil)) nil))
                                nil)
                               ("4" (expand "o " 1)
                                (("4" (expand "gen_seq1" 1)
                                  (("4" (assert) nil nil)) nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil)
                           ("2" (expand "o " 1)
                            (("2" (expand "gen_seq1" 1)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (expand "o " 1)
                      (("3" (expand "gen_seq1" 1) (("3" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (product_concat1-1 nil 3407849048
   ("" (skosimp*)
    (("" (case "length(fs!1) = 0")
      (("1" (expand "product")
        (("1" (assert)
          (("1" (lift-if)
            (("1" (prop)
              (("1" (expand "o ")
                (("1" (expand "gen_seq1") (("1" (assert) nil)))))
               ("2" (expand "o ")
                (("2" (expand "gen_seq1")
                  (("2" (expand "product_rec")
                    (("2" (propax) nil)))))))))))))))
       ("2" (expand "product" 2 2)
        (("2" (lift-if)
          (("2" (prop)
            (("1" (expand "o ") (("1" (assert) nil)))
             ("2" (expand "product_rec")
              (("2" (lift-if)
                (("2" (prop)
                  (("1" (expand "o ")
                    (("1" (expand "gen_seq1" -1) (("1" (propax) nil)))))
                   ("2"
                    (case-replace
                     "product_rec(fs!1 o gen_seq1(nn!1), length(fs!1 o gen_seq1(nn!1)) - 2) = product(fs!1)")
                    (("1" (expand "o " 2)
                      (("1" (lift-if)
                        (("1" (assert)
                          (("1" (expand "gen_seq1" 2)
                            (("1" (propax) nil)))))))))
                     ("2" (hide 3)
                      (("2" (lemma "product_rec_caret")
                        (("2" (inst?)
                          (("1" (inst -1 "length(fs!1) - 1")
                            (("1" (split -1)
                              (("1" (replace -1)
                                (("1" (hide -1)
                                  (("1" (grind)
                                    (("1"
                                      (case-replace
                                       "(# length := length(fs!1),
                     seq :=
                       (LAMBDA (x: below[length(fs!1)]):
                          seq(fs!1)(x))
                     #) = fs!1")
                                      (("1"
                                        (apply-extensionality :hide? t)
                                        (("1"
                                          (apply-extensionality 1 :hide? t)
                                          nil)))))))))))
                               ("2" (expand "o " 1)
                                (("2" (expand "gen_seq1" 1)
                                  (("2" (assert) nil)))))
                               ("3" (expand "o " 1)
                                (("3" (expand "gen_seq1" 1)
                                  (("3" (assert) nil)))))
                               ("4" (expand "o " 1)
                                (("4" (expand "gen_seq1" 1)
                                  (("4" (assert) nil)))))))
                             ("2" (assert) nil)))
                           ("2" (expand "o " 1)
                            (("2" (expand "gen_seq1" 1)
                              (("2" (assert) nil)))))))))))
                     ("3" (expand "o " 1)
                      (("3" (expand "gen_seq1" 1)
                        (("3" (assert) nil))))))))))))))))))))))
    nil)
   ((finite_sequence type-eq-decl nil finite_sequences nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (gen_seq1 const-decl "finite_sequence[posnat]" product_seq nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (O const-decl "finseq" finite_sequences nil)
    (product_rec def-decl "posnat" product_seq_scaf nil)
    (product const-decl "posnat" product_seq nil)
    (fs!1 skolem-const-decl "finite_sequence[posnat]" product_seq nil)
    (nn!1 skolem-const-decl "posnat" product_seq nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}" real_defs
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^ const-decl "finseq" finite_sequences nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (product_rec_caret formula-decl nil product_seq_scaf nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil))
   nil)))


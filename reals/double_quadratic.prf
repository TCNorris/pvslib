(double_quadratic
 (quad_to_x 0
  (quad_to_x-1 nil 3635164080 ("" (grind) nil nil)
   ((sq const-decl "nonneg_real" sq nil)
    (quad const-decl "real" double_quadratic nil)
    (quadratic const-decl "real" quadratic nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (quad_to_y 0
  (quad_to_y-1 nil 3635164121 ("" (grind) nil nil)
   ((sq const-decl "nonneg_real" sq nil)
    (quad const-decl "real" double_quadratic nil)
    (quadratic const-decl "real" quadratic nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (rev_disc_sym 0
  (rev_disc_sym-1 nil 3635164304 ("" (grind) nil nil)
   ((sq const-decl "nonneg_real" sq nil)
    (rev_disc const-decl "real" double_quadratic nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil))
   shostak))
 (double_quad_simple_min 0
  (double_quad_simple_min-1 nil 3635171402
   ("" (skeep)
    (("" (replaces -1)
      (("" (assert)
        (("" (rewrite "quad_to_x")
          (("" (rewrite "quad_to_x")
            ((""
              (case "quadratic(a, d, quadratic(b, ee, f)(y))(x) >=
              quadratic(a, d, quadratic(b, ee, f)(y))(-d / (2 * a))")
              (("1" (lemma "quad_min")
                (("1" (inst - "b" "ee" "f")
                  (("1" (assert)
                    (("1" (expand "is_minimum?")
                      (("1" (inst - "y") (("1" (grind) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (lemma "quad_min")
                  (("2" (inst - "a" "d" "quadratic(b,ee,f)(y)")
                    (("2" (assert)
                      (("2" (expand "is_minimum?")
                        (("2" (inst - "x") (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (quad_to_x formula-decl nil double_quadratic nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (quadratic const-decl "real" quadratic nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (is_minimum? const-decl "bool" quad_minmax nil)
    (sq const-decl "nonneg_real" sq nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (quad_min formula-decl nil quad_minmax nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   shostak))
 (quad_min_y_to_x_def 0
  (quad_min_y_to_x_def-1 nil 3635245811
   ("" (skeep)
    (("" (rewrite "quad_to_x")
      (("" (rewrite "quad_to_x")
        (("" (lemma "quad_min")
          (("" (inst - "a" "c*y+d" "quadratic(b,ee,f)(y)")
            (("" (assert)
              (("" (expand "is_minimum?")
                (("" (inst - "x") (("" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((quad_to_x formula-decl nil double_quadratic nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (quad_min formula-decl nil quad_minmax nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (sq const-decl "nonneg_real" sq nil)
    (is_minimum? const-decl "bool" quad_minmax nil)
    (quadratic const-decl "real" quadratic nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (quad_min_y_to_x const-decl "real" double_quadratic nil))
   shostak))
 (quad_min_y_to_x_dec 0
  (quad_min_y_to_x_dec-1 nil 3635616311
   ("" (skeep)
    (("" (rewrite "quad_to_x")
      (("" (rewrite "quad_to_x")
        (("" (lemma "quad_min_mono_dec")
          (("" (inst - "a" "c*y+d" "quadratic(b, ee, f)(y)" "x" "xu")
            (("" (assert)
              (("" (split -)
                (("1" (assert) nil nil) ("2" (assert) nil nil)
                 ("3" (expand "quad_min_y_to_x") (("3" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((quad_to_x formula-decl nil double_quadratic nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (quad_min_mono_dec formula-decl nil quad_minmax nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (quad_min_y_to_x const-decl "real" double_quadratic nil)
    (quadratic const-decl "real" quadratic nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil))
   nil))
 (quad_min_y_to_x_inc 0
  (quad_min_y_to_x_inc-1 nil 3635616751
   ("" (skeep)
    (("" (rewrite "quad_to_x")
      (("" (rewrite "quad_to_x")
        (("" (lemma "quad_min_mono_inc")
          (("" (inst - "a" "c*y+d" "quadratic(b, ee, f)(y)" "x" "xl")
            (("" (assert)
              (("" (split -)
                (("1" (assert) nil nil) ("2" (assert) nil nil)
                 ("3" (expand "quad_min_y_to_x") (("3" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((quad_to_x formula-decl nil double_quadratic nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (quad_min_mono_inc formula-decl nil quad_minmax nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (quad_min_y_to_x const-decl "real" double_quadratic nil)
    (quadratic const-decl "real" quadratic nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil))
   nil))
 (quad_min_y_to_x_eq 0
  (quad_min_y_to_x_eq-1 nil 3635245975 ("" (grind) nil nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (quadratic const-decl "real" quadratic nil)
    (quad const-decl "real" double_quadratic nil)
    (sq const-decl "nonneg_real" sq nil)
    (quad_min_y_to_x const-decl "real" double_quadratic nil))
   shostak))
 (quad_min_y_TCC1 0
  (quad_min_y_TCC1-1 nil 3635179309 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (sq const-decl "nonneg_real" sq nil)
    (rev_disc const-decl "real" double_quadratic nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (quad_min_y subtype
    "double_quadratic.rev_disc(double_quadratic.a, double_quadratic.b, double_quadratic.c)"
    "nznum")))
 (quad_min_y_min 0
  (quad_min_y_min-1 nil 3635246256
   ("" (skeep)
    (("" (lemma "quad_min")
      (("" (inst?)
        (("1" (assert)
          (("1" (split -)
            (("1"
              (case "NOT -(ee - c * d / (2 * a)) /
                              (2 * b - 2 * (sq(c) / (4 * a)))=quad_min_y(a, b, c, d, ee)")
              (("1" (hide (-1 2))
                (("1" (grind)
                  (("1"
                    (case "NOT -(ee - c * d / (2 * a)) / (2 * b - 2 * (c * c / (4 * a)))  =
              -((2*a*ee - c * d) / (2 * a)) / (2 * b - (c * c / (2 * a)))")
                    (("1" (assert) nil nil)
                     ("2" (replaces -1)
                      (("2"
                        (case "NOT 2 * b - (c * c / (2 * a)) = (4*b*a-sq(c))/(2*a)")
                        (("1" (hide 2) (("1" (grind) nil nil)) nil)
                         ("2" (replaces -1)
                          (("2" (expand "sq")
                            (("2" (assert) (("2" (field) nil nil)) nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (replaces -1)
                (("2" (expand "is_minimum?")
                  (("2" (inst - "y") (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (expand "rev_disc") (("2" (field) nil nil)) nil)) nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (expand "rev_disc")
            (("2" (flatten) (("2" (expand "sq") (("2" (field) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((quad_min formula-decl nil quad_minmax nil)
    (both_sides_times1_imp formula-decl nil extra_real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (quad_min_y const-decl "real" double_quadratic nil)
    (rev_disc const-decl "real" double_quadratic nil)
    (TRUE const-decl "bool" booleans nil)
    (div_div1 formula-decl nil real_props nil)
    (cross_mult formula-decl nil real_props nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (fdx_144 skolem-const-decl "real" double_quadratic nil)
    (fdx_143 skolem-const-decl "real" double_quadratic nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (is_minimum? const-decl "bool" quad_minmax nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (/= const-decl "boolean" notequal nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (b skolem-const-decl "posreal" double_quadratic nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq nil)
    (c skolem-const-decl "real" double_quadratic nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (a skolem-const-decl "posreal" double_quadratic nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types
     nil))
   shostak))
 (quad_min_x_def 0
  (quad_min_x_def-1 nil 3635249782 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sq const-decl "nonneg_real" sq nil)
    (rev_disc const-decl "real" double_quadratic nil)
    (quad_min_x const-decl "real" double_quadratic nil)
    (quad_min_y const-decl "real" double_quadratic nil)
    (quad_min_y_to_x const-decl "real" double_quadratic nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (quad_min_x_y_def 0
  (quad_min_x_y_def-1 nil 3635250073
   ("" (skeep)
    (("" (lemma "quad_min_y_to_x_def")
      (("" (insteep -)
        (("" (invoke (case "%1>=%2") (! -1 2) (! 1 2))
          (("1" (assert) nil nil)
           ("2" (hide (-1 2))
            (("2" (lemma "quad_min_y_to_x_eq")
              (("2" (insteep -)
                (("2" (replaces -1)
                  (("2" (lemma "quad_min_y_min")
                    (("2" (insteep -)
                      (("2" (assert)
                        (("2" (invoke (case "%1>=%2") (! -1 2) (! 1 2))
                          (("1" (assert) nil nil)
                           ("2" (hide (-1 2))
                            (("2" (lemma "quad_min_y_to_x_eq")
                              (("2" (insteep - :but "y")
                                (("2" (inst?)
                                  (("2" (replaces -1 :dir rl)
                                    (("2" (rewrite "quad_min_x_def")
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((quad_min_y_to_x_def formula-decl nil double_quadratic nil)
    (quad const-decl "real" double_quadratic nil)
    (quad_min_y_to_x const-decl "real" double_quadratic nil)
    (quad_min_x const-decl "real" double_quadratic nil)
    (quad_min_y const-decl "real" double_quadratic nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (quad_min_y_to_x_eq formula-decl nil double_quadratic nil)
    (TRUE const-decl "bool" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (quadratic const-decl "real" quadratic nil)
    (quad_min_x_def formula-decl nil double_quadratic nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (quad_min_y_min formula-decl nil double_quadratic nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil))
   shostak))
 (quad_translate_t 0
  (quad_translate_t-1 nil 3635251042 ("" (grind) nil nil)
   ((sq const-decl "nonneg_real" sq nil)
    (quad const-decl "real" double_quadratic nil)
    (quadratic const-decl "real" quadratic nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (quad_min_x_y_linear_min 0
  (quad_min_x_y_linear_min-1 nil 3635251471
   ("" (skeep)
    (("" (expand "quad_min_x")
      (("" (expand "quad_min_y")
        (("" (assert)
          (("" (replaces -2) (("" (replaces -2) (("" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (quad_min_x const-decl "real" double_quadratic nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rev_disc const-decl "real" double_quadratic nil)
    (sq const-decl "nonneg_real" sq nil) (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (quad_min_y const-decl "real" double_quadratic nil))
   shostak))
 (quad_min_x_y_up 0
  (quad_min_x_y_up-1 nil 3635259836
   (""
    (case "FORALL (a, b: posreal, c, v, w: real): rev_disc(a, b, c) < 0 AND w>0 IMPLIES
                              a * sq(v) + b * sq(w) + c * v * w > 0")
    (("1" (skeep)
      (("1" (inst-cp - "a" "b" "c" "v" "w")
        (("1" (assert)
          (("1" (case "w = 0")
            (("1" (assert)
              (("1" (replace -1)
                (("1" (assert)
                  (("1" (rewrite "posreal_times_posreal_is_posreal")
                    (("1" (lemma "sq_eq_0")
                      (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (inst - "a" "b" "c" "-v" "-w") (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2"
        (case "FORALL (a, b: posreal, c, v, w: real):
                                   rev_disc(a, b, c) < 0 AND w > 0 AND v>0 IMPLIES
                                    a * sq(v) + b * sq(w) + c * v * w > 0")
        (("1" (skeep)
          (("1" (inst-cp - "a" "b" "c" "v" "w")
            (("1" (assert)
              (("1" (inst-cp - "a" "b" "-c" "-v" "w")
                (("1" (hide -1)
                  (("1" (case "NOT v = 0")
                    (("1" (grind) nil nil)
                     ("2" (replace -1)
                      (("2" (assert)
                        (("2" (rewrite "posreal_times_posreal_is_posreal")
                          (("2" (lemma "sq_eq_0")
                            (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (skeep)
            (("2" (lemma "posreal_times_posreal_is_posreal")
              (("2" (lemma "sq_eq_0")
                (("2" (inst-cp - "v")
                  (("2" (inst - "w")
                    (("2" (assert)
                      (("2" (inst-cp - "a" "sq(v)")
                        (("2" (inst - "b" "sq(w)")
                          (("2" (assert)
                            (("2" (case "NOT c<0")
                              (("1" (case "c = 0")
                                (("1" (replaces -1) (("1" (assert) nil nil))
                                  nil)
                                 ("2" (mult-by -4 "c")
                                  (("2" (mult-by -4 "v")
                                    (("2" (assert) nil nil)) nil))
                                  nil))
                                nil)
                               ("2" (case "(sqrt(a)*v=sqrt(b)*w)")
                                (("1" (case "NOT v = (sqrt(b)/sqrt(a))*w")
                                  (("1" (assert)
                                    (("1" (cross-mult 1) nil nil)) nil)
                                   ("2" (replace -1 3)
                                    (("2" (rewrite "sq_times")
                                      (("2"
                                        (lemma "sq")
                                        (("2"
                                          (decompose-equality -1)
                                          (("2"
                                            (inst - "w")
                                            (("2"
                                              (rewrite "sq_div")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (copy -7)
                                                  (("2"
                                                    (case
                                                     "(sqrt(b) / sqrt(a)) * c  + 2* b  > 0")
                                                    (("1"
                                                      (mult-by -1 "sq(w)")
                                                      (("1"
                                                        (hide-all-but (-1 +))
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (both-sides "-" "2*b" 1)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (cross-mult 1)
                                                          (("2"
                                                            (neg-formula 1)
                                                            (("2"
                                                              (div-by
                                                               1
                                                               "sqrt(b)")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (case
                                                                   "b/sqrt(b) = sqrt(b)")
                                                                  (("1"
                                                                    (mult-by
                                                                     -1
                                                                     "2*sqrt(a)")
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (case
                                                                           "2 * (sqrt(a) * sqrt(b)) > -c")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             2)
                                                                            (("2"
                                                                              (lemma
                                                                               "sq_gt")
                                                                              (("2"
                                                                                (inst?)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     "sq_neg")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "rev_disc"
                                                                                       -1)
                                                                                      (("2"
                                                                                        (rewrite
                                                                                         "sq_times"
                                                                                         1)
                                                                                        (("2"
                                                                                          (rewrite
                                                                                           "sq_times"
                                                                                           1)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "sq")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (cross-mult
                                                                     1)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (lemma "sq_eq_0")
                                  (("2" (inst - "(sqrt(a) * v - sqrt(b) * w)")
                                    (("2" (assert)
                                      (("2"
                                        (case
                                         "NOT sq(sqrt(a) * v - sqrt(b) * w)>0")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (hide 1)
                                          (("2"
                                            (expand "sq" -1)
                                            (("2"
                                              (typepred "sqrt(a)")
                                              (("2"
                                                (hide (-1 -3))
                                                (("2"
                                                  (mult-by -1 "sq(v)")
                                                  (("2"
                                                    (expand "sq" -1 1)
                                                    (("2"
                                                      (replaces -1)
                                                      (("2"
                                                        (typepred "sqrt(b)")
                                                        (("2"
                                                          (hide (-1 -3))
                                                          (("2"
                                                            (mult-by
                                                             -1
                                                             "sq(w)")
                                                            (("2"
                                                              (expand
                                                               "sq"
                                                               -1
                                                               1)
                                                              (("2"
                                                                (replaces -1)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "rev_disc")
                                                                    (("2"
                                                                      (lemma
                                                                       "sqrt_lt")
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "sq(c)"
                                                                         "4*a*b")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (rewrite
                                                                             "sqrt_times")
                                                                            (("2"
                                                                              (rewrite
                                                                               "sqrt_times"
                                                                               -1)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (mult-by
                                                                                   -1
                                                                                   "v")
                                                                                  (("2"
                                                                                    (mult-by
                                                                                     -1
                                                                                     "w")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((both_sides_times_pos_gt1 formula-decl nil real_props nil)
    (c skolem-const-decl "real" double_quadratic nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (TRUE const-decl "bool" booleans nil) (sqrt_lt formula-decl nil sqrt nil)
    (sqrt_sq_neg formula-decl nil sqrt nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (sqrt_4 formula-decl nil sqrt nil) (sqrt_times formula-decl nil sqrt nil)
    (sqrt_pos application-judgement "posreal" sqrt nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div2 formula-decl nil real_props nil)
    (div_cancel4 formula-decl nil real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (sq_times formula-decl nil sq nil)
    (sq_nz_pos application-judgement "posreal" sq nil)
    (sq_div formula-decl nil sq nil) (sq_sqrt formula-decl nil sqrt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (both_sides_minus_gt1 formula-decl nil real_props nil)
    (both_sides_times_pos_gt2 formula-decl nil real_props nil)
    (both_sides_times_pos_ge2 formula-decl nil real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (both_sides_div_pos_gt1 formula-decl nil real_props nil)
    (sq_gt formula-decl nil sq nil) (sq_neg formula-decl nil sq nil)
    (both_sides_times1_imp formula-decl nil extra_real_props nil)
    (div_cancel3 formula-decl nil real_props nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (both_sides_times_neg_le1_imp formula-decl nil extra_real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (neg_mult formula-decl nil extra_tegies nil)
    (neg_neg formula-decl nil extra_tegies nil)
    (mult_neg formula-decl nil extra_tegies nil)
    (neg_one_times formula-decl nil extra_tegies nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt nil)
    (nnreal type-eq-decl nil real_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (sq_0 formula-decl nil sq nil) (sq_eq_0 formula-decl nil sq nil)
    (posreal_times_posreal_is_posreal judgement-tcc nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (rev_disc const-decl "real" double_quadratic nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq nil))
   shostak))
 (quad_min_unit_box_init_def 0
  (quad_min_unit_box_init_def-4 "" 3790089306
   ("" (skeep)
    (("" (label "rd" -1)
      (("" (hide "rd")
        (("" (name "mx" "quad_min_x(a, b, c, d, ee)")
          (("" (name "my" "quad_min_y(a, b, c, d, ee)")
            (("" (expand "quad_min_unit_box_init")
              (("" (replace -1)
                (("" (replace -2)
                  (("" (split)
                    (("1" (flatten)
                      (("1" (splash -)
                        (("1" (flatten)
                          (("1" (inst + "mx" "my") (("1" (assert) nil nil))
                            nil))
                          nil)
                         ("2" (hide (1 2 3))
                          (("2" (lemma "quad_min_le_D_int_def")
                            (("2" (inst?)
                              (("2" (assert)
                                (("2" (lemma "quad_to_y")
                                  (("2" (insteep - :but ("x" "y"))
                                    (("2"
                                      (inst
                                       -
                                       "0"
                                       "quad_min_int(b, ee, f, 0, 1)")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "quadratic" - 2)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (replaces -1 :dir rl)
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (lemma
                                                     "quad_min_interval_def")
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (hide 2)
                          (("3" (hide 1)
                            (("3" (lemma "quad_min_le_D_int_def")
                              (("3" (inst?)
                                (("3" (assert)
                                  (("3" (lemma "quad_to_y")
                                    (("3" (insteep - :but ("x" "y"))
                                      (("3"
                                        (inst
                                         -
                                         "1"
                                         "quad_min_int(b, c + ee, quadratic(a, d, f)(1), 0, 1)")
                                        (("3"
                                          (assert)
                                          (("3"
                                            (replaces -1 :dir rl)
                                            (("3"
                                              (inst?)
                                              (("3"
                                                (assert)
                                                (("3"
                                                  (lemma
                                                   "quad_min_interval_def")
                                                  (("3"
                                                    (inst?)
                                                    (("3"
                                                      (assert)
                                                      (("3" (ground) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("4" (hide 1)
                          (("4" (lemma "quad_min_le_D_int_def")
                            (("4" (inst?)
                              (("4" (assert)
                                (("4" (lemma "quad_to_x")
                                  (("4" (insteep - :but ("x" "y"))
                                    (("4"
                                      (inst
                                       -
                                       "quad_min_int(a, d, f, 0, 1)"
                                       "0")
                                      (("4"
                                        (assert)
                                        (("4"
                                          (expand "quadratic" - 2)
                                          (("4"
                                            (assert)
                                            (("4"
                                              (replaces -1 :dir rl)
                                              (("4"
                                                (inst?)
                                                (("4"
                                                  (assert)
                                                  (("4"
                                                    (lemma
                                                     "quad_min_interval_def")
                                                    (("4"
                                                      (inst?)
                                                      (("4"
                                                        (assert)
                                                        (("4"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("5" (lemma "quad_min_le_D_int_def")
                          (("5" (inst?)
                            (("5" (assert)
                              (("5" (lemma "quad_to_x")
                                (("5" (insteep - :but ("x" "y"))
                                  (("5"
                                    (inst -
                                     "quad_min_int(a, c + d, quadratic(b, ee, f)(1), 0, 1)"
                                     "1")
                                    (("5" (assert)
                                      (("5"
                                        (replaces -1 :dir rl)
                                        (("5"
                                          (inst?)
                                          (("5"
                                            (assert)
                                            (("5"
                                              (lemma "quad_min_interval_def")
                                              (("5"
                                                (inst?)
                                                (("5"
                                                  (assert)
                                                  (("5" (ground) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (skeep)
                        (("2" (case "x = mx AND y=my")
                          (("1" (flatten) (("1" (assert) nil nil)) nil)
                           ("2"
                            (case "EXISTS (t): 0<=t AND t<=1 AND LET newx=mx+t*(x-mx),newy=my+t*(y-my) IN ((0<=newx AND newx<=1 AND 0<=newy AND newy<=1) AND (newx=0 OR newx=1 OR newy=0 OR newy=1))")
                            (("1" (skolem - "G")
                              (("1" (flatten)
                                (("1" (skoletin -)
                                  (("1" (skoletin -)
                                    (("1" (flatten)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case
                                           "quad(a, b, c, d, ee, f)(newx,newy)<=quad(a, b, c, d, ee, f)(x, y)")
                                          (("1"
                                            (split -)
                                            (("1"
                                              (lemma "quad_min_le_D_int_def")
                                              (("1"
                                                (hide (2 3 4))
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (rewrite "quad_to_y")
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "quadratic"
                                                             -2
                                                             2)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (lemma
                                                                 "quad_min_interval_def")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "newy")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma "quad_min_le_D_int_def")
                                              (("2"
                                                (hide (2 3 5))
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (rewrite "quad_to_y")
                                                      (("2"
                                                        (replace -1)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (lemma
                                                             "quad_min_interval_def")
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "newy")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (lemma "quad_min_le_D_int_def")
                                              (("3"
                                                (hide (2 4 5))
                                                (("3"
                                                  (inst?)
                                                  (("3"
                                                    (assert)
                                                    (("3"
                                                      (rewrite "quad_to_x")
                                                      (("3"
                                                        (replace -1)
                                                        (("3"
                                                          (assert)
                                                          (("3"
                                                            (expand
                                                             "quadratic"
                                                             -2
                                                             2)
                                                            (("3"
                                                              (assert)
                                                              (("3"
                                                                (lemma
                                                                 "quad_min_interval_def")
                                                                (("3"
                                                                  (inst?)
                                                                  (("3"
                                                                    (assert)
                                                                    (("3"
                                                                      (flatten)
                                                                      (("3"
                                                                        (inst
                                                                         -
                                                                         "newx")
                                                                        (("3"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("4"
                                              (lemma "quad_min_le_D_int_def")
                                              (("4"
                                                (hide (3 4 5))
                                                (("4"
                                                  (inst?)
                                                  (("4"
                                                    (assert)
                                                    (("4"
                                                      (rewrite "quad_to_x")
                                                      (("4"
                                                        (replace -1)
                                                        (("4"
                                                          (assert)
                                                          (("4"
                                                            (lemma
                                                             "quad_min_interval_def")
                                                            (("4"
                                                              (inst?)
                                                              (("4"
                                                                (assert)
                                                                (("4"
                                                                  (flatten)
                                                                  (("4"
                                                                    (inst
                                                                     -
                                                                     "newx")
                                                                    (("4"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (name "vv" "x-mx")
                                            (("2"
                                              (name "ww" "y-my")
                                              (("2"
                                                (lemma "quad_translate_t")
                                                (("2"
                                                  (insteep
                                                   -
                                                   :but
                                                   ("x" "y" "t" "v" "w"))
                                                  (("2"
                                                    (inst - _ "vv" "ww" _ _)
                                                    (("2"
                                                      (inst - _ "mx" "my")
                                                      (("2"
                                                        (name
                                                         "A"
                                                         "a * sq(vv) + b * sq(ww) + c * vv * ww")
                                                        (("2"
                                                          (name
                                                           "B"
                                                           "2 * a * vv * mx + 2 * b * ww * my + c * vv * my +
                                                                                c * ww * mx
                                                                                + d * vv
                                                                                + ee * ww")
                                                          (("2"
                                                            (name
                                                             "C"
                                                             "a * mx * mx + b * my * my + c * mx * my + d * mx +
                                                                                ee * my
                                                                                + f")
                                                            (("2"
                                                              (replace -1)
                                                              (("2"
                                                                (replace -2)
                                                                (("2"
                                                                  (replace -3)
                                                                  (("2"
                                                                    (inst-cp
                                                                     -
                                                                     "1")
                                                                    (("2"
                                                                      (inst-cp
                                                                       -
                                                                       "0")
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "G")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (case
                                                                             "G = 1")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (lemma
                                                                                 "quad_min_mono_inc")
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "A"
                                                                                   "B"
                                                                                   "C"
                                                                                   "1"
                                                                                   "G")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (case
                                                                                       "NOT A > 0")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "A"
                                                                                         1)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "quad_min_x_y_up")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -
                                                                                             "a"
                                                                                             "b"
                                                                                             "c"
                                                                                             "vv"
                                                                                             "ww")
                                                                                            (("1"
                                                                                              (case
                                                                                               "NOT (ww/=0 OR vv/=0)")
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (replace
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (reveal
                                                                                                   "rd")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "quad_min_x_y_linear_min")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -
                                                                                             "a"
                                                                                             "b"
                                                                                             "c"
                                                                                             "d"
                                                                                             "ee"
                                                                                             "vv"
                                                                                             "ww"
                                                                                             "mx"
                                                                                             "my")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (reveal
                                                                                                 "rd")
                                                                                                (("2"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (case
                                                                                     "NOT A > 0")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "A"
                                                                                       1)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "quad_min_x_y_up")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "a"
                                                                                           "b"
                                                                                           "c"
                                                                                           "vv"
                                                                                           "ww")
                                                                                          (("1"
                                                                                            (case
                                                                                             "NOT (ww/=0 OR vv/=0)")
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("2"
                                                                                                (reveal
                                                                                                 "rd")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "quad_min_x_y_def")
                              (("2" (insteep -)
                                (("2" (reveal "rd")
                                  (("2" (replace -1)
                                    (("2" (label "ans" 1)
                                      (("2"
                                        (hide "ans")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (reveal "ans")
                                            (("2"
                                              (hide-all-but
                                               (-3 -4 -5 -6 7 "ans"))
                                              (("2"
                                                (delabel "ans")
                                                (("2"
                                                  (case "0<=mx AND mx<=1")
                                                  (("1"
                                                    (case "my > 1")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (name
                                                         "tt"
                                                         "(1-my)/(y-my)")
                                                        (("1"
                                                          (inst + "tt")
                                                          (("1"
                                                            (case
                                                             "NOT (0<=tt AND tt<=1)")
                                                            (("1"
                                                              (hide 2)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (split 1)
                                                                  (("1"
                                                                    (expand
                                                                     "tt"
                                                                     1)
                                                                    (("1"
                                                                      (cross-mult
                                                                       1)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "tt"
                                                                     1)
                                                                    (("2"
                                                                      (cross-mult
                                                                       1)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (split +)
                                                                  (("1"
                                                                    (mult-by
                                                                     -7
                                                                     "tt")
                                                                    (("1"
                                                                      (mult-by
                                                                       -6
                                                                       "1-tt")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (mult-by
                                                                     -8
                                                                     "tt")
                                                                    (("2"
                                                                      (mult-by
                                                                       -7
                                                                       "1-tt")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (cross-mult
                                                                     -3)
                                                                    (("3"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("4"
                                                                    (cross-mult
                                                                     -3)
                                                                    (("4"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("5"
                                                                    (flatten)
                                                                    (("5"
                                                                      (cross-mult
                                                                       -3)
                                                                      (("5"
                                                                        (cross-mult
                                                                         -3)
                                                                        (("5"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (case "my < 0")
                                                        (("1"
                                                          (hide 1)
                                                          (("1"
                                                            (name
                                                             "tt"
                                                             "(-my)/(y-my)")
                                                            (("1"
                                                              (case
                                                               "NOT (0<=tt AND tt<=1)")
                                                              (("1"
                                                                (hide (2 3))
                                                                (("1"
                                                                  (expand
                                                                   "tt"
                                                                   1)
                                                                  (("1"
                                                                    (split)
                                                                    (("1"
                                                                      (cross-mult
                                                                       1)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (cross-mult
                                                                       1)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (hide 2)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (inst
                                                                       +
                                                                       "tt")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (split)
                                                                          (("1"
                                                                            (mult-by
                                                                             -7
                                                                             "tt")
                                                                            (("1"
                                                                              (mult-by
                                                                               -6
                                                                               "1-tt")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (mult-by
                                                                             -8
                                                                             "tt")
                                                                            (("2"
                                                                              (mult-by
                                                                               -7
                                                                               "1-tt")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (cross-mult
                                                                             -3)
                                                                            (("3"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("4"
                                                                            (cross-mult
                                                                             -3)
                                                                            (("4"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("5"
                                                                            (flatten)
                                                                            (("5"
                                                                              (cross-mult
                                                                               -3)
                                                                              (("5"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 3)
                                                    (("2"
                                                      (case "0<=my AND my<=1")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (case "mx > 1")
                                                          (("1"
                                                            (hide 1)
                                                            (("1"
                                                              (name
                                                               "tt"
                                                               "(1-mx)/(x-mx)")
                                                              (("1"
                                                                (case
                                                                 "NOT (0<=tt AND tt<=1)")
                                                                (("1"
                                                                  (hide 2)
                                                                  (("1"
                                                                    (expand
                                                                     "tt"
                                                                     1)
                                                                    (("1"
                                                                      (split)
                                                                      (("1"
                                                                        (cross-mult
                                                                         1)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (cross-mult
                                                                         1)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (inst
                                                                         +
                                                                         "tt")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (split)
                                                                            (("1"
                                                                              (mult-by
                                                                               -7
                                                                               "tt")
                                                                              (("1"
                                                                                (mult-by
                                                                                 -5
                                                                                 "1-tt")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (case
                                                                                   "tt = 1")
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (mult-by
                                                                               -8
                                                                               "tt")
                                                                              (("2"
                                                                                (cross-mult
                                                                                 -4)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (mult-by
                                                                               -9
                                                                               "tt")
                                                                              (("3"
                                                                                (mult-by
                                                                                 -6
                                                                                 "1-tt")
                                                                                (("3"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("4"
                                                                              (mult-by
                                                                               -10
                                                                               "tt")
                                                                              (("4"
                                                                                (mult-by
                                                                                 -7
                                                                                 "1-tt")
                                                                                (("4"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("5"
                                                                              (flatten)
                                                                              (("5"
                                                                                (cross-mult
                                                                                 -3)
                                                                                (("5"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (case "mx < 0")
                                                            (("1"
                                                              (hide (1 2))
                                                              (("1"
                                                                (name
                                                                 "tt"
                                                                 "(-mx)/(x-mx)")
                                                                (("1"
                                                                  (case
                                                                   "NOT (0<=tt AND tt<=1)")
                                                                  (("1"
                                                                    (hide 2)
                                                                    (("1"
                                                                      (expand
                                                                       "tt"
                                                                       +)
                                                                      (("1"
                                                                        (split)
                                                                        (("1"
                                                                          (cross-mult
                                                                           1)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (cross-mult
                                                                           1)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (inst
                                                                       +
                                                                       "tt")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (split)
                                                                          (("1"
                                                                            (mult-by
                                                                             -7
                                                                             "tt")
                                                                            (("1"
                                                                              (cross-mult
                                                                               -4)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (mult-by
                                                                             -8
                                                                             "tt")
                                                                            (("2"
                                                                              (cross-mult
                                                                               -4)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (mult-by
                                                                             -9
                                                                             "tt")
                                                                            (("3"
                                                                              (mult-by
                                                                               -6
                                                                               "1-tt")
                                                                              (("3"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("4"
                                                                            (mult-by
                                                                             -10
                                                                             "tt")
                                                                            (("4"
                                                                              (mult-by
                                                                               -7
                                                                               "1-tt")
                                                                              (("4"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("5"
                                                                            (flatten)
                                                                            (("5"
                                                                              (cross-mult
                                                                               -3)
                                                                              (("5"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (ground)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (case
                                                         "EXISTS (tx:real): 0<=tx AND tx<=1 AND abs(mx+tx*(x-mx)-1/2)=1/2 AND FORALL (t:real):  tx <= t AND
                          t <= 1 IMPLIES abs(mx+t*(x-mx)-1/2)<=1/2")
                                                        (("1"
                                                          (case
                                                           "EXISTS (ty:real): 0<=ty AND ty<=1 AND abs(my+ty*(y-my)-1/2)=1/2 AND FORALL (t:real):  ty <= t AND
                            t <= 1 IMPLIES abs(my+t*(y-my)-1/2)<=1/2")
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (skeep)
                                                              (("1"
                                                                (name
                                                                 "tt"
                                                                 "max(tx,ty)")
                                                                (("1"
                                                                  (inst
                                                                   +
                                                                   "tt")
                                                                  (("1"
                                                                    (hide
                                                                     (1 2))
                                                                    (("1"
                                                                      (case
                                                                       "NOT (0<=tt AND tt<=1)")
                                                                      (("1"
                                                                        (hide
                                                                         2)
                                                                        (("1"
                                                                          (expand
                                                                           "tt"
                                                                           1)
                                                                          (("1"
                                                                            (expand
                                                                             "max"
                                                                             1)
                                                                            (("1"
                                                                              (lift-if)
                                                                              (("1"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (split)
                                                                            (("1"
                                                                              (inst
                                                                               -11
                                                                               "tt")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "abs"
                                                                                   -11)
                                                                                  (("1"
                                                                                    (ground)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (inst
                                                                               -11
                                                                               "tt")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   "abs"
                                                                                   -11)
                                                                                  (("2"
                                                                                    (ground)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (inst
                                                                               -
                                                                               "tt")
                                                                              (("3"
                                                                                (assert)
                                                                                (("3"
                                                                                  (expand
                                                                                   "abs")
                                                                                  (("3"
                                                                                    (lift-if)
                                                                                    (("3"
                                                                                      (ground)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("4"
                                                                              (inst
                                                                               -
                                                                               "tt")
                                                                              (("4"
                                                                                (assert)
                                                                                (("4"
                                                                                  (expand
                                                                                   "abs")
                                                                                  (("4"
                                                                                    (lift-if)
                                                                                    (("4"
                                                                                      (ground)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("5"
                                                                              (flatten)
                                                                              (("5"
                                                                                (expand
                                                                                 "max")
                                                                                (("5"
                                                                                  (expand
                                                                                   "abs")
                                                                                  (("5"
                                                                                    (lift-if)
                                                                                    (("5"
                                                                                      (ground)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 4)
                                                            (("2"
                                                              (hide -1)
                                                              (("2"
                                                                (hide 3)
                                                                (("2"
                                                                  (split)
                                                                  (("1"
                                                                    (name
                                                                     "tt"
                                                                     "(-my)/(y-my)")
                                                                    (("1"
                                                                      (inst
                                                                       +
                                                                       "tt")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (case
                                                                           "NOT (0<=tt AND tt<=1)")
                                                                          (("1"
                                                                            (hide
                                                                             3)
                                                                            (("1"
                                                                              (expand
                                                                               "tt")
                                                                              (("1"
                                                                                (split)
                                                                                (("1"
                                                                                  (cross-mult
                                                                                   1)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (cross-mult
                                                                                   1)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (cross-mult
                                                                                 -3)
                                                                                (("2"
                                                                                  (case
                                                                                   "NOT - my * tt + tt * y + my = 0")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (both-sides
                                                                                     "-"
                                                                                     "1/2"
                                                                                     -1)
                                                                                    (("2"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "abs"
                                                                                           +
                                                                                           1)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (skeep)
                                                                                              (("2"
                                                                                                (case
                                                                                                 "t * y - t * my + my>=0 AND t * y - t * my + my<=1")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "abs")
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (lift-if)
                                                                                                      (("1"
                                                                                                        (ground)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (split)
                                                                                                    (("1"
                                                                                                      (mult-by
                                                                                                       -5
                                                                                                       "y-my")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (mult-by
                                                                                                       -6
                                                                                                       "y-my")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (name
                                                                     "tt"
                                                                     "(1-my)/(y-my)")
                                                                    (("1"
                                                                      (case
                                                                       "NOT (0<=tt AND tt<=1)")
                                                                      (("1"
                                                                        (hide
                                                                         3)
                                                                        (("1"
                                                                          (expand
                                                                           "tt"
                                                                           1)
                                                                          (("1"
                                                                            (split)
                                                                            (("1"
                                                                              (cross-mult
                                                                               1)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (cross-mult
                                                                               1)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (inst
                                                                           +
                                                                           "tt")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (case
                                                                               "NOT - my * tt + tt * y + my = 1")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (cross-mult
                                                                                   -3)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (split)
                                                                                (("1"
                                                                                  (expand
                                                                                   "abs"
                                                                                   1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (skeep)
                                                                                  (("2"
                                                                                    (case
                                                                                     "t * y - t * my + my>=0 AND t * y - t * my + my<=1")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "abs"
                                                                                       1)
                                                                                      (("1"
                                                                                        (lift-if)
                                                                                        (("1"
                                                                                          (ground)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (split)
                                                                                      (("1"
                                                                                        (mult-by
                                                                                         -2
                                                                                         "my-y")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (mult-by
                                                                                         -1
                                                                                         "my-y")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 4)
                                                          (("2"
                                                            (hide 2)
                                                            (("2"
                                                              (split)
                                                              (("1"
                                                                (name
                                                                 "tt"
                                                                 "(-mx)/(x-mx)")
                                                                (("1"
                                                                  (case
                                                                   "NOT (0<=tt AND tt<=1)")
                                                                  (("1"
                                                                    (hide 3)
                                                                    (("1"
                                                                      (expand
                                                                       "tt"
                                                                       1)
                                                                      (("1"
                                                                        (split)
                                                                        (("1"
                                                                          (cross-mult
                                                                           1)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (cross-mult
                                                                           1)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (inst
                                                                       +
                                                                       "tt")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (case
                                                                           "NOT - mx * tt + tt * x + mx = 0")
                                                                          (("1"
                                                                            (cross-mult
                                                                             -3)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "abs"
                                                                             +
                                                                             1)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (skeep)
                                                                                (("2"
                                                                                  (case
                                                                                   "t * x - t * mx + mx>=0 AND t * x - t * mx + mx<=1")
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "abs")
                                                                                      (("1"
                                                                                        (lift-if)
                                                                                        (("1"
                                                                                          (ground)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (split)
                                                                                    (("1"
                                                                                      (mult-by
                                                                                       -5
                                                                                       "x-mx")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (mult-by
                                                                                       -6
                                                                                       "x-mx")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (name
                                                                 "tt"
                                                                 "(1-mx)/(x-mx)")
                                                                (("1"
                                                                  (case
                                                                   "NOT (0<=tt AND tt<=1)")
                                                                  (("1"
                                                                    (hide 3)
                                                                    (("1"
                                                                      (expand
                                                                       "tt"
                                                                       1)
                                                                      (("1"
                                                                        (split)
                                                                        (("1"
                                                                          (cross-mult
                                                                           1)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (cross-mult
                                                                           1)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (inst
                                                                       +
                                                                       "tt")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (case
                                                                           "NOT - mx * tt + tt * x + mx = 1")
                                                                          (("1"
                                                                            (cross-mult
                                                                             -3)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "abs"
                                                                             +
                                                                             1)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (skeep)
                                                                                (("2"
                                                                                  (case
                                                                                   "t * x - t * mx + mx>=0 AND t * x - t * mx + mx<=1")
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "abs")
                                                                                      (("1"
                                                                                        (lift-if)
                                                                                        (("1"
                                                                                          (ground)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     3)
                                                                                    (("2"
                                                                                      (split)
                                                                                      (("1"
                                                                                        (mult-by
                                                                                         -6
                                                                                         "mx-x")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (mult-by
                                                                                         -5
                                                                                         "mx-x")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (quad_min_unit_box_init_def-3 nil 3635509947
   ("" (skeep)
    (("" (label "rd" -1)
      (("" (hide "rd")
        (("" (name "mx" "quad_min_x(a, b, c, d, ee)")
          (("" (name "my" "quad_min_y(a, b, c, d, ee)")
            (("" (expand "quad_min_unit_box_init")
              (("" (replace -1)
                (("" (replace -2)
                  (("" (split)
                    (("1" (flatten)
                      (("1" (splash -)
                        (("1" (flatten)
                          (("1" (inst + "mx" "my") (("1" (assert) nil nil))
                            nil))
                          nil)
                         ("2" (hide (1 2 3))
                          (("2" (lemma "quad_min_le_D_int_def")
                            (("2" (inst?)
                              (("2" (assert)
                                (("2" (lemma "quad_to_y")
                                  (("2" (insteep - :but ("x" "y"))
                                    (("2"
                                      (inst
                                       -
                                       "0"
                                       "quad_min_int(b, ee, f, 0, 1)")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "quadratic" - 2)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (replaces -1 :dir rl)
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (lemma
                                                     "quad_min_interval_def")
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (hide 2)
                          (("3" (hide 1)
                            (("3" (lemma "quad_min_le_D_int_def")
                              (("3" (inst?)
                                (("3" (assert)
                                  (("3" (lemma "quad_to_y")
                                    (("3" (insteep - :but ("x" "y"))
                                      (("3"
                                        (inst
                                         -
                                         "1"
                                         "quad_min_int(b, c + ee, quadratic(a, d, f)(1), 0, 1)")
                                        (("3"
                                          (assert)
                                          (("3"
                                            (replaces -1 :dir rl)
                                            (("3"
                                              (inst?)
                                              (("3"
                                                (assert)
                                                (("3"
                                                  (lemma
                                                   "quad_min_interval_def")
                                                  (("3"
                                                    (inst?)
                                                    (("3"
                                                      (assert)
                                                      (("3" (ground) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("4" (hide 1)
                          (("4" (lemma "quad_min_le_D_int_def")
                            (("4" (inst?)
                              (("4" (assert)
                                (("4" (lemma "quad_to_x")
                                  (("4" (insteep - :but ("x" "y"))
                                    (("4"
                                      (inst
                                       -
                                       "quad_min_int(a, d, f, 0, 1)"
                                       "0")
                                      (("4"
                                        (assert)
                                        (("4"
                                          (expand "quadratic" - 2)
                                          (("4"
                                            (assert)
                                            (("4"
                                              (replaces -1 :dir rl)
                                              (("4"
                                                (inst?)
                                                (("4"
                                                  (assert)
                                                  (("4"
                                                    (lemma
                                                     "quad_min_interval_def")
                                                    (("4"
                                                      (inst?)
                                                      (("4"
                                                        (assert)
                                                        (("4"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("5" (lemma "quad_min_le_D_int_def")
                          (("5" (inst?)
                            (("5" (assert)
                              (("5" (lemma "quad_to_x")
                                (("5" (insteep - :but ("x" "y"))
                                  (("5"
                                    (inst -
                                     "quad_min_int(a, c + d, quadratic(b, ee, f)(1), 0, 1)"
                                     "1")
                                    (("5" (assert)
                                      (("5"
                                        (replaces -1 :dir rl)
                                        (("5"
                                          (inst?)
                                          (("5"
                                            (assert)
                                            (("5"
                                              (lemma "quad_min_interval_def")
                                              (("5"
                                                (inst?)
                                                (("5"
                                                  (assert)
                                                  (("5" (ground) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (skeep)
                        (("2" (case "x = mx AND y=my")
                          (("1" (flatten) (("1" (assert) nil nil)) nil)
                           ("2"
                            (case "EXISTS (t): 0<=t AND t<=1 AND LET newx=mx+t*(x-mx),newy=my+t*(y-my) IN ((0<=newx AND newx<=1 AND 0<=newy AND newy<=1) AND (newx=0 OR newx=1 OR newy=0 OR newy=1))")
                            (("1" (skolem - "G")
                              (("1" (flatten)
                                (("1" (skoletin -)
                                  (("1" (skoletin -)
                                    (("1" (flatten)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case
                                           "quad(a, b, c, d, ee, f)(newx,newy)<=quad(a, b, c, d, ee, f)(x, y)")
                                          (("1"
                                            (split -)
                                            (("1"
                                              (lemma "quad_min_le_D_int_def")
                                              (("1"
                                                (hide (2 3 4))
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (rewrite "quad_to_y")
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "quadratic"
                                                             -2
                                                             2)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (lemma
                                                                 "quad_min_interval_def")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "newy")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma "quad_min_le_D_int_def")
                                              (("2"
                                                (hide (2 3 5))
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (rewrite "quad_to_y")
                                                      (("2"
                                                        (replace -1)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (lemma
                                                             "quad_min_interval_def")
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "newy")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (lemma "quad_min_le_D_int_def")
                                              (("3"
                                                (hide (2 4 5))
                                                (("3"
                                                  (inst?)
                                                  (("3"
                                                    (assert)
                                                    (("3"
                                                      (rewrite "quad_to_x")
                                                      (("3"
                                                        (replace -1)
                                                        (("3"
                                                          (assert)
                                                          (("3"
                                                            (expand
                                                             "quadratic"
                                                             -2
                                                             2)
                                                            (("3"
                                                              (assert)
                                                              (("3"
                                                                (lemma
                                                                 "quad_min_interval_def")
                                                                (("3"
                                                                  (inst?)
                                                                  (("3"
                                                                    (assert)
                                                                    (("3"
                                                                      (flatten)
                                                                      (("3"
                                                                        (inst
                                                                         -
                                                                         "newx")
                                                                        (("3"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("4"
                                              (lemma "quad_min_le_D_int_def")
                                              (("4"
                                                (hide (3 4 5))
                                                (("4"
                                                  (inst?)
                                                  (("4"
                                                    (assert)
                                                    (("4"
                                                      (rewrite "quad_to_x")
                                                      (("4"
                                                        (replace -1)
                                                        (("4"
                                                          (assert)
                                                          (("4"
                                                            (assert)
                                                            (("4"
                                                              (lemma
                                                               "quad_min_interval_def")
                                                              (("4"
                                                                (inst?)
                                                                (("4"
                                                                  (assert)
                                                                  (("4"
                                                                    (flatten)
                                                                    (("4"
                                                                      (inst
                                                                       -
                                                                       "newx")
                                                                      (("4"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (name "vv" "x-mx")
                                            (("2"
                                              (name "ww" "y-my")
                                              (("2"
                                                (lemma "quad_translate_t")
                                                (("2"
                                                  (insteep
                                                   -
                                                   :but
                                                   ("x" "y" "t" "v" "w"))
                                                  (("2"
                                                    (inst - _ "vv" "ww" _ _)
                                                    (("2"
                                                      (inst - _ "mx" "my")
                                                      (("2"
                                                        (name
                                                         "A"
                                                         "a * sq(vv) + b * sq(ww) + c * vv * ww")
                                                        (("2"
                                                          (name
                                                           "B"
                                                           "2 * a * vv * mx + 2 * b * ww * my + c * vv * my +
                                                                                c * ww * mx
                                                                                + d * vv
                                                                                + ee * ww")
                                                          (("2"
                                                            (name
                                                             "C"
                                                             "a * mx * mx + b * my * my + c * mx * my + d * mx +
                                                                                ee * my
                                                                                + f")
                                                            (("2"
                                                              (replace -1)
                                                              (("2"
                                                                (replace -2)
                                                                (("2"
                                                                  (replace -3)
                                                                  (("2"
                                                                    (inst-cp
                                                                     -
                                                                     "1")
                                                                    (("2"
                                                                      (inst-cp
                                                                       -
                                                                       "0")
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "G")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (case
                                                                             "G = 1")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (lemma
                                                                                 "quad_min_mono_inc")
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "A"
                                                                                   "B"
                                                                                   "C"
                                                                                   "1"
                                                                                   "G")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (case
                                                                                       "NOT A > 0")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "A"
                                                                                         1)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "quad_min_x_y_up")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -
                                                                                             "a"
                                                                                             "b"
                                                                                             "c"
                                                                                             "vv"
                                                                                             "ww")
                                                                                            (("1"
                                                                                              (case
                                                                                               "NOT (ww/=0 OR vv/=0)")
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (replace
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (reveal
                                                                                                   "rd")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "quad_min_x_y_linear_min")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -
                                                                                             "a"
                                                                                             "b"
                                                                                             "c"
                                                                                             "d"
                                                                                             "ee"
                                                                                             "vv"
                                                                                             "ww"
                                                                                             "mx"
                                                                                             "my")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (reveal
                                                                                                 "rd")
                                                                                                (("2"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (case
                                                                                     "NOT A > 0")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "A"
                                                                                       1)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "quad_min_x_y_up")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "a"
                                                                                           "b"
                                                                                           "c"
                                                                                           "vv"
                                                                                           "ww")
                                                                                          (("1"
                                                                                            (case
                                                                                             "NOT (ww/=0 OR vv/=0)")
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("2"
                                                                                                (reveal
                                                                                                 "rd")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "quad_min_x_y_def")
                              (("2" (insteep -)
                                (("2" (reveal "rd")
                                  (("2" (replace -1)
                                    (("2" (label "ans" 1)
                                      (("2"
                                        (hide "ans")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (reveal "ans")
                                            (("2"
                                              (hide-all-but
                                               (-3 -4 -5 -6 7 "ans"))
                                              (("2"
                                                (delabel "ans")
                                                (("2"
                                                  (case "0<=mx AND mx<=1")
                                                  (("1"
                                                    (case "my > 1")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (name
                                                         "tt"
                                                         "(1-my)/(y-my)")
                                                        (("1"
                                                          (inst + "tt")
                                                          (("1"
                                                            (case
                                                             "NOT (0<=tt AND tt<=1)")
                                                            (("1"
                                                              (hide 2)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (split 1)
                                                                  (("1"
                                                                    (expand
                                                                     "tt"
                                                                     1)
                                                                    (("1"
                                                                      (cross-mult
                                                                       1)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "tt"
                                                                     1)
                                                                    (("2"
                                                                      (cross-mult
                                                                       1)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (split +)
                                                                  (("1"
                                                                    (mult-by
                                                                     -7
                                                                     "tt")
                                                                    (("1"
                                                                      (mult-by
                                                                       -6
                                                                       "1-tt")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (mult-by
                                                                     -8
                                                                     "tt")
                                                                    (("2"
                                                                      (mult-by
                                                                       -7
                                                                       "1-tt")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (cross-mult
                                                                     -3)
                                                                    (("3"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("4"
                                                                    (cross-mult
                                                                     -3)
                                                                    (("4"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("5"
                                                                    (flatten)
                                                                    (("5"
                                                                      (cross-mult
                                                                       -3)
                                                                      (("5"
                                                                        (cross-mult
                                                                         -3)
                                                                        (("5"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (case "my < 0")
                                                        (("1"
                                                          (hide 1)
                                                          (("1"
                                                            (name
                                                             "tt"
                                                             "(-my)/(y-my)")
                                                            (("1"
                                                              (case
                                                               "NOT (0<=tt AND tt<=1)")
                                                              (("1"
                                                                (hide (2 3))
                                                                (("1"
                                                                  (expand
                                                                   "tt"
                                                                   1)
                                                                  (("1"
                                                                    (split)
                                                                    (("1"
                                                                      (cross-mult
                                                                       1)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (cross-mult
                                                                       1)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (hide 2)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (inst
                                                                       +
                                                                       "tt")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (split)
                                                                          (("1"
                                                                            (mult-by
                                                                             -7
                                                                             "tt")
                                                                            (("1"
                                                                              (mult-by
                                                                               -6
                                                                               "1-tt")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (mult-by
                                                                             -8
                                                                             "tt")
                                                                            (("2"
                                                                              (mult-by
                                                                               -7
                                                                               "1-tt")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (cross-mult
                                                                             -3)
                                                                            (("3"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("4"
                                                                            (cross-mult
                                                                             -3)
                                                                            (("4"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("5"
                                                                            (flatten)
                                                                            (("5"
                                                                              (cross-mult
                                                                               -3)
                                                                              (("5"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 3)
                                                    (("2"
                                                      (case "0<=my AND my<=1")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (case "mx > 1")
                                                          (("1"
                                                            (hide 1)
                                                            (("1"
                                                              (name
                                                               "tt"
                                                               "(1-mx)/(x-mx)")
                                                              (("1"
                                                                (case
                                                                 "NOT (0<=tt AND tt<=1)")
                                                                (("1"
                                                                  (hide 2)
                                                                  (("1"
                                                                    (expand
                                                                     "tt"
                                                                     1)
                                                                    (("1"
                                                                      (split)
                                                                      (("1"
                                                                        (cross-mult
                                                                         1)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (cross-mult
                                                                         1)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (inst
                                                                         +
                                                                         "tt")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (split)
                                                                            (("1"
                                                                              (mult-by
                                                                               -7
                                                                               "tt")
                                                                              (("1"
                                                                                (mult-by
                                                                                 -5
                                                                                 "1-tt")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (case
                                                                                   "tt = 1")
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (mult-by
                                                                               -8
                                                                               "tt")
                                                                              (("2"
                                                                                (cross-mult
                                                                                 -4)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (mult-by
                                                                               -9
                                                                               "tt")
                                                                              (("3"
                                                                                (mult-by
                                                                                 -6
                                                                                 "1-tt")
                                                                                (("3"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("4"
                                                                              (mult-by
                                                                               -10
                                                                               "tt")
                                                                              (("4"
                                                                                (mult-by
                                                                                 -7
                                                                                 "1-tt")
                                                                                (("4"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("5"
                                                                              (flatten)
                                                                              (("5"
                                                                                (cross-mult
                                                                                 -3)
                                                                                (("5"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (case "mx < 0")
                                                            (("1"
                                                              (hide (1 2))
                                                              (("1"
                                                                (name
                                                                 "tt"
                                                                 "(-mx)/(x-mx)")
                                                                (("1"
                                                                  (case
                                                                   "NOT (0<=tt AND tt<=1)")
                                                                  (("1"
                                                                    (hide 2)
                                                                    (("1"
                                                                      (expand
                                                                       "tt"
                                                                       +)
                                                                      (("1"
                                                                        (split)
                                                                        (("1"
                                                                          (cross-mult
                                                                           1)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (cross-mult
                                                                           1)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (inst
                                                                       +
                                                                       "tt")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (split)
                                                                          (("1"
                                                                            (mult-by
                                                                             -7
                                                                             "tt")
                                                                            (("1"
                                                                              (cross-mult
                                                                               -4)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (mult-by
                                                                             -8
                                                                             "tt")
                                                                            (("2"
                                                                              (cross-mult
                                                                               -4)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (mult-by
                                                                             -9
                                                                             "tt")
                                                                            (("3"
                                                                              (mult-by
                                                                               -6
                                                                               "1-tt")
                                                                              (("3"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("4"
                                                                            (mult-by
                                                                             -10
                                                                             "tt")
                                                                            (("4"
                                                                              (mult-by
                                                                               -7
                                                                               "1-tt")
                                                                              (("4"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("5"
                                                                            (flatten)
                                                                            (("5"
                                                                              (cross-mult
                                                                               -3)
                                                                              (("5"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (ground)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (case
                                                         "EXISTS (tx:real): 0<=tx AND tx<=1 AND abs(mx+tx*(x-mx)-1/2)=1/2 AND FORALL (t:real):  tx <= t AND
                          t <= 1 IMPLIES abs(mx+t*(x-mx)-1/2)<=1/2")
                                                        (("1"
                                                          (case
                                                           "EXISTS (ty:real): 0<=ty AND ty<=1 AND abs(my+ty*(y-my)-1/2)=1/2 AND FORALL (t:real):  ty <= t AND
                            t <= 1 IMPLIES abs(my+t*(y-my)-1/2)<=1/2")
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (skeep)
                                                              (("1"
                                                                (name
                                                                 "tt"
                                                                 "max(tx,ty)")
                                                                (("1"
                                                                  (inst
                                                                   +
                                                                   "tt")
                                                                  (("1"
                                                                    (hide
                                                                     (1 2))
                                                                    (("1"
                                                                      (case
                                                                       "NOT (0<=tt AND tt<=1)")
                                                                      (("1"
                                                                        (hide
                                                                         2)
                                                                        (("1"
                                                                          (expand
                                                                           "tt"
                                                                           1)
                                                                          (("1"
                                                                            (expand
                                                                             "max"
                                                                             1)
                                                                            (("1"
                                                                              (lift-if)
                                                                              (("1"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (split)
                                                                            (("1"
                                                                              (inst
                                                                               -11
                                                                               "tt")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "abs"
                                                                                   -11)
                                                                                  (("1"
                                                                                    (ground)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (inst
                                                                               -11
                                                                               "tt")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   "abs"
                                                                                   -11)
                                                                                  (("2"
                                                                                    (ground)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (inst
                                                                               -
                                                                               "tt")
                                                                              (("3"
                                                                                (assert)
                                                                                (("3"
                                                                                  (expand
                                                                                   "abs")
                                                                                  (("3"
                                                                                    (lift-if)
                                                                                    (("3"
                                                                                      (ground)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("4"
                                                                              (inst
                                                                               -
                                                                               "tt")
                                                                              (("4"
                                                                                (assert)
                                                                                (("4"
                                                                                  (expand
                                                                                   "abs")
                                                                                  (("4"
                                                                                    (lift-if)
                                                                                    (("4"
                                                                                      (ground)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("5"
                                                                              (flatten)
                                                                              (("5"
                                                                                (expand
                                                                                 "max")
                                                                                (("5"
                                                                                  (expand
                                                                                   "abs")
                                                                                  (("5"
                                                                                    (lift-if)
                                                                                    (("5"
                                                                                      (ground)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 4)
                                                            (("2"
                                                              (hide -1)
                                                              (("2"
                                                                (hide 3)
                                                                (("2"
                                                                  (split)
                                                                  (("1"
                                                                    (name
                                                                     "tt"
                                                                     "(-my)/(y-my)")
                                                                    (("1"
                                                                      (inst
                                                                       +
                                                                       "tt")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (case
                                                                           "NOT (0<=tt AND tt<=1)")
                                                                          (("1"
                                                                            (hide
                                                                             3)
                                                                            (("1"
                                                                              (expand
                                                                               "tt")
                                                                              (("1"
                                                                                (split)
                                                                                (("1"
                                                                                  (cross-mult
                                                                                   1)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (cross-mult
                                                                                   1)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (cross-mult
                                                                                 -3)
                                                                                (("2"
                                                                                  (case
                                                                                   "NOT - my * tt + tt * y + my = 0")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (both-sides
                                                                                     "-"
                                                                                     "1/2"
                                                                                     -1)
                                                                                    (("2"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "abs"
                                                                                           +
                                                                                           1)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (skeep)
                                                                                              (("2"
                                                                                                (case
                                                                                                 "t * y - t * my + my>=0 AND t * y - t * my + my<=1")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "abs")
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (lift-if)
                                                                                                      (("1"
                                                                                                        (ground)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (split)
                                                                                                    (("1"
                                                                                                      (mult-by
                                                                                                       -5
                                                                                                       "y-my")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (mult-by
                                                                                                       -6
                                                                                                       "y-my")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (name
                                                                     "tt"
                                                                     "(1-my)/(y-my)")
                                                                    (("1"
                                                                      (case
                                                                       "NOT (0<=tt AND tt<=1)")
                                                                      (("1"
                                                                        (hide
                                                                         3)
                                                                        (("1"
                                                                          (expand
                                                                           "tt"
                                                                           1)
                                                                          (("1"
                                                                            (split)
                                                                            (("1"
                                                                              (cross-mult
                                                                               1)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (cross-mult
                                                                               1)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (inst
                                                                           +
                                                                           "tt")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (case
                                                                               "NOT - my * tt + tt * y + my = 1")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (cross-mult
                                                                                   -3)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (split)
                                                                                (("1"
                                                                                  (expand
                                                                                   "abs"
                                                                                   1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (skeep)
                                                                                  (("2"
                                                                                    (case
                                                                                     "t * y - t * my + my>=0 AND t * y - t * my + my<=1")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "abs"
                                                                                       1)
                                                                                      (("1"
                                                                                        (lift-if)
                                                                                        (("1"
                                                                                          (ground)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (split)
                                                                                      (("1"
                                                                                        (mult-by
                                                                                         -2
                                                                                         "my-y")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (mult-by
                                                                                         -1
                                                                                         "my-y")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 4)
                                                          (("2"
                                                            (hide 2)
                                                            (("2"
                                                              (split)
                                                              (("1"
                                                                (name
                                                                 "tt"
                                                                 "(-mx)/(x-mx)")
                                                                (("1"
                                                                  (case
                                                                   "NOT (0<=tt AND tt<=1)")
                                                                  (("1"
                                                                    (hide 3)
                                                                    (("1"
                                                                      (expand
                                                                       "tt"
                                                                       1)
                                                                      (("1"
                                                                        (split)
                                                                        (("1"
                                                                          (cross-mult
                                                                           1)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (cross-mult
                                                                           1)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (inst
                                                                       +
                                                                       "tt")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (case
                                                                           "NOT - mx * tt + tt * x + mx = 0")
                                                                          (("1"
                                                                            (cross-mult
                                                                             -3)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "abs"
                                                                             +
                                                                             1)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (skeep)
                                                                                (("2"
                                                                                  (case
                                                                                   "t * x - t * mx + mx>=0 AND t * x - t * mx + mx<=1")
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "abs")
                                                                                      (("1"
                                                                                        (lift-if)
                                                                                        (("1"
                                                                                          (ground)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (split)
                                                                                    (("1"
                                                                                      (mult-by
                                                                                       -5
                                                                                       "x-mx")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (mult-by
                                                                                       -6
                                                                                       "x-mx")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (name
                                                                 "tt"
                                                                 "(1-mx)/(x-mx)")
                                                                (("1"
                                                                  (case
                                                                   "NOT (0<=tt AND tt<=1)")
                                                                  (("1"
                                                                    (hide 3)
                                                                    (("1"
                                                                      (expand
                                                                       "tt"
                                                                       1)
                                                                      (("1"
                                                                        (split)
                                                                        (("1"
                                                                          (cross-mult
                                                                           1)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (cross-mult
                                                                           1)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (inst
                                                                       +
                                                                       "tt")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (case
                                                                           "NOT - mx * tt + tt * x + mx = 1")
                                                                          (("1"
                                                                            (cross-mult
                                                                             -3)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "abs"
                                                                             +
                                                                             1)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (skeep)
                                                                                (("2"
                                                                                  (case
                                                                                   "t * x - t * mx + mx>=0 AND t * x - t * mx + mx<=1")
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "abs")
                                                                                      (("1"
                                                                                        (lift-if)
                                                                                        (("1"
                                                                                          (ground)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     3)
                                                                                    (("2"
                                                                                      (split)
                                                                                      (("1"
                                                                                        (mult-by
                                                                                         -6
                                                                                         "mx-x")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (mult-by
                                                                                         -5
                                                                                         "mx-x")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((quad_min_x const-decl "real" double_quadratic nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (quad_min_unit_box_init const-decl "bool" double_quadratic nil)
    (quad_min_x_y_def formula-decl nil double_quadratic nil)
    (tt skolem-const-decl "real" double_quadratic nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (my skolem-const-decl "real" double_quadratic nil)
    (y skolem-const-decl "real" double_quadratic nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props nil)
    (div_cancel3 formula-decl nil real_props nil)
    (div_mult_neg_le2 formula-decl nil real_props nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (tt skolem-const-decl "real" double_quadratic nil)
    (div_mult_neg_le1 formula-decl nil real_props nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (both_sides_times_pos_gt1 formula-decl nil real_props nil)
    (x skolem-const-decl "real" double_quadratic nil)
    (mx skolem-const-decl "real" double_quadratic nil)
    (tt skolem-const-decl "real" double_quadratic nil)
    (tt skolem-const-decl "real" double_quadratic nil)
    (tt skolem-const-decl "real" double_quadratic nil)
    (tt skolem-const-decl "real" double_quadratic nil)
    (tt skolem-const-decl "{p: real | p >= tx AND p >= ty}" double_quadratic
     nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (tt skolem-const-decl "real" double_quadratic nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (rat_abs_is_nonneg application-judgement "{r: nonneg_rat | r >= q}"
     real_defs nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (tt skolem-const-decl "real" double_quadratic nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (A skolem-const-decl "real" double_quadratic nil)
    (quad_min_x_y_up formula-decl nil double_quadratic nil)
    (quad_min_x_y_linear_min formula-decl nil double_quadratic nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (quad_min_mono_inc formula-decl nil quad_minmax nil)
    (sq const-decl "nonneg_real" sq nil)
    (quad_translate_t formula-decl nil double_quadratic nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (quad_to_x formula-decl nil double_quadratic nil)
    (quad_to_y formula-decl nil double_quadratic nil)
    (quad_min_int const-decl "real" quad_minmax nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (quad_min_interval_def formula-decl nil quad_minmax nil)
    (sq_0 formula-decl nil sq nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (quad_min_le_D_int_def formula-decl nil quad_minmax nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (quad const-decl "real" double_quadratic nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (quad_min_le_D_int const-decl "bool" quad_minmax nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (quadratic const-decl "real" quadratic nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (quad_min_y const-decl "real" double_quadratic nil))
   nil)
  (quad_min_unit_box_init_def-2 nil 3635267368
   ("" (skeep)
    (("" (label "rd" -1)
      (("" (hide "rd")
        (("" (name "mx" "quad_min_x(a, b, c, d, ee)")
          (("" (name "my" "quad_min_y(a, b, c, d, ee)")
            (("" (expand "quad_min_unit_box_init")
              (("" (replace -1)
                (("" (replace -2)
                  (("" (split)
                    (("1" (flatten)
                      (("1" (splash -)
                        (("1" (flatten)
                          (("1" (inst + "mx" "my") (("1" (assert) nil nil))
                            nil))
                          nil)
                         ("2" (hide (1 2 3))
                          (("2" (lemma "quad_min_le_D_int_def")
                            (("2" (inst?)
                              (("2" (assert)
                                (("2" (lemma "quad_to_y")
                                  (("2" (insteep - :but ("x" "y"))
                                    (("2"
                                      (inst
                                       -
                                       "0"
                                       "quad_min_int(b, ee, f, 0, 1)")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "quadratic" - 2)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (replaces -1 :dir rl)
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (lemma
                                                     "quad_min_interval_def")
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (hide 2)
                          (("3" (hide 1)
                            (("3" (lemma "quad_min_le_D_int_def")
                              (("3" (inst?)
                                (("3" (assert)
                                  (("3" (lemma "quad_to_y")
                                    (("3" (insteep - :but ("x" "y"))
                                      (("3"
                                        (inst
                                         -
                                         "1"
                                         "quad_min_int(b, c + ee, quadratic(a, d, f)(1), 0, 1)")
                                        (("3"
                                          (assert)
                                          (("3"
                                            (replaces -1 :dir rl)
                                            (("3"
                                              (inst?)
                                              (("3"
                                                (assert)
                                                (("3"
                                                  (lemma
                                                   "quad_min_interval_def")
                                                  (("3"
                                                    (inst?)
                                                    (("3"
                                                      (assert)
                                                      (("3" (ground) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("4" (hide 1)
                          (("4" (lemma "quad_min_le_D_int_def")
                            (("4" (inst?)
                              (("4" (assert)
                                (("4" (lemma "quad_to_x")
                                  (("4" (insteep - :but ("x" "y"))
                                    (("4"
                                      (inst
                                       -
                                       "quad_min_int(a, d, f, 0, 1)"
                                       "0")
                                      (("4"
                                        (assert)
                                        (("4"
                                          (expand "quadratic" - 2)
                                          (("4"
                                            (assert)
                                            (("4"
                                              (replaces -1 :dir rl)
                                              (("4"
                                                (inst?)
                                                (("4"
                                                  (assert)
                                                  (("4"
                                                    (lemma
                                                     "quad_min_interval_def")
                                                    (("4"
                                                      (inst?)
                                                      (("4"
                                                        (assert)
                                                        (("4"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("5" (lemma "quad_min_le_D_int_def")
                          (("5" (inst?)
                            (("5" (assert)
                              (("5" (lemma "quad_to_x")
                                (("5" (insteep - :but ("x" "y"))
                                  (("5"
                                    (inst -
                                     "quad_min_int(a, c + d, quadratic(b, ee, f)(1), 0, 1)"
                                     "1")
                                    (("5" (assert)
                                      (("5"
                                        (replaces -1 :dir rl)
                                        (("5"
                                          (inst?)
                                          (("5"
                                            (assert)
                                            (("5"
                                              (lemma "quad_min_interval_def")
                                              (("5"
                                                (inst?)
                                                (("5"
                                                  (assert)
                                                  (("5" (ground) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (skeep)
                        (("2" (case "x = mx AND y=my")
                          (("1" (flatten) (("1" (assert) nil nil)) nil)
                           ("2"
                            (case "EXISTS (t): 0<=t AND t<=1 AND LET newx=mx+t*(x-mx),newy=my+t*(y-my) IN ((0<=newx AND newx<=1 AND 0<=newy AND newy<=1) AND (newx=0 OR newx=1 OR newy=0 OR newy=1))")
                            (("1" (skolem - "G")
                              (("1" (flatten)
                                (("1" (skoletin -)
                                  (("1" (skoletin -)
                                    (("1" (flatten)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case
                                           "quad(a, b, c, d, ee, f)(newx,newy)<=quad(a, b, c, d, ee, f)(x, y)")
                                          (("1"
                                            (split -)
                                            (("1"
                                              (lemma "quad_min_le_D_int_def")
                                              (("1"
                                                (hide (2 3 4))
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (rewrite "quad_to_y")
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "quadratic"
                                                             -2
                                                             2)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (lemma
                                                                 "quad_min_interval_def")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "newy")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma "quad_min_le_D_int_def")
                                              (("2"
                                                (hide (2 3 5))
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (rewrite "quad_to_y")
                                                      (("2"
                                                        (replace -1)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (lemma
                                                             "quad_min_interval_def")
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "newy")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (lemma "quad_min_le_D_int_def")
                                              (("3"
                                                (hide (2 4 5))
                                                (("3"
                                                  (inst?)
                                                  (("3"
                                                    (assert)
                                                    (("3"
                                                      (rewrite "quad_to_x")
                                                      (("3"
                                                        (replace -1)
                                                        (("3"
                                                          (assert)
                                                          (("3"
                                                            (expand
                                                             "quadratic"
                                                             -2
                                                             2)
                                                            (("3"
                                                              (assert)
                                                              (("3"
                                                                (lemma
                                                                 "quad_min_interval_def")
                                                                (("3"
                                                                  (inst?)
                                                                  (("3"
                                                                    (assert)
                                                                    (("3"
                                                                      (flatten)
                                                                      (("3"
                                                                        (inst
                                                                         -
                                                                         "newx")
                                                                        (("3"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("4"
                                              (lemma "quad_min_le_D_int_def")
                                              (("4"
                                                (hide (3 4 5))
                                                (("4"
                                                  (inst?)
                                                  (("4"
                                                    (assert)
                                                    (("4"
                                                      (rewrite "quad_to_x")
                                                      (("4"
                                                        (replace -1)
                                                        (("4"
                                                          (assert)
                                                          (("4"
                                                            (assert)
                                                            (("4"
                                                              (lemma
                                                               "quad_min_interval_def")
                                                              (("4"
                                                                (inst?)
                                                                (("4"
                                                                  (assert)
                                                                  (("4"
                                                                    (flatten)
                                                                    (("4"
                                                                      (inst
                                                                       -
                                                                       "newx")
                                                                      (("4"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (name "vv" "x-mx")
                                            (("2"
                                              (name "ww" "y-my")
                                              (("2"
                                                (lemma "quad_translate_t")
                                                (("2"
                                                  (insteep
                                                   -
                                                   :but
                                                   ("x" "y" "t" "v" "w"))
                                                  (("2"
                                                    (inst - _ "vv" "ww" _ _)
                                                    (("2"
                                                      (inst - _ "mx" "my")
                                                      (("2"
                                                        (name
                                                         "A"
                                                         "a * sq(vv) + b * sq(ww) + c * vv * ww")
                                                        (("2"
                                                          (name
                                                           "B"
                                                           "2 * a * vv * mx + 2 * b * ww * my + c * vv * my +
                                                                 c * ww * mx
                                                                 + d * vv
                                                                 + ee * ww")
                                                          (("2"
                                                            (name
                                                             "C"
                                                             "a * mx * mx + b * my * my + c * mx * my + d * mx +
                                                                 ee * my
                                                                 + f")
                                                            (("2"
                                                              (replace -1)
                                                              (("2"
                                                                (replace -2)
                                                                (("2"
                                                                  (replace -3)
                                                                  (("2"
                                                                    (inst-cp
                                                                     -
                                                                     "1")
                                                                    (("2"
                                                                      (inst-cp
                                                                       -
                                                                       "0")
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "G")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (case
                                                                             "G = 1")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (lemma
                                                                                 "quad_min_mono_inc")
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "A"
                                                                                   "B"
                                                                                   "C"
                                                                                   "1"
                                                                                   "G")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (case
                                                                                       "NOT A > 0")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "A"
                                                                                         1)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "quad_min_x_y_up")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -
                                                                                             "a"
                                                                                             "b"
                                                                                             "c"
                                                                                             "vv"
                                                                                             "ww")
                                                                                            (("1"
                                                                                              (case
                                                                                               "NOT (ww/=0 OR vv/=0)")
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (replace
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (reveal
                                                                                                   "rd")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "quad_min_x_y_linear_min")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -
                                                                                             "a"
                                                                                             "b"
                                                                                             "c"
                                                                                             "d"
                                                                                             "ee"
                                                                                             "vv"
                                                                                             "ww"
                                                                                             "mx"
                                                                                             "my")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (reveal
                                                                                                 "rd")
                                                                                                (("2"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (case
                                                                                     "NOT A > 0")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "A"
                                                                                       1)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "quad_min_x_y_up")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "a"
                                                                                           "b"
                                                                                           "c"
                                                                                           "vv"
                                                                                           "ww")
                                                                                          (("1"
                                                                                            (case
                                                                                             "NOT (ww/=0 OR vv/=0)")
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("2"
                                                                                                (reveal
                                                                                                 "rd")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "quad_min_x_y_def")
                              (("2" (insteep -)
                                (("2" (reveal "rd")
                                  (("2" (replace -1)
                                    (("2" (label "ans" 1)
                                      (("2"
                                        (hide "ans")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (reveal "ans")
                                            (("2"
                                              (hide-all-but
                                               (-3 -4 -5 -6 7 "ans"))
                                              (("2"
                                                (delabel "ans")
                                                (("2"
                                                  (case "0<=mx AND mx<=1")
                                                  (("1"
                                                    (case "my > 1")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (name
                                                         "tt"
                                                         "(1-my)/(y-my)")
                                                        (("1"
                                                          (inst + "tt")
                                                          (("1"
                                                            (case
                                                             "NOT (0<=tt AND tt<=1)")
                                                            (("1"
                                                              (hide 2)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (split 1)
                                                                  (("1"
                                                                    (expand
                                                                     "tt"
                                                                     1)
                                                                    (("1"
                                                                      (cross-mult
                                                                       1)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "tt"
                                                                     1)
                                                                    (("2"
                                                                      (cross-mult
                                                                       1)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (split +)
                                                                  (("1"
                                                                    (mult-by
                                                                     -7
                                                                     "tt")
                                                                    (("1"
                                                                      (mult-by
                                                                       -6
                                                                       "1-tt")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (mult-by
                                                                     -8
                                                                     "tt")
                                                                    (("2"
                                                                      (mult-by
                                                                       -7
                                                                       "1-tt")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (cross-mult
                                                                     -3)
                                                                    (("3"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("4"
                                                                    (cross-mult
                                                                     -3)
                                                                    (("4"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("5"
                                                                    (flatten)
                                                                    (("5"
                                                                      (cross-mult
                                                                       -3)
                                                                      (("5"
                                                                        (cross-mult
                                                                         -3)
                                                                        (("5"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (case "my < 0")
                                                        (("1"
                                                          (hide 1)
                                                          (("1"
                                                            (name
                                                             "tt"
                                                             "(-my)/(y-my)")
                                                            (("1"
                                                              (case
                                                               "NOT (0<=tt AND tt<=1)")
                                                              (("1"
                                                                (hide (2 3))
                                                                (("1"
                                                                  (expand
                                                                   "tt"
                                                                   1)
                                                                  (("1"
                                                                    (split)
                                                                    (("1"
                                                                      (cross-mult
                                                                       1)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (cross-mult
                                                                       1)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (hide 2)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (inst
                                                                       +
                                                                       "tt")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (split)
                                                                          (("1"
                                                                            (mult-by
                                                                             -7
                                                                             "tt")
                                                                            (("1"
                                                                              (mult-by
                                                                               -6
                                                                               "1-tt")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (mult-by
                                                                             -8
                                                                             "tt")
                                                                            (("2"
                                                                              (mult-by
                                                                               -7
                                                                               "1-tt")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (cross-mult
                                                                             -3)
                                                                            (("3"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("4"
                                                                            (cross-mult
                                                                             -3)
                                                                            (("4"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("5"
                                                                            (flatten)
                                                                            (("5"
                                                                              (cross-mult
                                                                               -3)
                                                                              (("5"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 3)
                                                    (("2"
                                                      (case "0<=my AND my<=1")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (case "mx > 1")
                                                          (("1"
                                                            (hide 1)
                                                            (("1"
                                                              (name
                                                               "tt"
                                                               "(1-mx)/(x-mx)")
                                                              (("1"
                                                                (case
                                                                 "NOT (0<=tt AND tt<=1)")
                                                                (("1"
                                                                  (hide 2)
                                                                  (("1"
                                                                    (expand
                                                                     "tt"
                                                                     1)
                                                                    (("1"
                                                                      (split)
                                                                      (("1"
                                                                        (cross-mult
                                                                         1)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (cross-mult
                                                                         1)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (inst
                                                                         +
                                                                         "tt")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (split)
                                                                            (("1"
                                                                              (mult-by
                                                                               -7
                                                                               "tt")
                                                                              (("1"
                                                                                (mult-by
                                                                                 -5
                                                                                 "1-tt")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (case
                                                                                   "tt = 1")
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (mult-by
                                                                               -8
                                                                               "tt")
                                                                              (("2"
                                                                                (cross-mult
                                                                                 -4)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (mult-by
                                                                               -9
                                                                               "tt")
                                                                              (("3"
                                                                                (mult-by
                                                                                 -6
                                                                                 "1-tt")
                                                                                (("3"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("4"
                                                                              (mult-by
                                                                               -10
                                                                               "tt")
                                                                              (("4"
                                                                                (mult-by
                                                                                 -7
                                                                                 "1-tt")
                                                                                (("4"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("5"
                                                                              (flatten)
                                                                              (("5"
                                                                                (cross-mult
                                                                                 -3)
                                                                                (("5"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (case "mx < 0")
                                                            (("1"
                                                              (hide (1 2))
                                                              (("1"
                                                                (name
                                                                 "tt"
                                                                 "(-mx)/(x-mx)")
                                                                (("1"
                                                                  (case
                                                                   "NOT (0<=tt AND tt<=1)")
                                                                  (("1"
                                                                    (hide 2)
                                                                    (("1"
                                                                      (expand
                                                                       "tt"
                                                                       +)
                                                                      (("1"
                                                                        (split)
                                                                        (("1"
                                                                          (cross-mult
                                                                           1)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (cross-mult
                                                                           1)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (inst
                                                                       +
                                                                       "tt")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (split)
                                                                          (("1"
                                                                            (mult-by
                                                                             -7
                                                                             "tt")
                                                                            (("1"
                                                                              (cross-mult
                                                                               -4)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (mult-by
                                                                             -8
                                                                             "tt")
                                                                            (("2"
                                                                              (cross-mult
                                                                               -4)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (mult-by
                                                                             -9
                                                                             "tt")
                                                                            (("3"
                                                                              (mult-by
                                                                               -6
                                                                               "1-tt")
                                                                              (("3"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("4"
                                                                            (mult-by
                                                                             -10
                                                                             "tt")
                                                                            (("4"
                                                                              (mult-by
                                                                               -7
                                                                               "1-tt")
                                                                              (("4"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("5"
                                                                            (flatten)
                                                                            (("5"
                                                                              (cross-mult
                                                                               -3)
                                                                              (("5"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (ground)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (case
                                                         "EXISTS (tx:real): 0<=tx AND tx<=1 AND abs(mx+tx*(x-mx)-1/2)=1/2 AND FORALL (t:real):  tx <= t AND
         t <= 1 IMPLIES abs(mx+t*(x-mx)-1/2)<1/2")
                                                        (("1"
                                                          (case
                                                           "EXISTS (ty:real): 0<=ty AND ty<=1 AND abs(my+ty*(y-my)-1/2)=1/2 AND FORALL (t:real):  ty <= t AND
         t <= 1 IMPLIES abs(my+t*(y-my)-1/2)<1/2")
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (skeep)
                                                              (("1"
                                                                (name
                                                                 "tt"
                                                                 "max(tx,ty)")
                                                                (("1"
                                                                  (inst
                                                                   +
                                                                   "tt")
                                                                  (("1"
                                                                    (hide
                                                                     (1 2))
                                                                    (("1"
                                                                      (case
                                                                       "NOT (0<=tt AND tt<=1)")
                                                                      (("1"
                                                                        (hide
                                                                         2)
                                                                        (("1"
                                                                          (expand
                                                                           "tt"
                                                                           1)
                                                                          (("1"
                                                                            (expand
                                                                             "max"
                                                                             1)
                                                                            (("1"
                                                                              (lift-if)
                                                                              (("1"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (split)
                                                                            (("1"
                                                                              (inst
                                                                               -11
                                                                               "tt")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "abs"
                                                                                   -11)
                                                                                  (("1"
                                                                                    (ground)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (inst
                                                                               -11
                                                                               "tt")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   "abs"
                                                                                   -11)
                                                                                  (("2"
                                                                                    (ground)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (inst
                                                                               -
                                                                               "tt")
                                                                              (("3"
                                                                                (assert)
                                                                                (("3"
                                                                                  (expand
                                                                                   "abs")
                                                                                  (("3"
                                                                                    (lift-if)
                                                                                    (("3"
                                                                                      (ground)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("4"
                                                                              (inst
                                                                               -
                                                                               "tt")
                                                                              (("4"
                                                                                (assert)
                                                                                (("4"
                                                                                  (expand
                                                                                   "abs")
                                                                                  (("4"
                                                                                    (lift-if)
                                                                                    (("4"
                                                                                      (ground)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("5"
                                                                              (flatten)
                                                                              (("5"
                                                                                (expand
                                                                                 "max")
                                                                                (("5"
                                                                                  (expand
                                                                                   "abs")
                                                                                  (("5"
                                                                                    (lift-if)
                                                                                    (("5"
                                                                                      (ground)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 4)
                                                            (("2"
                                                              (hide -1)
                                                              (("2"
                                                                (hide 3)
                                                                (("2"
                                                                  (split)
                                                                  (("1"
                                                                    (name
                                                                     "tt"
                                                                     "(-my)/(y-my)")
                                                                    (("1"
                                                                      (inst
                                                                       +
                                                                       "tt")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (case
                                                                           "NOT (0<=tt AND tt<=1)")
                                                                          (("1"
                                                                            (hide
                                                                             3)
                                                                            (("1"
                                                                              (expand
                                                                               "tt")
                                                                              (("1"
                                                                                (split)
                                                                                (("1"
                                                                                  (cross-mult
                                                                                   1)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (cross-mult
                                                                                   1)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (cross-mult
                                                                                 -3)
                                                                                (("2"
                                                                                  (expand
                                                                                   "abs"
                                                                                   +
                                                                                   1)
                                                                                  (("2"
                                                                                    (skeep)
                                                                                    (("2"
                                                                                      (postpone)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (postpone)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (postpone)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (postpone)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (quad_min_unit_box_init_def-1 nil 3635252177
   ("" (skeep)
    (("" (label "rd" -1)
      (("" (hide "rd")
        (("" (name "mx" "quad_min_x(a, b, c, d, ee)")
          (("" (name "my" "quad_min_y(a, b, c, d, ee)")
            (("" (expand "quad_min_unit_box_init")
              (("" (replace -1)
                (("" (replace -2)
                  (("" (split)
                    (("1" (flatten)
                      (("1" (splash -)
                        (("1" (flatten)
                          (("1" (inst + "mx" "my") (("1" (assert) nil nil))
                            nil))
                          nil)
                         ("2" (hide (1 2 3))
                          (("2" (lemma "quad_min_le_D_int_def")
                            (("2" (inst?)
                              (("2" (assert)
                                (("2" (lemma "quad_to_y")
                                  (("2" (insteep - :but ("x" "y"))
                                    (("2"
                                      (inst
                                       -
                                       "0"
                                       "quad_min_int(b, ee, f, 0, 1)")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "quadratic" - 2)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (replaces -1 :dir rl)
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (lemma
                                                     "quad_min_interval_def")
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (hide 2)
                          (("3" (hide 1)
                            (("3" (lemma "quad_min_le_D_int_def")
                              (("3" (inst?)
                                (("3" (assert)
                                  (("3" (lemma "quad_to_y")
                                    (("3" (insteep - :but ("x" "y"))
                                      (("3"
                                        (inst
                                         -
                                         "1"
                                         "quad_min_int(b, c + ee, quadratic(a, d, f)(1), 0, 1)")
                                        (("3"
                                          (assert)
                                          (("3"
                                            (replaces -1 :dir rl)
                                            (("3"
                                              (inst?)
                                              (("3"
                                                (assert)
                                                (("3"
                                                  (lemma
                                                   "quad_min_interval_def")
                                                  (("3"
                                                    (inst?)
                                                    (("3"
                                                      (assert)
                                                      (("3" (ground) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("4" (hide 1)
                          (("4" (lemma "quad_min_le_D_int_def")
                            (("4" (inst?)
                              (("4" (assert)
                                (("4" (lemma "quad_to_x")
                                  (("4" (insteep - :but ("x" "y"))
                                    (("4"
                                      (inst
                                       -
                                       "quad_min_int(a, d, f, 0, 1)"
                                       "0")
                                      (("4"
                                        (assert)
                                        (("4"
                                          (expand "quadratic" - 2)
                                          (("4"
                                            (assert)
                                            (("4"
                                              (replaces -1 :dir rl)
                                              (("4"
                                                (inst?)
                                                (("4"
                                                  (assert)
                                                  (("4"
                                                    (lemma
                                                     "quad_min_interval_def")
                                                    (("4"
                                                      (inst?)
                                                      (("4"
                                                        (assert)
                                                        (("4"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("5" (lemma "quad_min_le_D_int_def")
                          (("5" (inst?)
                            (("5" (assert)
                              (("5" (lemma "quad_to_x")
                                (("5" (insteep - :but ("x" "y"))
                                  (("5"
                                    (inst -
                                     "quad_min_int(a, c + d, quadratic(b, ee, f)(1), 0, 1)"
                                     "1")
                                    (("5" (assert)
                                      (("5"
                                        (replaces -1 :dir rl)
                                        (("5"
                                          (inst?)
                                          (("5"
                                            (assert)
                                            (("5"
                                              (lemma "quad_min_interval_def")
                                              (("5"
                                                (inst?)
                                                (("5"
                                                  (assert)
                                                  (("5" (ground) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (skeep)
                        (("2" (case "x = mx AND y=my")
                          (("1" (flatten) (("1" (assert) nil nil)) nil)
                           ("2"
                            (case "EXISTS (t): 0>=t AND t<=1 AND LET newx=mx+t*(x-mx),newy=my+t*(y-my) IN ((0<=newx AND newx<=1 AND 0<=newy AND newy<=1) AND (newx=0 OR newx=1 OR newy=0 OR newy=1))")
                            (("1" (skolem - "G")
                              (("1" (flatten)
                                (("1" (skoletin -)
                                  (("1" (skoletin -)
                                    (("1" (flatten)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case
                                           "quad(a, b, c, d, ee, f)(newx,newy)<=quad(a, b, c, d, ee, f)(x, y)")
                                          (("1"
                                            (split -)
                                            (("1"
                                              (lemma "quad_min_le_D_int_def")
                                              (("1"
                                                (hide (2 3 4))
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (rewrite "quad_to_y")
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "quadratic"
                                                             -2
                                                             2)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (lemma
                                                                 "quad_min_interval_def")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "newy")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma "quad_min_le_D_int_def")
                                              (("2"
                                                (hide (2 3 5))
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (rewrite "quad_to_y")
                                                      (("2"
                                                        (replace -1)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (lemma
                                                             "quad_min_interval_def")
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "newy")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (lemma "quad_min_le_D_int_def")
                                              (("3"
                                                (hide (2 4 5))
                                                (("3"
                                                  (inst?)
                                                  (("3"
                                                    (assert)
                                                    (("3"
                                                      (rewrite "quad_to_x")
                                                      (("3"
                                                        (replace -1)
                                                        (("3"
                                                          (assert)
                                                          (("3"
                                                            (expand
                                                             "quadratic"
                                                             -2
                                                             2)
                                                            (("3"
                                                              (assert)
                                                              (("3"
                                                                (lemma
                                                                 "quad_min_interval_def")
                                                                (("3"
                                                                  (inst?)
                                                                  (("3"
                                                                    (assert)
                                                                    (("3"
                                                                      (flatten)
                                                                      (("3"
                                                                        (inst
                                                                         -
                                                                         "newx")
                                                                        (("3"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("4"
                                              (lemma "quad_min_le_D_int_def")
                                              (("4"
                                                (hide (3 4 5))
                                                (("4"
                                                  (inst?)
                                                  (("4"
                                                    (assert)
                                                    (("4"
                                                      (rewrite "quad_to_x")
                                                      (("4"
                                                        (replace -1)
                                                        (("4"
                                                          (assert)
                                                          (("4"
                                                            (assert)
                                                            (("4"
                                                              (lemma
                                                               "quad_min_interval_def")
                                                              (("4"
                                                                (inst?)
                                                                (("4"
                                                                  (assert)
                                                                  (("4"
                                                                    (flatten)
                                                                    (("4"
                                                                      (inst
                                                                       -
                                                                       "newx")
                                                                      (("4"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (name "vv" "x-mx")
                                            (("2"
                                              (name "ww" "y-my")
                                              (("2"
                                                (lemma "quad_translate_t")
                                                (("2"
                                                  (insteep
                                                   -
                                                   :but
                                                   ("x" "y" "t" "v" "w"))
                                                  (("2"
                                                    (inst - _ "vv" "ww" _ _)
                                                    (("2"
                                                      (inst - _ "mx" "my")
                                                      (("2"
                                                        (name
                                                         "A"
                                                         "a * sq(vv) + b * sq(ww) + c * vv * ww")
                                                        (("2"
                                                          (name
                                                           "B"
                                                           "2 * a * vv * mx + 2 * b * ww * my + c * vv * my +
                                   c * ww * mx
                                   + d * vv
                                   + ee * ww")
                                                          (("2"
                                                            (name
                                                             "C"
                                                             "a * mx * mx + b * my * my + c * mx * my + d * mx +
                                   ee * my
                                   + f")
                                                            (("2"
                                                              (replace -1)
                                                              (("2"
                                                                (replace -2)
                                                                (("2"
                                                                  (replace -3)
                                                                  (("2"
                                                                    (inst-cp
                                                                     -
                                                                     "1")
                                                                    (("2"
                                                                      (inst-cp
                                                                       -
                                                                       "0")
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "G")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (case
                                                                             "G = 1")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (lemma
                                                                                 "quad_min_mono_inc")
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "A"
                                                                                   "B"
                                                                                   "C"
                                                                                   "1"
                                                                                   "G")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (case
                                                                                       "NOT A > 0")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "A"
                                                                                         1)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "quad_min_x_y_up")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -
                                                                                             "a"
                                                                                             "b"
                                                                                             "c"
                                                                                             "vv"
                                                                                             "ww")
                                                                                            (("1"
                                                                                              (case
                                                                                               "NOT (ww/=0 OR vv/=0)")
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (replace
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (reveal
                                                                                                   "rd")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "quad_min_x_y_linear_min")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -
                                                                                             "a"
                                                                                             "b"
                                                                                             "c"
                                                                                             "d"
                                                                                             "ee"
                                                                                             "vv"
                                                                                             "ww"
                                                                                             "mx"
                                                                                             "my")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (reveal
                                                                                                 "rd")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (postpone)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (postpone)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (postpone) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (quad_min_unit_box_TCC1 0
  (quad_min_unit_box_TCC1-1 nil 3635512954 ("" (subtype-tcc) nil nil)
   ((sq const-decl "nonneg_real" sq nil)
    (rev_disc const-decl "real" double_quadratic nil)
    (quad_min_le_D_int const-decl "bool" quad_minmax nil)
    (quadratic const-decl "real" quadratic nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil))
   nil
   (quad_min_unit_box subtype "2"
    "{i: integers.int | booleans.OR(double_quadratic.rev_disc(double_quadratic.a, double_quadratic.b, double_quadratic.c) /= 0, reals.>=(i, 0))}")))
 (quad_min_unit_box_def_lt 0
  (quad_min_unit_box_def_lt-2 nil 3635582880
   ("" (skeep)
    (("" (lemma "quad_min_unit_box_init_def")
      (("" (inst?)
        (("" (assert)
          (("" (replaces -1 :dir rl)
            (("" (expand "quad_min_unit_box_init")
              (("" (expand "quad_min_unit_box")
                (("" (split)
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (name "V" "rev_disc(a,b,c)")
                        (("1" (replace -1)
                          (("1" (assert)
                            (("1" (case "NOT sq(V)>0")
                              (("1" (assert)
                                (("1" (lemma "sq_eq_0")
                                  (("1" (inst?) (("1" (assert) nil nil)) nil))
                                  nil))
                                nil)
                               ("2" (case "NOT V^2 = sq(V)")
                                (("1" (hide-all-but 1) (("1" (grind) nil nil))
                                  nil)
                                 ("2" (replace -1)
                                  (("2" (assert)
                                    (("2" (flatten)
                                      (("2"
                                        (split +)
                                        (("1"
                                          (expand "quad_min_x")
                                          (("1"
                                            (cross-mult 1)
                                            (("1"
                                              (mult-by 1 "-V")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "quad_min_x")
                                          (("2"
                                            (cross-mult 1)
                                            (("2"
                                              (mult-by 1 "-rev_disc(a,b,c)")
                                              (("2"
                                                (expand "sq")
                                                (("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (expand "quad_min_y")
                                          (("3"
                                            (cross-mult 1)
                                            (("3"
                                              (mult-by 1 "-rev_disc(a,b,c)")
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (expand "quad_min_y")
                                          (("4"
                                            (cross-mult 1)
                                            (("4"
                                              (mult-by 1 "-rev_disc(a,b,c)")
                                              (("4"
                                                (expand "sq")
                                                (("4" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("5"
                                          (mult-by 1 "sq(V)")
                                          (("5"
                                            (hide-all-but (-2 -8 1))
                                            (("5"
                                              (expand "quad_min_x")
                                              (("5"
                                                (name
                                                 "TZ"
                                                 "(2 * (b * d) - c * ee)")
                                                (("5"
                                                  (expand "quad_min_y")
                                                  (("5"
                                                    (replace -1)
                                                    (("5"
                                                      (name
                                                       "RD"
                                                       "(2 * (a * ee) - c * d)")
                                                      (("5"
                                                        (replace -1)
                                                        (("5"
                                                          (lemma "V")
                                                          (("5"
                                                            (replaces
                                                             -1
                                                             :dir
                                                             rl)
                                                            (("5"
                                                              (hide -1)
                                                              (("5"
                                                                (hide -1)
                                                                (("5"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (assert)
                      (("2" (flatten)
                        (("2" (assert)
                          (("2" (name "V" "rev_disc(a,b,c)")
                            (("2" (replace -1)
                              (("2" (case "NOT sq(V)>0")
                                (("1" (lemma "sq_eq_0")
                                  (("1" (inst?) (("1" (assert) nil nil)) nil))
                                  nil)
                                 ("2" (case "NOT V^2 = sq(V)")
                                  (("1" (hide-all-but 1)
                                    (("1" (grind) nil nil)) nil)
                                   ("2" (replace -1)
                                    (("2" (assert)
                                      (("2"
                                        (split)
                                        (("1"
                                          (expand "quad_min_x")
                                          (("1"
                                            (cross-mult -4)
                                            (("1"
                                              (mult-by -4 "-V")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "quad_min_x")
                                          (("2"
                                            (cross-mult -5)
                                            (("2"
                                              (mult-by -5 "-V")
                                              (("2"
                                                (expand "sq")
                                                (("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (expand "quad_min_y")
                                          (("3"
                                            (cross-mult -6)
                                            (("3"
                                              (mult-by -6 "-V")
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (expand "quad_min_y")
                                          (("4"
                                            (cross-mult -7)
                                            (("4"
                                              (mult-by -7 "-V")
                                              (("4"
                                                (expand "sq")
                                                (("4" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("5"
                                          (expand "quad_min_x" -8)
                                          (("5"
                                            (expand "quad_min_y" -8)
                                            (("5"
                                              (name
                                               "TZ"
                                               "(2 * (b * d) - c * ee)")
                                              (("5"
                                                (replace -1)
                                                (("5"
                                                  (name
                                                   "RD"
                                                   "(2 * (a * ee) - c * d)")
                                                  (("5"
                                                    (replace -1)
                                                    (("5"
                                                      (mult-by -10 "sq(V)")
                                                      (("5"
                                                        (replace -5)
                                                        (("5"
                                                          (hide-all-but
                                                           (-4 -10 1))
                                                          (("5"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((quad_min_unit_box_init_def formula-decl nil double_quadratic nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (quad_min_unit_box_init const-decl "bool" double_quadratic nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sq const-decl "nonneg_real" sq nil) (sq_eq_0 formula-decl nil sq nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props nil)
    (quad const-decl "real" double_quadratic nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (V skolem-const-decl "real" double_quadratic nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (quad_min_y const-decl "real" double_quadratic nil)
    (div_mult_neg_le1 formula-decl nil real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (quad_min_x const-decl "real" double_quadratic nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (div_mult_neg_le2 formula-decl nil real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rev_disc const-decl "real" double_quadratic nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props nil)
    (quad_min_unit_box const-decl "bool" double_quadratic nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil)
  (quad_min_unit_box_def_lt-1 nil 3635582477
   ("" (skeep)
    (("" (label "rd" -1)
      (("" (hide "rd")
        (("" (name "mx" "quad_min_x(a, b, c, d, ee)")
          (("" (name "my" "quad_min_y(a, b, c, d, ee)")
            (("" (expand "quad_min_unit_box") (("" (postpone) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (quad_min_unit_box_def_eq 0
  (quad_min_unit_box_def_eq-2 "" 3790089316
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (skeep)
          (("1" (expand "quad_min_unit_box")
            (("1" (assert)
              (("1" (flatten)
                (("1" (lemma "quad_min_y_to_x_dec")
                  (("1" (insteep - :but ("x" "xu" "y"))
                    (("1" (inst - "x" "1" "y")
                      (("1" (assert)
                        (("1" (split -)
                          (("1" (lemma "quad_min_le_D_int_def")
                            (("1" (hide (1 2))
                              (("1" (inst?)
                                (("1" (assert)
                                  (("1" (assert)
                                    (("1" (lemma "quad_to_y")
                                      (("1"
                                        (insteep - :but ("x" "y"))
                                        (("1"
                                          (inst
                                           -
                                           "1"
                                           "quad_min_int(b, c + ee, quadratic(a, d, f)(1), 0, 1)")
                                          (("1"
                                            (replace -1 :dir rl)
                                            (("1"
                                              (lemma "quad_min_interval_def")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (replace -4 :dir rl)
                                                      (("1"
                                                        (inst - "y")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lemma
                                                             "quad_to_y")
                                                            (("1"
                                                              (insteep
                                                               -
                                                               :but
                                                               ("x" "y"))
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "1"
                                                                 "y")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma "quad_min_y_to_x_inc")
                            (("2" (insteep - :but ("x" "xl" "y"))
                              (("2" (inst - "x" "0" "y")
                                (("2" (assert)
                                  (("2" (split -)
                                    (("1" (lemma "quad_min_le_D_int_def")
                                      (("1"
                                        (hide (2 3 4))
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lemma "quad_to_y")
                                                (("1"
                                                  (insteep - :but ("x" "y"))
                                                  (("1"
                                                    (inst
                                                     -
                                                     "0"
                                                     "quad_min_int(b, ee, quadratic(a, d, f)(0), 0, 1)")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "quadratic"
                                                         -1
                                                         3)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "quadratic"
                                                             -1
                                                             3)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (lemma
                                                                   "quad_min_interval_def")
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (case
                                                                           "NOT quadratic(a, d, f)(0) = f")
                                                                          (("1"
                                                                            (expand
                                                                             "quadratic"
                                                                             1)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (replace
                                                                             -1)
                                                                            (("2"
                                                                              (replace
                                                                               -5
                                                                               :dir
                                                                               rl)
                                                                              (("2"
                                                                                (inst
                                                                                 -
                                                                                 "y")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "quad_to_y")
                                                                                    (("2"
                                                                                      (insteep
                                                                                       -
                                                                                       :but
                                                                                       ("x"
                                                                                        "y"))
                                                                                      (("2"
                                                                                        (inst
                                                                                         -
                                                                                         "0"
                                                                                         "y")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (name
                                       "xp"
                                       "quad_min_y_to_x(a, c, d, y)")
                                      (("2"
                                        (replace -1)
                                        (("2"
                                          (lemma "quad_min_y_to_x_def")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (case
                                                 "NOT quad(a, b, c, d, ee, f)(xp,y)<D")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (hide -2)
                                                  (("2"
                                                    (case
                                                     "NOT FORALL (t:real): quad(a, b, c, d, ee, f)(xp+t*(-c/(2*a)), y+t) = quad(a, b, c, d, ee, f)(xp, y)")
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (lemma
                                                         "quad_min_y_to_x_eq")
                                                        (("1"
                                                          (insteep -)
                                                          (("1"
                                                            (replace -3)
                                                            (("1"
                                                              (case
                                                               "NOT b - sq(c) / (4 * a)=0")
                                                              (("1"
                                                                (both-sides
                                                                 "+"
                                                                 "sq(c)/(4*a)"
                                                                 1)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (cross-mult
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "rev_disc")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (replace -1)
                                                                (("2"
                                                                  (case
                                                                   "NOT ee - c * d / (2 * a) = 0")
                                                                  (("1"
                                                                    (both-sides
                                                                     "+"
                                                                     "c*d/(2*a)"
                                                                     1)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (replace
                                                                     -1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (replace
                                                                         -3)
                                                                        (("2"
                                                                          (expand
                                                                           "quadratic"
                                                                           +
                                                                           1)
                                                                          (("2"
                                                                            (lemma
                                                                             "quad_min_y_to_x_eq")
                                                                            (("2"
                                                                              (insteep
                                                                               -
                                                                               :but
                                                                               "y")
                                                                              (("2"
                                                                                (inst
                                                                                 -
                                                                                 "y+t")
                                                                                (("2"
                                                                                  (replace
                                                                                   -3)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -2)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "quadratic"
                                                                                       -1)
                                                                                      (("2"
                                                                                        (case
                                                                                         "quad_min_y_to_x(a, c, d, t + y) = (-c/(2*a))* t + xp")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1
                                                                                             :dir
                                                                                             rl)
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide-all-but
                                                                                           1)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "xp")
                                                                                            (("2"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case
                                                       "EXISTS (t:real): LET newx=xp+t*(-c / (2 * a)),newy = y+t IN (abs(newx-1/2)<=1/2 AND abs(newy-1/2)<=1/2 AND (abs(newx-1/2)=1/2 OR abs(newy-1/2)=1/2))")
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (skoletin -)
                                                          (("1"
                                                            (skoletin -)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (inst - "t")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (replace
                                                                     -5
                                                                     :dir
                                                                     rl)
                                                                    (("1"
                                                                      (replace
                                                                       -4
                                                                       :dir
                                                                       rl)
                                                                      (("1"
                                                                        (case
                                                                         "NOT (0<=newx AND newx<=1 AND 0<=newy AND newy<=1)")
                                                                        (("1"
                                                                          (hide
                                                                           -3)
                                                                          (("1"
                                                                            (expand
                                                                             "abs")
                                                                            (("1"
                                                                              (lift-if)
                                                                              (("1"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           (-2
                                                                            -3))
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (split
                                                                               -)
                                                                              (("1"
                                                                                (expand
                                                                                 "abs"
                                                                                 -1)
                                                                                (("1"
                                                                                  (lift-if)
                                                                                  (("1"
                                                                                    (ground)
                                                                                    (("1"
                                                                                      (case
                                                                                       "NOT newx = 0")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         (-2
                                                                                          -3))
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "quad_min_le_D_int_def")
                                                                                          (("2"
                                                                                            (hide
                                                                                             (3
                                                                                              4))
                                                                                            (("2"
                                                                                              (hide
                                                                                               3)
                                                                                              (("2"
                                                                                                (inst?)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     "quad_to_y")
                                                                                                    (("2"
                                                                                                      (inst?)
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         -2)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "quadratic"
                                                                                                             -1
                                                                                                             2)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (lemma
                                                                                                                 "quad_min_interval_def")
                                                                                                                (("2"
                                                                                                                  (inst?)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (flatten)
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -
                                                                                                                         "newy")
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (case
                                                                                       "NOT newx = 1")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         (-2
                                                                                          1))
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "quad_min_le_D_int_def")
                                                                                          (("2"
                                                                                            (hide
                                                                                             (3
                                                                                              4
                                                                                              6))
                                                                                            (("2"
                                                                                              (inst?)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   "quad_to_y")
                                                                                                  (("2"
                                                                                                    (inst?)
                                                                                                    (("2"
                                                                                                      (replace
                                                                                                       -2)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (lemma
                                                                                                           "quad_min_interval_def")
                                                                                                          (("2"
                                                                                                            (inst?)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (flatten)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -
                                                                                                                   "newy")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "abs"
                                                                                 -1)
                                                                                (("2"
                                                                                  (lift-if)
                                                                                  (("2"
                                                                                    (ground)
                                                                                    (("1"
                                                                                      (case
                                                                                       "NOT newy = 0")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         (-2
                                                                                          -3))
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "quad_min_le_D_int_def")
                                                                                          (("2"
                                                                                            (hide
                                                                                             (3
                                                                                              5
                                                                                              6))
                                                                                            (("2"
                                                                                              (inst?)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   "quad_to_x")
                                                                                                  (("2"
                                                                                                    (inst?)
                                                                                                    (("2"
                                                                                                      (replace
                                                                                                       -2)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "quadratic"
                                                                                                           -1
                                                                                                           2)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (lemma
                                                                                                               "quad_min_interval_def")
                                                                                                              (("2"
                                                                                                                (inst?)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (flatten)
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -
                                                                                                                       "newx")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (case
                                                                                       "NOT newy = 1")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         (-2
                                                                                          1))
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "quad_min_le_D_int_def")
                                                                                          (("2"
                                                                                            (hide
                                                                                             (4
                                                                                              5
                                                                                              6))
                                                                                            (("2"
                                                                                              (inst?)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   "quad_to_x")
                                                                                                  (("2"
                                                                                                    (inst?)
                                                                                                    (("2"
                                                                                                      (replace
                                                                                                       -2)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (lemma
                                                                                                           "quad_min_interval_def")
                                                                                                          (("2"
                                                                                                            (inst?)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (flatten)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -
                                                                                                                   "newx")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (-6 -7 1 2 3))
                                                        (("2"
                                                          (case
                                                           "NOT (0<=xp AND xp<=1)")
                                                          (("1"
                                                            (ground)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (hide (2 3))
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (case "c=0")
                                                                (("1"
                                                                  (replace -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (inst
                                                                       +
                                                                       "1-y")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "abs")
                                                                          (("1"
                                                                            (lift-if)
                                                                            (("1"
                                                                              (ground)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (case
                                                                   "NOT EXISTS (p:nzreal): p = (-c/(2*a))")
                                                                  (("1"
                                                                    (inst
                                                                     +
                                                                     "-c/(2*a)")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (replaces
                                                                       -1
                                                                       :dir
                                                                       rl)
                                                                      (("2"
                                                                        (hide
                                                                         1)
                                                                        (("2"
                                                                          (case
                                                                           "EXISTS (tx:nnreal): abs(xp+tx*p-1/2)=1/2 AND FORALL (t:nnreal): t<tx IMPLIES abs(xp+t*p-1/2)<1/2")
                                                                          (("1"
                                                                            (case
                                                                             "EXISTS (ty:nnreal): abs(y+ty-1/2)=1/2 AND FORALL (t:nnreal): t<ty IMPLIES abs(y+t-1/2)<1/2")
                                                                            (("1"
                                                                              (skeep)
                                                                              (("1"
                                                                                (skeep)
                                                                                (("1"
                                                                                  (name
                                                                                   "tt"
                                                                                   "min(tx,ty)")
                                                                                  (("1"
                                                                                    (inst
                                                                                     +
                                                                                     "tt")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (split
                                                                                         +)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -5
                                                                                           "tt")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (inst
                                                                                           -
                                                                                           "tt")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (flatten)
                                                                                          (("3"
                                                                                            (expand
                                                                                             "min"
                                                                                             -1)
                                                                                            (("3"
                                                                                              (lift-if)
                                                                                              (("3"
                                                                                                (ground)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (case
                                                                               "NOT y = 0")
                                                                              (("1"
                                                                                (hide
                                                                                 (-1
                                                                                  3))
                                                                                (("1"
                                                                                  (inst
                                                                                   +
                                                                                   "1-y")
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (replace
                                                                                 -1)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (hide
                                                                                     1)
                                                                                    (("2"
                                                                                      (inst
                                                                                       +
                                                                                       "0")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (case
                                                                             "xp = 0 OR xp = 1")
                                                                            (("1"
                                                                              (split
                                                                               -)
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (hide
                                                                                   1)
                                                                                  (("1"
                                                                                    (inst
                                                                                     +
                                                                                     "0")
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 1)
                                                                                (("2"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("2"
                                                                                    (inst
                                                                                     +
                                                                                     "0")
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (hide
                                                                                 4)
                                                                                (("2"
                                                                                  (case
                                                                                   "p > 0")
                                                                                  (("1"
                                                                                    (inst
                                                                                     +
                                                                                     "(1-xp)/p")
                                                                                    (("1"
                                                                                      (split)
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (skeep)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "nnreal_times_nnreal_is_nnreal")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -
                                                                                             "t"
                                                                                             "p")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "abs")
                                                                                              (("1"
                                                                                                (lift-if)
                                                                                                (("1"
                                                                                                  (ground)
                                                                                                  (("1"
                                                                                                    (cross-mult
                                                                                                     -2)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (cross-mult
                                                                                       1)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (inst
                                                                                     +
                                                                                     "-xp/p")
                                                                                    (("1"
                                                                                      (split)
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (skeep)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "nnreal_times_nnreal_is_nnreal")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -
                                                                                             "-p"
                                                                                             "t")
                                                                                            (("1"
                                                                                              (grind)
                                                                                              (("1"
                                                                                                (cross-mult
                                                                                                 -2)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (cross-mult
                                                                                       1)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (assert)
          (("2" (expand "quad_min_unit_box")
            (("2" (assert)
              (("2" (lemma "quad_min_le_D_int_def")
                (("2" (ground)
                  (("1" (inst?)
                    (("1" (assert)
                      (("1" (lemma "quad_to_x")
                        (("1" (inst?)
                          (("1" (inst - _ "1")
                            (("1" (inst?)
                              (("1" (assert)
                                (("1" (replaces -1 :dir rl)
                                  (("1" (inst?)
                                    (("1" (assert)
                                      (("1"
                                        (lemma "quad_min_interval_def")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (flatten)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (inst?)
                    (("2" (assert)
                      (("2" (lemma "quad_to_x")
                        (("2" (inst?)
                          (("2" (inst - _ "0")
                            (("2" (assert)
                              (("2" (expand "quadratic" - 2)
                                (("2" (assert)
                                  (("2" (inst?)
                                    (("2" (replaces -1 :dir rl)
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (lemma "quad_min_interval_def")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (flatten)
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (inst?)
                    (("3" (assert)
                      (("3" (lemma "quad_to_y")
                        (("3" (inst?)
                          (("3" (inst - "1" _)
                            (("3" (assert)
                              (("3" (inst?)
                                (("3" (replaces -1 :dir rl)
                                  (("3" (inst?)
                                    (("3" (assert)
                                      (("3"
                                        (lemma "quad_min_interval_def")
                                        (("3"
                                          (inst?)
                                          (("3"
                                            (assert)
                                            (("3"
                                              (flatten)
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (inst?)
                    (("4" (assert)
                      (("4" (lemma "quad_to_y")
                        (("4" (inst?)
                          (("4" (inst - "0" _)
                            (("4" (assert)
                              (("4" (expand "quadratic" - 2)
                                (("4" (assert)
                                  (("4" (inst?)
                                    (("4" (replaces -1 :dir rl)
                                      (("4"
                                        (inst?)
                                        (("4"
                                          (assert)
                                          (("4"
                                            (lemma "quad_min_interval_def")
                                            (("4"
                                              (inst?)
                                              (("4"
                                                (assert)
                                                (("4"
                                                  (flatten)
                                                  (("4" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (quad_min_unit_box_def_eq-1 nil 3635681223
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (skeep)
          (("1" (expand "quad_min_unit_box")
            (("1" (assert)
              (("1" (flatten)
                (("1" (lemma "quad_min_y_to_x_dec")
                  (("1" (insteep - :but ("x" "xu" "y"))
                    (("1" (inst - "x" "1" "y")
                      (("1" (assert)
                        (("1" (split -)
                          (("1" (lemma "quad_min_le_D_int_def")
                            (("1" (hide (1 2))
                              (("1" (inst?)
                                (("1" (assert)
                                  (("1" (assert)
                                    (("1" (lemma "quad_to_y")
                                      (("1"
                                        (insteep - :but ("x" "y"))
                                        (("1"
                                          (inst
                                           -
                                           "1"
                                           "quad_min_int(b, c + ee, quadratic(a, d, f)(1), 0, 1)")
                                          (("1"
                                            (replace -1 :dir rl)
                                            (("1"
                                              (lemma "quad_min_interval_def")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (replace -4 :dir rl)
                                                      (("1"
                                                        (inst - "y")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lemma
                                                             "quad_to_y")
                                                            (("1"
                                                              (insteep
                                                               -
                                                               :but
                                                               ("x" "y"))
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "1"
                                                                 "y")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma "quad_min_y_to_x_inc")
                            (("2" (insteep - :but ("x" "xl" "y"))
                              (("2" (inst - "x" "0" "y")
                                (("2" (assert)
                                  (("2" (split -)
                                    (("1" (lemma "quad_min_le_D_int_def")
                                      (("1"
                                        (hide (2 3 4))
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lemma "quad_to_y")
                                                (("1"
                                                  (insteep - :but ("x" "y"))
                                                  (("1"
                                                    (inst
                                                     -
                                                     "0"
                                                     "quad_min_int(b, ee, quadratic(a, d, f)(0), 0, 1)")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "quadratic"
                                                         -1
                                                         3)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "quadratic"
                                                             -1
                                                             3)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (lemma
                                                                   "quad_min_interval_def")
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (case
                                                                           "NOT quadratic(a, d, f)(0) = f")
                                                                          (("1"
                                                                            (expand
                                                                             "quadratic"
                                                                             1)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (replace
                                                                             -1)
                                                                            (("2"
                                                                              (replace
                                                                               -5
                                                                               :dir
                                                                               rl)
                                                                              (("2"
                                                                                (inst
                                                                                 -
                                                                                 "y")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "quad_to_y")
                                                                                    (("2"
                                                                                      (insteep
                                                                                       -
                                                                                       :but
                                                                                       ("x"
                                                                                        "y"))
                                                                                      (("2"
                                                                                        (inst
                                                                                         -
                                                                                         "0"
                                                                                         "y")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (name
                                       "xp"
                                       "quad_min_y_to_x(a, c, d, y)")
                                      (("2"
                                        (replace -1)
                                        (("2"
                                          (lemma "quad_min_y_to_x_def")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (case
                                                 "NOT quad(a, b, c, d, ee, f)(xp,y)<D")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (hide -2)
                                                  (("2"
                                                    (case
                                                     "NOT FORALL (t:real): quad(a, b, c, d, ee, f)(xp+t*(-c/(2*a)), y+t) = quad(a, b, c, d, ee, f)(xp, y)")
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (lemma
                                                         "quad_min_y_to_x_eq")
                                                        (("1"
                                                          (insteep -)
                                                          (("1"
                                                            (replace -3)
                                                            (("1"
                                                              (case
                                                               "NOT b - sq(c) / (4 * a)=0")
                                                              (("1"
                                                                (both-sides
                                                                 "+"
                                                                 "sq(c)/(4*a)"
                                                                 1)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (cross-mult
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "rev_disc")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (replace -1)
                                                                (("2"
                                                                  (case
                                                                   "NOT ee - c * d / (2 * a) = 0")
                                                                  (("1"
                                                                    (both-sides
                                                                     "+"
                                                                     "c*d/(2*a)"
                                                                     1)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (replace
                                                                     -1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (replace
                                                                         -3)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "quadratic"
                                                                             +
                                                                             1)
                                                                            (("2"
                                                                              (lemma
                                                                               "quad_min_y_to_x_eq")
                                                                              (("2"
                                                                                (insteep
                                                                                 -
                                                                                 :but
                                                                                 "y")
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "y+t")
                                                                                  (("2"
                                                                                    (replace
                                                                                     -3)
                                                                                    (("2"
                                                                                      (replace
                                                                                       -2)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "quadratic"
                                                                                         -1)
                                                                                        (("2"
                                                                                          (case
                                                                                           "quad_min_y_to_x(a, c, d, t + y) = (-c/(2*a))* t + xp")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1
                                                                                               :dir
                                                                                               rl)
                                                                                              (("1"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide-all-but
                                                                                             1)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "xp")
                                                                                              (("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case
                                                       "EXISTS (t:real): LET newx=xp+t*(-c / (2 * a)),newy = y+t IN (abs(newx-1/2)<=1/2 AND abs(newy-1/2)<=1/2 AND (abs(newx-1/2)=1/2 OR abs(newy-1/2)=1/2))")
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (skoletin -)
                                                          (("1"
                                                            (skoletin -)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (inst - "t")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (replace
                                                                     -5
                                                                     :dir
                                                                     rl)
                                                                    (("1"
                                                                      (replace
                                                                       -4
                                                                       :dir
                                                                       rl)
                                                                      (("1"
                                                                        (case
                                                                         "NOT (0<=newx AND newx<=1 AND 0<=newy AND newy<=1)")
                                                                        (("1"
                                                                          (hide
                                                                           -3)
                                                                          (("1"
                                                                            (expand
                                                                             "abs")
                                                                            (("1"
                                                                              (lift-if)
                                                                              (("1"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           (-2
                                                                            -3))
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (split
                                                                               -)
                                                                              (("1"
                                                                                (expand
                                                                                 "abs"
                                                                                 -1)
                                                                                (("1"
                                                                                  (lift-if)
                                                                                  (("1"
                                                                                    (ground)
                                                                                    (("1"
                                                                                      (case
                                                                                       "NOT newx = 0")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         (-2
                                                                                          -3))
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "quad_min_le_D_int_def")
                                                                                          (("2"
                                                                                            (hide
                                                                                             (3
                                                                                              4))
                                                                                            (("2"
                                                                                              (hide
                                                                                               3)
                                                                                              (("2"
                                                                                                (inst?)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     "quad_to_y")
                                                                                                    (("2"
                                                                                                      (inst?)
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         -2)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "quadratic"
                                                                                                             -1
                                                                                                             2)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (lemma
                                                                                                                 "quad_min_interval_def")
                                                                                                                (("2"
                                                                                                                  (inst?)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (flatten)
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -
                                                                                                                         "newy")
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (case
                                                                                       "NOT newx = 1")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         (-2
                                                                                          1))
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "quad_min_le_D_int_def")
                                                                                          (("2"
                                                                                            (hide
                                                                                             (3
                                                                                              4
                                                                                              6))
                                                                                            (("2"
                                                                                              (inst?)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   "quad_to_y")
                                                                                                  (("2"
                                                                                                    (inst?)
                                                                                                    (("2"
                                                                                                      (replace
                                                                                                       -2)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             "quad_min_interval_def")
                                                                                                            (("2"
                                                                                                              (inst?)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (flatten)
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "newy")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "abs"
                                                                                 -1)
                                                                                (("2"
                                                                                  (lift-if)
                                                                                  (("2"
                                                                                    (ground)
                                                                                    (("1"
                                                                                      (case
                                                                                       "NOT newy = 0")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         (-2
                                                                                          -3))
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "quad_min_le_D_int_def")
                                                                                          (("2"
                                                                                            (hide
                                                                                             (3
                                                                                              5
                                                                                              6))
                                                                                            (("2"
                                                                                              (inst?)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   "quad_to_x")
                                                                                                  (("2"
                                                                                                    (inst?)
                                                                                                    (("2"
                                                                                                      (replace
                                                                                                       -2)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "quadratic"
                                                                                                           -1
                                                                                                           2)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (lemma
                                                                                                               "quad_min_interval_def")
                                                                                                              (("2"
                                                                                                                (inst?)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (flatten)
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -
                                                                                                                       "newx")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (case
                                                                                       "NOT newy = 1")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         (-2
                                                                                          1))
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "quad_min_le_D_int_def")
                                                                                          (("2"
                                                                                            (hide
                                                                                             (4
                                                                                              5
                                                                                              6))
                                                                                            (("2"
                                                                                              (inst?)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   "quad_to_x")
                                                                                                  (("2"
                                                                                                    (inst?)
                                                                                                    (("2"
                                                                                                      (replace
                                                                                                       -2)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             "quad_min_interval_def")
                                                                                                            (("2"
                                                                                                              (inst?)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (flatten)
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "newx")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (-6 -7 1 2 3))
                                                        (("2"
                                                          (case
                                                           "NOT (0<=xp AND xp<=1)")
                                                          (("1"
                                                            (ground)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (hide (2 3))
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (case "c=0")
                                                                (("1"
                                                                  (replace -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (inst
                                                                       +
                                                                       "1-y")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "abs")
                                                                          (("1"
                                                                            (lift-if)
                                                                            (("1"
                                                                              (ground)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (case
                                                                   "NOT EXISTS (p:nzreal): p = (-c/(2*a))")
                                                                  (("1"
                                                                    (inst
                                                                     +
                                                                     "-c/(2*a)")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (replaces
                                                                       -1
                                                                       :dir
                                                                       rl)
                                                                      (("2"
                                                                        (hide
                                                                         1)
                                                                        (("2"
                                                                          (case
                                                                           "EXISTS (tx:nnreal): abs(xp+tx*p-1/2)=1/2 AND FORALL (t:nnreal): t<tx IMPLIES abs(xp+t*p-1/2)<1/2")
                                                                          (("1"
                                                                            (case
                                                                             "EXISTS (ty:nnreal): abs(y+ty-1/2)=1/2 AND FORALL (t:nnreal): t<ty IMPLIES abs(y+t-1/2)<1/2")
                                                                            (("1"
                                                                              (skeep)
                                                                              (("1"
                                                                                (skeep)
                                                                                (("1"
                                                                                  (name
                                                                                   "tt"
                                                                                   "min(tx,ty)")
                                                                                  (("1"
                                                                                    (inst
                                                                                     +
                                                                                     "tt")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (split
                                                                                         +)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -5
                                                                                           "tt")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (inst
                                                                                           -
                                                                                           "tt")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (flatten)
                                                                                          (("3"
                                                                                            (expand
                                                                                             "min"
                                                                                             -1)
                                                                                            (("3"
                                                                                              (lift-if)
                                                                                              (("3"
                                                                                                (ground)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (case
                                                                               "NOT y = 0")
                                                                              (("1"
                                                                                (hide
                                                                                 (-1
                                                                                  3))
                                                                                (("1"
                                                                                  (inst
                                                                                   +
                                                                                   "1-y")
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (replace
                                                                                 -1)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (hide
                                                                                     1)
                                                                                    (("2"
                                                                                      (inst
                                                                                       +
                                                                                       "0")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (case
                                                                             "xp = 0 OR xp = 1")
                                                                            (("1"
                                                                              (split
                                                                               -)
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (hide
                                                                                   1)
                                                                                  (("1"
                                                                                    (inst
                                                                                     +
                                                                                     "0")
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 1)
                                                                                (("2"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("2"
                                                                                    (inst
                                                                                     +
                                                                                     "0")
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (hide
                                                                                 4)
                                                                                (("2"
                                                                                  (case
                                                                                   "p > 0")
                                                                                  (("1"
                                                                                    (inst
                                                                                     +
                                                                                     "(1-xp)/p")
                                                                                    (("1"
                                                                                      (split)
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (skeep)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "nnreal_times_nnreal_is_nnreal")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -
                                                                                             "t"
                                                                                             "p")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "abs")
                                                                                              (("1"
                                                                                                (lift-if)
                                                                                                (("1"
                                                                                                  (ground)
                                                                                                  (("1"
                                                                                                    (cross-mult
                                                                                                     -2)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (cross-mult
                                                                                       1)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (inst
                                                                                     +
                                                                                     "-xp/p")
                                                                                    (("1"
                                                                                      (split)
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (skeep)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "nnreal_times_nnreal_is_nnreal")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -
                                                                                             "-p"
                                                                                             "t")
                                                                                            (("1"
                                                                                              (grind)
                                                                                              (("1"
                                                                                                (cross-mult
                                                                                                 -2)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (cross-mult
                                                                                       1)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (assert)
          (("2" (expand "quad_min_unit_box")
            (("2" (assert)
              (("2" (lemma "quad_min_le_D_int_def")
                (("2" (ground)
                  (("1" (inst?)
                    (("1" (assert)
                      (("1" (lemma "quad_to_x")
                        (("1" (inst?)
                          (("1" (inst - _ "1")
                            (("1" (inst?)
                              (("1" (assert)
                                (("1" (replaces -1 :dir rl)
                                  (("1" (inst?)
                                    (("1" (assert)
                                      (("1"
                                        (lemma "quad_min_interval_def")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (flatten)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (inst?)
                    (("2" (assert)
                      (("2" (lemma "quad_to_x")
                        (("2" (inst?)
                          (("2" (inst - _ "0")
                            (("2" (assert)
                              (("2" (expand "quadratic" - 2)
                                (("2" (assert)
                                  (("2" (inst?)
                                    (("2" (replaces -1 :dir rl)
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (lemma "quad_min_interval_def")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (flatten)
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (inst?)
                    (("3" (assert)
                      (("3" (lemma "quad_to_y")
                        (("3" (inst?)
                          (("3" (inst - "1" _)
                            (("3" (assert)
                              (("3" (inst?)
                                (("3" (replaces -1 :dir rl)
                                  (("3" (inst?)
                                    (("3" (assert)
                                      (("3"
                                        (lemma "quad_min_interval_def")
                                        (("3"
                                          (inst?)
                                          (("3"
                                            (assert)
                                            (("3"
                                              (flatten)
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (inst?)
                    (("4" (assert)
                      (("4" (lemma "quad_to_y")
                        (("4" (inst?)
                          (("4" (inst - "0" _)
                            (("4" (assert)
                              (("4" (expand "quadratic" - 2)
                                (("4" (assert)
                                  (("4" (inst?)
                                    (("4" (replaces -1 :dir rl)
                                      (("4"
                                        (inst?)
                                        (("4"
                                          (assert)
                                          (("4"
                                            (lemma "quad_min_interval_def")
                                            (("4"
                                              (inst?)
                                              (("4"
                                                (assert)
                                                (("4"
                                                  (flatten)
                                                  (("4" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (quad_min_y_to_x_dec formula-decl nil double_quadratic nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (quad_to_y formula-decl nil double_quadratic nil)
    (quad_min_int const-decl "real" quad_minmax nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (quad_min_interval_def formula-decl nil quad_minmax nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (quadratic const-decl "real" quadratic nil)
    (quad_min_le_D_int_def formula-decl nil quad_minmax nil)
    (quad_min_y_to_x const-decl "real" double_quadratic nil)
    (quad_min_y_to_x_def formula-decl nil double_quadratic nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (quad_to_x formula-decl nil double_quadratic nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (a skolem-const-decl "posreal" double_quadratic nil)
    (c skolem-const-decl "real" double_quadratic nil)
    (nnreal type-eq-decl nil real_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nzrat_abs_is_pos application-judgement "{r: posrat | r >= q}" real_defs
     nil)
    (nonneg_real_min application-judgement
     "{z: nonneg_real | z <= x AND z <= y}" real_defs nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (nnreal_times_nnreal_is_nnreal judgement-tcc nil real_types nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (p skolem-const-decl "nzreal" double_quadratic nil)
    (div_mult_neg_ge1 formula-decl nil real_props nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (div_mult_neg_lt2 formula-decl nil real_props nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq nil)
    (rev_disc const-decl "real" double_quadratic nil)
    (div_cancel4 formula-decl nil real_props nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (xp skolem-const-decl "real" double_quadratic nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (quad_min_y_to_x_eq formula-decl nil double_quadratic nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (quad const-decl "real" double_quadratic nil)
    (< const-decl "bool" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (sq_0 formula-decl nil sq nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (quad_min_y_to_x_inc formula-decl nil double_quadratic nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (quad_min_unit_box const-decl "bool" double_quadratic nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak)))


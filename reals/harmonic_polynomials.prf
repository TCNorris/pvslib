(harmonic_polynomials
 (harmonic_poly_real_TCC1 0
  (harmonic_poly_real_TCC1-1 nil 3261618989
   ("" (skeep)
    (("" (rewrite "odd_iff_not_even")
      (("" (rewrite "even_div2") nil nil)) nil))
    nil)
   ((odd_iff_not_even formula-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (even_div2 formula-decl nil naturalnumbers nil))
   shostak
   (harmonic_poly_real subtype
    "(number_fields./(harmonic_polynomials.i, 2))"
    "{i: integers.int | booleans.TRUE}")))
 (harmonic_poly_real_TCC2 0
  (harmonic_poly_real_TCC2-1 nil 3261619116
   ("" (skosimp*)
    (("" (lemma "even_div2")
      (("" (inst?)
        (("" (assert)
          (("" (lemma "even_iff_not_odd")
            (("" (inst?) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((even_div2 formula-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak
   (harmonic_poly_real subtype "harmonic_polynomials.i"
    "{i: naturalnumbers.nat | reals.<=(i, harmonic_polynomials.pn)}")))
 (harmonic_poly_real_TCC3 0
  (harmonic_poly_real_TCC3-1 nil 3261619130
   ("" (skosimp*)
    (("" (lemma "even_div2")
      (("" (inst?)
        (("" (assert)
          (("" (lemma "odd_iff_not_even")
            (("" (inst?) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((even_div2 formula-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak
   (harmonic_poly_real subtype "harmonic_polynomials.pn"
    "{i: integers.int | booleans.OR(harmonic_polynomials.x /= 0, reals.>=(i, 0))}")))
 (harmonic_poly_real_TCC4 0
  (harmonic_poly_real_TCC4-1 nil 3261619140 ("" (grind) nil nil)
   ((odd? const-decl "bool" integers nil)
    (/= const-decl "boolean" notequal nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   shostak
   (harmonic_poly_real subtype "harmonic_polynomials.pn"
    "{i: integers.int | booleans.OR(harmonic_polynomials.y /= 0, reals.>=(i, 0))}")))
 (harmonic_poly_real_TCC5 0
  (harmonic_poly_real_TCC5-1 nil 3261619149 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (odd? const-decl "bool" integers nil)
    (/= const-decl "boolean" notequal nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   shostak
   (harmonic_poly_real subtype
    "((number_fields.-)(harmonic_polynomials.pn, harmonic_polynomials.i))"
    "{i: integers.int | booleans.OR(harmonic_polynomials.x /= 0, reals.>=(i, 0))}")))
 (harmonic_poly_real_TCC6 0
  (harmonic_poly_real_TCC6-1 nil 3261619159 ("" (grind) nil nil)
   ((odd? const-decl "bool" integers nil)
    (/= const-decl "boolean" notequal nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   shostak
   (harmonic_poly_real subtype "harmonic_polynomials.i"
    "{i: integers.int | booleans.OR(harmonic_polynomials.y /= 0, reals.>=(i, 0))}")))
 (harmonic_poly_imag_TCC1 0
  (harmonic_poly_imag_TCC1-1 nil 3261619175
   ("" (skosimp*)
    (("" (lemma "odd_div2" ("x" "i!1"))
      (("" (rewrite "even_or_odd") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (odd_div2 formula-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_or_odd formula-decl nil naturalnumbers nil))
   shostak
   (harmonic_poly_imag subtype
    "(number_fields./(((number_fields.-)(harmonic_polynomials.i, 1)), 2))"
    "{i: integers.int | booleans.TRUE}")))
 (harmonic_poly_imag_TCC2 0
  (harmonic_poly_imag_TCC2-1 nil 3261619184 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even? const-decl "bool" integers nil))
   shostak
   (harmonic_poly_imag subtype "harmonic_polynomials.i"
    "{i: naturalnumbers.nat | reals.<=(i, harmonic_polynomials.pn)}")))
 (harmonic_poly_imag_TCC3 0
  (harmonic_poly_imag_TCC3-1 nil 3261619194 ("" (grind) nil nil)
   ((even? const-decl "bool" integers nil)
    (/= const-decl "boolean" notequal nil))
   shostak
   (harmonic_poly_imag subtype "harmonic_polynomials.pn"
    "{i: integers.int | booleans.OR(harmonic_polynomials.y /= 0, reals.>=(i, 0))}")))
 (harmonic_poly_imag_TCC4 0
  (harmonic_poly_imag_TCC4-1 nil 3261619204 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even? const-decl "bool" integers nil)
    (/= const-decl "boolean" notequal nil))
   shostak
   (harmonic_poly_imag subtype
    "((number_fields.-)(harmonic_polynomials.pn, harmonic_polynomials.i))"
    "{i: integers.int | booleans.OR(harmonic_polynomials.x /= 0, reals.>=(i, 0))}")))
 (harmonic_poly_imag_TCC5 0
  (harmonic_poly_imag_TCC5-1 nil 3261620046 ("" (grind) nil nil)
   ((even? const-decl "bool" integers nil)
    (/= const-decl "boolean" notequal nil))
   shostak
   (harmonic_poly_imag subtype "harmonic_polynomials.i"
    "{i: integers.int | booleans.OR(harmonic_polynomials.y /= 0, reals.>=(i, 0))}")))
 (harmonic_polynomial_real_n1 0
  (harmonic_polynomial_real_n1-1 nil 3261619224
   ("" (skolem 1 ("x" "y"))
    (("" (expand "harmonic_poly_real")
      (("" (expand "sigma")
        (("" (expand "sigma")
          (("" (rewrite "expt_x0")
            (("" (rewrite "expt_x1")
              (("" (rewrite "C_0")
                (("" (case "odd?(0)")
                  (("1" (expand "odd?") (("1" (propax) nil nil)) nil)
                   ("2" (assert)
                    (("2" (expand "sigma") (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((harmonic_poly_real const-decl "real" harmonic_polynomials nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (odd? const-decl "bool" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sigma_0_neg formula-decl nil sigma_nat nil)
    (C_0 formula-decl nil binomial nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (rat_exp application-judgement "rat" exponentiation nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (int_exp application-judgement "int" exponentiation nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (expt_x0 formula-decl nil exponentiation nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (sigma def-decl "real" sigma nil))
   shostak))
 (harmonic_polynomial_imag_n1 0
  (harmonic_polynomial_imag_n1-1 nil 3261619351
   ("" (skolem 1 ("x" "y"))
    (("" (expand "harmonic_poly_imag")
      (("" (expand "sigma")
        (("" (expand "sigma")
          (("" (rewrite "expt_x1")
            (("" (rewrite "expt_x0")
              (("" (rewrite "C_n")
                (("" (case "even?(1)")
                  (("1" (expand "even?") (("1" (propax) nil nil)) nil)
                   ("2" (assert)
                    (("2" (expand "sigma") (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (harmonic_poly_imag const-decl "real" harmonic_polynomials nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (expt_x0 formula-decl nil exponentiation nil)
    (even? const-decl "bool" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sigma_0_neg formula-decl nil sigma_nat nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (C_n formula-decl nil binomial nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (rat_exp application-judgement "rat" exponentiation nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (int_exp application-judgement "int" exponentiation nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (sigma def-decl "real" sigma nil))
   shostak))
 (harmonic_polynomial_real_rec 0
  (harmonic_polynomial_real_rec-1 nil 3261620367
   ("" (skolem 1 ("n" "x" "y"))
    (("" (expand "harmonic_poly_real")
      (("" (expand "harmonic_poly_imag")
        ((""
          (name "F1" "LAMBDA (i: nat):
              IF i > 1 + n OR odd?(i) THEN 0
              ELSE C(1 + n, i) * (-1) ^ (i / 2) *
                    (IF i = 0 THEN x ^ (1 + n)
                     ELSIF i = 1 + n THEN y ^ (1 + n)
                     ELSE (x ^ (1 - i + n)) * y ^ i
                     ENDIF)
              ENDIF")
          (("1" (replace -1)
            (("1"
              (lemma "sigma_scal[nat]"
               ("low" "0" "high" "n" "a" "x" "F" " LAMBDA (i: nat):
                IF i > n OR odd?(i) THEN 0
                ELSE C(n, i) * (-1) ^ (i / 2) *
                      (IF i = 0 THEN x ^ n
                       ELSIF i = n THEN y ^ n
                       ELSE x ^ (n - i) * y ^ i
                       ENDIF)
                ENDIF"))
              (("1" (replace -1 1 rl)
                (("1" (hide -1)
                  (("1"
                    (name "F2" "LAMBDA (i_1: nat):
               x *
                (LAMBDA (i: nat):
                   IF i > n OR odd?(i) THEN 0
                   ELSE C(n, i) * (-1) ^ (i / 2) *
                         (IF i = 0 THEN x ^ n
                          ELSIF i = n THEN y ^ n
                          ELSE x ^ (n - i) * y ^ i
                          ENDIF)
                   ENDIF)
                    (i_1)")
                    (("1" (replace -1)
                      (("1"
                        (name "F3" "LAMBDA (i: nat):
                 IF i > n OR even?(i) THEN 0
                 ELSE C(n, i) * (-1) ^ ((i - 1) / 2) *
                       (IF i = n THEN y ^ n ELSE x ^ (n - i) * y ^ i ENDIF)
                 ENDIF")
                        (("1" (replace -1)
                          (("1"
                            (lemma "sigma_scal[nat]"
                             ("low" "0" "high" "n" "F" "F3" "a" "y"))
                            (("1" (replace -1 1 rl)
                              (("1"
                                (case
                                 "sigma(0, n, F2) = sigma(0, n+1, F2)")
                                (("1"
                                  (replace -1 1)
                                  (("1"
                                    (case
                                     "FORALL (n:nat): sigma(0, n, LAMBDA (i: nat): y * F3(i)) = sigma(0,n+1, LAMBDA (i:nat): IF i = 0 THEN 0 ELSE y*F3(i-1) ENDIF)")
                                    (("1"
                                      (inst - "n")
                                      (("1"
                                        (replace -1 1)
                                        (("1"
                                          (lemma
                                           "sigma_minus[nat]"
                                           ("low"
                                            "0"
                                            "high"
                                            "n+1"
                                            "F"
                                            "F2"
                                            "G"
                                            "LAMBDA (i: nat): IF i = 0 THEN 0 ELSE y * F3(i - 1) ENDIF"))
                                          (("1"
                                            (replace -1 1)
                                            (("1"
                                              (hide -1 -2 -3 -4)
                                              (("1"
                                                (lemma
                                                 "sigma_eq[nat]"
                                                 ("low"
                                                  "0"
                                                  "high"
                                                  "n+1"
                                                  "F"
                                                  "F1"
                                                  "G"
                                                  "LAMBDA (i_1: nat):
               F2(i_1) -
                (LAMBDA (i: nat): IF i = 0 THEN 0 ELSE y * F3(i - 1) ENDIF)
                    (i_1)"))
                                                (("1"
                                                  (split -1)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (skosimp*)
                                                      (("2"
                                                        (typepred
                                                         "n!1")
                                                        (("2"
                                                          (expand "F1")
                                                          (("2"
                                                            (hide
                                                             -5
                                                             -4
                                                             -3)
                                                            (("2"
                                                              (expand
                                                               "F2")
                                                              (("2"
                                                                (expand
                                                                 "F3")
                                                                (("2"
                                                                  (case
                                                                   "n!1=0")
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (rewrite
                                                                       "C_0")
                                                                      (("1"
                                                                        (rewrite
                                                                         "C_0")
                                                                        (("1"
                                                                          (rewrite
                                                                           "expt_x0")
                                                                          (("1"
                                                                            (case
                                                                             "odd?(0)")
                                                                            (("1"
                                                                              (expand
                                                                               "odd?")
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (expand
                                                                                 "^")
                                                                                (("2"
                                                                                  (expand
                                                                                   "expt"
                                                                                   2
                                                                                   1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (case
                                                                       "n!1= 1+n")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (rewrite
                                                                             "C_n")
                                                                            (("1"
                                                                              (rewrite
                                                                               "C_n")
                                                                              (("1"
                                                                                (case
                                                                                 "even?(n)")
                                                                                (("1"
                                                                                  (case
                                                                                   "odd?(n+1)")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide-all-but
                                                                                     (-1
                                                                                      1))
                                                                                    (("2"
                                                                                      (expand
                                                                                       "even?")
                                                                                      (("2"
                                                                                        (skosimp*)
                                                                                        (("2"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "odd?")
                                                                                            (("2"
                                                                                              (inst
                                                                                               +
                                                                                               "j!1")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (case
                                                                                     "NOT (odd?(1+n))")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "even_or_odd")
                                                                                        (("1"
                                                                                          (hide
                                                                                           1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "odd?")
                                                                                            (("1"
                                                                                              (skosimp*)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "div_cancel1"
                                                                                                   ("x"
                                                                                                    "j!1"
                                                                                                    "n0z"
                                                                                                    "2"))
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "div_cancel1"
                                                                                                       ("x"
                                                                                                        "j!1+1"
                                                                                                        "n0z"
                                                                                                        "2"))
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -3
                                                                                                           2
                                                                                                           rl)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -3
                                                                                                             *
                                                                                                             rl)
                                                                                                            (("1"
                                                                                                              (typepred
                                                                                                               "n")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "^"
                                                                                                                 2)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "expt"
                                                                                                                     2
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "expt"
                                                                                                                       2
                                                                                                                       2)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide-all-but
                                                                                       (-1
                                                                                        1))
                                                                                      (("2"
                                                                                        (expand
                                                                                         "odd?")
                                                                                        (("2"
                                                                                          (skosimp*)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "even?")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 +
                                                                                                 "j!1")
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (case
                                                                           "odd?(n!1)")
                                                                          (("1"
                                                                            (case
                                                                             "even?(n!1-1)")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               (1
                                                                                -1))
                                                                              (("2"
                                                                                (expand
                                                                                 "odd?")
                                                                                (("2"
                                                                                  (skosimp*)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "even?")
                                                                                      (("2"
                                                                                        (inst
                                                                                         +
                                                                                         "j!1")
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (case
                                                                             "NOT (even?(n!1-1))")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (rewrite
                                                                                 "even_or_odd")
                                                                                (("1"
                                                                                  (hide
                                                                                   1)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "odd?")
                                                                                    (("1"
                                                                                      (skosimp*)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "div_cancel1"
                                                                                         ("x"
                                                                                          "1+j!1"
                                                                                          "n0z"
                                                                                          "2"))
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "div_cancel1"
                                                                                           ("x"
                                                                                            "j!1"
                                                                                            "n0z"
                                                                                            "2"))
                                                                                          (("1"
                                                                                            (case
                                                                                             "(n!1 - 2) / 2 = j!1")
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "(n!1) / 2 = j!1+1")
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (case
                                                                                                     "n!1=n")
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "C_n")
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           "C_n_1")
                                                                                                          (("1"
                                                                                                            (rewrite
                                                                                                             "C_n_1")
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "expt_plus"
                                                                                                               ("n0x"
                                                                                                                "-1"
                                                                                                                "i"
                                                                                                                "1"
                                                                                                                "j"
                                                                                                                "j!1"))
                                                                                                              (("1"
                                                                                                                (rewrite
                                                                                                                 "expt_x1"
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (name-replace
                                                                                                                     "K1"
                                                                                                                     "(-1)^j!1")
                                                                                                                    (("1"
                                                                                                                      (rewrite
                                                                                                                       "expt_x1"
                                                                                                                       3)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "^"
                                                                                                                         3)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "expt"
                                                                                                                           3
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (grind)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (lemma
                                                                                                         "C_n_plus_1"
                                                                                                         ("n"
                                                                                                          "n"
                                                                                                          "k"
                                                                                                          "n!1"))
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -1
                                                                                                           4)
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             "expt_plus"
                                                                                                             ("n0x"
                                                                                                              "-1"
                                                                                                              "i"
                                                                                                              "1"
                                                                                                              "j"
                                                                                                              "j!1"))
                                                                                                            (("2"
                                                                                                              (rewrite
                                                                                                               "expt_x1"
                                                                                                               -1)
                                                                                                              (("2"
                                                                                                                (replace
                                                                                                                 -1
                                                                                                                 4)
                                                                                                                (("2"
                                                                                                                  (name-replace
                                                                                                                   "K10"
                                                                                                                   "(-1)^j!1")
                                                                                                                  (("2"
                                                                                                                    (name-replace
                                                                                                                     "K11"
                                                                                                                     "C(n,n!1-1)")
                                                                                                                    (("2"
                                                                                                                      (name-replace
                                                                                                                       "K12"
                                                                                                                       "C(n,n!1)")
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "^"
                                                                                                                         4)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "expt"
                                                                                                                           4
                                                                                                                           7)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "expt"
                                                                                                                             4
                                                                                                                             6)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "expt"
                                                                                                                               4
                                                                                                                               4)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "expt"
                                                                                                                                 4
                                                                                                                                 3)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "expt"
                                                                                                                                   4
                                                                                                                                   2)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "expt"
                                                                                                                                     4
                                                                                                                                     1)
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide-all-but
                                                                                                   (-4
                                                                                                    1
                                                                                                    -3))
                                                                                                  (("2"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide-all-but
                                                                                               (1
                                                                                                -1
                                                                                                -3))
                                                                                              (("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               (-1
                                                                                1))
                                                                              (("2"
                                                                                (expand
                                                                                 "even?")
                                                                                (("2"
                                                                                  (skosimp*)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "odd?")
                                                                                    (("2"
                                                                                      (inst
                                                                                       +
                                                                                       "j!1")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but 1)
                                      (("2"
                                        (induct "n")
                                        (("1"
                                          (expand "sigma")
                                          (("1"
                                            (expand "sigma")
                                            (("1"
                                              (expand "sigma")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skolem 1 ("i"))
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (expand "sigma" 1)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (hide 2)
                                          (("3" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (hide-all-but 1)
                                      (("3" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but (1 -3))
                                  (("2"
                                    (expand "sigma" 1 2)
                                    (("2"
                                      (expand "F2" 1)
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1) (("2" (grind) nil nil))
                          nil)
                         ("3" (hide-all-but 1)
                          (("3" (skosimp*)
                            (("3" (rewrite "even_or_odd")
                              (("3"
                                (expand "odd?")
                                (("3"
                                  (skosimp*)
                                  (("3"
                                    (lemma
                                     "div_cancel1"
                                     ("x" "j!1" "n0z" "2"))
                                    (("3"
                                      (replace -2 2)
                                      (("3"
                                        (replace -1 2)
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("4" (hide-all-but 1) (("4" (grind) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)
                     ("3" (hide-all-but 1)
                      (("3" (skosimp*)
                        (("3" (case "even?(i!1)")
                          (("1" (expand "even?")
                            (("1" (skosimp*)
                              (("1"
                                (lemma
                                 "div_cancel1"
                                 ("x" "j!1" "n0z" "2"))
                                (("1"
                                  (replace -2)
                                  (("1"
                                    (replace -1)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (rewrite "even_or_odd")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("4" (hide-all-but 1) (("4" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)
               ("3" (hide-all-but 1)
                (("3" (skosimp*)
                  (("3" (case "even?(i!1)")
                    (("1" (expand "even?")
                      (("1" (skosimp*)
                        (("1" (replace -1)
                          (("1"
                            (lemma "div_cancel1" ("x" "j!1" "n0z" "2"))
                            (("1" (replace -1) (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (rewrite "even_or_odd") nil nil))
                    nil))
                  nil))
                nil)
               ("4" (hide-all-but 1) (("4" (grind) nil nil)) nil))
              nil))
            nil)
           ("2" (hide 2) (("2" (grind) nil nil)) nil)
           ("3" (hide 2)
            (("3" (skosimp*)
              (("3" (case "even?(i!1)")
                (("1" (expand "even?")
                  (("1" (skosimp*)
                    (("1" (lemma "div_cancel1" ("x" "j!1" "n0z" "2"))
                      (("1" (replace -2)
                        (("1" (replace -1) (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (rewrite "even_or_odd") nil nil))
                nil))
              nil))
            nil)
           ("4" (hide 2) (("4" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (harmonic_poly_real const-decl "real" harmonic_polynomials nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (C const-decl "posnat" binomial nil)
    (<= const-decl "bool" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (odd? const-decl "bool" integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (sigma_scal formula-decl nil sigma nil)
    (T_high type-eq-decl nil sigma nil)
    (T_low type-eq-decl nil sigma nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (sigma_minus formula-decl nil sigma nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (F1 skolem-const-decl "[nat -> real]" harmonic_polynomials nil)
    (F2 skolem-const-decl "[nat -> real]" harmonic_polynomials nil)
    (C_0 formula-decl nil binomial nil)
    (expt_x0 formula-decl nil exponentiation nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (expt def-decl "real" exponentiation nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (div_cancel1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (int_expt application-judgement "int" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (even_or_odd formula-decl nil naturalnumbers nil)
    (C_n formula-decl nil binomial nil)
    (nzrat_times_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (C_n_plus_1 formula-decl nil binomial nil)
    (C_n_1 formula-decl nil binomial nil)
    (expt_plus formula-decl nil exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (int_exp application-judgement "int" exponentiation nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (F3 skolem-const-decl "[nat -> real]" harmonic_polynomials nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (subrange type-eq-decl nil integers nil)
    (sigma_eq formula-decl nil sigma nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (sigma def-decl "real" sigma nil)
    (even? const-decl "bool" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (rat_exp application-judgement "rat" exponentiation nil)
    (harmonic_poly_imag const-decl "real" harmonic_polynomials nil))
   shostak))
 (harmonic_polynomial_imag_rec 0
  (harmonic_polynomial_imag_rec-1 nil 3261625972
   ("" (skolem 1 ("n" "x" "y"))
    (("" (expand "harmonic_poly_imag")
      (("" (expand "harmonic_poly_real")
        ((""
          (name-replace "F1" "LAMBDA (i: nat):
                 IF i > n OR odd?(i) THEN 0
                 ELSE C(n, i) * (-1) ^ (i / 2) *
                       (IF i = 0 THEN x ^ n
                        ELSIF i = n THEN y ^ n
                        ELSE x ^ (n - i) * y ^ i
                        ENDIF)
                 ENDIF")
          (("1"
            (name-replace "F2" "LAMBDA (i: nat):
                IF i > n OR even?(i) THEN 0
                ELSE C(n, i) * (-1) ^ ((i - 1) / 2) *
                      (IF i = n THEN y ^ n ELSE x ^ (n - i) * y ^ i ENDIF)
                ENDIF")
            (("1"
              (name-replace "F3" "LAMBDA (i: nat):
              IF i > 1 + n OR even?(i) THEN 0
              ELSE C(1 + n, i) * (-1) ^ ((i - 1) / 2) *
                    (IF i = 1 + n THEN y ^ (1 + n)
                     ELSE (x ^ (1 - i + n)) * y ^ i
                     ENDIF)
              ENDIF")
              (("1"
                (lemma "sigma_scal"
                 ("low" "0" "high" "n" "a" "x" "F" "F2"))
                (("1" (replace -1 1 rl)
                  (("1"
                    (lemma "sigma_scal"
                     ("low" "0" "high" "n" "a" "y" "F" "F1"))
                    (("1" (replace -1 1 rl)
                      (("1" (hide -1 -2)
                        (("1"
                          (case "FORALL (n:nat): sigma(0, n, LAMBDA (i: nat): y * F1(i)) = sigma(0,n+1, LAMBDA (i:nat): IF i=0 THEN 0 ELSE y*F1(i-1) ENDIF)")
                          (("1" (inst - "n")
                            (("1" (replace -1)
                              (("1"
                                (case
                                 "sigma(0, n, LAMBDA (i: nat): x * F2(i)) = sigma(0, n+1
, LAMBDA (i: nat): x * F2(i))")
                                (("1"
                                  (replace -1 1)
                                  (("1"
                                    (lemma
                                     "sigma_sum"
                                     ("low"
                                      "0"
                                      "high"
                                      "1+n"
                                      "F"
                                      "LAMBDA (i: nat): x * F2(i)"
                                      "G"
                                      "LAMBDA (i: nat): IF i = 0 THEN 0 ELSE y * F1(i - 1) ENDIF"))
                                    (("1"
                                      (replace -1 1)
                                      (("1"
                                        (hide -1 -2 -3)
                                        (("1"
                                          (lemma
                                           "sigma_eq[nat]"
                                           ("low"
                                            "0"
                                            "high"
                                            "1+n"
                                            "F"
                                            "F3"
                                            "G"
                                            "LAMBDA (i_1: nat):
               (LAMBDA (i: nat): x * F2(i))(i_1) +
                (LAMBDA (i: nat): IF i = 0 THEN 0 ELSE y * F1(i - 1) ENDIF)
                    (i_1)"))
                                          (("1"
                                            (split -1)
                                            (("1" (propax) nil nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (skolem 1 ("i"))
                                                (("2"
                                                  (typepred "i")
                                                  (("2"
                                                    (expand "F3")
                                                    (("2"
                                                      (expand "F2")
                                                      (("2"
                                                        (expand "F1")
                                                        (("2"
                                                          (case
                                                           "even?(i)")
                                                          (("1"
                                                            (case
                                                             "odd?(i-1)")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (-1 1))
                                                              (("2"
                                                                (expand
                                                                 "even?")
                                                                (("2"
                                                                  (skosimp*)
                                                                  (("2"
                                                                    (replace
                                                                     -1)
                                                                    (("2"
                                                                      (expand
                                                                       "odd?")
                                                                      (("2"
                                                                        (inst
                                                                         +
                                                                         "j!1-1")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (case
                                                             "NOT (odd?(i-1))")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide
                                                                 1)
                                                                (("1"
                                                                  (case
                                                                   "i= 1+n")
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (rewrite
                                                                         "C_n")
                                                                        (("1"
                                                                          (rewrite
                                                                           "C_n")
                                                                          (("1"
                                                                            (expand
                                                                             "^"
                                                                             2
                                                                             2)
                                                                            (("1"
                                                                              (expand
                                                                               "^"
                                                                               2
                                                                               3)
                                                                              (("1"
                                                                                (expand
                                                                                 "expt"
                                                                                 2
                                                                                 1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (case
                                                                       "i=0")
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (expand
                                                                           "even?")
                                                                          (("1"
                                                                            (inst
                                                                             +
                                                                             "0")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (case
                                                                         "i=1")
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (rewrite
                                                                               "expt_x0")
                                                                              (("1"
                                                                                (rewrite
                                                                                 "expt_x1")
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "C_0")
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "C_1")
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "C_1")
                                                                                      (("1"
                                                                                        (case
                                                                                         "n=1")
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "expt_x1")
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "expt_x1")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "^"
                                                                                             5)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "expt"
                                                                                               5
                                                                                               1)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (lemma
                                                                             "C_n_plus_1"
                                                                             ("n"
                                                                              "n"
                                                                              "k"
                                                                              "i"))
                                                                            (("2"
                                                                              (replace
                                                                               -1
                                                                               5)
                                                                              (("2"
                                                                                (expand
                                                                                 "^"
                                                                                 5
                                                                                 2)
                                                                                (("2"
                                                                                  (expand
                                                                                   "^"
                                                                                   5
                                                                                   2)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "^"
                                                                                     5
                                                                                     3)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "^"
                                                                                       5
                                                                                       4)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "^"
                                                                                         5
                                                                                         5)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "^"
                                                                                           5
                                                                                           6)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "expt"
                                                                                             5)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "^"
                                                                                               5
                                                                                               6)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "^"
                                                                                                 5
                                                                                                 4)
                                                                                                (("2"
                                                                                                  (case
                                                                                                   "i=n")
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "expt"
                                                                                                         5
                                                                                                         6)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "expt"
                                                                                                           5
                                                                                                           3)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "expt"
                                                                                                             5
                                                                                                             2)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (-1 1))
                                                              (("2"
                                                                (expand
                                                                 "odd?")
                                                                (("2"
                                                                  (skosimp*)
                                                                  (("2"
                                                                    (expand
                                                                     "even?")
                                                                    (("2"
                                                                      (inst
                                                                       +
                                                                       "1+j!1")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (grind)
                                              (("1"
                                                (expand "F2")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "F2")
                                                (("2"
                                                  (expand "F1")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (skosimp*)
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide -1 2)
                                  (("2"
                                    (expand "sigma" 1 2)
                                    (("2"
                                      (expand "F2")
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (skosimp*)
                                  (("3"
                                    (expand "F2")
                                    (("3" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (induct "n")
                              (("1" (grind) nil nil)
                               ("2"
                                (skolem 1 ("j"))
                                (("2"
                                  (flatten)
                                  (("2"
                                    (expand "sigma" 1)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide 2)
                                (("3"
                                  (grind)
                                  (("3"
                                    (expand "F1")
                                    (("3" (propax) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("4"
                                (hide 2)
                                (("4" (grind) nil nil))
                                nil)
                               ("5"
                                (skosimp*)
                                (("5"
                                  (expand "F1")
                                  (("5" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide 2)
                            (("3" (grind)
                              (("3"
                                (expand "F1")
                                (("3" (propax) nil nil))
                                nil))
                              nil))
                            nil)
                           ("4" (hide 2) (("4" (grind) nil nil)) nil)
                           ("5" (skosimp*)
                            (("5" (expand "F1")
                              (("5" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2) (("2" (grind) nil nil)) nil)
               ("3" (hide 2)
                (("3" (skosimp*)
                  (("3" (rewrite "even_or_odd")
                    (("3" (expand "odd?")
                      (("3" (skosimp*)
                        (("3" (replace -1 2)
                          (("3"
                            (lemma "div_cancel1" ("x" "j!1" "n0z" "2"))
                            (("3" (replace -1) (("3" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (hide 2) (("4" (grind) nil nil)) nil))
              nil)
             ("2" (hide 2) (("2" (grind) nil nil)) nil)
             ("3" (hide 2)
              (("3" (skosimp*)
                (("3" (rewrite "even_or_odd")
                  (("3" (expand "odd?")
                    (("3" (skosimp*)
                      (("3" (replace -1)
                        (("3"
                          (lemma "div_cancel1" ("x" "j!1" "n0z" "2"))
                          (("3" (replace -1) (("3" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (hide 2) (("4" (grind) nil nil)) nil))
            nil)
           ("2" (hide 2) (("2" (grind) nil nil)) nil)
           ("3" (hide 2)
            (("3" (skosimp*)
              (("3" (case "even?(i!1)")
                (("1" (expand "even?")
                  (("1" (skosimp*)
                    (("1" (replace -1)
                      (("1" (lemma "div_cancel1" ("x" "j!1" "n0z" "2"))
                        (("1" (replace -1) (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (rewrite "even_or_odd") nil nil))
                nil))
              nil))
            nil)
           ("4" (hide 2) (("4" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (harmonic_poly_imag const-decl "real" harmonic_polynomials nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (odd? const-decl "bool" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (C const-decl "posnat" binomial nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (sigma def-decl "real" sigma nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sigma_eq formula-decl nil sigma nil)
    (subrange type-eq-decl nil integers nil)
    (F2 skolem-const-decl "[nat -> real]" harmonic_polynomials nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rat_exp application-judgement "rat" exponentiation nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (expt def-decl "real" exponentiation nil)
    (C_n formula-decl nil binomial nil)
    (C_n_plus_1 formula-decl nil binomial nil)
    (expt_x0 formula-decl nil exponentiation nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (C_0 formula-decl nil binomial nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (C_1 formula-decl nil binomial nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (F1 skolem-const-decl "[nat -> real]" harmonic_polynomials nil)
    (F3 skolem-const-decl "[nat -> real]" harmonic_polynomials nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sigma_sum formula-decl nil sigma nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (T_low type-eq-decl nil sigma nil)
    (T_high type-eq-decl nil sigma nil)
    (sigma_scal formula-decl nil sigma nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel1 formula-decl nil real_props nil)
    (even_or_odd formula-decl nil naturalnumbers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (even? const-decl "bool" integers nil)
    (harmonic_poly_real const-decl "real" harmonic_polynomials nil))
   shostak))
 (harmonic_polynomial_modulus_TCC1 0
  (harmonic_polynomial_modulus_TCC1-1 nil 3261625909
   ("" (grind) nil nil)
   ((sq const-decl "nonneg_real" sq nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak
   (harmonic_polynomial_modulus subtype "harmonic_polynomials.pn"
    "{i: integers.int | booleans.OR(((number_fields.+)(sq.sq(harmonic_polynomials.x), sq.sq(harmonic_polynomials.y))) /= 0, reals.>=(i, 0))}")))
 (harmonic_polynomial_modulus 0
  (harmonic_polynomial_modulus-1 nil 3261625059
   ("" (skolem 1 ("_" "x" "y"))
    (("" (induct "pn")
      (("1" (assert) nil nil) ("2" (assert) nil nil)
       ("3" (skolem 1 ("i"))
        (("3" (flatten)
          (("3" (case "i=0")
            (("1" (replace -1)
              (("1" (hide -1 -2 -3)
                (("1" (rewrite "harmonic_polynomial_real_n1")
                  (("1" (rewrite "harmonic_polynomial_imag_n1")
                    (("1" (rewrite "expt_x1") nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (hide -2 1)
                (("2" (rewrite "harmonic_polynomial_real_rec" 1)
                  (("2" (rewrite "harmonic_polynomial_imag_rec" 1)
                    (("2"
                      (name-replace "U" "harmonic_poly_real(i, x, y)")
                      (("2"
                        (name-replace "V"
                         "harmonic_poly_imag(i, x, y)")
                        (("2" (expand "sq")
                          (("2" (case "x=0")
                            (("1" (replace -1)
                              (("1"
                                (case "y=0")
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (expand "^" 1)
                                    (("1"
                                      (expand "expt")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma "sq_nz_pos" ("nz" "y"))
                                  (("1"
                                    (expand "sq")
                                    (("1"
                                      (lemma
                                       "expt_plus"
                                       ("n0x" "y*y" "i" "1" "j" "i"))
                                      (("1"
                                        (rewrite "expt_x1" -1)
                                        (("1"
                                          (replace -1 2)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "sq_pos" ("a" "y"))
                              (("2"
                                (lemma "sq_nz_pos" ("nz" "x"))
                                (("1"
                                  (expand "sq")
                                  (("1"
                                    (lemma
                                     "expt_plus"
                                     ("n0x" "x*x+y*y" "i" "1" "j" "i"))
                                    (("1"
                                      (rewrite "expt_x1" -1)
                                      (("1"
                                        (replace -1 2)
                                        (("1"
                                          (replace -4 2 rl)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (sq const-decl "nonneg_real" sq nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (harmonic_poly_real const-decl "real" harmonic_polynomials nil)
    (harmonic_poly_imag const-decl "real" harmonic_polynomials nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_exp application-judgement "nnreal" exponentiation nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (harmonic_polynomial_real_rec formula-decl nil harmonic_polynomials
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (sq_pos formula-decl nil sq nil)
    (sq_nz_pos judgement-tcc nil sq nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (expt_plus formula-decl nil exponentiation nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (expt def-decl "real" exponentiation nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (harmonic_polynomial_imag_rec formula-decl nil harmonic_polynomials
     nil)
    (harmonic_polynomial_real_n1 formula-decl nil harmonic_polynomials
     nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (harmonic_polynomial_imag_n1 formula-decl nil harmonic_polynomials
     nil))
   shostak)))


(root (mult_expt_pos_TCC1 0
       (mult_expt_pos_TCC1-1 nil 3595939542 ("" (subtype-tcc) nil nil)
        ((/= const-decl "boolean" notequal nil)) nil
        (mult_expt_pos subtype "root.n"
         "{i: integers.int | booleans.OR((number_fields.*(root.x, root.y)) /= 0, reals.>=(i, 0))}")))
      (mult_expt_pos_TCC2 0
       (mult_expt_pos_TCC2-1 nil 3595939542 ("" (subtype-tcc) nil nil)
        ((/= const-decl "boolean" notequal nil)) nil
        (mult_expt_pos subtype "root.n"
         "{i: integers.int | booleans.OR(root.x /= 0, reals.>=(i, 0))}")))
      (mult_expt_pos 0
       (mult_expt_pos-1 nil 3595939544
        ("" (skeep)
         (("" (case "x = 0 OR y = 0")
           (("1" (ground)
             (("1" (replaces -1) (("1" (grind) nil nil)) nil)
              ("2" (replaces -1) (("2" (grind) nil nil)) nil))
             nil)
            ("2" (flatten)
             (("2" (case "x * y = 0")
               (("1" (lemma "nzreal_times_nzreal_is_nzreal")
                 (("1" (inst?)
                   (("1" (assert) nil nil) ("2" (assert) nil nil)
                    ("3" (assert) nil nil))
                   nil))
                 nil)
                ("2" (lemma "mult_expt")
                 (("2" (inst?) (("1" (assert) nil nil) ("2" (assert) nil nil))
                   nil))
                 nil))
               nil))
             nil))
           nil))
         nil)
        ((real nonempty-type-from-decl nil reals nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (= const-decl "[T, T -> boolean]" equalities nil)
         (number nonempty-type-decl nil numbers nil)
         (OR const-decl "[bool, bool -> bool]" booleans nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (boolean nonempty-type-decl nil booleans nil)
         (TRUE const-decl "bool" booleans nil)
         (real_ge_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (int_minus_int_is_int application-judgement "int" integers nil)
         (nat_exp application-judgement "nat" exponentiation nil)
         (nat_expt application-judgement "nat" exponentiation nil)
         (even_times_int_is_even application-judgement "even_int" integers
          nil)
         (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
          integers nil)
         (^ const-decl "real" exponentiation nil)
         (expt def-decl "real" exponentiation nil)
         (real_times_real_is_real application-judgement "real" reals nil)
         (numfield nonempty-type-eq-decl nil number_fields nil)
         (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
         (/= const-decl "boolean" notequal nil)
         (x skolem-const-decl "real" root nil)
         (y skolem-const-decl "real" root nil)
         (nzreal nonempty-type-eq-decl nil reals nil)
         (nzreal_times_nzreal_is_nzreal judgement-tcc nil real_types nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (int nonempty-type-eq-decl nil integers nil)
         (>= const-decl "bool" reals nil)
         (nonneg_int nonempty-type-eq-decl nil integers nil)
         (> const-decl "bool" reals nil)
         (posnat nonempty-type-eq-decl nil integers nil)
         (mult_expt formula-decl nil exponentiation nil))
        shostak))
      (real_mult_cont 0
       (real_mult_cont-2 "" 3790088533
        ("" (skeep)
         (("" (skeep)
           (("" (name "ef" "min(epsil/8,min(1/8,epsil/(8*(abs(g(x))+8))))")
             (("" (name "eg" "min(epsil/8,min(1/8,epsil/(8*abs(f(x))+8)))")
               (("" (inst - "ef" "x")
                 (("" (inst - "eg" "x")
                   (("" (skolem - "df")
                     (("" (skolem - "dg")
                       (("" (inst + "min(df,dg)")
                         (("" (skeep)
                           (("" (assert)
                             (("" (inst - "y")
                               (("" (inst - "y")
                                 (("" (assert)
                                   (("" (lemma "triangle")
                                     ((""
                                       (inst
                                        -
                                        "g(x)*(f(x)-f(y))"
                                        "f(y)*(g(x)-g(y))")
                                       ((""
                                         (invoke
                                          (case "%1 < epsil/2")
                                          (! -1 2 1))
                                         (("1"
                                           (invoke
                                            (case "%1 < epsil/2")
                                            (! -2 2 2))
                                           (("1" (assert) nil nil)
                                            ("2"
                                             (hide (-1 -2 2))
                                             (("2"
                                               (rewrite "abs_mult")
                                               (("2"
                                                 (case
                                                  "abs(f(y)) < abs(f(x)) + 1")
                                                 (("1"
                                                   (mult-by
                                                    -1
                                                    "abs((g(x) - g(y)))")
                                                   (("1"
                                                     (case
                                                      "abs(g(x)-g(y)) <= (epsil/2)/(abs(f(x))+1)")
                                                     (("1"
                                                       (cross-mult -1)
                                                       (("1"
                                                         (assert)
                                                         nil
                                                         nil))
                                                       nil)
                                                      ("2"
                                                       (hide (-1 -3 2))
                                                       (("2"
                                                         (case
                                                          "epsil / (8 + 8 * abs(f(x)))<=(epsil / 2) / (abs(f(x)) + 1)")
                                                         (("1"
                                                           (assert)
                                                           nil
                                                           nil)
                                                          ("2"
                                                           (invoke
                                                            (case "%1 > 0")
                                                            (! 1 2))
                                                           (("1"
                                                             (case
                                                              "FORALL (egv:posreal): egv>egv/4")
                                                             (("1"
                                                               (invoke
                                                                (inst - "%1")
                                                                (! -2 1))
                                                               (("1"
                                                                 (assert)
                                                                 (("1"
                                                                   (invoke
                                                                    (case
                                                                     "%1 = %2")
                                                                    (! -1 2)
                                                                    (! 1 1))
                                                                   (("1"
                                                                     (assert)
                                                                     nil
                                                                     nil)
                                                                    ("2"
                                                                     (hide-all-but
                                                                      1)
                                                                     (("2"
                                                                       (field)
                                                                       nil
                                                                       nil))
                                                                     nil))
                                                                   nil))
                                                                 nil))
                                                               nil)
                                                              ("2"
                                                               (skeep)
                                                               (("2"
                                                                 (assert)
                                                                 nil
                                                                 nil))
                                                               nil))
                                                             nil)
                                                            ("2"
                                                             (cross-mult 1)
                                                             nil
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil)
                                                  ("2"
                                                   (hide (-1 -4 -5 2))
                                                   (("2" (grind) nil nil))
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil)
                                          ("2"
                                           (hide (-1 2))
                                           (("2"
                                             (rewrite "abs_mult")
                                             (("2"
                                               (case
                                                "abs(f(x)-f(y))<epsil/(2*(abs(g(x))+1))")
                                               (("1"
                                                 (cross-mult -1)
                                                 (("1" (assert) nil nil))
                                                 nil)
                                                ("2"
                                                 (hide (-1 2))
                                                 (("2"
                                                   (invoke
                                                    (case "ef < %1")
                                                    (! 1 2))
                                                   (("1" (assert) nil nil)
                                                    ("2"
                                                     (hide-all-but 1)
                                                     (("2"
                                                       (expand "ef")
                                                       (("2"
                                                         (case
                                                          "epsil / (64 + 8 * abs(g(x))) < epsil/(2+2*abs(g(x)))")
                                                         (("1"
                                                           (assert)
                                                           nil
                                                           nil)
                                                          ("2"
                                                           (hide 2)
                                                           (("2"
                                                             (cross-mult 1)
                                                             nil
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil))
           nil))
         nil)
        nil shostak)
       (real_mult_cont-1 nil 3595924364
        ("" (skeep)
         (("" (skeep)
           (("" (name "ef" "min(epsil/8,min(1/8,epsil/(8*(abs(g(x))+8))))")
             (("" (name "eg" "min(epsil/8,min(1/8,epsil/(8*abs(f(x))+8)))")
               (("" (inst - "ef" "x")
                 (("" (inst - "eg" "x")
                   (("" (skolem - "df")
                     (("" (skolem - "dg")
                       (("" (inst + "min(df,dg)")
                         (("" (skeep)
                           (("" (assert)
                             (("" (inst - "y")
                               (("" (inst - "y")
                                 (("" (assert)
                                   (("" (expand "*")
                                     ((""
                                       (lemma "triangle")
                                       ((""
                                         (inst
                                          -
                                          "g(x)*(f(x)-f(y))"
                                          "f(y)*(g(x)-g(y))")
                                         ((""
                                           (invoke
                                            (case "%1 < epsil/2")
                                            (! -1 2 1))
                                           (("1"
                                             (invoke
                                              (case "%1 < epsil/2")
                                              (! -2 2 2))
                                             (("1" (assert) nil nil)
                                              ("2"
                                               (hide (-1 -2 2))
                                               (("2"
                                                 (rewrite "abs_mult")
                                                 (("2"
                                                   (case
                                                    "abs(f(y)) < abs(f(x)) + 1")
                                                   (("1"
                                                     (mult-by
                                                      -1
                                                      "abs((g(x) - g(y)))")
                                                     (("1"
                                                       (case
                                                        "abs(g(x)-g(y)) <= (epsil/2)/(abs(f(x))+1)")
                                                       (("1"
                                                         (cross-mult -1)
                                                         (("1"
                                                           (assert)
                                                           nil
                                                           nil))
                                                         nil)
                                                        ("2"
                                                         (hide (-1 -3 2))
                                                         (("2"
                                                           (case
                                                            "epsil / (8 + 8 * abs(f(x)))<=(epsil / 2) / (abs(f(x)) + 1)")
                                                           (("1"
                                                             (assert)
                                                             nil
                                                             nil)
                                                            ("2"
                                                             (invoke
                                                              (case "%1 > 0")
                                                              (! 1 2))
                                                             (("1"
                                                               (case
                                                                "FORALL (egv:posreal): egv>egv/4")
                                                               (("1"
                                                                 (invoke
                                                                  (inst
                                                                   -
                                                                   "%1")
                                                                  (! -2 1))
                                                                 (("1"
                                                                   (assert)
                                                                   (("1"
                                                                     (invoke
                                                                      (case
                                                                       "%1 = %2")
                                                                      (! -1 2)
                                                                      (! 1 1))
                                                                     (("1"
                                                                       (assert)
                                                                       nil
                                                                       nil)
                                                                      ("2"
                                                                       (assert)
                                                                       (("2"
                                                                         (hide-all-but
                                                                          1)
                                                                         (("2"
                                                                           (field)
                                                                           nil
                                                                           nil))
                                                                         nil))
                                                                       nil))
                                                                     nil))
                                                                   nil))
                                                                 nil)
                                                                ("2"
                                                                 (skeep)
                                                                 (("2"
                                                                   (assert)
                                                                   nil
                                                                   nil))
                                                                 nil))
                                                               nil)
                                                              ("2"
                                                               (cross-mult 1)
                                                               nil
                                                               nil))
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil)
                                                    ("2"
                                                     (hide (-1 -4 -5 2))
                                                     (("2" (grind) nil nil))
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil))
                                             nil)
                                            ("2"
                                             (hide (-1 2))
                                             (("2"
                                               (rewrite "abs_mult")
                                               (("2"
                                                 (case
                                                  "abs(f(x)-f(y))<epsil/(2*(abs(g(x))+1))")
                                                 (("1"
                                                   (cross-mult -1)
                                                   (("1" (assert) nil nil))
                                                   nil)
                                                  ("2"
                                                   (hide (-1 2))
                                                   (("2"
                                                     (invoke
                                                      (case "ef < %1")
                                                      (! 1 2))
                                                     (("1" (assert) nil nil)
                                                      ("2"
                                                       (hide-all-but 1)
                                                       (("2"
                                                         (expand "ef")
                                                         (("2"
                                                           (case
                                                            "epsil / (64 + 8 * abs(g(x))) < epsil/(2+2*abs(g(x)))")
                                                           (("1"
                                                             (assert)
                                                             nil
                                                             nil)
                                                            ("2"
                                                             (hide 2)
                                                             (("2"
                                                               (cross-mult 1)
                                                               nil
                                                               nil))
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil))
           nil))
         nil)
        ((nnreal_plus_posreal_is_posreal application-judgement "posreal"
          real_types nil)
         (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
         (div_mult_pos_lt2 formula-decl nil real_props nil)
         (ef skolem-const-decl "{z: posreal |
   z <= epsil / 8 AND z <= min(1/8, epsil / (64 + 8 * abs(g(x))))}" root nil)
         (nonzero_real nonempty-type-eq-decl nil reals nil)
         (times_div2 formula-decl nil real_props nil)
         (div_mult_pos_lt1 formula-decl nil real_props nil)
         (real_le_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (real_plus_real_is_real application-judgement "real" reals nil)
         (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
          real_types nil)
         (abs_mult formula-decl nil real_props nil)
         (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
          real_types nil)
         (minus_real_is_real application-judgement "real" reals nil)
         (both_sides_times_pos_lt1 formula-decl nil real_props nil)
         (y skolem-const-decl "real" root nil)
         (x skolem-const-decl "real" root nil)
         (g skolem-const-decl "[real -> real]" root nil)
         (real_gt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (TRUE const-decl "bool" booleans nil)
         (id const-decl "(bijective?[T, T])" identity nil)
         (bijective? const-decl "bool" functions nil)
         (div_div2 formula-decl nil real_props nil)
         (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
         (div_mult_pos_le2 formula-decl nil real_props nil)
         (< const-decl "bool" reals nil)
         (triangle formula-decl nil real_props nil)
         (real_lt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
          real_types nil)
         (posreal_plus_nnreal_is_posreal application-judgement "posreal"
          real_types nil)
         (posreal_div_posreal_is_posreal application-judgement "posreal"
          real_types nil)
         (posrat_div_posrat_is_posrat application-judgement "posrat" rationals
          nil)
         (posreal_times_posreal_is_posreal application-judgement "posreal"
          real_types nil)
         (posreal_min application-judgement "{z: posreal | z <= x AND z <= y}"
          real_defs nil)
         (number nonempty-type-decl nil numbers nil)
         (boolean nonempty-type-decl nil booleans nil)
         (= const-decl "[T, T -> boolean]" equalities nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (real nonempty-type-from-decl nil reals nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (AND const-decl "[bool, bool -> bool]" booleans nil)
         (<= const-decl "bool" reals nil)
         (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
         (numfield nonempty-type-eq-decl nil number_fields nil)
         (/= const-decl "boolean" notequal nil)
         (nznum nonempty-type-eq-decl nil number_fields nil)
         (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
         (>= const-decl "bool" reals nil)
         (nonneg_real nonempty-type-eq-decl nil real_types nil)
         (> const-decl "bool" reals nil)
         (posreal nonempty-type-eq-decl nil real_types nil)
         (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
         (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
         (- const-decl "[numfield -> numfield]" number_fields nil)
         (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
              nil)
         (real_minus_real_is_real application-judgement "real" reals nil)
         (real_times_real_is_real application-judgement "real" reals nil))
        shostak))
      (expt_increasing_TCC1 0
       (expt_increasing_TCC1-1 nil 3595932463 ("" (subtype-tcc) nil nil)
        ((/= const-decl "boolean" notequal nil)) nil
        (expt_increasing subtype "root.m"
         "{i: integers.int | booleans.OR(root.nnr /= 0, reals.>=(i, 0))}")))
      (expt_increasing_TCC2 0
       (expt_increasing_TCC2-1 nil 3595932463 ("" (subtype-tcc) nil nil)
        ((/= const-decl "boolean" notequal nil)) nil
        (expt_increasing subtype "root.m"
         "{i: integers.int | booleans.OR(root.nnx /= 0, reals.>=(i, 0))}")))
      (expt_increasing 0
       (expt_increasing-1 nil 3595932474
        ("" (induct "m")
         (("1" (skeep) (("1" (grind) nil nil)) nil)
          ("2" (skeep)
           (("2" (skeep)
             (("2" (inst - "nnr" "nnx")
               (("2" (assert)
                 (("2" (mult-ineq -1 -2)
                   (("2" (expand "^")
                     (("2" (expand "expt" +) (("2" (assert) nil nil)) nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil))
           nil))
         nil)
        ((* const-decl "[numfield, numfield -> numfield]" number_fields nil)
         (numfield nonempty-type-eq-decl nil number_fields nil)
         (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
          real_types nil)
         (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
              nil)
         (posint_plus_nnint_is_posint application-judgement "posint" integers
          nil)
         (le_times_le_any1 formula-decl nil extra_real_props nil)
         (nnint_plus_posint_is_posint application-judgement "posint" integers
          nil)
         (real_le_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (nnreal_exp application-judgement "nnreal" exponentiation nil)
         (real_ge_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (nnreal_expt application-judgement "nnreal" exponentiation nil)
         (expt def-decl "real" exponentiation nil)
         (nat_induction formula-decl nil naturalnumbers nil)
         (^ const-decl "real" exponentiation nil)
         (/= const-decl "boolean" notequal nil)
         (OR const-decl "[bool, bool -> bool]" booleans nil)
         (<= const-decl "bool" reals nil)
         (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
         (nnreal type-eq-decl nil real_types nil)
         (pred type-eq-decl nil defined_types nil)
         (nat nonempty-type-eq-decl nil naturalnumbers nil)
         (>= const-decl "bool" reals nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (int nonempty-type-eq-decl nil integers nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (real nonempty-type-from-decl nil reals nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (boolean nonempty-type-decl nil booleans nil)
         (number nonempty-type-decl nil numbers nil))
        shostak))
      (expt_cont_TCC1 0
       (expt_cont_TCC1-1 nil 3595849935 ("" (subtype-tcc) nil nil)
        ((/= const-decl "boolean" notequal nil)) nil
        (expt_cont subtype "root.n"
         "{i: integers.int | booleans.OR(root.y /= 0, reals.>=(i, 0))}")))
      (expt_cont 0
       (expt_cont-2 "" 3790088534
        (""
         (case "FORALL (epsil: posreal, nn: nat, x: real):
               EXISTS (delta):
                 FORALL (y): abs(x - y) <= delta IMPLIES abs(x ^ (nn+1) - y ^ (nn+1)) < epsil")
         (("1" (skeep)
           (("1" (inst - "epsil" "n-1" "x") (("1" (assert) nil nil)) nil))
           nil)
          ("2" (hide 2)
           (("2" (induct "nn")
             (("1" (skeep)
               (("1" (inst + "epsil/2") (("1" (grind) nil nil)) nil)) nil)
              ("2" (assert)
               (("2" (skeep)
                 (("2" (lemma "real_mult_cont")
                   (("2"
                     (inst - "LAMBDA (xx:real): xx^(1+j)"
                      "LAMBDA (xx:real): xx")
                     (("2" (split -)
                       (("1" (skeep)
                         (("1" (inst - "epsil" "x")
                           (("1" (skeep)
                             (("1" (inst + "delta/2")
                               (("1" (skeep)
                                 (("1" (inst - "y")
                                   (("1" (assert)
                                     (("1"
                                       (expand "^")
                                       (("1"
                                         (expand "expt" +)
                                         (("1" (assert) nil nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil)
                        ("2" (hide 2)
                         (("2" (assert)
                           (("2" (skeep)
                             (("2" (inst - "epsil" "x")
                               (("2" (assert)
                                 (("2" (skeep)
                                   (("2" (inst + "delta/2")
                                     (("2"
                                       (skeep)
                                       (("2"
                                         (inst - "y")
                                         (("2" (assert) nil nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil)
                        ("3" (hide (-1 2))
                         (("3" (skeep)
                           (("3" (inst + "epsil/2") (("3" (grind) nil nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil))
           nil))
         nil)
        nil shostak)
       (expt_cont-1 nil 3595849964
        (""
         (case "FORALL (epsil: posreal, nn: nat, x: real):
               EXISTS (delta):
                 FORALL (y): abs(x - y) <= delta IMPLIES abs(x ^ (nn+1) - y ^ (nn+1)) < epsil")
         (("1" (skeep)
           (("1" (inst - "epsil" "n-1" "x") (("1" (assert) nil nil)) nil))
           nil)
          ("2" (hide 2)
           (("2" (induct "nn")
             (("1" (skeep)
               (("1" (inst + "epsil/2") (("1" (grind) nil nil)) nil)) nil)
              ("2" (assert)
               (("2" (skeep)
                 (("2" (lemma "real_mult_cont")
                   (("2"
                     (inst - "LAMBDA (xx:real): xx^(1+j)"
                      "LAMBDA (xx:real): xx")
                     (("2" (split -)
                       (("1" (skeep)
                         (("1" (inst - "epsil" "x")
                           (("1" (skeep)
                             (("1" (inst + "delta/2")
                               (("1" (skeep)
                                 (("1" (inst - "y")
                                   (("1" (assert)
                                     (("1"
                                       (expand "*")
                                       (("1"
                                         (expand "^")
                                         (("1"
                                           (expand "expt" +)
                                           (("1" (assert) nil nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil)
                        ("2" (hide 2)
                         (("2" (assert)
                           (("2" (skeep)
                             (("2" (inst - "epsil" "x")
                               (("2" (assert)
                                 (("2" (skeep)
                                   (("2" (inst + "delta/2")
                                     (("2"
                                       (skeep)
                                       (("2"
                                         (inst - "y")
                                         (("2" (assert) nil nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil)
                        ("3" (hide (-1 2))
                         (("3" (skeep)
                           (("3" (inst + "epsil/2") (("3" (grind) nil nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil))
           nil))
         nil)
        ((real_mult_cont formula-decl nil root nil)
         (posint_plus_nnint_is_posint application-judgement "posint" integers
          nil)
         (real_times_real_is_real application-judgement "real" reals nil)
         (expt def-decl "real" exponentiation nil)
         (real_lt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (minus_real_is_real application-judgement "real" reals nil)
         (real_le_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (NOT const-decl "[bool -> bool]" booleans nil)
         (nznum nonempty-type-eq-decl nil number_fields nil)
         (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
         (posreal_div_posreal_is_posreal application-judgement "posreal"
          real_types nil)
         (nat_induction formula-decl nil naturalnumbers nil)
         (pred type-eq-decl nil defined_types nil)
         (nonneg_int nonempty-type-eq-decl nil integers nil)
         (posnat nonempty-type-eq-decl nil integers nil)
         (int_minus_int_is_int application-judgement "int" integers nil)
         (real_ge_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (real_minus_real_is_real application-judgement "real" reals nil)
         (nnint_plus_posint_is_posint application-judgement "posint" integers
          nil)
         (number nonempty-type-decl nil numbers nil)
         (boolean nonempty-type-decl nil booleans nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (real nonempty-type-from-decl nil reals nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (>= const-decl "bool" reals nil)
         (nonneg_real nonempty-type-eq-decl nil real_types nil)
         (> const-decl "bool" reals nil)
         (posreal nonempty-type-eq-decl nil real_types nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (int nonempty-type-eq-decl nil integers nil)
         (nat nonempty-type-eq-decl nil naturalnumbers nil)
         (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
         (<= const-decl "bool" reals nil)
         (AND const-decl "[bool, bool -> bool]" booleans nil)
         (numfield nonempty-type-eq-decl nil number_fields nil)
         (- const-decl "[numfield -> numfield]" number_fields nil)
         (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
              nil)
         (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
         (< const-decl "bool" reals nil)
         (OR const-decl "[bool, bool -> bool]" booleans nil)
         (/= const-decl "boolean" notequal nil)
         (^ const-decl "real" exponentiation nil)
         (+ const-decl "[numfield, numfield -> numfield]" number_fields nil))
        shostak))
      (nn_root_exists_TCC1 0
       (nn_root_exists_TCC1-1 nil 3595926614 ("" (subtype-tcc) nil nil)
        ((/= const-decl "boolean" notequal nil)) nil
        (nn_root_exists subtype "root.n"
         "{i: integers.int | booleans.OR(root.nnx /= 0, reals.>=(i, 0))}")))
      (nn_root_exists 0
       (nn_root_exists-1 nil 3595926616
        ("" (skeep)
         (("" (name "A" "{r:real | r^n<=nnr}")
           (("" (case "nonempty?[real](A) AND bounded_above?(A)")
             (("1" (flatten)
               (("1" (name "gg" "lub(A)")
                 (("1" (inst + "gg")
                   (("1" (case "gg^n < nnr")
                     (("1" (lemma "expt_cont")
                       (("1" (inst - "nnr-gg^n" "n" "gg")
                         (("1" (skosimp*)
                           (("1" (typepred "gg")
                             (("1" (expand "least_upper_bound?")
                               (("1" (flatten)
                                 (("1" (hide -2)
                                   (("1" (expand "upper_bound?" -1)
                                     (("1"
                                       (inst - "gg+delta!1/2")
                                       (("1" (assert) nil nil)
                                        ("2"
                                         (expand "A" 1)
                                         (("2"
                                           (inst - "gg+delta!1/2")
                                           (("2"
                                             (assert)
                                             (("2"
                                               (split -)
                                               (("1"
                                                 (expand "abs")
                                                 (("1" (ground) nil nil))
                                                 nil)
                                                ("2"
                                                 (expand "abs" 1)
                                                 (("2" (assert) nil nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil)
                          ("2" (assert) nil nil))
                         nil))
                       nil)
                      ("2" (lemma "expt_cont")
                       (("2" (inst - "gg^n-nnr" "n" "gg")
                         (("1" (skeep)
                           (("1" (typepred "gg")
                             (("1" (expand "least_upper_bound?")
                               (("1" (flatten)
                                 (("1" (hide -1)
                                   (("1" (inst - "gg-delta/2")
                                     (("1"
                                       (assert)
                                       (("1"
                                         (expand "upper_bound?" 1)
                                         (("1"
                                           (skeep)
                                           (("1"
                                             (typepred "s")
                                             (("1"
                                               (expand "A" -1)
                                               (("1"
                                                 (inst - "s")
                                                 (("1"
                                                   (assert)
                                                   (("1"
                                                     (split -)
                                                     (("1"
                                                       (expand "abs")
                                                       (("1"
                                                         (ground)
                                                         nil
                                                         nil))
                                                       nil)
                                                      ("2"
                                                       (typepred "gg")
                                                       (("2"
                                                         (expand
                                                          "least_upper_bound?")
                                                         (("2"
                                                           (flatten)
                                                           (("2"
                                                             (expand
                                                              "upper_bound?"
                                                              -1)
                                                             (("2"
                                                               (inst - "s")
                                                               (("2"
                                                                 (expand
                                                                  "abs")
                                                                 (("2"
                                                                   (lift-if)
                                                                   (("2"
                                                                     (ground)
                                                                     nil
                                                                     nil))
                                                                   nil))
                                                                 nil))
                                                               nil))
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil)
                          ("2" (assert) nil nil))
                         nil))
                       nil))
                     nil)
                    ("2" (assert)
                     (("2" (typepred "gg")
                       (("2" (expand "least_upper_bound?")
                         (("2" (flatten)
                           (("2" (expand "upper_bound?" -1)
                             (("2" (inst - "0")
                               (("1" (assert) nil nil)
                                ("2" (expand "A" 1)
                                 (("2" (assert)
                                   (("2" (case "0^n=0")
                                     (("1" (assert) nil nil)
                                      ("2"
                                       (expand "^" 1)
                                       (("2"
                                         (expand "expt" 1)
                                         (("2" (assert) nil nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil)
                  ("2" (propax) nil nil))
                 nil))
               nil)
              ("2" (hide 2)
               (("2" (split)
                 (("1" (expand "nonempty?")
                   (("1" (expand "empty?")
                     (("1" (inst - "0")
                       (("1" (expand "member")
                         (("1" (expand "A" 1)
                           (("1" (case "0^n=0")
                             (("1" (replaces -1) (("1" (assert) nil nil)) nil)
                              ("2" (hide-all-but 1) (("2" (grind) nil nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil)
                  ("2" (expand "bounded_above?")
                   (("2" (case "nnr < 1")
                     (("1" (inst + "1")
                       (("1" (expand "upper_bound?")
                         (("1" (skeep)
                           (("1" (typepred "s")
                             (("1" (expand "A" -1)
                               (("1" (lemma "expt_increasing")
                                 (("1" (inst - "n" "1" "s")
                                   (("1" (assert)
                                     (("1"
                                       (lemma "expt_1i")
                                       (("1"
                                         (inst?)
                                         (("1" (assert) nil nil))
                                         nil))
                                       nil))
                                     nil)
                                    ("2" (assert) nil nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil)
                      ("2" (inst + "nnr")
                       (("2" (expand "upper_bound?")
                         (("2" (skeep)
                           (("2" (case "NOT s>=0")
                             (("1" (assert) nil nil)
                              ("2" (label "sge0" -1)
                               (("2" (hide "sge0")
                                 (("2" (expand "A" -1)
                                   (("2" (case "s<=1")
                                     (("1"
                                       (case "s^n<=s")
                                       (("1" (assert) nil nil)
                                        ("2"
                                         (hide-all-but (-1 1))
                                         (("2"
                                           (case
                                            "FORALL (nn:nat): s^(nn+1)<=s")
                                           (("1"
                                             (inst - "n-1")
                                             (("1" (assert) nil nil))
                                             nil)
                                            ("2"
                                             (hide 2)
                                             (("2"
                                               (induct "nn")
                                               (("1" (grind) nil nil)
                                                ("2"
                                                 (skeep)
                                                 (("2"
                                                   (assert)
                                                   (("2"
                                                     (mult-ineq -1 -2)
                                                     (("1"
                                                       (expand "^")
                                                       (("1"
                                                         (expand "expt" +)
                                                         (("1"
                                                           (assert)
                                                           nil
                                                           nil))
                                                         nil))
                                                       nil)
                                                      ("2"
                                                       (reveal "sge0")
                                                       (("2"
                                                         (assert)
                                                         (("2"
                                                           (flatten)
                                                           (("2"
                                                             (split)
                                                             (("1"
                                                               (expand "abs")
                                                               (("1"
                                                                 (lift-if)
                                                                 (("1"
                                                                   (ground)
                                                                   nil
                                                                   nil))
                                                                 nil))
                                                               nil)
                                                              ("2"
                                                               (expand "abs")
                                                               (("2"
                                                                 (propax)
                                                                 nil
                                                                 nil))
                                                               nil))
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil)
                                                      ("3"
                                                       (reveal "sge0")
                                                       (("3"
                                                         (assert)
                                                         nil
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil)
                                      ("2"
                                       (hide -1)
                                       (("2"
                                         (typepred "s")
                                         (("2"
                                           (expand "A")
                                           (("2"
                                             (case "s^n>=s")
                                             (("1" (assert) nil nil)
                                              ("2"
                                               (case "NOT s>=0")
                                               (("1" (assert) nil nil)
                                                ("2"
                                                 (hide-all-but (-1 1 2))
                                                 (("2"
                                                   (case
                                                    "FORALL (nn:nat): s^(nn+1)>=s")
                                                   (("1"
                                                     (inst - "n-1")
                                                     (("1" (assert) nil nil))
                                                     nil)
                                                    ("2"
                                                     (hide 2)
                                                     (("2"
                                                       (induct "nn")
                                                       (("1" (grind) nil nil)
                                                        ("2"
                                                         (skeep)
                                                         (("2"
                                                           (assert)
                                                           (("2"
                                                             (case "s>=1")
                                                             (("1"
                                                               (mult-ineq
                                                                -1
                                                                -2)
                                                               (("1"
                                                                 (expand "^")
                                                                 (("1"
                                                                   (expand
                                                                    "expt"
                                                                    +)
                                                                   (("1"
                                                                     (assert)
                                                                     nil
                                                                     nil))
                                                                   nil))
                                                                 nil))
                                                               nil)
                                                              ("2"
                                                               (assert)
                                                               nil
                                                               nil))
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil))
           nil))
         nil)
        ((nnreal type-eq-decl nil real_types nil)
         (posnat nonempty-type-eq-decl nil integers nil)
         (> const-decl "bool" reals nil)
         (nonneg_int nonempty-type-eq-decl nil integers nil)
         (^ const-decl "real" exponentiation nil)
         (>= const-decl "bool" reals nil)
         (/= const-decl "boolean" notequal nil)
         (OR const-decl "[bool, bool -> bool]" booleans nil)
         (int nonempty-type-eq-decl nil integers nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (<= const-decl "bool" reals nil)
         (= const-decl "[T, T -> boolean]" equalities nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (real nonempty-type-from-decl nil reals nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (boolean nonempty-type-decl nil booleans nil)
         (number nonempty-type-decl nil numbers nil)
         (ge_times_ge_any1 formula-decl nil extra_real_props nil)
         (nnint_plus_posint_is_posint application-judgement "posint" integers
          nil)
         (int_plus_int_is_int application-judgement "int" integers nil)
         (pred type-eq-decl nil defined_types nil)
         (nat_induction formula-decl nil naturalnumbers nil)
         (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
         (real_times_real_is_real application-judgement "real" reals nil)
         (le_times_le_any1 formula-decl nil extra_real_props nil)
         (posint_plus_nnint_is_posint application-judgement "posint" integers
          nil)
         (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
         (s skolem-const-decl "(A)" root nil)
         (nat nonempty-type-eq-decl nil naturalnumbers nil)
         (expt_1i formula-decl nil exponentiation nil)
         (posint_exp application-judgement "posint" exponentiation nil)
         (expt_increasing formula-decl nil root nil)
         (TRUE const-decl "bool" booleans nil)
         (member const-decl "bool" sets nil)
         (empty? const-decl "bool" sets nil)
         (real_ge_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (A skolem-const-decl "[real -> bool]" root nil)
         (gg skolem-const-decl "{x | least_upper_bound?(x, A)}" root nil)
         (expt_cont formula-decl nil root nil)
         (posreal_div_posreal_is_posreal application-judgement "posreal"
          real_types nil)
         (real_plus_real_is_real application-judgement "real" reals nil)
         (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
         (nznum nonempty-type-eq-decl nil number_fields nil)
         (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
         (delta!1 skolem-const-decl "posreal" root nil)
         (real_le_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
          real_types nil)
         (minus_real_is_real application-judgement "real" reals nil)
         (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
              nil)
         (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
          nil)
         (real_lt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (upper_bound? const-decl "bool" bounded_real_defs nil)
         (NOT const-decl "[bool -> bool]" booleans nil)
         (nonneg_real nonempty-type-eq-decl nil real_types nil)
         (posreal nonempty-type-eq-decl nil real_types nil)
         (n skolem-const-decl "posnat" root nil)
         (nnr skolem-const-decl "nnreal" root nil)
         (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
         (numfield nonempty-type-eq-decl nil number_fields nil)
         (real_minus_real_is_real application-judgement "real" reals nil)
         (real_gt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (< const-decl "bool" reals nil)
         (nat_exp application-judgement "nat" exponentiation nil)
         (int_minus_int_is_int application-judgement "int" integers nil)
         (nat_expt application-judgement "nat" exponentiation nil)
         (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
          integers nil)
         (even_times_int_is_even application-judgement "even_int" integers
          nil)
         (expt def-decl "real" exponentiation nil)
         (lub const-decl "{x | least_upper_bound?(x, SA)}" bounded_real_defs
          nil)
         (least_upper_bound? const-decl "bool" bounded_real_defs nil)
         (bounded_above? const-decl "bool" bounded_real_defs nil)
         (nonempty? const-decl "bool" sets nil)
         (set type-eq-decl nil sets nil)
         (AND const-decl "[bool, bool -> bool]" booleans nil))
        shostak))
      (root_pos_TCC1 0
       (root_pos_TCC1-1 nil 3595926374
        ("" (lemma "nn_root_exists")
         ((""
           (inst +
            "LAMBDA (nnr1:nnreal,kp:posnat): choose({nnx | nnx^kp = nnr1})")
           (("" (assert)
             (("" (skeep)
               (("" (expand "nonempty?")
                 (("" (expand "empty?")
                   (("" (inst -2 "kp" "nnr1")
                     (("" (skeep -)
                       (("" (inst - "nnx")
                         (("" (expand "member") (("" (propax) nil nil)) nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil))
           nil))
         nil)
        ((nnreal_exp application-judgement "nnreal" exponentiation nil)
         (number nonempty-type-decl nil numbers nil)
         (boolean nonempty-type-decl nil booleans nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (real nonempty-type-from-decl nil reals nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (>= const-decl "bool" reals nil)
         (nnreal type-eq-decl nil real_types nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (int nonempty-type-eq-decl nil integers nil)
         (nonneg_int nonempty-type-eq-decl nil integers nil)
         (> const-decl "bool" reals nil)
         (posnat nonempty-type-eq-decl nil integers nil)
         (= const-decl "[T, T -> boolean]" equalities nil)
         (OR const-decl "[bool, bool -> bool]" booleans nil)
         (/= const-decl "boolean" notequal nil)
         (^ const-decl "real" exponentiation nil)
         (set type-eq-decl nil sets nil)
         (nonempty? const-decl "bool" sets nil)
         (choose const-decl "(p)" sets nil)
         (empty? const-decl "bool" sets nil)
         (member const-decl "bool" sets nil)
         (nn_root_exists formula-decl nil root nil))
        nil
        (root_pos existence ""
         "[d: [nnreal, posnat] -> {nnx | exponentiation.^(root.nnx, d`2) = d`1}]")))
      (root_real_TCC1 0
       (root_real_TCC1-1 nil 3595933461
        ("" (skeep) (("" (assert) (("" (grind) nil nil)) nil)) nil)
        ((nat_exp application-judgement "nat" exponentiation nil)
         (real_ge_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (nat_expt application-judgement "nat" exponentiation nil)
         (even_times_int_is_even application-judgement "even_int" integers
          nil)
         (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
          integers nil)
         (int_minus_int_is_int application-judgement "int" integers nil)
         (^ const-decl "real" exponentiation nil)
         (expt def-decl "real" exponentiation nil))
        nil
        (root_real subtype "0"
         "{x |      (booleans.IFF(root.x = 0, root.r = 0)) AND (booleans.IFF(reals.>(root.x, 0), reals.>(root.r, 0))) AND (booleans.IFF(reals.<(root.x, 0), reals.<(root.r, 0))) AND (booleans.IFF(reals.>=(root.x, 0), reals.>=(root.r, 0))) AND (booleans.IFF(reals.<=(root.x, 0), reals.<=(root.r, 0))) AND (exponentiation.^(root.x, root.n) = root.r)}")))
      (root_real_TCC2 0
       (root_real_TCC2-1 nil 3595933461 ("" (grind) nil nil)
        ((boolean nonempty-type-decl nil booleans nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (NOT const-decl "[bool -> bool]" booleans nil)
         (number nonempty-type-decl nil numbers nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (real nonempty-type-from-decl nil reals nil)
         (> const-decl "bool" reals nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (int nonempty-type-eq-decl nil integers nil)
         (>= const-decl "bool" reals nil)
         (nonneg_int nonempty-type-eq-decl nil integers nil)
         (posnat nonempty-type-eq-decl nil integers nil)
         (OR const-decl "[bool, bool -> bool]" booleans nil)
         (odd? const-decl "bool" integers nil)
         (real_gt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (even_times_int_is_even application-judgement "even_int" integers
          nil)
         (real_ge_is_total_order name-judgement "(total_order?[real])"
          real_props nil))
        nil (root_real subtype "root.r" "nnreal")))
      (root_real_TCC3 0
       (root_real_TCC3-1 nil 3595933540
        ("" (skeep)
         (("" (assert)
           (("" (typepred "root_pos(r,n)")
             (("" (assert)
               (("" (case "root_pos(r,n) = 0")
                 (("1" (replaces -1) (("1" (grind) nil nil)) nil)
                  ("2" (assert) nil nil))
                 nil))
               nil))
             nil))
           nil))
         nil)
        ((real_gt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (nnreal_exp application-judgement "nnreal" exponentiation nil)
         (TRUE const-decl "bool" booleans nil)
         (nat_exp application-judgement "nat" exponentiation nil)
         (nat_expt application-judgement "nat" exponentiation nil)
         (even_times_int_is_even application-judgement "even_int" integers
          nil)
         (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
          integers nil)
         (int_minus_int_is_int application-judgement "int" integers nil)
         (expt def-decl "real" exponentiation nil)
         (real_ge_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (boolean nonempty-type-decl nil booleans nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (NOT const-decl "[bool -> bool]" booleans nil)
         (number nonempty-type-decl nil numbers nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (real nonempty-type-from-decl nil reals nil)
         (>= const-decl "bool" reals nil)
         (nnreal type-eq-decl nil real_types nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (int nonempty-type-eq-decl nil integers nil)
         (nonneg_int nonempty-type-eq-decl nil integers nil)
         (> const-decl "bool" reals nil)
         (posnat nonempty-type-eq-decl nil integers nil)
         (= const-decl "[T, T -> boolean]" equalities nil)
         (OR const-decl "[bool, bool -> bool]" booleans nil)
         (/= const-decl "boolean" notequal nil)
         (^ const-decl "real" exponentiation nil)
         (root_pos const-decl "{nnx | nnx ^ n = nnr}" root nil)
         (odd? const-decl "bool" integers nil))
        nil
        (root_real subtype "root.root_pos(root.r, root.n)"
         "{x |      (booleans.IFF(root.x = 0, root.r = 0)) AND (booleans.IFF(reals.>(root.x, 0), reals.>(root.r, 0))) AND (booleans.IFF(reals.<(root.x, 0), reals.<(root.r, 0))) AND (booleans.IFF(reals.>=(root.x, 0), reals.>=(root.r, 0))) AND (booleans.IFF(reals.<=(root.x, 0), reals.<=(root.r, 0))) AND (exponentiation.^(root.x, root.n) = root.r)}")))
      (root_real_TCC4 0
       (root_real_TCC4-2 "" 3790088537
        ("" (skeep) (("" (assert) nil nil)) nil) nil shostak
        (root_real subtype "(number_fields.-)(root.r)" "nnreal"))
       (root_real_TCC4-1 nil 3595933540
        ("" (skeep)
         (("" (assert)
           (("" (typepred "root_pos(r,n)")
             (("" (assert)
               (("" (split +)
                 (("1" (replaces -1)
                   (("1" (assert)
                     (("1" (case "0^n=0")
                       (("1" (assert) nil nil)
                        ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                       nil))
                     nil))
                   nil)
                  ("2" (assert)
                   (("2" (case "root_pos(r,n)=0")
                     (("1" (replaces -1)
                       (("1" (case "0^n=0")
                         (("1" (assert) nil nil)
                          ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                         nil))
                       nil)
                      ("2" (assert) nil nil))
                     nil))
                   nil)
                  ("3" (case "root_pos(r,n)=0")
                   (("1" (replaces -1)
                     (("1" (case "0^n=0")
                       (("1" (assert) nil nil)
                        ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                       nil))
                     nil)
                    ("2" (assert) nil nil))
                   nil))
                 nil))
               nil))
             nil))
           nil))
         nil)
        ((minus_real_is_real application-judgement "real" reals nil)
         (real_ge_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (real_gt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil))
        nil (root_real subtype "(number_fields.-)(root.r)" "nnreal")))
      (root_real_TCC5 0
       (root_real_TCC5-2 nil 3596186210
        ("" (skeep)
         (("" (assert)
           (("" (typepred "root_pos(-r,n)")
             (("" (assert)
               (("" (lemma "mult_expt_pos")
                 (("" (inst?)
                   (("" (assert)
                     (("" (replaces -1)
                       (("" (typepred "n")
                         (("" (assert)
                           (("" (expand "odd?")
                             (("" (skeep)
                               (("" (assert)
                                 (("" (case "root_pos(-r,n) = 0")
                                   (("1" (replaces -1)
                                     (("1"
                                       (assert)
                                       (("1" (grind) nil nil))
                                       nil))
                                     nil)
                                    ("2" (assert)
                                     (("2"
                                       (case "(-1)^n = -1")
                                       (("1" (assert) nil nil)
                                        ("2"
                                         (hide 5)
                                         (("2"
                                           (replace -2 1)
                                           (("2"
                                             (case
                                              "FORALL (kk:nat): (-1)^(2*kk+1) = -1")
                                             (("1"
                                               (inst?)
                                               (("1" (assert) nil nil))
                                               nil)
                                              ("2"
                                               (hide-all-but 1)
                                               (("2"
                                                 (induct "kk")
                                                 (("1" (grind) nil nil)
                                                  ("2"
                                                   (skeep)
                                                   (("2"
                                                     (assert)
                                                     (("2"
                                                       (expand "^")
                                                       (("2"
                                                         (expand "expt" +)
                                                         (("2"
                                                           (expand "expt" +)
                                                           (("2"
                                                             (assert)
                                                             nil
                                                             nil))
                                                           nil))
                                                         nil))
                                                       nil))
                                                     nil))
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil))
           nil))
         nil)
        ((minus_real_is_real application-judgement "real" reals nil)
         (minus_odd_is_odd application-judgement "odd_int" integers nil)
         (real_times_real_is_real application-judgement "real" reals nil)
         (real_gt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (nnreal_exp application-judgement "nnreal" exponentiation nil)
         (nzreal_exp application-judgement "nzreal" exponentiation nil)
         (int_exp application-judgement "int" exponentiation nil)
         (TRUE const-decl "bool" booleans nil)
         (int_times_even_is_even application-judgement "even_int" integers
          nil)
         (nat_exp application-judgement "nat" exponentiation nil)
         (expt def-decl "real" exponentiation nil)
         (int_minus_int_is_int application-judgement "int" integers nil)
         (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
          integers nil)
         (nat_expt application-judgement "nat" exponentiation nil)
         (posint_plus_nnint_is_posint application-judgement "posint" integers
          nil)
         (posint_times_posint_is_posint application-judgement "posint"
          integers nil)
         (nzint_times_nzint_is_nzint application-judgement "nzint" integers
          nil)
         (nzreal_expt application-judgement "nzreal" exponentiation nil)
         (int_expt application-judgement "int" exponentiation nil)
         (nat_induction formula-decl nil naturalnumbers nil)
         (pred type-eq-decl nil defined_types nil)
         (rat_exp application-judgement "rat" exponentiation nil)
         (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
         (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
         (nat nonempty-type-eq-decl nil naturalnumbers nil)
         (nnint_plus_posint_is_posint application-judgement "posint" integers
          nil)
         (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
         (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
         (even_times_int_is_even application-judgement "even_int" integers
          nil)
         (mult_expt_pos formula-decl nil root nil)
         (real_ge_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (boolean nonempty-type-decl nil booleans nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (NOT const-decl "[bool -> bool]" booleans nil)
         (number nonempty-type-decl nil numbers nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (real nonempty-type-from-decl nil reals nil)
         (>= const-decl "bool" reals nil)
         (nnreal type-eq-decl nil real_types nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (int nonempty-type-eq-decl nil integers nil)
         (nonneg_int nonempty-type-eq-decl nil integers nil)
         (> const-decl "bool" reals nil)
         (posnat nonempty-type-eq-decl nil integers nil)
         (= const-decl "[T, T -> boolean]" equalities nil)
         (OR const-decl "[bool, bool -> bool]" booleans nil)
         (/= const-decl "boolean" notequal nil)
         (^ const-decl "real" exponentiation nil)
         (root_pos const-decl "{nnx | nnx ^ n = nnr}" root nil)
         (numfield nonempty-type-eq-decl nil number_fields nil)
         (- const-decl "[numfield -> numfield]" number_fields nil)
         (odd? const-decl "bool" integers nil))
        nil
        (root_real subtype
         "number_fields.*((number_fields.-)(1), root.root_pos((number_fields.-)(root.r), root.n))"
         "{x |      (booleans.IFF(root.x = 0, root.r = 0)) AND (booleans.IFF(reals.>(root.x, 0), reals.>(root.r, 0))) AND (booleans.IFF(reals.<(root.x, 0), reals.<(root.r, 0))) AND (booleans.IFF(reals.>=(root.x, 0), reals.>=(root.r, 0))) AND (booleans.IFF(reals.<=(root.x, 0), reals.<=(root.r, 0))) AND (exponentiation.^(root.x, root.n) = root.r)}"))
       (root_real_TCC5-1 nil 3595933540 ("" (subtype-tcc) nil nil) nil nil
        (root_real subtype
         "number_fields.*((number_fields.-)(1), root.root_pos((number_fields.-)(root.r), root.n))"
         "{x |      (booleans.IFF(root.x = 0, root.r = 0)) AND (booleans.IFF(reals.>(root.x, 0), reals.>(root.r, 0))) AND (booleans.IFF(reals.<(root.x, 0), reals.<(root.r, 0))) AND (booleans.IFF(reals.>=(root.x, 0), reals.>=(root.r, 0))) AND (booleans.IFF(reals.<=(root.x, 0), reals.<=(root.r, 0))) AND (exponentiation.^(root.x, root.n) = root.r)}"))))


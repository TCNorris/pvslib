(quadratic
 (canonical_sq 0
  (canonical_sq-1 nil 3253574939 ("" (grind) nil nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sq const-decl "nonneg_real" sq nil))
   nil))
 (discr_symm 0
  (discr_symm-1 nil 3427107841
   ("" (expand "discr")
    (("" (skeep) (("" (rewrite "sq_neg") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sq_neg formula-decl nil sq nil) (discr const-decl "real" quadratic nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (discr_scalar 0
  (discr_scalar-1 nil 3427287214
   ("" (skeep)
    (("" (expand "discr")
      (("" (rewrite "sq_times")
        (("" (expand "sq" 1 5) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (sq_nz_pos application-judgement "posreal" sq nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (discr const-decl "real" quadratic nil)
    (sq const-decl "nonneg_real" sq nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sq_times formula-decl nil sq nil))
   shostak))
 (a_gt_0_discr_gt_0 0
  (a_gt_0_discr_gt_0-2 nil 3253620275
   ("" (skeep)
    (("" (lemma "canonical_sq")
      (("" (inst?)
        (("" (expand "discr")
          (("" (replaces -1)
            (("" (case " a * sq(x + b / (2 * a)) >= 0")
              (("1" (div-by 1 "4*a") (("1" (assert) nil nil)) nil)
               ("2" (grind-reals) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((canonical_sq formula-decl nil quadratic nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (discr const-decl "real" quadratic nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (>= const-decl "bool" reals nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (a skolem-const-decl "nonzero_real" quadratic nil)
    (> const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (both_sides_div_pos_gt1 formula-decl nil real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (pos_times_ge formula-decl nil real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil)
  (a_gt_0_discr_gt_0-1 nil 3253574939
   ("" (skolem 1 ("a" "b" "c" "x"))
    (("" (flatten)
      (("" (lemma "canonical_sq")
        (("" (inst -1 "a" "b" "c" "x")
          (("" (expand "discr")
            (("" (replaces -1)
              (("" (case " a * sq(x + b / (2 * a)) >= 0")
                (("1" (name-replace "AA" "a * sq(x + b / (2 * a))")
                  (("1" (case "4 * a * c - sq(b) < 0")
                    (("1" (assert) nil nil)
                     ("2" (hide 2)
                      (("2" (name-replace "BB" "4 * a * c - sq(b)")
                        (("2" (field -3)
                          (("2" (case "4 * AA * a >= 0")
                            (("1" (assert) nil nil)
                             ("2" (hide -5 2) (("2" (grind-reals) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -2 2) (("2" (grind-reals) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sq const-decl "nonneg_real" sq nil)) nil))
 (a_gt_0_discr_ge_0 0
  (a_gt_0_discr_ge_0-3 nil 3430213328
   ("" (skeep)
    (("" (lemma "canonical_sq")
      (("" (inst?)
        (("" (expand "discr")
          (("" (replaces -1)
            (("" (case " a * sq(x + b / (2 * a)) >= 0")
              (("1" (div-by 1 "4*a") (("1" (assert) nil nil)) nil)
               ("2" (grind-reals) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((canonical_sq formula-decl nil quadratic nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (discr const-decl "real" quadratic nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (>= const-decl "bool" reals nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (a skolem-const-decl "nonzero_real" quadratic nil)
    (> const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (both_sides_div_pos_ge1 formula-decl nil real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (pos_times_ge formula-decl nil real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil)
  (a_gt_0_discr_ge_0-2 nil 3253620357
   ("" (skolem 1 ("a" "b" "c" "x"))
    (("" (flatten)
      (("" (lemma "canonical_sq")
        (("" (inst -1 "a" "b" "c" "x")
          (("" (replaces -1)
            (("" (expand "discr")
              (("" (case " a * sq(x + b / (2 * a)) >= 0")
                (("1" (name-replace "AA" "a * sq(x + b / (2 * a))")
                  (("1" (case "4 * a * c - sq(b) <= 0")
                    (("1" (assert) nil nil)
                     ("2" (hide 2)
                      (("2" (name-replace "BB" "4 * a * c - sq(b)")
                        (("2" (field -3)
                          (("2" (case "4 * AA * a >= 0")
                            (("1" (assert) nil nil)
                             ("2" (grind-reals) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind-reals) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sq const-decl "nonneg_real" sq nil)) nil)
  (a_gt_0_discr_ge_0-1 nil 3253574939
   ("" (skolem 1 ("a" "b" "c" "x"))
    (("" (flatten)
      (("" (lemma "canonical_sq")
        (("" (inst -1 "a" "b" "c" "x")
          (("" (replaces -1)
            (("" (expand "discr")
              (("" (case " a * sq(x + b / (2 * a)) >= 0")
                (("1" (name-replace "AA" "a * sq(x + b / (2 * a))")
                  (("1" (case "4 * a * c - sq(b) <= 0")
                    (("1" (assert) nil nil)
                     ("2" (hide 2)
                      (("2" (name-replace "BB" "4 * a * c - sq(b)")
                        (("2" (field -3)
                          (("2" (case "4 * AA * a >= 0")
                            (("1" (assert) nil nil)
                             ("2" (hide -1 2) (("2" (grind-reals) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -2 2) (("2" (grind-reals) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sq const-decl "nonneg_real" sq nil)) nil))
 (a_lt_0_discr_gt_0 0
  (a_lt_0_discr_gt_0-1 nil 3253574939
   ("" (skeep)
    (("" (lemma "a_gt_0_discr_gt_0")
      (("" (inst -1 "-a" "-b" "-c" "x")
        (("" (assert)
          (("" (rewrite "discr_symm") (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((a_gt_0_discr_gt_0 formula-decl nil quadratic nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (discr_symm formula-decl nil quadratic nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (minus_real_is_real application-judgement "real" reals nil))
   nil))
 (a_lt_0_discr_ge_0 0
  (a_lt_0_discr_ge_0-2 nil 3430213579
   ("" (skeep)
    (("" (lemma "a_gt_0_discr_ge_0")
      (("" (inst -1 "-a" "-b" "-c" "x")
        (("" (assert)
          (("" (rewrite "discr_symm") (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((a_gt_0_discr_ge_0 formula-decl nil quadratic nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (discr_symm formula-decl nil quadratic nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (minus_real_is_real application-judgement "real" reals nil))
   nil)
  (a_lt_0_discr_ge_0-1 nil 3253574939
   ("" (skolem 1 ("a" "b" "c" "x"))
    (("" (flatten)
      (("" (lemma "canonical_sq")
        (("" (inst -1 "a" "b" "c" "x")
          (("" (replaces -1)
            (("" (expand "discr")
              (("" (case " a * sq(x + b / (2 * a)) <= 0")
                (("1" (name-replace "AA" "a * sq(x + b / (2 * a))")
                  (("1" (case "4 * a * c - sq(b) <= 0")
                    (("1" (assert) nil nil)
                     ("2" (hide 2)
                      (("2" (name-replace "BB" "4 * a * c - sq(b)")
                        (("2" (field -3)
                          (("2" (case "4 * AA * a >= 0")
                            (("1" (assert) nil nil)
                             ("2" (grind-reals) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind-reals) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sq const-decl "nonneg_real" sq nil)) nil))
 (discr_ge_0 0
  (discr_ge_0-1 nil 3253574939
   ("" (skeep)
    (("" (case "a > 0")
      (("1" (use "a_gt_0_discr_ge_0") (("1" (assert) nil nil)) nil)
       ("2" (use "a_lt_0_discr_ge_0") (("2" (assert) nil nil)) nil))
      nil))
    nil)
   ((nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil) (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (a_gt_0_discr_ge_0 formula-decl nil quadratic nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (a_lt_0_discr_ge_0 formula-decl nil quadratic nil))
   nil))
 (root_TCC1 0
  (root_TCC1-1 nil 3253574939 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (sq const-decl "nonneg_real" sq nil)
    (discr const-decl "real" quadratic nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (root subtype "quadratic.discr(quadratic.a, quadratic.b, quadratic.c)"
         "nonneg_real")))
 (root_symm_TCC1 0
  (root_symm_TCC1-1 nil 3427107974
   ("" (skeep) (("" (rewrite "discr_symm") nil nil)) nil)
   ((minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (discr_symm formula-decl nil quadratic nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil))
   nil
   (root_symm subtype "(number_fields.-)(quadratic.c)"
    "{c: reals.real | reals.>=(quadratic.discr((number_fields.-)(quadratic.a), (number_fields.-)(quadratic.b), c), 0)}")))
 (root_symm 0
  (root_symm-1 nil 3427108028
   ("" (skeep) (("" (hide -1) (("" (grind) nil nil)) nil)) nil)
   ((real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (sign_neg_clos application-judgement "Sign" sign nil)
    (root const-decl "real" quadratic nil)
    (discr const-decl "real" quadratic nil)
    (sq const-decl "nonneg_real" sq nil))
   shostak))
 (root_scalar_TCC1 0
  (root_scalar_TCC1-1 nil 3427287200
   ("" (skeep)
    (("" (rewrite "discr_scalar") (("" (mult-cases 1) nil nil)) nil)) nil)
   ((discr_scalar formula-decl nil quadratic nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (sq_nz_pos application-judgement "posreal" sq nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (pos_times_ge formula-decl nil real_props nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (sq const-decl "nonneg_real" sq nil)
    (discr const-decl "real" quadratic nil))
   nil
   (root_scalar subtype "number_fields.*(quadratic.k, quadratic.c)"
    "{c: reals.real | reals.>=(quadratic.discr(number_fields.*(quadratic.k, quadratic.a), number_fields.*(quadratic.k, quadratic.b), c), 0)}")))
 (root_scalar 0
  (root_scalar-1 nil 3427287542
   ("" (skeep)
    (("" (expand "root")
      (("" (rewrite "discr_scalar")
        (("" (rewrite "sqrt_times")
          (("" (rewrite "sqrt_sq_sign") (("" (field 1) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (root const-decl "real" quadratic nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (discr const-decl "real" quadratic nil)
    (sq const-decl "nonneg_real" sq nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (sqrt_times formula-decl nil sqrt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sqrt_pos application-judgement "posreal" sqrt nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (sqrt_sq_sign formula-decl nil sqrt nil)
    (sq_nz_pos application-judgement "posreal" sq nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (discr_scalar formula-decl nil quadratic nil))
   shostak))
 (vieta1 0
  (vieta1-1 nil 3253574939 ("" (expand "root") (("" (propax) nil nil)) nil)
   ((root const-decl "real" quadratic nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   nil))
 (vieta_add 0
  (vieta_add-1 nil 3427390980
   ("" (skeep)
    (("" (lemma "vieta1")
      (("" (inst?)
        (("" (assert)
          (("" (typepred "eps")
            (("" (assert)
              (("" (split) (("1" (assert) nil nil) ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((vieta1 formula-decl nil quadratic nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (sign_neg_clos application-judgement "Sign" sign nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (vieta2 0
  (vieta2-1 nil 3253574939
   ("" (skolem 1 ("a" "b" "c"))
    (("" (flatten)
      (("" (expand "root")
        (("" (field 1)
          (("" (rewrite "sqrt_def")
            (("" (expand "discr")
              (("" (expand "sq") (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil) (/= const-decl "boolean" notequal nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (discr const-decl "real" quadratic nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt nil)
    (nnreal type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (div_cancel2 formula-decl nil real_props nil)
    (fdx_105 skolem-const-decl "nonzero_real" quadratic nil)
    (b skolem-const-decl "real" quadratic nil)
    (c skolem-const-decl "real" quadratic nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (sq const-decl "nonneg_real" sq nil) (sqrt_def formula-decl nil sqrt nil)
    (root const-decl "real" quadratic nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   nil))
 (vieta_mult 0
  (vieta_mult-1 nil 3427391054
   ("" (skeep)
    (("" (lemma "vieta2")
      (("" (inst?)
        (("" (assert)
          (("" (typepred "eps")
            (("" (assert)
              (("" (split) (("1" (assert) nil nil) ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((vieta2 formula-decl nil quadratic nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (sign_neg_clos application-judgement "Sign" sign nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (root_neq_0 0
  (root_neq_0-1 nil 3253574939 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (sq const-decl "nonneg_real" sq nil)
    (discr const-decl "real" quadratic nil)
    (/= const-decl "boolean" notequal nil)
    (root const-decl "real" quadratic nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil))
   nil))
 (root_eq_0 0
  (root_eq_0-3 nil 3427236384
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (split -2)
          (("1" (grind) nil nil)
           ("2" (replaces -1)
            (("2" (replaces -1)
              (("2" (expand "root")
                (("2" (expand "discr" 1)
                  (("2" (rewrite "sqrt_sq_sign")
                    (("2" (cross-mult)
                      (("2" (lemma "sign_sign")
                        (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (splash 1)
          (("1" (expand "root")
            (("1" (cross-mult -2)
              (("1" (replaces -1)
                (("1" (expand "discr")
                  (("1" (rewrite "sqrt_sq_sign")
                    (("1" (typepred "eps") (("1" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (lemma "root_neq_0")
            (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (sqrt_0 formula-decl nil sqrt nil) (root const-decl "real" quadratic nil)
    (discr const-decl "real" quadratic nil)
    (sq const-decl "nonneg_real" sq nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (div_cancel3 formula-decl nil real_props nil)
    (sign const-decl "Sign" sign nil) (Sign type-eq-decl nil sign nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (sign_mult_clos application-judgement "Sign" sign nil)
    (sign_sign formula-decl nil sign nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (sqrt_sq_sign formula-decl nil sqrt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt nil)
    (c skolem-const-decl "real" quadratic nil)
    (b skolem-const-decl "real" quadratic nil)
    (a skolem-const-decl "nonzero_real" quadratic nil)
    (>= const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (root_neq_0 formula-decl nil quadratic nil))
   nil)
  (root_eq_0-2 nil 3427124259
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (replaces -1)
          (("1" (expand "root")
            (("1" (expand "discr" 1)
              (("1" (rewrite "sqrt_sq_sign")
                (("1" (cross-mult)
                  (("1" (lemma "sign_sign")
                    (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (lemma "vieta2")
          (("2" (inst?)
            (("2" (assert)
              (("2" (case "b >= 0")
                (("1" (rewrite "sign_eq_1")
                  (("1" (replaces -3) (("1" (assert) nil nil)) nil)) nil)
                 ("2" (rewrite "sign_eq_neg1")
                  (("2" (replaces -2) (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sign_eq_1 formula-decl nil sign nil)
    (sign_eq_neg1 formula-decl nil sign nil)
    (sqrt_sq_sign formula-decl nil sqrt nil)
    (sign_sign formula-decl nil sign nil)
    (sign_mult_clos application-judgement "Sign" sign nil)
    (Sign type-eq-decl nil sign nil) (sign const-decl "Sign" sign nil))
   nil)
  (root_eq_0-1 nil 3427120022
   ("" (skeep)
    (("" (replaces (-2 -3))
      (("" (expand "root")
        (("" (expand "discr" 1) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((sqrt_0 formula-decl nil sqrt nil) (sq_0 formula-decl nil sq nil)) nil))
 (c_eq_0 0
  (c_eq_0-1 nil 3427125700
   ("" (skeep)
    (("" (replaces -2)
      (("" (expand "discr")
        (("" (assert)
          (("" (cancel-by -1 "-4") (("" (grind-reals) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (sq_0 formula-decl nil sq nil)
    (pos_times_ge formula-decl nil real_props nil)
    (neg_times_ge formula-decl nil real_props nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (nnrrat_div_negrat_is_nprat application-judgement "nprat" rationals nil)
    (both_sides_times_neg_ge1_imp formula-decl nil extra_real_props nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (> const-decl "bool" reals nil)
    (even_negint nonempty-type-eq-decl nil naturalnumbers nil)
    (even? const-decl "bool" integers nil)
    (negint nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nonpos_int nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (discr const-decl "real" quadratic nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (root_eq 0
  (root_eq-1 nil 3253574939
   ("" (skolem 1 ("a" "b" "c"))
    (("" (flatten)
      (("" (split)
        (("1" (flatten)
          (("1" (expand "root")
            (("1" (replaces)
              (("1" (rewrite "sqrt_0") (("1" (assert) nil nil)) nil)) nil))
            nil))
          nil)
         ("2" (flatten) (("2" (expand "root") (("2" (field -1) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (discr const-decl "real" quadratic nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil) (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (fdx_107 skolem-const-decl "nonzero_real" quadratic nil)
    (b skolem-const-decl "real" quadratic nil)
    (c skolem-const-decl "real" quadratic nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt nil)
    (nnreal type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (both_sides_times1_imp formula-decl nil extra_real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (sqrt_0 formula-decl nil sqrt nil) (root const-decl "real" quadratic nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   nil))
 (roots_eq_0 0
  (roots_eq_0-1 nil 3427124224
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (lemma "c_eq_0")
          (("1" (inst?)
            (("1" (assert)
              (("1" (replaces (-1 -2))
                (("1" (expand "root")
                  (("1" (expand "discr" 1) (("1" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (lemma "root_neq_0")
          (("2" (inst?)
            (("2" (assert)
              (("2" (flatten)
                (("2" (lemma "root_eq")
                  (("2" (inst?)
                    (("2" (assert)
                      (("2" (flatten)
                        (("2" (hide -1)
                          (("2" (split -1)
                            (("1" (expand "discr" -1)
                              (("1" (replaces -2)
                                (("1" (assert)
                                  (("1" (rewrite "sq_eq_0") nil nil)) nil))
                                nil))
                              nil)
                             ("2" (typepred "eps") (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((c_eq_0 formula-decl nil quadratic nil)
    (sign_neg_clos application-judgement "Sign" sign nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (root const-decl "real" quadratic nil) (sq_0 formula-decl nil sq nil)
    (sqrt_0 formula-decl nil sqrt nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (discr const-decl "real" quadratic nil)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (root_neq_0 formula-decl nil quadratic nil)
    (root_eq formula-decl nil quadratic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (sq_eq_0 formula-decl nil sq nil) (Sign type-eq-decl nil sign nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil))
   nil))
 (root_inv_TCC1 0
  (root_inv_TCC1-1 nil 3563217807 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (sq const-decl "nonneg_real" sq nil)
    (discr const-decl "real" quadratic nil)
    (/= const-decl "boolean" notequal nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (root_inv subtype "quadratic.a"
    "{c_1: reals.real | reals.>=(quadratic.discr(quadratic.c, quadratic.b, c_1), 0)}")))
 (root_inv_TCC2 0
  (root_inv_TCC2-1 nil 3563217807 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (sq const-decl "nonneg_real" sq nil)
    (discr const-decl "real" quadratic nil)
    (/= const-decl "boolean" notequal nil)
    (root const-decl "real" quadratic nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sign_neg_clos application-judgement "Sign" sign nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (root_inv subtype
    "quadratic.root(quadratic.c, quadratic.b, quadratic.a, (number_fields.-)(quadratic.eps))"
    "nznum")))
 (root_inv 0
  (root_inv-2 nil 3563209713
   ("" (skeep)
    (("" (lemma "root_neq_0")
      (("" (inst -1 "c" "b" "a" "-eps")
        (("" (assert)
          (("" (splash -1)
            (("1" (cross-mult 2)
              (("1" (expand "root")
                (("1" (field 2)
                  (("1" (expand "discr")
                    (("1" (rewrite "sqrt_def")
                      (("1" (typepred "eps") (("1" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "discr") (("2" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((root_neq_0 formula-decl nil quadratic nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (div_cancel4 formula-decl nil real_props nil)
    (a skolem-const-decl "nonzero_real" quadratic nil)
    (b skolem-const-decl "real" quadratic nil)
    (c skolem-const-decl "real" quadratic nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt nil)
    (nnreal type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (div_cancel2 formula-decl nil real_props nil)
    (fdx_108 skolem-const-decl "real" quadratic nil)
    (fdx_109 skolem-const-decl "nonzero_real" quadratic nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (neg_times_neg formula-decl nil real_props nil)
    (sq const-decl "nonneg_real" sq nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt_def formula-decl nil sqrt nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (root const-decl "real" quadratic nil) (>= const-decl "bool" reals nil)
    (discr const-decl "real" quadratic nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (Sign type-eq-decl nil sign nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sign_neg_clos application-judgement "Sign" sign nil))
   nil)
  (root_inv-1 nil 3253574939
   ("" (skeep)
    (("" (lemma "root_neq_0")
      (("" (inst -1 "c" "b" "a" "-eps")
        (("" (assert)
          (("" (splash -1)
            (("1" (cross-mult 2)
              (("1" (expand "root")
                (("1" (field 3)
                  (("1" (expand "discr")
                    (("1" (rewrite "sqrt_def")
                      (("1" (typepred "eps") (("1" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "discr") (("2" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt nil)
    (sq const-decl "nonneg_real" sq nil) (sqrt_def formula-decl nil sqrt nil)
    (Sign type-eq-decl nil sign nil)
    (sign_neg_clos application-judgement "Sign" sign nil))
   nil))
 (root_le 0
  (root_le-1 nil 3253574939
   ("" (skosimp*)
    (("" (expand "root")
      (("" (case "a!1>0")
        (("1" (expand "sign") (("1" (assert) (("1" (field 1) nil nil)) nil))
          nil)
         ("2" (expand "sign") (("2" (assert) (("2" (field 2) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((sign_neg_clos application-judgement "Sign" sign nil)
    (root const-decl "real" quadratic nil)
    (both_sides_times_neg_le1 formula-decl nil real_props nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (fdx_111 skolem-const-decl "nonzero_real" quadratic nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (sign const-decl "Sign" sign nil) (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (>= const-decl "bool" reals nil) (discr const-decl "real" quadratic nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nnreal type-eq-decl nil real_types nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (c!1 skolem-const-decl "real" quadratic nil)
    (b!1 skolem-const-decl "real" quadratic nil)
    (fdx_110 skolem-const-decl "nonzero_real" quadratic nil)
    (div_cancel2 formula-decl nil real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil) (/= const-decl "boolean" notequal nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil))
   nil))
 (root_lt_TCC1 0
  (root_lt_TCC1-1 nil 3420995074 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sq const-decl "nonneg_real" sq nil)
    (discr const-decl "real" quadratic nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (root_lt subtype "quadratic.c"
    "{c: reals.real | reals.>=(quadratic.discr(quadratic.a, quadratic.b, c), 0)}")))
 (root_lt 0
  (root_lt-1 nil 3420995104
   ("" (skeep)
    (("" (lemma "root_le")
      (("" (inst?)
        (("" (assert)
          (("" (lemma "root_eq")
            (("" (inst?)
              (("" (assert)
                (("" (assert)
                  (("" (expand "sign")
                    (("" (lift-if) (("" (ground) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((root_le formula-decl nil quadratic nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (sign_neg_clos application-judgement "Sign" sign nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (sign const-decl "Sign" sign nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (root_eq formula-decl nil quadratic nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (roots_le_ge_0 0
  (roots_le_ge_0-2 "" 3790088973
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (split -2)
          (("1" (flatten)
            (("1" (lemma "roots_eq_0")
              (("1" (inst?)
                (("1" (assert) (("1" (flatten) (("1" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (lemma "vieta_mult")
            (("2" (inst -1 "a" "b" "c" "eps")
              (("2" (assert)
                (("2" (lemma "root_le")
                  (("2" (inst?)
                    (("2" (assert)
                      (("2" (case "c/a <= 0")
                        (("1" (replaces -3 :dir rl)
                          (("1" (mult-cases -1) nil nil)) nil)
                         ("2" (hide-all-but (-4 1))
                          (("2" (grind-reals) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (lemma "vieta_mult")
          (("2" (inst -1 "a" "b" "c" "eps")
            (("2" (assert)
              (("2" (splash 1)
                (("1" (lemma "root_le")
                  (("1" (inst?)
                    (("1" (assert)
                      (("1" (case "a >= 0")
                        (("1" (rewrite "sign_eq_1")
                          (("1" (flatten)
                            (("1" (typepred "eps")
                              (("1" (assert)
                                (("1" (replaces -2)
                                  (("1" (lemma "roots_eq_0")
                                    (("1" (inst?) (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (rewrite "sign_eq_neg1")
                          (("2" (flatten)
                            (("2" (typepred "eps")
                              (("2" (assert)
                                (("2" (replaces -2)
                                  (("2" (lemma "roots_eq_0")
                                    (("2" (inst?) (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (mult-ineq -3 -2 (+ -))
                  (("2" (replaces -2)
                    (("2" (hide-all-but (-1 1)) (("2" (grind-reals) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (roots_le_ge_0-1 nil 3427308282
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (split -2)
          (("1" (flatten)
            (("1" (lemma "roots_eq_0")
              (("1" (inst?)
                (("1" (assert) (("1" (flatten) (("1" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (lemma "vieta_mult")
            (("2" (inst -1 "a" "b" "c" "eps")
              (("2" (assert)
                (("2" (lemma "root_le")
                  (("2" (inst?)
                    (("2" (assert)
                      (("2" (case "c/a <= 0")
                        (("1" (replaces -3 :dir rl)
                          (("1" (mult-cases -1) nil nil)) nil)
                         ("2" (hide-all-but (-4 1))
                          (("2" (grind-reals) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (lemma "vieta_mult")
          (("2" (inst -1 "a" "b" "c" "eps")
            (("2" (assert)
              (("2" (splash 1)
                (("1" (lemma "root_le")
                  (("1" (inst?)
                    (("1" (assert)
                      (("1" (case "a >= 0")
                        (("1" (rewrite "sign_eq_1")
                          (("1" (flatten)
                            (("1" (typepred "eps")
                              (("1" (assert)
                                (("1" (replaces -2)
                                  (("1" (lemma "roots_eq_0")
                                    (("1" (inst?) (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (rewrite "sign_eq_neg1")
                          (("2" (flatten)
                            (("2" (typepred "eps")
                              (("2" (assert)
                                (("2" (replaces -2)
                                  (("2" (lemma "roots_eq_0")
                                    (("2" (inst?) (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (mult-ineq -3 -2 (+ -))
                  (("1" (replaces -2)
                    (("1" (hide-all-but (-1 1)) (("1" (grind-reals) nil nil))
                      nil))
                    nil)
                   ("2" (grind-reals) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((roots_eq_0 formula-decl nil quadratic nil)
    (sign_neg_clos application-judgement "Sign" sign nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (Sign type-eq-decl nil sign nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (root_le formula-decl nil quadratic nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (neg_div_le formula-decl nil real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (root const-decl "real" quadratic nil)
    (discr const-decl "real" quadratic nil) (>= const-decl "bool" reals nil)
    (neg_times_le formula-decl nil real_props nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (vieta_mult formula-decl nil quadratic nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (ge_times_ge_any1 formula-decl nil extra_real_props nil)
    (neg_div_ge formula-decl nil real_props nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (sign_eq_neg1 formula-decl nil sign nil)
    (nnreal type-eq-decl nil real_types nil)
    (sign_eq_1 formula-decl nil sign nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (sign const-decl "Sign" sign nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil))
   nil))
 (roots_lt_gt_0 0
  (roots_lt_gt_0-2 "" 3790088974
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (lemma "vieta_mult")
          (("1" (inst -1 "a" "b" "c" "eps")
            (("1" (assert)
              (("1" (lemma "root_le")
                (("1" (inst?)
                  (("1" (assert)
                    (("1" (case "c/a < 0")
                      (("1" (replaces -3 :dir rl)
                        (("1" (mult-cases -1) nil nil)) nil)
                       ("2" (hide-all-but (-3 1))
                        (("2" (grind-reals) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (lemma "vieta_mult")
          (("2" (inst -1 "a" "b" "c" "eps")
            (("2" (assert)
              (("2" (splash 1)
                (("1" (lemma "root_le")
                  (("1" (inst?)
                    (("1" (assert)
                      (("1" (case "a>=0")
                        (("1" (rewrite "sign_eq_1")
                          (("1" (typepred "eps")
                            (("1" (split -2)
                              (("1" (propax) nil nil) ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (rewrite "sign_eq_neg1")
                          (("2" (typepred "eps") (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (mult-ineq -3 -2 (+ -))
                  (("2" (replaces -2)
                    (("2" (hide-all-but (-1 1)) (("2" (grind-reals) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (roots_lt_gt_0-1 nil 3427309356
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (lemma "vieta_mult")
          (("1" (inst -1 "a" "b" "c" "eps")
            (("1" (assert)
              (("1" (lemma "root_le")
                (("1" (inst?)
                  (("1" (assert)
                    (("1" (case "c/a < 0")
                      (("1" (replaces -3 :dir rl)
                        (("1" (mult-cases -1) nil nil)) nil)
                       ("2" (hide-all-but (-3 1))
                        (("2" (grind-reals) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (lemma "vieta_mult")
          (("2" (inst -1 "a" "b" "c" "eps")
            (("2" (assert)
              (("2" (splash 1)
                (("1" (lemma "root_le")
                  (("1" (inst?)
                    (("1" (assert)
                      (("1" (case "a>=0")
                        (("1" (rewrite "sign_eq_1")
                          (("1" (typepred "eps")
                            (("1" (split -2)
                              (("1" (propax) nil nil) ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (rewrite "sign_eq_neg1")
                          (("2" (typepred "eps") (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (mult-ineq -3 -2 (+ -))
                  (("1" (replaces -2)
                    (("1" (hide-all-but (-1 1)) (("1" (grind-reals) nil nil))
                      nil))
                    nil)
                   ("2" (grind-reals) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((vieta_mult formula-decl nil quadratic nil)
    (sign_neg_clos application-judgement "Sign" sign nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (neg_times_lt formula-decl nil real_props nil)
    (>= const-decl "bool" reals nil) (discr const-decl "real" quadratic nil)
    (root const-decl "real" quadratic nil)
    (TRUE const-decl "bool" booleans nil)
    (neg_div_lt formula-decl nil real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (root_le formula-decl nil quadratic nil) (Sign type-eq-decl nil sign nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (> const-decl "bool" reals nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (gt_times_gt_any1 formula-decl nil extra_real_props nil)
    (neg_div_gt formula-decl nil real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil) (sign_eq_neg1 formula-decl nil sign nil)
    (nnreal type-eq-decl nil real_types nil)
    (sign_eq_1 formula-decl nil sign nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sign const-decl "Sign" sign nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil))
   nil))
 (sign_ab_roots_ge_0 0
  (sign_ab_roots_ge_0-1 nil 3427197922
   ("" (skeep)
    (("" (case "b=0")
      (("1" (lemma "roots_eq_0") (("1" (inst?) (("1" (assert) nil nil)) nil))
        nil)
       ("2" (lemma "vieta2")
        (("2" (inst?)
          (("2" (assert)
            (("2" (case "c/a >=0")
              (("1" (replaces -2 :dir rl)
                (("1" (lemma "vieta1")
                  (("1" (inst?)
                    (("1" (assert)
                      (("1" (mult-cases -2)
                        (("1" (add-formulas -1 -2 :hide? nil)
                          (("1" (replaces -4)
                            (("1" (case-replace "-sign(a*b)=-1")
                              (("1" (typepred "eps") (("1" (assert) nil nil))
                                nil)
                               ("2" (hide-all-but (-1 1 2))
                                (("2" (case "sign(-b/a) = -1")
                                  (("1" (rewrite "sign_div")
                                    (("1" (rewrite "sign_mult")
                                      (("1"
                                        (rewrite "sign_neg")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (expand "sign" 1)
                                    (("2" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (add-formulas -1 -2 :hide? nil)
                          (("2" (replaces -4)
                            (("2" (case-replace "-sign(a*b)=1")
                              (("1" (typepred "eps") (("1" (assert) nil nil))
                                nil)
                               ("2" (hide-all-but (-1 1 2))
                                (("2" (case "sign(-b/a) = 1")
                                  (("1" (rewrite "sign_div")
                                    (("1" (rewrite "sign_mult")
                                      (("1"
                                        (rewrite "sign_neg")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (expand "sign" 1)
                                    (("2" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but (-3 1)) (("2" (grind-reals) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sign_neg_clos application-judgement "Sign" sign nil)
    (sign_nat formula-decl nil sign nil)
    (roots_eq_0 formula-decl nil quadratic nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (>= const-decl "bool" reals nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (vieta1 formula-decl nil quadratic nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sign const-decl "Sign" sign nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sign_mult formula-decl nil sign nil) (sign_neg formula-decl nil sign nil)
    (sign_mult_clos application-judgement "Sign" sign nil)
    (sign_div formula-decl nil sign nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (pos_times_ge formula-decl nil real_props nil)
    (discr const-decl "real" quadratic nil)
    (root const-decl "real" quadratic nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (pos_div_ge formula-decl nil real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (vieta2 formula-decl nil quadratic nil))
   nil))
 (roots_ge_0 0
  (roots_ge_0-2 "" 3790088975
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (case "b=0")
          (("1" (lemma "roots_eq_0")
            (("1" (inst?)
              (("1" (assert) (("1" (flatten) (("1" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (lemma "sign_ab_roots_ge_0")
            (("2" (inst-cp -1 "a" "b" "c" "-eps")
              (("2" (inst -1 "a" "b" "c" "eps")
                (("2" (assert)
                  (("2" (rewrite "sign_eq_neg1") (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (lemma "vieta_mult")
          (("2" (inst -1 "a" "b" "c" "eps")
            (("2" (assert)
              (("2" (mult-ineq -3 -2)
                (("2" (replaces -2)
                  (("2" (split 1)
                    (("1" (grind-reals) nil nil)
                     ("2" (lemma "vieta_add")
                      (("2" (inst -1 "a" "b" "c" "eps")
                        (("2" (assert)
                          (("2" (add-formulas -3 -4)
                            (("2" (replaces -2)
                              (("2" (case "a>=0")
                                (("1" (cross-mult -2)
                                  (("1" (mult-cases 1) nil nil)) nil)
                                 ("2" (cross-mult -1)
                                  (("2" (mult-cases 2) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (roots_ge_0-1 nil 3427197416
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (case "b=0")
          (("1" (lemma "roots_eq_0")
            (("1" (inst?)
              (("1" (assert) (("1" (flatten) (("1" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (lemma "sign_ab_roots_ge_0")
            (("2" (inst-cp -1 "a" "b" "c" "-eps")
              (("2" (inst -1 "a" "b" "c" "eps")
                (("2" (assert)
                  (("2" (rewrite "sign_eq_neg1") (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (lemma "vieta_mult")
          (("2" (inst -1 "a" "b" "c" "eps")
            (("2" (assert)
              (("2" (mult-ineq -3 -2)
                (("1" (replaces -2)
                  (("1" (split 1)
                    (("1" (grind-reals) nil nil)
                     ("2" (lemma "vieta_add")
                      (("2" (inst -1 "a" "b" "c" "eps")
                        (("2" (assert)
                          (("2" (add-formulas -3 -4)
                            (("2" (replaces -2)
                              (("2" (case "a>=0")
                                (("1" (cross-mult -2)
                                  (("1" (mult-cases 1) nil nil)) nil)
                                 ("2" (cross-mult -1)
                                  (("2" (mult-cases 2) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind-reals) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (sign_neg_clos application-judgement "Sign" sign nil)
    (roots_eq_0 formula-decl nil quadratic nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (sign_eq_neg1 formula-decl nil sign nil) (<= const-decl "bool" reals nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (sign_ab_roots_ge_0 formula-decl nil quadratic nil)
    (vieta_mult formula-decl nil quadratic nil)
    (TRUE const-decl "bool" booleans nil)
    (vieta_add formula-decl nil quadratic nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (div_mult_neg_ge1 formula-decl nil real_props nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (a skolem-const-decl "nonzero_real" quadratic nil)
    (neg_times_le formula-decl nil real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (pos_div_ge formula-decl nil real_props nil)
    (pos_times_ge formula-decl nil real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ge_times_ge_any1 formula-decl nil extra_real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (>= const-decl "bool" reals nil) (discr const-decl "real" quadratic nil)
    (root const-decl "real" quadratic nil))
   nil))
 (roots_le_0 0
  (roots_le_0-2 "" 3790088976
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (case "b=0")
          (("1" (lemma "roots_eq_0")
            (("1" (inst?)
              (("1" (assert) (("1" (flatten) (("1" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (lemma "sign_ab_roots_ge_0")
            (("2" (inst -1 "a" "b" "c" "eps")
              (("2" (assert)
                (("2" (lemma "sign_ab_roots_ge_0")
                  (("2" (inst -1 "a" "b" "c" "-eps")
                    (("2" (assert)
                      (("2" (rewrite "sign_eq_1") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (lemma "vieta_mult")
          (("2" (inst -1 "a" "b" "c" "eps")
            (("2" (assert)
              (("2" (mult-ineq -3 -2 (- -))
                (("2" (replaces -2)
                  (("2" (split)
                    (("1" (grind-reals) nil nil)
                     ("2" (lemma "vieta_add")
                      (("2" (inst -1 "a" "b" "c" "eps")
                        (("2" (assert)
                          (("2" (add-formulas -3 -4)
                            (("2" (replaces -2)
                              (("2" (case "a >=0")
                                (("1" (cross-mult -2)
                                  (("1" (mult-cases 1) nil nil)) nil)
                                 ("2" (cross-mult -1)
                                  (("2" (mult-cases 2) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (roots_le_0-1 nil 3427197432
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (case "b=0")
          (("1" (lemma "roots_eq_0")
            (("1" (inst?)
              (("1" (assert) (("1" (flatten) (("1" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (lemma "sign_ab_roots_ge_0")
            (("2" (inst -1 "a" "b" "c" "eps")
              (("2" (assert)
                (("2" (lemma "sign_ab_roots_ge_0")
                  (("2" (inst -1 "a" "b" "c" "-eps")
                    (("2" (assert)
                      (("2" (rewrite "sign_eq_1") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (lemma "vieta_mult")
          (("2" (inst -1 "a" "b" "c" "eps")
            (("2" (assert)
              (("2" (mult-ineq -3 -2 (- -))
                (("1" (replaces -2)
                  (("1" (split)
                    (("1" (grind-reals) nil nil)
                     ("2" (lemma "vieta_add")
                      (("2" (inst -1 "a" "b" "c" "eps")
                        (("2" (assert)
                          (("2" (add-formulas -3 -4)
                            (("2" (replaces -2)
                              (("2" (case "a >=0")
                                (("1" (cross-mult -2)
                                  (("1" (mult-cases 1) nil nil)) nil)
                                 ("2" (cross-mult -1)
                                  (("2" (mult-cases 2) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind-reals) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (sign_neg_clos application-judgement "Sign" sign nil)
    (roots_eq_0 formula-decl nil quadratic nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (sign_eq_1 formula-decl nil sign nil) (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sign_ab_roots_ge_0 formula-decl nil quadratic nil)
    (vieta_mult formula-decl nil quadratic nil)
    (TRUE const-decl "bool" booleans nil)
    (vieta_add formula-decl nil quadratic nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (div_mult_neg_le1 formula-decl nil real_props nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (a skolem-const-decl "nonzero_real" quadratic nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (pos_div_le formula-decl nil real_props nil)
    (pos_times_ge formula-decl nil real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (le_times_le_any1 formula-decl nil extra_real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (<= const-decl "bool" reals nil) (discr const-decl "real" quadratic nil)
    (root const-decl "real" quadratic nil))
   nil))
 (sign_ab_roots_gt_0 0
  (sign_ab_roots_gt_0-1 nil 3427197983
   ("" (skeep)
    (("" (case "b=0")
      (("1" (lemma "c_eq_0") (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
       ("2" (lemma "vieta2")
        (("2" (inst?)
          (("2" (assert)
            (("2" (case "c/a > 0")
              (("1" (replaces -2 :dir rl)
                (("1" (lemma "vieta1")
                  (("1" (inst?)
                    (("1" (assert)
                      (("1" (mult-cases -2)
                        (("1" (add-formulas -1 -2 :hide? nil)
                          (("1" (replaces -4)
                            (("1" (case-replace "-sign(a*b)=-1")
                              (("1" (typepred "eps") (("1" (assert) nil nil))
                                nil)
                               ("2" (hide-all-but (-1 1 2))
                                (("2" (case "sign(-b/a) = -1")
                                  (("1" (rewrite "sign_div")
                                    (("1" (rewrite "sign_mult")
                                      (("1"
                                        (rewrite "sign_neg")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (expand "sign" 1)
                                    (("2" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (add-formulas -1 -2 :hide? nil)
                          (("2" (replaces -4)
                            (("2" (case-replace "-sign(a*b)=1")
                              (("1" (typepred "eps") (("1" (assert) nil nil))
                                nil)
                               ("2" (hide-all-but (-1 1 2))
                                (("2" (case "sign(-b/a) = 1")
                                  (("1" (rewrite "sign_div")
                                    (("1" (rewrite "sign_mult")
                                      (("1"
                                        (rewrite "sign_neg")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (expand "sign" 1)
                                    (("2" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but (-3 1)) (("2" (grind-reals) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sign_neg_clos application-judgement "Sign" sign nil)
    (sign_nat formula-decl nil sign nil)
    (c_eq_0 formula-decl nil quadratic nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (vieta1 formula-decl nil quadratic nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sign const-decl "Sign" sign nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sign_mult formula-decl nil sign nil) (sign_neg formula-decl nil sign nil)
    (sign_mult_clos application-judgement "Sign" sign nil)
    (sign_div formula-decl nil sign nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (pos_times_gt formula-decl nil real_props nil)
    (>= const-decl "bool" reals nil) (discr const-decl "real" quadratic nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign nil) (root const-decl "real" quadratic nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (pos_div_gt formula-decl nil real_props nil)
    (vieta2 formula-decl nil quadratic nil))
   nil))
 (roots_gt_0 0
  (roots_gt_0-2 "" 3790088978
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (case "b=0")
          (("1" (lemma "c_eq_0") (("1" (inst?) (("1" (assert) nil nil)) nil))
            nil)
           ("2" (lemma "sign_ab_roots_gt_0")
            (("2" (inst-cp -1 "a" "b" "c" "eps")
              (("2" (inst -1 "a" "b" "c" "-eps")
                (("2" (assert)
                  (("2" (rewrite "sign_eq_neg1") (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (lemma "vieta_mult")
          (("2" (inst -1 "a" "b" "c" "eps")
            (("2" (assert)
              (("2" (mult-ineq -3 -2)
                (("2" (replaces -2)
                  (("2" (split)
                    (("1" (grind-reals) nil nil)
                     ("2" (lemma "vieta_add")
                      (("2" (inst -1 "a" "b" "c" "eps")
                        (("2" (assert)
                          (("2" (add-formulas -3 -4)
                            (("2" (replaces -2)
                              (("2" (case "a>0")
                                (("1" (cross-mult -2)
                                  (("1" (mult-cases 1) nil nil)) nil)
                                 ("2" (cross-mult -1)
                                  (("2" (mult-cases 2) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (roots_gt_0-1 nil 3427197508
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (case "b=0")
          (("1" (lemma "c_eq_0") (("1" (inst?) (("1" (assert) nil nil)) nil))
            nil)
           ("2" (lemma "sign_ab_roots_gt_0")
            (("2" (inst-cp -1 "a" "b" "c" "eps")
              (("2" (inst -1 "a" "b" "c" "-eps")
                (("2" (assert)
                  (("2" (rewrite "sign_eq_neg1") (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (lemma "vieta_mult")
          (("2" (inst -1 "a" "b" "c" "eps")
            (("2" (assert)
              (("2" (mult-ineq -3 -2)
                (("1" (replaces -2)
                  (("1" (split)
                    (("1" (grind-reals) nil nil)
                     ("2" (lemma "vieta_add")
                      (("2" (inst -1 "a" "b" "c" "eps")
                        (("2" (assert)
                          (("2" (add-formulas -3 -4)
                            (("2" (replaces -2)
                              (("2" (case "a>0")
                                (("1" (cross-mult -2)
                                  (("1" (mult-cases 1) nil nil)) nil)
                                 ("2" (cross-mult -1)
                                  (("2" (mult-cases 2) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind-reals) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (c_eq_0 formula-decl nil quadratic nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (sign_eq_neg1 formula-decl nil sign nil) (<= const-decl "bool" reals nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (sign_neg_clos application-judgement "Sign" sign nil)
    (sign_ab_roots_gt_0 formula-decl nil quadratic nil)
    (vieta_mult formula-decl nil quadratic nil)
    (TRUE const-decl "bool" booleans nil)
    (vieta_add formula-decl nil quadratic nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (div_mult_neg_gt1 formula-decl nil extra_real_props nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (a skolem-const-decl "nonzero_real" quadratic nil)
    (neg_times_le formula-decl nil real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (pos_div_gt formula-decl nil real_props nil)
    (pos_times_gt formula-decl nil real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (gt_times_gt_any1 formula-decl nil extra_real_props nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (> const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (discr const-decl "real" quadratic nil)
    (root const-decl "real" quadratic nil))
   nil))
 (roots_lt_0 0
  (roots_lt_0-3 "" 3790088978
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (case "b=0")
          (("1" (lemma "c_eq_0") (("1" (inst?) (("1" (assert) nil nil)) nil))
            nil)
           ("2" (lemma "sign_ab_roots_gt_0")
            (("2" (inst-cp -1 "a" "b" "c" "eps")
              (("2" (inst -1 "a" "b" "c" "-eps")
                (("2" (assert)
                  (("2" (rewrite "sign_eq_1") (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (lemma "vieta_mult")
          (("2" (inst -1 "a" "b" "c" "eps")
            (("2" (assert)
              (("2" (mult-ineq -3 -2 (- -))
                (("2" (replaces -2)
                  (("2" (split)
                    (("1" (grind-reals) nil nil)
                     ("2" (lemma "vieta_add")
                      (("2" (inst -1 "a" "b" "c" "eps")
                        (("2" (assert)
                          (("2" (add-formulas -3 -4)
                            (("2" (replaces -2)
                              (("2" (case "a>0")
                                (("1" (cross-mult -2)
                                  (("1" (mult-cases 1) nil nil)) nil)
                                 ("2" (cross-mult -1)
                                  (("2" (mult-cases 2) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (roots_lt_0-2 nil 3427306753
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (case "b=0")
          (("1" (lemma "c_eq_0") (("1" (inst?) (("1" (assert) nil nil)) nil))
            nil)
           ("2" (lemma "sign_ab_roots_gt_0")
            (("2" (inst-cp -1 "a" "b" "c" "eps")
              (("2" (inst -1 "a" "b" "c" "-eps")
                (("2" (assert)
                  (("2" (rewrite "sign_eq_1") (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (lemma "vieta_mult")
          (("2" (inst -1 "a" "b" "c" "eps")
            (("2" (assert)
              (("2" (mult-ineq -3 -2 (- -))
                (("1" (replaces -2)
                  (("1" (split)
                    (("1" (grind-reals) nil nil)
                     ("2" (lemma "vieta_add")
                      (("2" (inst -1 "a" "b" "c" "eps")
                        (("2" (assert)
                          (("2" (add-formulas -3 -4)
                            (("2" (replaces -2)
                              (("2" (case "a>0")
                                (("1" (cross-mult -2)
                                  (("1" (mult-cases 1) nil nil)) nil)
                                 ("2" (cross-mult -1)
                                  (("2" (mult-cases 2) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind-reals) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (c_eq_0 formula-decl nil quadratic nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (sign_eq_1 formula-decl nil sign nil) (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sign_neg_clos application-judgement "Sign" sign nil)
    (sign_ab_roots_gt_0 formula-decl nil quadratic nil)
    (vieta_mult formula-decl nil quadratic nil)
    (TRUE const-decl "bool" booleans nil)
    (vieta_add formula-decl nil quadratic nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (div_mult_neg_lt1 formula-decl nil real_props nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (a skolem-const-decl "nonzero_real" quadratic nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pos_times_ge formula-decl nil real_props nil)
    (> const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (pos_div_lt formula-decl nil real_props nil)
    (pos_times_gt formula-decl nil real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (lt_times_lt_any1 formula-decl nil extra_real_props nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (< const-decl "bool" reals nil) (discr const-decl "real" quadratic nil)
    (root const-decl "real" quadratic nil))
   nil)
  (roots_lt_0-1 nil 3427197482
   ("" (skeep)
    (("" (case "b=0")
      (("1" (lemma "c_eq_0") (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
       ("2" (lemma "sign_ab_roots_gt_0")
        (("2" (inst?)
          (("2" (assert)
            (("2" (rewrite "sign_eq_1") (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((sign_neg_clos application-judgement "Sign" sign nil)
    (Sign type-eq-decl nil sign nil) (sign_eq_1 formula-decl nil sign nil))
   nil))
 (root_gt_0 0
  (root_gt_0-1 nil 3427453337
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (split)
          (("1" (flatten)
            (("1" (lemma "roots_gt_0")
              (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
            nil)
           ("2" (flatten)
            (("2" (case "c=0")
              (("1" (assert)
                (("1" (lemma "roots_le_ge_0")
                  (("1" (inst?)
                    (("1" (assert)
                      (("1" (flatten)
                        (("1" (lemma "root_eq_0")
                          (("1" (inst -1 "a" "b" "c" "eps")
                            (("1" (assert)
                              (("1" (replaces -1)
                                (("1" (hide-all-but (-5 -6))
                                  (("1" (mult-cases -2)
                                    (("1" (grind) nil nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -3)
                (("2" (lemma "roots_lt_gt_0")
                  (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (lemma "roots_gt_0")
          (("2" (inst?)
            (("2" (assert)
              (("2" (replaces -1)
                (("2" (lemma "roots_le_ge_0")
                  (("2" (inst?)
                    (("2" (assert)
                      (("2" (flatten)
                        (("2" (assert)
                          (("2" (lemma "root_eq_0")
                            (("2" (inst?)
                              (("2" (assert)
                                (("2" (ground)
                                  (("2" (replaces -2)
                                    (("2" (hide-all-but (1 2 3))
                                      (("2"
                                        (mult-cases 1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((roots_gt_0 formula-decl nil quadratic nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Sign type-eq-decl nil sign nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (roots_le_ge_0 formula-decl nil quadratic nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (root_eq_0 formula-decl nil quadratic nil)
    (sign_neg_clos application-judgement "Sign" sign nil)
    (sign const-decl "Sign" sign nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (neg_times_lt formula-decl nil real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (roots_lt_gt_0 formula-decl nil quadratic nil))
   shostak))
 (root_ge_0 0
  (root_ge_0-1 nil 3427449571
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (split)
          (("1" (lemma "roots_ge_0")
            (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
           ("2" (flatten)
            (("2" (lemma "roots_le_ge_0")
              (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (case "root(a,b,c,eps) = 0")
          (("1" (hide -2)
            (("1" (lemma "root_eq_0")
              (("1" (inst?)
                (("1" (assert)
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (assert)
                        (("1" (case "b=0")
                          (("1" (assert) nil nil)
                           ("2" (replaces -2)
                            (("2" (hide -)
                              (("2" (mult-cases 2) (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (lemma "root_gt_0")
            (("2" (inst?) (("2" (assert) (("2" (ground) nil nil)) nil)) nil))
            nil)
           ("3" (propax) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (roots_ge_0 formula-decl nil quadratic nil)
    (roots_le_ge_0 formula-decl nil quadratic nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (root const-decl "real" quadratic nil)
    (discr const-decl "real" quadratic nil) (>= const-decl "bool" reals nil)
    (root_eq_0 formula-decl nil quadratic nil)
    (sign const-decl "Sign" sign nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (neg_times_le formula-decl nil real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (root_gt_0 formula-decl nil quadratic nil))
   shostak))
 (root_lt_0 0
  (root_lt_0-1 nil 3427464105
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (split)
          (("1" (flatten)
            (("1" (lemma "roots_lt_0")
              (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
            nil)
           ("2" (flatten)
            (("2" (case "c=0")
              (("1" (assert)
                (("1" (lemma "roots_le_ge_0")
                  (("1" (inst -1 "a" "b" "c" "-eps")
                    (("1" (assert)
                      (("1" (flatten)
                        (("1" (lemma "root_eq_0")
                          (("1" (inst -1 "a" "b" "c" "eps")
                            (("1" (assert)
                              (("1" (replaces -1)
                                (("1" (hide-all-but (-5 -6))
                                  (("1" (mult-cases -2)
                                    (("1" (grind) nil nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -3)
                (("2" (lemma "roots_lt_gt_0")
                  (("2" (inst -1 "a" "b" "c" "-eps") (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (lemma "roots_lt_0")
          (("2" (inst?)
            (("2" (assert)
              (("2" (replaces -1)
                (("2" (lemma "roots_le_ge_0")
                  (("2" (inst -1 "a" "b" "c" "-eps")
                    (("2" (assert)
                      (("2" (flatten)
                        (("2" (assert)
                          (("2" (lemma "root_eq_0")
                            (("2" (inst?)
                              (("2" (assert)
                                (("2" (ground)
                                  (("2" (neg-formula -2)
                                    (("2" (replaces -1)
                                      (("2"
                                        (hide-all-but (1 2 3))
                                        (("2"
                                          (mult-cases 1)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((roots_lt_0 formula-decl nil quadratic nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Sign type-eq-decl nil sign nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (roots_le_ge_0 formula-decl nil quadratic nil)
    (root_eq_0 formula-decl nil quadratic nil)
    (sign const-decl "Sign" sign nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (pos_times_gt formula-decl nil real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (sign_neg_clos application-judgement "Sign" sign nil)
    (roots_lt_gt_0 formula-decl nil quadratic nil)
    (both_sides_times1_imp formula-decl nil extra_real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers nil)
    (neg_neg formula-decl nil extra_tegies nil)
    (mult_neg formula-decl nil extra_tegies nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil))
   nil))
 (root_le_0 0
  (root_le_0-1 nil 3427463349
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (split)
          (("1" (lemma "roots_le_0")
            (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
           ("2" (flatten)
            (("2" (lemma "roots_le_ge_0")
              (("2" (inst -1 "a" "b" "c" "-eps") (("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (case "root(a,b,c,eps) = 0")
          (("1" (hide -2)
            (("1" (lemma "root_eq_0")
              (("1" (inst?)
                (("1" (assert)
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (case "b=0")
                        (("1" (assert) nil nil)
                         ("2" (assert)
                          (("2" (replaces -2)
                            (("2" (hide -)
                              (("2" (mult-cases 2) (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (lemma "root_lt_0")
            (("2" (inst?) (("2" (assert) (("2" (ground) nil nil)) nil)) nil))
            nil)
           ("3" (propax) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (roots_le_0 formula-decl nil quadratic nil)
    (roots_le_ge_0 formula-decl nil quadratic nil)
    (sign_neg_clos application-judgement "Sign" sign nil)
    (root const-decl "real" quadratic nil)
    (discr const-decl "real" quadratic nil) (>= const-decl "bool" reals nil)
    (root_eq_0 formula-decl nil quadratic nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (sign const-decl "Sign" sign nil)
    (pos_times_ge formula-decl nil real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (root_lt_0 formula-decl nil quadratic nil))
   nil))
 (quadratic_aux 0
  (quadratic_aux-1 nil 3253574939
   ("" (skolem 1 ("a" "b" "c" "x"))
    (("" (flatten)
      (("" (expand "root")
        (("" (ground)
          (("" (expand "discr")
            (("" (expand "sq") (("" (ground) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (sq const-decl "nonneg_real" sq nil)
    (discr const-decl "real" quadratic nil)
    (root const-decl "real" quadratic nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil))
   nil))
 (quadratic_eq_0 0
  (quadratic_eq_0-1 nil 3253574939
   ("" (skolem 1 ("a" "b" "c" "x"))
    (("" (case "discr(a, b, c) >= 0")
      (("1" (assert)
        (("1" (use "quadratic_aux")
          (("1" (name-replace "X1" " (x - root(a, b, c,1))" :hide? nil)
            (("1" (name-replace "X2" " (x - root(a, b, c,-1))" :hide? nil)
              (("1" (assert)
                (("1" (replace -3 :hide? t)
                  (("1" (rewrite "zero_times3")
                    (("1" (rewrite "zero_times3")
                      (("1" (replace -1 :dir rl :hide? t)
                        (("1" (replace -1 :dir rl :hide? t)
                          (("1" (prop)
                            (("1" (assert) nil nil) ("2" (assert) nil nil)
                             ("3" (assert) nil nil) ("4" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (assert) (("2" (use "discr_ge_0") (("2" (prop) nil nil)) nil))
        nil))
      nil))
    nil)
   ((discr const-decl "real" quadratic nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (quadratic_aux formula-decl nil quadratic nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (zero_times3 formula-decl nil real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (root const-decl "real" quadratic nil) (Sign type-eq-decl nil sign nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (discr_ge_0 formula-decl nil quadratic nil))
   nil))
 (solvable_quadratic 0
  (solvable_quadratic-1 nil 3253574939
   ("" (skolem 1 ("a" "b" "c"))
    (("" (prop)
      (("1" (lemma "quadratic_eq_0")
        (("1" (inst -1 "a" "b" "c" "root(a,b,c,1)")
          (("1" (inst 1 "root(a,b,c,1)") (("1" (prop) nil nil)) nil)) nil))
        nil)
       ("2" (skosimp*) (("2" (use "discr_ge_0") (("2" (prop) nil nil)) nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (c skolem-const-decl "real" quadratic nil)
    (b skolem-const-decl "real" quadratic nil)
    (a skolem-const-decl "nonzero_real" quadratic nil)
    (discr const-decl "real" quadratic nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign nil) (root const-decl "real" quadratic nil)
    (quadratic_eq_0 formula-decl nil quadratic nil)
    (discr_ge_0 formula-decl nil quadratic nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil))
 (not_solvable_quadratic 0
  (not_solvable_quadratic-1 nil 3253574939
   ("" (skosimp*)
    (("" (case "a!1 > 0")
      (("1" (use "a_gt_0_discr_ge_0") (("1" (assert) nil nil)) nil)
       ("2" (hide 3)
        (("2" (typepred "a!1")
          (("2" (use "a_lt_0_discr_ge_0") (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil) (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (a_gt_0_discr_ge_0 formula-decl nil quadratic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (a_lt_0_discr_ge_0 formula-decl nil quadratic nil))
   nil))
 (quadratic_le_0 0
  (quadratic_le_0-1 nil 3253574939
   ("" (skolem 1 ("a" "b" "c" "x"))
    (("" (case "discr(a, b, c) >= 0")
      (("1" (assert)
        (("1" (lemma "quadratic_aux")
          (("1" (inst?)
            (("1" (name-replace "X1" " (x - root(a, b, c,1))" :hide? nil)
              (("1" (name-replace "X2" " (x - root(a, b, c,-1))" :hide? nil)
                (("1" (assert)
                  (("1" (replaces -3)
                    (("1" (lemma "root_le")
                      (("1" (inst?)
                        (("1" (case "a > 0")
                          (("1" (expand "sign")
                            (("1" (assert)
                              (("1" (real-props 1) (("1" (ground) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "sign")
                            (("2" (assert)
                              (("2" (real-props 2) (("2" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (assert)
        (("2" (lemma "not_solvable_quadratic")
          (("2" (inst?)
            (("2" (assert)
              (("2" (split -1)
                (("1" (inst-cp - "x")
                  (("1" (inst - "0")
                    (("1" (rewrite "sq_0") (("1" (assert) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (inst-cp - "x")
                  (("2" (inst - "0")
                    (("2" (rewrite "sq_0") (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((discr const-decl "real" quadratic nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (quadratic_aux formula-decl nil quadratic nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign nil) (root const-decl "real" quadratic nil)
    (root_le formula-decl nil quadratic nil) (> const-decl "bool" reals nil)
    (pos_times_le formula-decl nil real_props nil)
    (neg_times_le formula-decl nil real_props nil)
    (sign const-decl "Sign" sign nil) (TRUE const-decl "bool" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (not_solvable_quadratic formula-decl nil quadratic nil)
    (sq_0 formula-decl nil sq nil))
   nil))
 (quadratic_lt_0 0
  (quadratic_lt_0-1 nil 3253574939
   ("" (skolem 1 ("a" "b" "c" "x"))
    (("" (case "discr(a,b,c) >= 0")
      (("1" (assert)
        (("1" (lemma "quadratic_aux")
          (("1" (inst?)
            (("1" (name-replace "X1" " (x - root(a, b, c,1))" :hide? nil)
              (("1" (name-replace "X2" " (x - root(a, b, c,-1))" :hide? nil)
                (("1" (assert)
                  (("1" (replaces -3)
                    (("1" (lemma "root_le")
                      (("1" (inst?)
                        (("1" (assert)
                          (("1" (case "a > 0")
                            (("1" (expand "sign")
                              (("1" (assert)
                                (("1" (real-props 1) (("1" (ground) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "sign")
                              (("2" (assert)
                                (("2" (real-props 2) (("2" (ground) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (assert)
        (("2" (lemma "not_solvable_quadratic")
          (("2" (inst?)
            (("2" (assert)
              (("2" (split -1)
                (("1" (inst-cp - "x")
                  (("1" (inst - "0")
                    (("1" (rewrite "sq_0") (("1" (assert) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (inst-cp - "x")
                  (("2" (inst - "0")
                    (("2" (rewrite "sq_0") (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((discr const-decl "real" quadratic nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (quadratic_aux formula-decl nil quadratic nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign nil) (root const-decl "real" quadratic nil)
    (root_le formula-decl nil quadratic nil) (sign const-decl "Sign" sign nil)
    (neg_times_lt formula-decl nil real_props nil)
    (pos_times_lt formula-decl nil real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (> const-decl "bool" reals nil) (TRUE const-decl "bool" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (not_solvable_quadratic formula-decl nil quadratic nil)
    (sq_0 formula-decl nil sq nil))
   nil))
 (quadratic_ge_0 0
  (quadratic_ge_0-1 nil 3253574939
   ("" (skolem 1 ("a" "b" "c" "x"))
    (("" (case "discr(a,b,c) >= 0")
      (("1" (assert)
        (("1" (lemma "quadratic_aux")
          (("1" (inst?)
            (("1" (name-replace "X1" " (x - root(a, b, c,1))" :hide? nil)
              (("1" (name-replace "X2" " (x - root(a, b, c,-1))" :hide? nil)
                (("1" (assert)
                  (("1" (replaces -3)
                    (("1" (lemma "root_le")
                      (("1" (inst?)
                        (("1" (assert)
                          (("1" (case "a > 0")
                            (("1" (expand "sign")
                              (("1" (assert)
                                (("1" (real-props 1) (("1" (ground) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "sign")
                              (("2" (assert)
                                (("2" (real-props 2) (("2" (ground) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (assert)
        (("2" (lemma "not_solvable_quadratic")
          (("2" (inst?)
            (("2" (assert)
              (("2" (split -1)
                (("1" (inst-cp - "x")
                  (("1" (inst - "0")
                    (("1" (rewrite "sq_0") (("1" (assert) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (inst-cp - "x")
                  (("2" (inst - "0")
                    (("2" (rewrite "sq_0") (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((discr const-decl "real" quadratic nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (quadratic_aux formula-decl nil quadratic nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign nil) (root const-decl "real" quadratic nil)
    (root_le formula-decl nil quadratic nil) (sign const-decl "Sign" sign nil)
    (pos_times_ge formula-decl nil real_props nil)
    (neg_times_ge formula-decl nil real_props nil)
    (> const-decl "bool" reals nil) (TRUE const-decl "bool" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (not_solvable_quadratic formula-decl nil quadratic nil)
    (sq_0 formula-decl nil sq nil))
   nil))
 (quadratic_gt_0 0
  (quadratic_gt_0-1 nil 3253574939
   ("" (skolem 1 ("a" "b" "c" "x"))
    (("" (case "discr(a,b,c) >= 0")
      (("1" (assert)
        (("1" (lemma "quadratic_aux")
          (("1" (inst?)
            (("1" (name-replace "X1" " (x - root(a, b, c,1))" :hide? nil)
              (("1" (name-replace "X2" " (x - root(a, b, c,-1))" :hide? nil)
                (("1" (assert)
                  (("1" (replaces -3)
                    (("1" (lemma "root_le")
                      (("1" (inst?)
                        (("1" (assert)
                          (("1" (case "a > 0")
                            (("1" (expand "sign")
                              (("1" (assert)
                                (("1" (real-props 1) (("1" (ground) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "sign")
                              (("2" (assert)
                                (("2" (real-props 2) (("2" (ground) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (assert)
        (("2" (lemma "not_solvable_quadratic")
          (("2" (inst?)
            (("2" (assert)
              (("2" (split -1)
                (("1" (inst-cp - "x")
                  (("1" (inst - "0")
                    (("1" (rewrite "sq_0") (("1" (assert) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (inst-cp - "x")
                  (("2" (inst - "0")
                    (("2" (rewrite "sq_0") (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((discr const-decl "real" quadratic nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (quadratic_aux formula-decl nil quadratic nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign nil) (root const-decl "real" quadratic nil)
    (root_le formula-decl nil quadratic nil) (sign const-decl "Sign" sign nil)
    (pos_times_gt formula-decl nil real_props nil)
    (neg_times_gt formula-decl nil real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (> const-decl "bool" reals nil) (TRUE const-decl "bool" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (not_solvable_quadratic formula-decl nil quadratic nil)
    (sq_0 formula-decl nil sq nil))
   nil))
 (solution_TCC1 0
  (solution_TCC1-1 nil 3322842299 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (solvable? const-decl "bool" quadratic nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (discr const-decl "real" quadratic nil)
    (sq const-decl "nonneg_real" sq nil)
    (/= const-decl "boolean" notequal nil))
   nil (solution subtype "quadratic.b" "nznum")))
 (solution_TCC2 0
  (solution_TCC2-1 nil 3322842299 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (solvable? const-decl "bool" quadratic nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign nil) (/= const-decl "boolean" notequal nil))
   nil (solution subtype "quadratic.aa" "nonzero_real")))
 (solution_TCC3 0
  (solution_TCC3-1 nil 3322842299 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (solvable? const-decl "bool" quadratic nil)
    (/= const-decl "boolean" notequal nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (sq const-decl "nonneg_real" sq nil)
    (discr const-decl "real" quadratic nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (solution subtype "quadratic.c"
    "{c: reals.real | reals.>=(quadratic.discr(quadratic.aa, quadratic.b, c), 0)}")))
 (quadratic_eq_0_full 0
  (quadratic_eq_0_full-2 "" 3790088986
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (case "aa = 0")
          (("1" (assert)
            (("1" (replaces -1)
              (("1" (expand "solvable?")
                (("1" (assert)
                  (("1" (expand "solution") (("1" (grind-reals) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (hide 2)
              (("2" (lemma "quadratic_eq_0")
                (("2" (inst?)
                  (("2" (assert)
                    (("2" (flatten)
                      (("2" (expand "solvable?")
                        (("2" (assert)
                          (("2" (flatten)
                            (("2" (assert)
                              (("2" (expand "solution")
                                (("2" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (split)
          (("1" (grind) nil nil)
           ("2" (flatten)
            (("2" (expand "solvable?")
              (("2" (split -1)
                (("1" (flatten)
                  (("1" (expand "solution") (("1" (assert) nil nil)) nil))
                  nil)
                 ("2" (flatten)
                  (("2" (lemma "quadratic_eq_0")
                    (("2" (inst?)
                      (("2" (expand "solution")
                        (("2" (assert)
                          (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (quadratic_eq_0_full-1 nil 3427564309
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (case "aa = 0")
          (("1" (assert)
            (("1" (replaces -1)
              (("1" (expand "solvable?")
                (("1" (assert)
                  (("1" (expand "solution")
                    (("1" (assert) (("1" (grind-reals) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (hide 2)
              (("2" (lemma "quadratic_eq_0")
                (("2" (inst?)
                  (("2" (assert)
                    (("2" (flatten)
                      (("2" (expand "solvable?")
                        (("2" (assert)
                          (("2" (flatten)
                            (("2" (assert)
                              (("2" (expand "solution")
                                (("2" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (split)
          (("1" (grind) nil nil)
           ("2" (flatten)
            (("2" (expand "solvable?")
              (("2" (split -1)
                (("1" (flatten)
                  (("1" (expand "solution") (("1" (assert) nil nil)) nil))
                  nil)
                 ("2" (flatten)
                  (("2" (lemma "quadratic_eq_0")
                    (("2" (inst?)
                      (("2" (expand "solution")
                        (("2" (assert)
                          (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (div_cancel4 formula-decl nil real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (solution const-decl "real" quadratic nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (solvable? const-decl "bool" quadratic nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (quadratic_eq_0 formula-decl nil quadratic nil)
    (sq const-decl "nonneg_real" sq nil))
   nil))
 (complete_square 0
  (complete_square-1 nil 3402154746
   ("" (skosimp*)
    (("" (lemma "canonical_sq")
      (("" (inst?) (("" (expand "quadratic") (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((canonical_sq formula-decl nil quadratic nil)
    (quadratic const-decl "real" quadratic nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (quad_eq_0 0
  (quad_eq_0-1 nil 3402154967
   ("" (skeep)
    (("" (expand "quadratic")
      (("" (lemma "quadratic_eq_0")
        (("" (inst?)
          (("" (ground)
            (("1" (inst 1 "1") nil nil) ("2" (inst 1 "-1") nil nil)
             ("3" (skeep -2)
              (("3" (typepred "eps") (("3" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (quadratic const-decl "real" quadratic nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (quadratic_eq_0 formula-decl nil quadratic nil))
   shostak))
 (quad_eq_0_full 0
  (quad_eq_0_full-1 nil 3402155008
   ("" (skeep)
    (("" (expand "quadratic")
      (("" (lemma "quadratic_eq_0_full")
        (("" (inst?)
          (("" (replaces -1)
            (("" (split)
              (("1" (flatten)
                (("1" (split -1)
                  (("1" (propax) nil nil)
                   ("2" (flatten)
                    (("2" (assert)
                      (("2" (split -2)
                        (("1" (inst 2 "-1") nil nil)
                         ("2" (inst 2 "1") nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (split -1)
                  (("1" (propax) nil nil)
                   ("2" (flatten)
                    (("2" (assert)
                      (("2" (skeep -2)
                        (("2" (typepred "eps") (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (quadratic const-decl "real" quadratic nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Sign type-eq-decl nil sign nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (quadratic_eq_0_full formula-decl nil quadratic nil))
   shostak))
 (quadratic_continuous 0
  (quadratic_continuous-1 nil 3672058638
   (""
    (case "FORALL (a: real):
               FORALL (x: real):
                 FORALL (epsil: posreal):
                   EXISTS (delta: posreal):
                     FORALL (y: real):
                       abs(x - y) <= delta IMPLIES
                        abs(quadratic(a, 0,0)(x) - quadratic(a, 0,0)(y)) < epsil")
    (("1"
      (case "FORALL (b: real):
                 FORALL (x: real):
                   FORALL (epsil: posreal):
                     EXISTS (delta: posreal):
                       FORALL (y: real):
                         abs(x - y) <= delta IMPLIES
                          abs(quadratic(0,b,0)(x) - quadratic(0,b,0)(y)) < epsil")
      (("1"
        (case "FORALL (c: real):
                   FORALL (x: real):
                     FORALL (epsil: posreal):
                       EXISTS (delta: posreal):
                         FORALL (y: real):
                           abs(x - y) <= delta IMPLIES
                            abs(quadratic(0,0,c)(x) - quadratic(0,0,c)(y)) < epsil")
        (("1" (skeep*)
          (("1" (insteep -)
            (("1" (insteep -)
              (("1" (insteep -2)
                (("1" (insteep -2)
                  (("1" (insteep -3)
                    (("1" (insteep -3)
                      (("1" (inst - "epsil/3")
                        (("1" (inst - "epsil/3")
                          (("1" (inst - "epsil/3")
                            (("1" (skolem - "d1")
                              (("1" (skolem - "d2")
                                (("1" (skolem - "d3")
                                  (("1" (inst + "min(d1,min(d2,d3))")
                                    (("1" (skeep*)
                                      (("1"
                                        (inst - "y")
                                        (("1"
                                          (inst - "y")
                                          (("1"
                                            (inst - "y")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide -4)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide-all-but 1)
          (("2" (skeep*) (("2" (inst + "1") (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (hide-all-but 1)
        (("2" (skeep*)
          (("2" (case "b = 0")
            (("1" (inst + "1") (("1" (grind) nil nil)) nil)
             ("2" (inst + "epsil/(2*abs(b))")
              (("1" (skosimp*)
                (("1" (expand "quadratic")
                  (("1" (cross-mult -1)
                    (("1" (lemma "abs_mult")
                      (("1" (inst - "x-y!1" "b") (("1" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (split)
                (("1" (cross-mult 1) nil nil) ("2" (cross-mult 1) nil nil))
                nil)
               ("3" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep*)
        (("2" (case "a = 0")
          (("1" (replaces -1) (("1" (inst + "1") (("1" (grind) nil nil)) nil))
            nil)
           ("2" (expand "quadratic")
            (("2" (inst + "min(1/2,epsil/(2*abs(a)*(2*abs(x)+10)))")
              (("1" (skeep*)
                (("1" (case "NOT abs(x-y)<=1/2")
                  (("1" (assert) nil nil)
                   ("2"
                    (case "NOT abs(x-y)<=epsil / (2 * abs(a) * (2*abs(x) + 10))")
                    (("1" (assert) nil nil)
                     ("2" (hide -3)
                      (("2" (cross-mult -1)
                        (("2" (case "2*abs(x)+10>=abs(x)+abs(y)")
                          (("1" (case "2*abs(x)+10>=abs(x+y)")
                            (("1" (hide -2)
                              (("1" (mult-by -1 "abs(a)")
                                (("1" (mult-by -1 "abs(x-y)")
                                  (("1" (mult-by -1 "2")
                                    (("1" (assert)
                                      (("1"
                                        (case
                                         "abs(a * sq(x) - a * sq(y)) = (abs(x - y) * abs(x + y) * abs(a))")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (lemma "abs_mult")
                                          (("2"
                                            (inst - "x-y" "x+y")
                                            (("2"
                                              (mult-by -1 "abs(a)")
                                              (("2"
                                                (replaces -1 :dir rl)
                                                (("2"
                                                  (lemma "abs_mult")
                                                  (("2"
                                                    (rewrite -1 1 :dir rl)
                                                    (("2"
                                                      (hide-all-but 1)
                                                      (("2" (grind) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but (-1 1))
                              (("2" (grind) nil nil)) nil))
                            nil)
                           ("2" (hide-all-but (-2 1)) (("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (case "FORALL (zz,yy:posreal): min(zz,yy)>0")
                (("1" (inst?)
                  (("1" (assert) nil nil)
                   ("2" (hide 2)
                    (("2" (split)
                      (("1" (cross-mult 1) nil nil)
                       ("2" (cross-mult 1) nil nil))
                      nil))
                    nil)
                   ("3" (hide 2) (("3" (assert) nil nil)) nil))
                  nil)
                 ("2" (hide 2) (("2" (grind) nil nil)) nil))
                nil)
               ("3" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (nzreal_min application-judgement "{z: nzreal | z <= x AND z <= y}"
     real_defs nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (a skolem-const-decl "real" quadratic nil)
    (x skolem-const-decl "real" quadratic nil)
    (epsil skolem-const-decl "posreal" quadratic nil)
    (both_sides_times1_imp formula-decl nil extra_real_props nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sq const-decl "nonneg_real" sq nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (posreal_min application-judgement "{z: posreal | z <= x AND z <= y}"
     real_defs nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (b skolem-const-decl "real" quadratic nil)
    (epsil skolem-const-decl "posreal" quadratic nil)
    (abs_mult formula-decl nil real_props nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (quadratic const-decl "real" quadratic nil))
   shostak)))


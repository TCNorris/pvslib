(sqrt_exists
 (epsilon_delta 0
  (epsilon_delta-1 nil 3506273122
   ("" (skosimp*)
    (("" (inst - "abs(x!1-y!1)/2")
      (("1" (assert) nil nil)
       ("2" (expand "abs") (("2" (lift-if) (("2" (ground) nil nil)) nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (y!1 skolem-const-decl "real" sqrt_exists nil)
    (x!1 skolem-const-decl "real" sqrt_exists nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (expt_0 0
  (expt_0-1 nil 3506273122 ("" (tcc) nil nil)
   ((expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (nat_expt application-judgement "nat" exponentiation nil))
   nil))
 (lt1_expt_le_TCC1 0
  (lt1_expt_le_TCC1-1 nil 3506273122 ("" (tcc :defs !) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (lt1_expt_le subtype "sqrt_exists.i"
    "{i: integers.int | booleans.OR(sqrt_exists.nnx /= 0, reals.>=(i, 0))}")))
 (lt1_expt_le 0
  (lt1_expt_le-1 nil 3506273122
   ("" (induct "i" 1 "above_induction[0]")
    (("1" (assert)
      (("1" (skosimp*)
        (("1" (expand "^")
          (("1" (expand "expt")
            (("1" (expand "expt") (("1" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (rewrite "expt_plus")
        (("1" (rewrite "expt_x1")
          (("1" (assert)
            (("1" (inst?)
              (("1" (assert)
                (("1" (lemma "le_times_le_pos")
                  (("1" (lemma "expt_pos")
                    (("1" (inst?)
                      (("1" (inst - "nnx!1^ja!1" "nnx!1" "1" "nnx!1")
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (case-replace "nnx!1 = 0")
          (("1" (rewrite "expt_0") (("1" (assert) nil nil)) nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil)
     ("3" (skosimp*) (("3" (assert) (("3" (ground) nil nil)) nil)) nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (expt_0 formula-decl nil sqrt_exists nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (le_times_le_pos formula-decl nil real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (expt_pos formula-decl nil exponentiation nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (nnreal_exp application-judgement "nnreal" exponentiation nil)
    (expt_plus formula-decl nil exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (expt def-decl "real" exponentiation nil)
    (above_induction formula-decl nil bounded_int_inductions nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (pred type-eq-decl nil defined_types nil)
    (above nonempty-type-eq-decl nil integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil) (> const-decl "bool" reals nil))
   nil))
 (sqrt_exists 0
  (sqrt_exists-2 "" 3790088565
   ("" (inst + "lambda nnx: choose({nny|nny*nny=nnx})")
    (("" (skosimp*)
      (("" (rewrite "nonempty_exists")
        (("" (lemma "real_complete")
          (("" (inst - "{nny|nny*nny<=nnx!1}")
            (("1" (prop)
              (("1" (expand "least_upper_bound?")
                (("1" (skosimp*)
                  (("1" (inst + "y!1")
                    (("1" (expand "upper_bound?")
                      (("1" (assert)
                        (("1" (inst-cp - 0)
                          (("1" (assert)
                            (("1"
                              (case "forall (e:posreal|e<y!1): abs(y!1*y!1-nnx!1)< 4 * y!1 * e")
                              (("1" (rewrite "epsilon_delta")
                                (("1" (skosimp*)
                                  (("1" (case "e!1 < (4* y!1) *y!1")
                                    (("1" (inst - "e!1/(4*y!1)")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (lemma "pos_div_gt")
                                        (("2"
                                          (inst - "4*y!1" "e!1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (rewrite "div_mult_pos_lt1")
                                              nil
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("3" (assert) nil nil))
                                      nil)
                                     ("2" (inst - "y!1/4")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (rewrite "div_mult_pos_lt1")
                                          (("2"
                                            (case "y!1=0")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (case "nnx!1<1")
                                                    (("1"
                                                      (inst - "nnx!1")
                                                      (("1" (assert) nil nil)
                                                       ("2"
                                                        (expand "extend")
                                                        (("2"
                                                          (lemma
                                                           "lt1_expt_le")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "2"
                                                             "nnx!1")
                                                            (("2"
                                                              (expand "^" -1)
                                                              (("2"
                                                                (expand
                                                                 "expt"
                                                                 -1)
                                                                (("2"
                                                                  (expand
                                                                   "expt"
                                                                   -1)
                                                                  (("2"
                                                                    (expand
                                                                     "expt"
                                                                     -1)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (inst - "1")
                                                      (("1" (assert) nil nil)
                                                       ("2"
                                                        (expand "extend")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (skosimp*)
                                (("2"
                                  (case-replace
                                   "4*y!1*e!1 = (y!1+e!1)^2 - (y!1-e!1)^2")
                                  (("1" (hide -1 2)
                                    (("1"
                                      (case
                                       "forall (x,y:real): abs(x)<y iff -y <x & x <y")
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (prop)
                                              (("1"
                                                (lemma "lt_minus_lt1")
                                                (("1"
                                                  (inst
                                                   -
                                                   "nnx!1"
                                                   "(y!1-e!1)^2"
                                                   "y!1*y!1"
                                                   "(y!1+e!1)^2")
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (hide 2)
                                                      (("1"
                                                        (case-replace
                                                         "y!1 * y!1 = y!1^2")
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (rewrite
                                                             "both_sides_expt_pos_le")
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but 1)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (inst - "e!1+y!1")
                                                      (("1" (assert) nil nil)
                                                       ("2"
                                                        (expand "extend")
                                                        (("2"
                                                          (hide -2)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (rewrite "lt_minus_lt1")
                                                (("1"
                                                  (case-replace
                                                   "y!1 * y!1 = y!1^2")
                                                  (("1"
                                                    (rewrite
                                                     "both_sides_expt_pos_le")
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2" (grind) nil nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (inst -3 "(y!1-e!1)")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (skolem-typepred)
                                                        (("2"
                                                          (expand "extend")
                                                          (("2"
                                                            (lemma
                                                             "both_sides_expt_pos_le")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "2"
                                                               "s!1"
                                                               "y!1-e!1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand "^")
                                                                  (("1"
                                                                    (expand
                                                                     "expt")
                                                                    (("1"
                                                                      (expand
                                                                       "expt")
                                                                      (("1"
                                                                        (expand
                                                                         "expt")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (ground)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -1 -2 -3 2)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide -1 -2 -3 2 3)
                                    (("2" (assert) (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "extend") (("2" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (inst + "max(nnx!1,1)")
                (("2" (expand "upper_bound?")
                  (("2" (skolem-typepred)
                    (("2" (expand "extend")
                      (("2" (expand "max")
                        (("2" (lift-if)
                          (("2" (ground)
                            (("1" (inst?)
                              (("1" (hide 1)
                                (("1" (lemma "ge_times_ge_pos")
                                  (("1" (inst -1 "1" "1" "s!1" "s!1")
                                    (("1" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "le_times_le_pos")
                              (("2" (inst - "1" "nnx!1" "nnx!1" "nnx!1")
                                (("2" (assert)
                                  (("2" (assert)
                                    (("2" (lemma "both_sides_expt_pos_le")
                                      (("2"
                                        (inst - "2" "s!1" "nnx!1")
                                        (("2"
                                          (expand "^" -1)
                                          (("2"
                                            (expand "expt")
                                            (("2"
                                              (expand "expt")
                                              (("2"
                                                (expand "expt")
                                                (("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (rewrite "nonempty_exists")
              (("2" (inst + "0")
                (("2" (expand "extend") (("2" (propax) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (sqrt_exists-1 nil 3506273122
   ("" (inst + "lambda nnx: choose({nny|nny*nny=nnx})")
    (("" (skosimp*)
      (("" (rewrite "nonempty_exists")
        (("" (lemma "real_complete")
          (("" (inst - "{nny|nny*nny<=nnx!1}")
            (("1" (prop)
              (("1" (expand "least_upper_bound?")
                (("1" (skosimp*)
                  (("1" (inst + "y!1")
                    (("1" (expand "upper_bound?")
                      (("1" (assert)
                        (("1" (inst-cp - 0)
                          (("1" (assert)
                            (("1"
                              (case "forall (e:posreal|e<y!1): abs(y!1*y!1-nnx!1)< 4 * y!1 * e")
                              (("1" (rewrite "epsilon_delta")
                                (("1" (skosimp*)
                                  (("1" (case "e!1 < (4* y!1) *y!1")
                                    (("1" (inst - "e!1/(4*y!1)")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (lemma "pos_div_gt")
                                        (("2"
                                          (inst - "4*y!1" "e!1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (rewrite "div_mult_pos_lt1")
                                                nil
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("3" (assert) nil nil))
                                      nil)
                                     ("2" (inst - "y!1/4")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (rewrite "div_mult_pos_lt1")
                                          (("2"
                                            (case "y!1=0")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (case "nnx!1<1")
                                                    (("1"
                                                      (inst - "nnx!1")
                                                      (("1" (assert) nil nil)
                                                       ("2"
                                                        (expand "extend")
                                                        (("2"
                                                          (lemma
                                                           "lt1_expt_le")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "2"
                                                             "nnx!1")
                                                            (("2"
                                                              (expand "^" -1)
                                                              (("2"
                                                                (expand
                                                                 "expt"
                                                                 -1)
                                                                (("2"
                                                                  (expand
                                                                   "expt"
                                                                   -1)
                                                                  (("2"
                                                                    (expand
                                                                     "expt"
                                                                     -1)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (inst - "1")
                                                      (("1" (assert) nil nil)
                                                       ("2"
                                                        (expand "extend")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (skosimp*)
                                (("2"
                                  (case-replace
                                   "4*y!1*e!1 = (y!1+e!1)^2 - (y!1-e!1)^2")
                                  (("1" (hide -1 2)
                                    (("1"
                                      (case
                                       "forall (x,y:real): abs(x)<y iff -y <x & x <y")
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (prop)
                                              (("1"
                                                (lemma "lt_minus_lt1")
                                                (("1"
                                                  (inst
                                                   -
                                                   "nnx!1"
                                                   "(y!1-e!1)^2"
                                                   "y!1*y!1"
                                                   "(y!1+e!1)^2")
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide 2)
                                                        (("1"
                                                          (case-replace
                                                           "y!1 * y!1 = y!1^2")
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (rewrite
                                                               "both_sides_expt_pos_le")
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but 1)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (inst - "e!1+y!1")
                                                      (("1" (assert) nil nil)
                                                       ("2"
                                                        (expand "extend")
                                                        (("2"
                                                          (hide -2)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (rewrite "lt_minus_lt1")
                                                (("1"
                                                  (case-replace
                                                   "y!1 * y!1 = y!1^2")
                                                  (("1"
                                                    (rewrite
                                                     "both_sides_expt_pos_le")
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2" (grind) nil nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (inst -3 "(y!1-e!1)")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (skolem-typepred)
                                                        (("2"
                                                          (expand "extend")
                                                          (("2"
                                                            (lemma
                                                             "both_sides_expt_pos_le")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "2"
                                                               "s!1"
                                                               "y!1-e!1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand "^")
                                                                  (("1"
                                                                    (expand
                                                                     "expt")
                                                                    (("1"
                                                                      (expand
                                                                       "expt")
                                                                      (("1"
                                                                        (expand
                                                                         "expt")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (ground)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -1 -2 -3 2)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide -1 -2 -3 2 3)
                                    (("2" (assert) (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "extend") (("2" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (inst + "max(nnx!1,1)")
                (("2" (expand "upper_bound?")
                  (("2" (skolem-typepred)
                    (("2" (expand "extend")
                      (("2" (expand "max")
                        (("2" (lift-if)
                          (("2" (ground)
                            (("1" (inst?)
                              (("1" (hide 1)
                                (("1" (lemma "ge_times_ge_pos")
                                  (("1" (inst -1 "1" "1" "s!1" "s!1")
                                    (("1" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "le_times_le_pos")
                              (("2" (inst - "1" "nnx!1" "nnx!1" "nnx!1")
                                (("2" (assert)
                                  (("2" (assert)
                                    (("2" (lemma "both_sides_expt_pos_le")
                                      (("2"
                                        (inst - "2" "s!1" "nnx!1")
                                        (("2"
                                          (expand "^" -1)
                                          (("2"
                                            (expand "expt")
                                            (("2"
                                              (expand "expt")
                                              (("2"
                                                (expand "expt")
                                                (("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (rewrite "nonempty_exists")
              (("2" (inst + "0")
                (("2" (expand "extend") (("2" (propax) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_complete formula-decl nil bounded_real_defs nil)
    (upper_bound? const-decl "bool" bounded_real_defs nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (lt1_expt_le formula-decl nil sqrt_exists nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (nnreal_expt application-judgement "nnreal" exponentiation nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (e!1 skolem-const-decl "posreal" sqrt_exists nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (pos_div_gt formula-decl nil real_props nil)
    (epsilon_delta formula-decl nil sqrt_exists nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (e!1 skolem-const-decl "{e: posreal | e < y!1}" sqrt_exists nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (both_sides_expt_pos_le formula-decl nil exponentiation nil)
    (lt_minus_lt1 formula-decl nil real_props nil)
    (s!1 skolem-const-decl
     "(extend[real, nonneg_real, bool, FALSE]({nny | nny * nny <= nnx!1}))"
     sqrt_exists nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (y!1 skolem-const-decl "real" sqrt_exists nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (least_upper_bound? const-decl "bool" bounded_real_defs nil)
    (le_times_le_pos formula-decl nil real_props nil)
    (ge_times_ge_pos formula-decl nil real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (nnx!1 skolem-const-decl "nonneg_real" sqrt_exists nil)
    (<= const-decl "bool" reals nil) (extend const-decl "R" extend nil)
    (FALSE const-decl "bool" booleans nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (choose const-decl "(p)" sets nil) (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil))
   nil)))


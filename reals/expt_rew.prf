(expt_rew
 (zero_hat 0
  (zero_hat-1 nil 3255279382 ("" (skosimp*) (("" (grind) nil nil)) nil)
   ((expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nat_exp application-judgement "nat" exponentiation nil))
   shostak))
 (mult_hat_TCC1 0
  (mult_hat_TCC1-1 nil 3255279661 ("" (skosimp*) (("" (assert) nil nil)) nil)
   nil shostak
   (mult_hat subtype "expt_rew.i"
    "{i: integers.int | booleans.OR(expt_rew.n0x /= 0, reals.>=(i, 0))}")))
 (mult_hat_TCC2 0
  (mult_hat_TCC2-1 nil 3255279661 ("" (skosimp*) (("" (assert) nil nil)) nil)
   ((nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil))
   shostak
   (mult_hat subtype "expt_rew.i"
    "{i: integers.int | booleans.OR((number_fields.*(expt_rew.n0x, expt_rew.n0y)) /= 0, reals.>=(i, 0))}")))
 (mult_hat 0
  (mult_hat-1 nil 3255279671
   ("" (skosimp*)
    (("" (lemma "mult_expt") (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((mult_expt formula-decl nil exponentiation nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (div_hat_TCC1 0
  (div_hat_TCC1-1 nil 3255279661 ("" (skosimp*) (("" (assert) nil nil)) nil)
   ((nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil))
   shostak
   (div_hat subtype "expt_rew.i"
    "{i: integers.int | booleans.OR((number_fields./(expt_rew.n0x, expt_rew.n0y)) /= 0, reals.>=(i, 0))}")))
 (div_hat 0
  (div_hat-1 nil 3255279686
   ("" (skosimp*) (("" (rewrite "div_expt") nil nil)) nil)
   ((nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (div_expt formula-decl nil exponentiation nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil))
   shostak))
 (inv_hat 0
  (inv_hat-1 nil 3255279696
   ("" (skosimp*) (("" (rewrite "inv_expt") nil nil)) nil)
   ((nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (inv_expt formula-decl nil exponentiation nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil))
   shostak)))


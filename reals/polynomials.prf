(polynomials
 (expt_plus2_TCC1 0
  (expt_plus2_TCC1-1 nil 3618056032 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (expt_plus2 subtype
    "((number_fields.+)(polynomials.i, polynomials.j))"
    "{i: integers.int | booleans.OR(polynomials.x /= 0, reals.>=(i, 0))}")))
 (expt_plus2_TCC2 0
  (expt_plus2_TCC2-1 nil 3618056032 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (expt_plus2 subtype "polynomials.i"
    "{i: integers.int | booleans.OR(polynomials.x /= 0, reals.>=(i, 0))}")))
 (expt_plus2 0
  (expt_plus2-1 nil 3618056034
   ("" (induct "i")
    (("1" (grind) nil nil)
     ("2" (skosimp*)
      (("2" (expand "^")
        (("2" (expand "expt" + 1)
          (("2" (expand "expt" + 2)
            (("2" (inst - "j!2" "x!1") (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (expt def-decl "real" exponentiation nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (polynomial_n0 0
  (polynomial_n0-1 nil 3260328144
   ("" (skolem 1 ("a"))
    (("" (expand "polynomial")
      (("" (expand "sigma")
        (("" (expand "sigma") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((polynomial const-decl "[real -> real]" polynomials nil)
    (sigma def-decl "real" sigma nil))
   shostak))
 (polynomial_x0 0
  (polynomial_x0-1 nil 3260328178
   ("" (skolem 1 ("a" "n"))
    (("" (case "n=0")
      (("1" (replace -1)
        (("1" (rewrite "polynomial_n0")
          (("1" (simplify 1) (("1" (propax) nil nil)) nil)) nil))
        nil)
       ("2" (case "n>0")
        (("1" (hide 1)
          (("1" (expand "polynomial")
            (("1"
              (lemma "sigma_first[nat]"
               ("low" "0" "high" "n" "F"
                "LAMBDA (i: nat): a(i) * (IF i = 0 THEN 1 ELSE 0 ^ i ENDIF)"))
              (("1"
                (lemma "sigma_eq[nat]"
                 ("low" "1" "high" "n" "F"
                  "LAMBDA (i: nat): a(i) * (IF i = 0 THEN 1 ELSE 0 ^ i ENDIF)"
                  "G" "LAMBDA (i:nat): 0"))
                (("1" (split -1)
                  (("1"
                    (lemma "sigma_zero[nat]" ("low" "1" "high" "n"))
                    (("1" (replace -1)
                      (("1" (simplify 1) (("1" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (hide 2 -1)
                    (("2" (skosimp*)
                      (("2" (typepred "n!1")
                        (("2" (expand "^")
                          (("2" (expand "expt")
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (polynomial_n0 formula-decl nil polynomials nil)
    (sequence type-eq-decl nil sequences nil)
    (T_low type-eq-decl nil sigma nil)
    (T_high type-eq-decl nil sigma nil)
    (<= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sigma_first formula-decl nil sigma nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sigma_nat application-judgement "nat" sigma_nat nil)
    (sigma_zero formula-decl nil sigma nil)
    (expt def-decl "real" exponentiation nil)
    (subrange type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sigma_eq formula-decl nil sigma nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (> const-decl "bool" reals nil))
   shostak))
 (polynomial_x1 0
  (polynomial_x1-1 nil 3260328670
   ("" (expand "polynomial")
    (("" (skolem 1 ("a" "n"))
      ((""
        (lemma "extensionality"
         ("f"
          "LAMBDA (i: nat): a(i) * (IF i = 0 THEN 1 ELSE 1 ^ i ENDIF)"
          "g" "a"))
        (("" (split -1)
          (("1" (replace -1) (("1" (propax) nil nil)) nil)
           ("2" (hide 2)
            (("2" (skolem 1 ("i"))
              (("2" (case "i=0")
                (("1" (assert) nil nil)
                 ("2" (assert)
                  (("2" (rewrite "expt_1i") (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((expt_1i formula-decl nil exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (extensionality formula-decl nil functions nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sequence type-eq-decl nil sequences nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (polynomial const-decl "[real -> real]" polynomials nil))
   shostak))
 (polynomial_eq_a0_plus_TCC1 0
  (polynomial_eq_a0_plus_TCC1-1 nil 3569327711
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (polynomial_eq_a0_plus subtype "(number_fields.-)(polynomials.n, 1)"
    "nat")))
 (polynomial_eq_a0_plus 0
  (polynomial_eq_a0_plus-1 nil 3569327715
   ("" (skeep)
    (("" (expand "polynomial" + 1)
      (("" (lemma "sigma_split")
        (("" (inst?)
          (("" (inst - "0")
            (("" (assert)
              (("" (replaces -1)
                ((""
                  (case "FORALL (aa,bb,cc,dd:real): aa = cc AND bb=dd IMPLIES aa+bb=cc+dd")
                  (("1" (rewrite -1)
                    (("1" (hide-all-but 1) (("1" (grind) nil nil)) nil)
                     ("2" (hide-all-but 1)
                      (("2" (expand "polynomial")
                        (("2" (rewrite "sigma_scal" :dir rl)
                          (("2" (rewrite "sigma_shift_fun_eq")
                            (("2" (hide 2)
                              (("2"
                                (skosimp*)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((polynomial const-decl "[real -> real]" polynomials nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sequence type-eq-decl nil sequences nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (<= const-decl "bool" reals nil)
    (T_high type-eq-decl nil sigma nil)
    (T_low type-eq-decl nil sigma nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sigma_scal formula-decl nil sigma nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (sigma_shift_fun_eq formula-decl nil sigma nil)
    (expt def-decl "real" exponentiation nil)
    (sigma def-decl "real" sigma nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (sigma_split formula-decl nil sigma nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil))
 (polynomial_rec 0
  (polynomial_rec-1 nil 3570368182
   ("" (skeep)
    (("" (expand "polynomial")
      (("" (expand "sigma" + 1) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((polynomial const-decl "[real -> real]" polynomials nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sigma def-decl "real" sigma nil))
   shostak))
 (extend_polynomial 0
  (extend_polynomial-1 nil 3259336754
   ("" (skolem 1 ("a" "_" "n"))
    (("" (induct "m")
      (("1" (flatten) (("1" (assert) nil nil)) nil)
       ("2" (skolem 1 ("j"))
        (("2" (flatten)
          (("2" (replace -2 -1)
            (("2" (replace -1 1)
              (("2" (hide -1)
                (("2" (expand "polynomial")
                  (("2" (expand "sigma" 1 2)
                    (("2" (inst - "1+j")
                      (("2" (replace -1 1) (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sequence type-eq-decl nil sequences nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sigma def-decl "real" sigma nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (sum_polynomial 0
  (sum_polynomial-1 nil 3259337167
   ("" (skolem 1 ("a" "b" "m" "n"))
    (("" (flatten)
      (("" (expand "max")
        (("" (case "n<m")
          (("1" (assert)
            (("1"
              (lemma "extend_polynomial" ("a" "a" "n" "n" "m" "m-n"))
              (("1" (replace -3 -1)
                (("1" (replace -1 1)
                  (("1" (simplify 1)
                    (("1" (expand "polynomial" 1)
                      (("1" (expand "+" 1)
                        (("1"
                          (lemma "extensionality"
                           ("f" "(LAMBDA (x_1: real):
              sigma(0, m,
                    LAMBDA (i: nat):
                      b(i) * (IF i = 0 THEN 1 ELSE x_1 ^ i ENDIF))
               +
               sigma(0, m,
                     LAMBDA (i: nat):
                       a(i) * (IF i = 0 THEN 1 ELSE x_1 ^ i ENDIF)))"
                            "g" "(LAMBDA (x: real):
               sigma(0, m,
                     LAMBDA (i: nat):
                       a(i) * (IF i = 0 THEN 1 ELSE x ^ i ENDIF) +
                        b(i) * (IF i = 0 THEN 1 ELSE x ^ i ENDIF)))"))
                          (("1" (split -1)
                            (("1" (propax) nil nil)
                             ("2" (hide 2)
                              (("2"
                                (skolem 1 ("x"))
                                (("2"
                                  (lemma
                                   "sigma_sum[nat]"
                                   ("low"
                                    "0"
                                    "high"
                                    "m"
                                    "F"
                                    "LAMBDA (i: nat): a(i) * (IF i = 0 THEN 1 ELSE x ^ i ENDIF)"
                                    "G"
                                    "LAMBDA (i: nat): b(i) * (IF i = 0 THEN 1 ELSE x ^ i ENDIF)"))
                                  (("2"
                                    (simplify -1)
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2"
              (lemma "extend_polynomial" ("a" "b" "n" "m" "m" "n-m"))
              (("2" (replace -3 -1)
                (("2" (replace -1 2)
                  (("2" (simplify 2)
                    (("2" (hide-all-but 2)
                      (("2" (expand "polynomial")
                        (("2" (expand "+")
                          (("2"
                            (lemma "extensionality"
                             ("f" "(LAMBDA (x_1: real):
              sigma(0, n,
                    LAMBDA (i: nat):
                      b(i) * (IF i = 0 THEN 1 ELSE x_1 ^ i ENDIF))
               +
               sigma(0, n,
                     LAMBDA (i: nat):
                       a(i) * (IF i = 0 THEN 1 ELSE x_1 ^ i ENDIF)))"
                              "g" "(LAMBDA (x: real):
               sigma(0, n,
                     LAMBDA (i: nat):
                       a(i) * (IF i = 0 THEN 1 ELSE x ^ i ENDIF) +
                        b(i) * (IF i = 0 THEN 1 ELSE x ^ i ENDIF)))"))
                            (("2" (split -1)
                              (("1" (propax) nil nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (skolem 1 ("x"))
                                  (("2"
                                    (lemma
                                     "sigma_sum[nat]"
                                     ("low"
                                      "0"
                                      "high"
                                      "n"
                                      "F"
                                      "LAMBDA (i: nat): a(i) * (IF i = 0 THEN 1 ELSE x ^ i ENDIF)"
                                      "G"
                                      "LAMBDA (i: nat): b(i) * (IF i = 0 THEN 1 ELSE x ^ i ENDIF)"))
                                    (("2"
                                      (simplify -1)
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sequence type-eq-decl nil sequences nil)
    (extend_polynomial formula-decl nil polynomials nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sigma def-decl "real" sigma nil)
    (T_high type-eq-decl nil sigma nil)
    (T_low type-eq-decl nil sigma nil) (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (extensionality formula-decl nil functions nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sigma_sum formula-decl nil sigma nil)
    (+ const-decl "[T -> real]" real_fun_ops nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil))
   shostak))
 (sum_polynomial_eq_degree 0
  (sum_polynomial_eq_degree-1 nil 3564509725
   ("" (skeep)
    (("" (expand "polynomial")
      (("" (decompose-equality)
        (("" (expand "+")
          (("" (rewrite "sigma_sum")
            (("" (rewrite "sigma_eq") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((polynomial const-decl "[real -> real]" polynomials nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sigma_eq formula-decl nil sigma nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sigma_sum formula-decl nil sigma nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (sequence type-eq-decl nil sequences nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sigma def-decl "real" sigma nil)
    (T_high type-eq-decl nil sigma nil)
    (T_low type-eq-decl nil sigma nil) (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (+ const-decl "[T -> real]" real_fun_ops nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (sum_polynomial_eq_degree_eval 0
  (sum_polynomial_eq_degree_eval-1 nil 3569164790
   ("" (skeep)
    (("" (rewrite "sum_polynomial_eq_degree" :dir rl)
      (("" (expand "+") (("" (propax) nil nil)) nil)) nil))
    nil)
   ((sum_polynomial_eq_degree formula-decl nil polynomials nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (+ const-decl "[T -> real]" real_fun_ops nil))
   shostak))
 (neg_polynomial 0
  (neg_polynomial-1 nil 3259339078
   ("" (skolem 1 ("a" "n"))
    (("" (expand "polynomial")
      (("" (expand "-")
        ((""
          (lemma "extensionality"
           ("f" "(LAMBDA (x_1: real):
         -sigma(0, n,
                LAMBDA (i: nat):
                  a(i) * (IF i = 0 THEN 1 ELSE x_1 ^ i ENDIF)))" "g"
            "(LAMBDA (x: real):
          sigma(0, n,
                LAMBDA (i: nat):
                  -a(i) * (IF i = 0 THEN 1 ELSE x ^ i ENDIF)))"))
          (("1" (split -1)
            (("1" (propax) nil nil)
             ("2" (hide 2)
              (("2" (skolem 1 ("x"))
                (("2"
                  (lemma "sigma_scal[nat]"
                   ("low" "0" "high" "n" "F"
                    "LAMBDA (i: nat): a(i) * (IF i = 0 THEN 1 ELSE x ^ i ENDIF)"
                    "a" "-1"))
                  (("2" (assert)
                    (("2" (replace -1 1 rl)
                      (("2" (assert)
                        (("2"
                          (lemma "extensionality"
                           ("f"
                            "LAMBDA (i_1: nat): -1 * (a(i_1) * (IF i_1 = 0 THEN 1 ELSE x ^ i_1 ENDIF))"
                            "g"
                            "LAMBDA (i: nat): -a(i) * (IF i = 0 THEN 1 ELSE x ^ i ENDIF)"))
                          (("2" (split -1)
                            (("1" (replace -1 1)
                              (("1" (propax) nil nil)) nil)
                             ("2" (hide -1 2)
                              (("2"
                                (skolem 1 ("i"))
                                (("2"
                                  (assert)
                                  (("2"
                                    (name-replace
                                     "X"
                                     "(IF i = 0 THEN 1 ELSE x ^ i ENDIF)")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2) (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((polynomial const-decl "[real -> real]" polynomials nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (sequence type-eq-decl nil sequences nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sigma def-decl "real" sigma nil)
    (T_high type-eq-decl nil sigma nil)
    (T_low type-eq-decl nil sigma nil) (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (extensionality formula-decl nil functions nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (sigma_scal formula-decl nil sigma nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[T -> real]" real_fun_ops nil))
   shostak))
 (diff_polynomial 0
  (diff_polynomial-1 nil 3259339692
   ("" (skolem 1 ("a" "b" "m" "n"))
    (("" (flatten)
      (("" (lemma "sum_polynomial" ("a" "a" "n" "n" "b" "-b" "m" "m"))
        (("" (replace -2 -1)
          (("" (split -1)
            (("1" (lemma "neg_polynomial" ("a" "b" "n" "m"))
              (("1" (replace -1 -2 rl)
                (("1" (assert)
                  (("1" (case "a+ -b = a-b")
                    (("1" (replace -1 -3)
                      (("1" (replace -3 1 rl)
                        (("1" (assert)
                          (("1" (name-replace "AN" "polynomial(a,n)")
                            (("1" (name-replace "BM" "polynomial(b,m)")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "-" 1)
                                  (("1"
                                    (expand "+" 1)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (hide 2)
                        (("2" (expand "+" 1)
                          (("2" (expand "-" 1) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide (-1 2))
              (("2" (skosimp*)
                (("2" (inst - "i!1")
                  (("2" (assert)
                    (("2" (name-replace "IM" "i!1+m")
                      (("2" (expand "-") (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (neg_polynomial formula-decl nil polynomials nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (- const-decl "[T -> real]" real_fun_ops nil)
    (+ const-decl "[T -> real]" real_fun_ops nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sum_polynomial formula-decl nil polynomials nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (- const-decl "[T -> real]" real_fun_ops nil))
   shostak))
 (polynomial_sub 0
  (polynomial_sub-1 nil 3569091477
   ("" (skeep)
    (("" (decompose-equality)
      (("" (expand "-")
        (("" (expand "polynomial")
          (("" (rewrite "sigma_minus") nil nil)) nil))
        nil))
      nil))
    nil)
   ((rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (- const-decl "[T -> real]" real_fun_ops nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T_low type-eq-decl nil sigma nil)
    (T_high type-eq-decl nil sigma nil)
    (<= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sigma_minus formula-decl nil sigma nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (mul_x_to_n_polynomial_TCC1 0
  (mul_x_to_n_polynomial_TCC1-1 nil 3259344411 ("" (grind) nil nil)
   ((/= const-decl "boolean" notequal nil)) shostak
   (mul_x_to_n_polynomial subtype "polynomials.pn"
    "{i: integers.int | booleans.OR(polynomials.x /= 0, reals.>=(i, 0))}")))
 (mul_x_to_n_polynomial_TCC2 0
  (mul_x_to_n_polynomial_TCC2-1 nil 3259344425 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (mul_x_to_n_polynomial subtype
    "(number_fields.-)(polynomials.i, polynomials.pn)" "nat")))
 (mul_x_to_n_polynomial 0
  (mul_x_to_n_polynomial-1 nil 3259342637
   ("" (skolem 1 ("a" "n" "pn"))
    (("" (expand "*")
      (("" (expand "polynomial")
        ((""
          (lemma "extensionality"
           ("f" "(LAMBDA (x_1: real):
               sigma(0, n,
                     LAMBDA (i: nat):
                       a(i) * (IF i = 0 THEN 1 ELSE x_1 ^ i ENDIF))
                * x_1 ^ pn)" "g" "(LAMBDA (x: real):
                sigma(0, n + pn,
                      LAMBDA (i_1: nat):
                        IF i_1 < pn THEN 0 ELSE a(i_1 - pn) ENDIF *
                         (IF i_1 = 0 THEN 1 ELSE x ^ i_1 ENDIF)))"))
          (("1" (split -1)
            (("1" (propax) nil nil)
             ("2" (hide 2)
              (("2" (skolem 1 ("x"))
                (("2"
                  (lemma "sigma_scal[nat]"
                   ("low" "0" "high" "n" "F"
                    "LAMBDA (i: nat): a(i) * (IF i = 0 THEN 1 ELSE x ^ i ENDIF)"
                    "a" "x^pn"))
                  (("2" (replace -1 1 rl)
                    (("2" (simplify 1)
                      (("2" (hide -1)
                        (("2" (lemma "sigma_split[nat]")
                          (("2"
                            (inst - "LAMBDA (i_1: nat):
                            IF i_1 < pn THEN 0 ELSE a(i_1 - pn) ENDIF *
                             (IF i_1 = 0 THEN 1 ELSE x ^ i_1 ENDIF)"
                             "n+pn" "0" "pn-1")
                            (("1" (assert)
                              (("1"
                                (assert)
                                (("1"
                                  (case
                                   "sigma(0, pn - 1,
                                     LAMBDA (i_1: nat):
                                       IF i_1 < pn THEN 0 ELSE a(i_1 - pn) ENDIF *
                                        (IF i_1 = 0 THEN 1 ELSE x ^ i_1 ENDIF)) = 0")
                                  (("1"
                                    (replace -1 -2)
                                    (("1"
                                      (replace -2 1)
                                      (("1"
                                        (hide -1 -2)
                                        (("1"
                                          (lemma
                                           "sigma_shift_T[nat]"
                                           ("low"
                                            "0"
                                            "high"
                                            "n"
                                            "z"
                                            "pn"
                                            "F"
                                            "LAMBDA (i_1: nat): IF i_1 < pn THEN 0 ELSE a(i_1 - pn) ENDIF * (IF i_1 = 0 THEN 1 ELSE x ^ i_1 ENDIF)"))
                                          (("1"
                                            (split -1)
                                            (("1"
                                              (replace -1 1)
                                              (("1"
                                                (lemma
                                                 "extensionality"
                                                 ("f"
                                                  "LAMBDA (i_1: nat):
                                      x ^ pn * (a(i_1) * (IF i_1 = 0 THEN 1 ELSE x ^ i_1 ENDIF))"
                                                  "g"
                                                  "LAMBDA (i: nat):
                                       (LAMBDA (i_1: nat):
                                          IF i_1 < pn THEN 0 ELSE a(i_1 - pn) ENDIF *
                                           (IF i_1 = 0 THEN 1 ELSE x ^ i_1 ENDIF))
                                           (i + pn)"))
                                                (("1"
                                                  (split -1)
                                                  (("1"
                                                    (replace -1 1 rl)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2 -1)
                                                    (("2"
                                                      (skolem 1 ("i"))
                                                      (("2"
                                                        (typepred "i")
                                                        (("2"
                                                          (expand
                                                           ">="
                                                           -1)
                                                          (("2"
                                                            (expand
                                                             "<="
                                                             -1)
                                                            (("2"
                                                              (split
                                                               -1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (case
                                                                   "x = 0")
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (expand
                                                                       "^"
                                                                       1)
                                                                      (("1"
                                                                        (expand
                                                                         "expt")
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (lemma
                                                                     "expt_plus"
                                                                     ("n0x"
                                                                      "x"
                                                                      "i"
                                                                      "i"
                                                                      "j"
                                                                      "pn"))
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (replace
                                                                 -1
                                                                 1
                                                                 rl)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -1 2)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide -1 2)
                                    (("2"
                                      (lemma
                                       "sigma_eq[nat]"
                                       ("low"
                                        "0"
                                        "high"
                                        "pn-1"
                                        "F"
                                        "LAMBDA (i_1: nat):
                                  IF i_1 < pn THEN 0 ELSE a(i_1 - pn) ENDIF *
                                   (IF i_1 = 0 THEN 1 ELSE x ^ i_1 ENDIF)"
                                        "G"
                                        "LAMBDA (i:nat): 0"))
                                      (("2"
                                        (split -1)
                                        (("1"
                                          (lemma
                                           "sigma_zero[nat]"
                                           ("low" "0" "high" "pn-1"))
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (skolem 1 ("j"))
                                            (("2"
                                              (assert)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (ground)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2) (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((* const-decl "[T -> real]" real_fun_ops nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (sequence type-eq-decl nil sequences nil)
    (sigma def-decl "real" sigma nil)
    (T_high type-eq-decl nil sigma nil)
    (T_low type-eq-decl nil sigma nil) (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (extensionality formula-decl nil functions nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sigma_scal formula-decl nil sigma nil)
    (sigma_split formula-decl nil sigma nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sigma_shift_T formula-decl nil sigma nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (expt def-decl "real" exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (expt_plus formula-decl nil exponentiation nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sigma_eq formula-decl nil sigma nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (sigma_zero formula-decl nil sigma nil)
    (sigma_nat application-judgement "nat" sigma_nat nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (pn skolem-const-decl "posnat" polynomials nil)
    (polynomial const-decl "[real -> real]" polynomials nil))
   shostak))
 (first_polynomial_TCC1 0
  (first_polynomial_TCC1-1 nil 3260329723 ("" (grind) nil nil) nil
   shostak
   (first_polynomial subtype "(number_fields.-)(polynomials.pn, 1)"
    "nat")))
 (first_polynomial 0
  (first_polynomial-1 nil 3260329193
   ("" (skolem 1 ("a" "_" "x"))
    (("" (induct "pn")
      (("1" (assert) nil nil) ("2" (assert) nil nil)
       ("3" (skolem 1 ("j"))
        (("3" (flatten)
          (("3" (lemma "trichotomy" ("x" "j"))
            (("3" (split -1)
              (("1" (assert)
                (("1" (expand "polynomial")
                  (("1" (expand "sigma" 1)
                    (("1" (replace -2 1)
                      (("1" (simplify 1)
                        (("1" (hide -2)
                          (("1" (case "x=0")
                            (("1" (replace -1)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "^")
                                  (("1"
                                    (expand "expt")
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2"
                              (lemma "expt_plus"
                               ("n0x" "x" "i" "1" "j" "j"))
                              (("1"
                                (rewrite "expt_x1" -1)
                                (("1"
                                  (replace -1)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (replace -1)
                (("2" (hide -3 -2) (("2" (grind) nil nil)) nil)) nil)
               ("3" (assert) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (hide 2) (("4" (grind) nil nil)) nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (pred type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sequence type-eq-decl nil sequences nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (expt_plus formula-decl nil exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (sigma def-decl "real" sigma nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (trichotomy formula-decl nil real_axioms nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   shostak))
 (scal_polynomial 0
  (scal_polynomial-1 nil 3259344618
   ("" (skolem 1 ("a" "n" "y"))
    (("" (expand "const_fun")
      (("" (expand "*")
        (("" (expand "polynomial")
          ((""
            (lemma "extensionality"
             ("f" "(LAMBDA (x_1: real):
         y *
          sigma(0, n,
                LAMBDA (i: nat):
                  a(i) * (IF i = 0 THEN 1 ELSE x_1 ^ i ENDIF)))" "g"
              "(LAMBDA (x: real):
          sigma(0, n,
                LAMBDA (i: nat):
                  a(i) * (IF i = 0 THEN 1 ELSE x ^ i ENDIF) * y))"))
            (("1" (split -1)
              (("1" (propax) nil nil)
               ("2" (hide 2)
                (("2" (skolem 1 ("x"))
                  (("2"
                    (lemma "sigma_scal[nat]"
                     ("low" "0" "high" "n" "F"
                      "LAMBDA (i: nat): a(i) * (IF i = 0 THEN 1 ELSE x ^ i ENDIF)"
                      "a" "y"))
                    (("2" (replace -1 1 rl)
                      (("2" (simplify 1)
                        (("2"
                          (lemma "extensionality"
                           ("f"
                            "LAMBDA (i_1: nat): y * (a(i_1) * (IF i_1 = 0 THEN 1 ELSE x ^ i_1 ENDIF))"
                            "g"
                            "LAMBDA (i: nat): a(i) * (IF i = 0 THEN 1 ELSE x ^ i ENDIF) * y"))
                          (("2" (split -1)
                            (("1" (replace -1 1)
                              (("1" (propax) nil nil)) nil)
                             ("2" (hide -1 2)
                              (("2"
                                (skolem 1 ("i"))
                                (("2"
                                  (assert)
                                  (("2"
                                    (name-replace
                                     "IX"
                                     "(IF i = 0 THEN 1 ELSE x ^ i ENDIF)")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((const_fun const-decl "[T -> real]" real_fun_ops nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sigma_scal formula-decl nil sigma nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (extensionality formula-decl nil functions nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (T_low type-eq-decl nil sigma nil)
    (T_high type-eq-decl nil sigma nil)
    (sigma def-decl "real" sigma nil)
    (sequence type-eq-decl nil sequences nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[T -> real]" real_fun_ops nil))
   shostak))
 (scal_polynomial2 0
  (scal_polynomial2-1 nil 3569858461
   ("" (skeep)
    (("" (expand "polynomial")
      (("" (rewrite "sigma_scal" :dir rl)
        (("" (rewrite "sigma_eq")
          (("" (hide 2)
            (("" (skosimp*)
              (("" (expand "*")
                (("" (assert)
                  (("" (lift-if) (("" (ground) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((polynomial const-decl "[real -> real]" polynomials nil)
    (* const-decl "[T -> real]" real_fun_ops nil)
    (sigma_eq formula-decl nil sigma nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T_low type-eq-decl nil sigma nil)
    (T_high type-eq-decl nil sigma nil)
    (<= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (sequence type-eq-decl nil sequences nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sigma_scal formula-decl nil sigma nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil))
   shostak))
 (even_polynomial_TCC1 0
  (even_polynomial_TCC1-1 nil 3259939434 ("" (grind) nil nil)
   ((odd? const-decl "bool" integers nil)
    (even_fs? const-decl "bool" polynomials nil)
    (/= const-decl "boolean" notequal nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   shostak
   (even_polynomial subtype "2"
    "{i: integers.int | booleans.OR(polynomials.x /= 0, reals.>=(i, 0))}")))
 (even_polynomial 0
  (even_polynomial-1 nil 3259937838
   ("" (induct "n")
    (("1" (expand "polynomial")
      (("1" (expand "sigma")
        (("1" (skosimp*)
          (("1" (expand "sigma") (("1" (propax) nil nil)) nil)) nil))
        nil))
      nil)
     ("2" (skolem 1 ("j"))
      (("2" (flatten)
        (("2" (skolem 1 ("a" "x"))
          (("2" (flatten)
            (("2" (inst - "a" "x")
              (("2" (assert)
                (("2" (expand "polynomial")
                  (("2" (expand "sigma" 1)
                    (("2" (expand "sigma" 1 1)
                      (("2" (replace -1 1 rl)
                        (("2" (assert)
                          (("2" (hide -1)
                            (("2" (expand "even_fs?")
                              (("2"
                                (inst - "1+2*j")
                                (("2"
                                  (assert)
                                  (("2"
                                    (replace -1)
                                    (("2"
                                      (simplify 1)
                                      (("2"
                                        (hide -1)
                                        (("2"
                                          (case "x=0")
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (expand "^")
                                              (("1"
                                                (expand "expt")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (lemma
                                             "expt_times"
                                             ("n0x"
                                              "x"
                                              "i"
                                              "2"
                                              "j"
                                              "1+j"))
                                            (("1"
                                              (replace -1 2)
                                              (("1" (propax) nil nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (expt def-decl "real" exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (expt_times formula-decl nil exponentiation nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (sigma def-decl "real" sigma nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (even_fs? const-decl "bool" polynomials nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sequence type-eq-decl nil sequences nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (odd_polynomial_TCC1 0
  (odd_polynomial_TCC1-1 nil 3259939435 ("" (grind) nil nil)
   ((even? const-decl "bool" integers nil)
    (odd_fs? const-decl "bool" polynomials nil)
    (/= const-decl "boolean" notequal nil))
   shostak
   (odd_polynomial subtype "2"
    "{i: integers.int | booleans.OR(polynomials.x /= 0, reals.>=(i, 0))}")))
 (odd_polynomial 0
  (odd_polynomial-1 nil 3259938817
   ("" (induct "n")
    (("1" (expand "polynomial")
      (("1" (expand "sigma")
        (("1" (expand "sigma")
          (("1" (skolem 1 ("a" "x"))
            (("1" (flatten)
              (("1" (rewrite "expt_x1")
                (("1" (expand "odd_fs?")
                  (("1" (inst - "0")
                    (("1" (assert)
                      (("1" (expand "sigma") (("1" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 ("j"))
      (("2" (flatten)
        (("2" (skolem 1 ("a" "x"))
          (("2" (flatten)
            (("2" (inst - "a" "x")
              (("2" (assert)
                (("2" (expand "polynomial")
                  (("2" (expand "sigma" 1)
                    (("2" (expand "sigma" 1 1)
                      (("2" (replace -1 1)
                        (("2" (assert)
                          (("2"
                            (name-replace "K1" "sigma(0, j,
             LAMBDA (i_1: nat):
               a(1 + 2 * i_1) * (IF i_1 = 0 THEN 1 ELSE x ^ 2 ^ i_1 ENDIF))")
                            (("2" (assert)
                              (("2"
                                (hide -1)
                                (("2"
                                  (expand "odd_fs?")
                                  (("2"
                                    (inst - "2+2*j")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (replace -1 1)
                                        (("2"
                                          (hide -1)
                                          (("2"
                                            (simplify 1)
                                            (("2"
                                              (case "x = 0")
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "^")
                                                    (("1"
                                                      (expand "expt")
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma
                                                 "expt_plus"
                                                 ("n0x"
                                                  "x"
                                                  "i"
                                                  "1"
                                                  "j"
                                                  "2+2*j"))
                                                (("1"
                                                  (expand "^" -1 2)
                                                  (("1"
                                                    (expand "expt")
                                                    (("1"
                                                      (expand "expt")
                                                      (("1"
                                                        (replace -1 2)
                                                        (("1"
                                                          (lemma
                                                           "expt_times"
                                                           ("n0x"
                                                            "x"
                                                            "i"
                                                            "2"
                                                            "j"
                                                            "1+j"))
                                                          (("1"
                                                            (replace
                                                             -1
                                                             2)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (expt_times formula-decl nil exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (expt_plus formula-decl nil exponentiation nil)
    (<= const-decl "bool" reals nil) (T_low type-eq-decl nil sigma nil)
    (T_high type-eq-decl nil sigma nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sigma_0_neg formula-decl nil sigma_nat nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (sigma def-decl "real" sigma nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (odd_fs? const-decl "bool" polynomials nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sequence type-eq-decl nil sequences nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (neg_even_polynomial 0
  (neg_even_polynomial-1 nil 3260105401
   ("" (induct "n")
    (("1" (skosimp*)
      (("1" (expand "polynomial")
        (("1" (expand "sigma")
          (("1" (expand "sigma") (("1" (propax) nil nil)) nil)) nil))
        nil))
      nil)
     ("2" (skolem 1 ("j"))
      (("2" (flatten)
        (("2" (skolem 1 ("a" "x"))
          (("2" (flatten)
            (("2" (inst - "a" "x")
              (("2" (assert)
                (("2" (expand "even_fs?")
                  (("2" (expand "polynomial")
                    (("2" (expand "sigma" 1)
                      (("2" (replace -1 1)
                        (("2" (simplify 1)
                          (("2" (hide -1)
                            (("2" (case "even?(1+j)")
                              (("1"
                                (hide -2)
                                (("1"
                                  (expand "even?")
                                  (("1"
                                    (skosimp*)
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (case "x=0")
                                          (("1"
                                            (replace -1)
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (lemma
                                             "expt_times"
                                             ("n0x"
                                              "x"
                                              "i"
                                              "2"
                                              "j"
                                              "j!1"))
                                            (("2"
                                              (replace -1)
                                              (("2"
                                                (lemma
                                                 "expt_times"
                                                 ("n0x"
                                                  "-x"
                                                  "i"
                                                  "2"
                                                  "j"
                                                  "j!1"))
                                                (("2"
                                                  (case
                                                   "(-x) ^ 2 = x^2")
                                                  (("1"
                                                    (replace -1 -2)
                                                    (("1"
                                                      (replace -2)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 3 -1 -2)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (rewrite "even_or_odd" 1)
                                (("2"
                                  (inst - "1+j")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even? const-decl "bool" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (expt_times formula-decl nil exponentiation nil)
    (even_or_odd formula-decl nil naturalnumbers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (sigma def-decl "real" sigma nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (even_fs? const-decl "bool" polynomials nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sequence type-eq-decl nil sequences nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (abs_polynomial_le 0
  (abs_polynomial_le-1 nil 3260109882
   ("" (skolem 1 ("a" "_" "x"))
    (("" (induct "n")
      (("1" (expand "polynomial")
        (("1" (expand "sigma")
          (("1" (assert)
            (("1" (expand "sigma") (("1" (assert) nil nil)) nil)) nil))
          nil))
        nil)
       ("2" (skolem 1 ("j"))
        (("2" (flatten)
          (("2" (expand "polynomial")
            (("2" (expand "sigma" 1)
              (("2"
                (lemma "triangle"
                 ("x"
                  "sigma(0, j, LAMBDA (i: nat): a(i) * (IF i = 0 THEN 1 ELSE x ^ i ENDIF))"
                  "y" "a(1 + j) * x ^ (1 + j)"))
                (("2" (assert)
                  (("2"
                    (name-replace "S1" "sigma(0, j,
             LAMBDA (i_1: nat):
               abs(a(i_1)) * (IF i_1 = 0 THEN 1 ELSE abs(x) ^ i_1 ENDIF))")
                    (("2"
                      (name-replace "S2" "sigma(0, j,
                LAMBDA (i: nat): a(i) * (IF i = 0 THEN 1 ELSE x ^ i ENDIF))")
                      (("2" (rewrite "abs_mult" -1)
                        (("2" (assert)
                          (("2" (name-replace "K1" "a(1 + j)")
                            (("2"
                              (case "FORALL (pn:posnat): abs(x)^pn = abs(x^pn)")
                              (("1"
                                (inst - "1+j")
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (hide-all-but 1)
                                (("2"
                                  (induct "pn")
                                  (("1" (assert) nil nil)
                                   ("2" (assert) nil nil)
                                   ("3"
                                    (skolem 1 ("k"))
                                    (("3"
                                      (flatten)
                                      (("3"
                                        (case "k=0")
                                        (("1"
                                          (replace -1)
                                          (("1" (grind) nil nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (case "x=0")
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (expand "^")
                                                (("1"
                                                  (expand "expt")
                                                  (("1"
                                                    (expand "abs" 2)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma
                                               "expt_plus"
                                               ("n0x"
                                                "x"
                                                "i"
                                                "1"
                                                "j"
                                                "k"))
                                              (("1"
                                                (expand "^" -1 2)
                                                (("1"
                                                  (lemma
                                                   "expt_plus"
                                                   ("n0x"
                                                    "abs(x)"
                                                    "i"
                                                    "1"
                                                    "j"
                                                    "k"))
                                                  (("1"
                                                    (expand "^" -1 2)
                                                    (("1"
                                                      (expand "expt")
                                                      (("1"
                                                        (expand "expt")
                                                        (("1"
                                                          (replace
                                                           -1
                                                           3)
                                                          (("1"
                                                            (replace
                                                             -2
                                                             3)
                                                            (("1"
                                                              (rewrite
                                                               "abs_mult"
                                                               3)
                                                              (("1"
                                                                (replace
                                                                 -3
                                                                 3)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand "abs")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (hide
                                                         -1
                                                         -2
                                                         -3
                                                         3
                                                         4)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (<= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (sequence type-eq-decl nil sequences nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sigma def-decl "real" sigma nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sigma_0_neg formula-decl nil sigma_nat nil)
    (nnreal_exp application-judgement "nnreal" exponentiation nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (expt_plus formula-decl nil exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (abs_mult formula-decl nil real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (T_high type-eq-decl nil sigma nil)
    (T_low type-eq-decl nil sigma nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (triangle formula-decl nil real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (nn_le_polynomial 0
  (nn_le_polynomial-1 nil 3260362185
   ("" (skolem 1 ("a" "b" "m" "n" "x"))
    (("" (flatten)
      (("" (expand ">=")
        (("" (expand "<=" -3)
          (("" (split -3)
            (("1" (expand "polynomial")
              (("1"
                (lemma "sigma_le[nat]"
                 ("low" "0" "high" "n" "F"
                  "LAMBDA (i: nat): a(i) * (IF i = 0 THEN 1 ELSE x ^ i ENDIF)"
                  "G"
                  "LAMBDA (i: nat): b(i) * (IF i = 0 THEN 1 ELSE x ^ i ENDIF)"))
                (("1" (split -1)
                  (("1" (expand "<=" -5)
                    (("1" (split -5)
                      (("1" (lemma "sigma_split[nat]")
                        (("1"
                          (inst -
                           "LAMBDA (i: nat): b(i) * (IF i = 0 THEN 1 ELSE x ^ i ENDIF)"
                           "m" "0" "n")
                          (("1" (assert)
                            (("1"
                              (lemma "sigma_ge_0[nat]"
                               ("low"
                                "n+1"
                                "high"
                                "m"
                                "F"
                                "LAMBDA (i: nat): b(i) * (IF i = 0 THEN 1 ELSE x ^ i ENDIF)"))
                              (("1"
                                (split -1)
                                (("1" (assert) nil nil)
                                 ("2"
                                  (hide -1 -3 2)
                                  (("2"
                                    (skosimp*)
                                    (("2"
                                      (inst - "n!1")
                                      (("2"
                                        (inst - "n!1")
                                        (("2"
                                          (lemma
                                           "expt_pos"
                                           ("px" "x" "i" "n!1"))
                                          (("2"
                                            (lemma
                                             "both_sides_times_pos_ge1"
                                             ("x"
                                              "b(n!1)"
                                              "y"
                                              "0"
                                              "pz"
                                              "IF n!1 = 0 THEN 1 ELSE x ^ n!1 ENDIF"))
                                            (("1" (assert) nil nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (skosimp*)
                      (("2" (inst -3 "n!1")
                        (("2" (typepred "n!1")
                          (("2" (expand "<=" -1)
                            (("2" (split -1)
                              (("1"
                                (lemma "expt_pos" ("px" "x" "i" "n!1"))
                                (("1"
                                  (assert)
                                  (("1"
                                    (lemma
                                     "both_sides_times_pos_le1"
                                     ("x"
                                      "a(n!1)"
                                      "y"
                                      "b(n!1)"
                                      "pz"
                                      "x^n!1"))
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil)
                               ("2"
                                (replace -1)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (replace -1 * rl)
              (("2" (rewrite "polynomial_x0")
                (("2" (rewrite "polynomial_x0")
                  (("2" (inst -3 "0") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((<= const-decl "bool" reals nil)
    (polynomial_x0 formula-decl nil polynomials nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (sigma_ge_0 formula-decl nil sigma nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (subrange type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (expt_pos formula-decl nil exponentiation nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (sigma_split formula-decl nil sigma nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sigma_le formula-decl nil sigma nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sequence type-eq-decl nil sequences nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (T_high type-eq-decl nil sigma nil)
    (T_low type-eq-decl nil sigma nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil))
   shostak))
 (power_fs_TCC1 0
  (power_fs_TCC1-1 nil 3259937348
   ("" (grind) (("" (typepred "n!1") (("" (postpone) nil nil)) nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak
   (power_fs subtype "polynomials.i"
    "{i: naturalnumbers.nat | reals.<=(i, polynomials.n)}")))
 (power_polynomial_TCC1 0
  (power_polynomial_TCC1-1 nil 3259937348 ("" (grind) nil nil)
   ((/= const-decl "boolean" notequal nil)) shostak
   (power_polynomial subtype "polynomials.pn"
    "{i: integers.int | booleans.OR(((number_fields.+)(1, polynomials.x)) /= 0, reals.>=(i, 0))}")))
 (power_polynomial 0
  (power_polynomial-1 nil 3259930377
   ("" (induct "pn")
    (("1" (assert) nil nil) ("2" (assert) nil nil)
     ("3" (skolem 1 ("j"))
      (("3" (flatten)
        (("3" (case "j=0")
          (("1" (replace -1)
            (("1" (hide -2 -3)
              (("1" (expand "polynomial")
                (("1" (expand "sigma")
                  (("1" (expand "sigma")
                    (("1" (expand "power_fs")
                      (("1" (rewrite "C_0")
                        (("1" (rewrite "C_1")
                          (("1" (expand "^")
                            (("1" (expand "expt")
                              (("1"
                                (expand "expt")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "sigma")
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (case "j>0")
            (("1" (hide -3 1)
              (("1" (assert)
                (("1"
                  (lemma "extensionality_postulate"
                   ("f" "(LAMBDA (x: real): (1 + x) ^ j)" "g"
                    "polynomial(power_fs(j), j)"))
                  (("1" (replace -1 -3 rl)
                    (("1"
                      (lemma "extensionality_postulate"
                       ("f" "(LAMBDA (x: real): (1 + x) ^ (1+j))" "g"
                        "polynomial(power_fs(1+j), 1+j)"))
                      (("1" (replace -1 1 rl)
                        (("1" (hide -1 -2)
                          (("1" (skolem 1 ("x"))
                            (("1" (inst - "x")
                              (("1"
                                (lemma
                                 "mul_x_to_n_polynomial"
                                 ("a" "power_fs(j)" "n" "j" "pn" "1"))
                                (("1"
                                  (lemma
                                   "sum_polynomial"
                                   ("a"
                                    "power_fs(j)"
                                    "n"
                                    "j"
                                    "b"
                                    "LAMBDA (i: nat): IF i < 1 THEN 0 ELSE power_fs(j)(i - 1) ENDIF"
                                    "m"
                                    "j + 1"))
                                  (("1"
                                    (split -1)
                                    (("1"
                                      (expand "max" -1)
                                      (("1"
                                        (lemma
                                         "extensionality"
                                         ("f"
                                          "power_fs(j) + (LAMBDA (i: nat): IF i < 1 THEN 0 ELSE power_fs(j)(i - 1) ENDIF)"
                                          "g"
                                          "power_fs(1 + j)"))
                                        (("1"
                                          (split -1)
                                          (("1"
                                            (replace -1 -2)
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (replace -2 -1 rl)
                                                (("1"
                                                  (hide -2)
                                                  (("1"
                                                    (replace -1 1 rl)
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (expand "+" 1)
                                                        (("1"
                                                          (expand "*")
                                                          (("1"
                                                            (replace
                                                             -2
                                                             1
                                                             rl)
                                                            (("1"
                                                              (expand
                                                               "^"
                                                               1)
                                                              (("1"
                                                                (expand
                                                                 "expt"
                                                                 1
                                                                 1)
                                                                (("1"
                                                                  (expand
                                                                   "expt"
                                                                   1
                                                                   3)
                                                                  (("1"
                                                                    (expand
                                                                     "expt"
                                                                     1
                                                                     3)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (-3 1))
                                            (("2"
                                              (skolem 1 ("i"))
                                              (("2"
                                                (expand "+")
                                                (("2"
                                                  (expand "power_fs")
                                                  (("2"
                                                    (case "i=0")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (rewrite
                                                           "C_0")
                                                          (("1"
                                                            (rewrite
                                                             "C_0")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case "i<=j")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lemma
                                                           "C_n_plus_1"
                                                           ("n"
                                                            "j"
                                                            "k"
                                                            "i"))
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (case
                                                         "i = j+1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (rewrite
                                                               "C_n")
                                                              (("1"
                                                                (rewrite
                                                                 "C_n")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (-2 1))
                                      (("2"
                                        (expand "power_fs")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (hide-all-but (-2 1))
                                      (("3"
                                        (expand "power_fs")
                                        (("3" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma def-decl "real" sigma nil)
    (C_1 formula-decl nil binomial nil)
    (expt def-decl "real" exponentiation nil)
    (sigma_0_neg formula-decl nil sigma_nat nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (C_0 formula-decl nil binomial nil)
    (extensionality_postulate formula-decl nil functions nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (sum_polynomial formula-decl nil polynomials nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (< const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (* const-decl "[T -> real]" real_fun_ops nil)
    (<= const-decl "bool" reals nil)
    (C_n_plus_1 formula-decl nil binomial nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (C_n formula-decl nil binomial nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (+ const-decl "[T -> real]" real_fun_ops nil)
    (extensionality formula-decl nil functions nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (mul_x_to_n_polynomial formula-decl nil polynomials nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (power_fs const-decl "[nat -> nat]" polynomials nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (sequence type-eq-decl nil sequences nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (neg_power_polynomial_TCC1 0
  (neg_power_polynomial_TCC1-1 nil 3260943070 ("" (grind) nil nil)
   ((/= const-decl "boolean" notequal nil)) shostak
   (neg_power_polynomial subtype "polynomials.pn"
    "{i: integers.int | booleans.OR(((number_fields.-)(1, polynomials.x)) /= 0, reals.>=(i, 0))}")))
 (neg_power_polynomial 0
  (neg_power_polynomial-1 nil 3260943086
   ("" (skolem 1 ("pn"))
    ((""
      (lemma "extensionality"
       ("f" "(LAMBDA (x: real): (1 - x) ^ pn)" "g"
        "polynomial(neg_power_fs(pn), pn)"))
      (("" (split -1)
        (("1" (propax) nil nil)
         ("2" (hide 2)
          (("2" (skolem 1 ("x"))
            (("2" (lemma "power_polynomial" ("pn" "pn"))
              (("2"
                (lemma "extensionality_postulate"
                 ("f" "(LAMBDA (x: real): (1 + x) ^ pn)" "g"
                  "polynomial(power_fs(pn), pn)"))
                (("2" (replace -1 -2 rl)
                  (("2" (hide -1)
                    (("2" (inst - "-x")
                      (("2" (replace -1 1)
                        (("2" (hide -1)
                          (("2" (expand "polynomial")
                            (("2"
                              (lemma "extensionality"
                               ("f"
                                "LAMBDA (i: nat): power_fs(pn)(i) * (IF i = 0 THEN 1 ELSE (-x) ^ i ENDIF)"
                                "g"
                                "LAMBDA (i: nat): neg_power_fs(pn)(i) * (IF i = 0 THEN 1 ELSE x ^ i ENDIF)"))
                              (("2"
                                (split -1)
                                (("1"
                                  (replace -1)
                                  (("1" (propax) nil nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (skolem 1 ("k"))
                                    (("2"
                                      (expand "power_fs")
                                      (("2"
                                        (expand "neg_power_fs")
                                        (("2"
                                          (case "k=0")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (expand "^")
                                                (("1"
                                                  (expand "expt")
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (case "k>pn")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (expand "^")
                                                (("2"
                                                  (lemma
                                                   "expt_of_mult"
                                                   ("x"
                                                    "-1"
                                                    "y"
                                                    "x"
                                                    "n"
                                                    "k"))
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (neg_power_fs const-decl "[nat -> int]" polynomials nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (>= const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (extensionality formula-decl nil functions nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (power_polynomial formula-decl nil polynomials nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (expt def-decl "real" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (expt_of_mult formula-decl nil exponentiation nil)
    (int_expt application-judgement "int" exponentiation nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (power_fs const-decl "[nat -> nat]" polynomials nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (extensionality_postulate formula-decl nil functions nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (binomial_theorem_TCC1 0
  (binomial_theorem_TCC1-1 nil 3479215827 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (binomial_theorem subtype "polynomials.n"
    "{i: integers.int | booleans.OR(((number_fields.+)(polynomials.x, polynomials.y)) /= 0, reals.>=(i, 0))}")))
 (binomial_theorem_TCC2 0
  (binomial_theorem_TCC2-1 nil 3479215827 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (binomial_theorem subtype
    "((number_fields.-)(polynomials.n, polynomials.i))"
    "{i: integers.int | booleans.OR(polynomials.y /= 0, reals.>=(i, 0))}")))
 (binomial_theorem 0
  (binomial_theorem-1 nil 3479215827
   ("" (skeep)
    (("" (case "y /= 0")
      (("1" (flatten)
        (("1" (case "n > 0")
          (("1" (lemma "power_polynomial")
            (("1" (inst - "n")
              (("1" (decompose-equality)
                (("1" (inst - "x/y")
                  (("1" (lemma "expt_of_mult")
                    (("1" (inst - "n" "(1+x/y)" "y")
                      (("1" (case "expt((1+x/y)*y,n) = (x+y)^n")
                        (("1" (replace -1)
                          (("1" (hide -1)
                            (("1" (expand "^" -2)
                              (("1"
                                (replace -2)
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (hide -1)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (expand "polynomial")
                                        (("1"
                                          (lemma "sigma_scal")
                                          (("1"
                                            (inst
                                             -
                                             "LAMBDA (i: nat):
              power_fs(n)(i) * (IF i = 0 THEN 1 ELSE (x / y) ^ i ENDIF)"
                                             "expt(y,n)"
                                             "n"
                                             "0")
                                            (("1"
                                              (replace -1 :dir rl)
                                              (("1"
                                                (hide -1)
                                                (("1"
                                                  (rewrite
                                                   "sigma_restrict_eq")
                                                  (("1"
                                                    (hide 3)
                                                    (("1"
                                                      (decompose-equality)
                                                      (("1"
                                                        (expand
                                                         "restrict")
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (ground)
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "^")
                                                                  (("1"
                                                                    (expand
                                                                     "expt"
                                                                     1
                                                                     2)
                                                                    (("1"
                                                                      (expand
                                                                       "power_fs")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "^")
                                                              (("2"
                                                                (lemma
                                                                 "expt_of_div")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "x!1"
                                                                   "y"
                                                                   "x")
                                                                  (("2"
                                                                    (replace
                                                                     -1)
                                                                    (("2"
                                                                      (hide
                                                                       -1)
                                                                      (("2"
                                                                        (lemma
                                                                         "expt_div")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "n"
                                                                           "x!1"
                                                                           "y")
                                                                          (("2"
                                                                            (expand
                                                                             "^")
                                                                            (("2"
                                                                              (replace
                                                                               -1
                                                                               :dir
                                                                               rl)
                                                                              (("2"
                                                                                (hide
                                                                                 -1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "power_fs")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skeep)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (skeep)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (skeep) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "^") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (case "n = 0")
            (("1" (replace -1)
              (("1" (expand "^")
                (("1" (expand "expt" 3 1)
                  (("1" (expand "sigma")
                    (("1" (assert)
                      (("1" (expand "expt")
                        (("1" (expand "C") (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (replace -1)
          (("2" (hide -1)
            (("2" (assert)
              (("2" (lemma "sigma_split")
                (("2"
                  (inst - "LAMBDA (i: nat):
               IF i > n THEN 0 ELSE C(n, i) * 0 ^ (n - i) * x ^ i ENDIF"
                   "n" "0" "n-1")
                  (("1" (assert)
                    (("1" (replace -1)
                      (("1" (hide -1)
                        (("1" (lemma "sigma_zero")
                          (("1" (inst - "n-1" "0")
                            (("1" (lemma "sigma_restrict_eq")
                              (("1"
                                (inst
                                 -
                                 "LAMBDA (i: nat):
               IF i > n THEN 0 ELSE C(n, i) * 0 ^ (n - i) * x ^ i ENDIF"
                                 "LAMBDA (i: nat): 0"
                                 "n-1"
                                 "0")
                                (("1"
                                  (split -1)
                                  (("1"
                                    (replace -2)
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (expand "sigma" +)
                                        (("1"
                                          (expand "sigma" +)
                                          (("1"
                                            (expand "^" +)
                                            (("1"
                                              (expand "expt" 1 2)
                                              (("1"
                                                (expand "C" +)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (hide -1)
                                      (("2"
                                        (decompose-equality)
                                        (("1"
                                          (expand "restrict")
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (ground)
                                              (("1"
                                                (expand "^")
                                                (("1"
                                                  (expand "expt")
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skeep)
                                          (("2" (assert) nil nil))
                                          nil)
                                         ("3"
                                          (skeep)
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skeep)
                                  (("2" (assert) nil nil))
                                  nil)
                                 ("3"
                                  (skeep)
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skeep) (("2" (assert) nil nil)) nil)
                   ("3" (skeep) (("3" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (/= const-decl "boolean" notequal nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (n skolem-const-decl "nat" polynomials nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (y skolem-const-decl "real" polynomials nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (sigma_scal formula-decl nil sigma nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (C const-decl "posnat" binomial nil)
    (sigma_restrict_eq formula-decl nil sigma nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (restrict const-decl "[T -> real]" sigma nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (expt_div formula-decl nil exponentiation nil)
    (expt_of_div formula-decl nil exponentiation nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (<= const-decl "bool" reals nil)
    (T_high type-eq-decl nil sigma nil)
    (T_low type-eq-decl nil sigma nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (expt def-decl "real" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (expt_of_mult formula-decl nil exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (power_fs const-decl "[nat -> nat]" polynomials nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (sequence type-eq-decl nil sequences nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (power_polynomial formula-decl nil polynomials nil)
    (sigma_0_neg formula-decl nil sigma_nat nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (factorial_0 formula-decl nil factorial "ints/")
    (sigma def-decl "real" sigma nil)
    (sigma_zero formula-decl nil sigma nil)
    (sigma_nat application-judgement "nat" sigma_nat nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (sigma_split formula-decl nil sigma nil))
   shostak))
 (power_linear_polynomial_TCC1 0
  (power_linear_polynomial_TCC1-1 nil 3569252336
   ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (power_linear_polynomial subtype "polynomials.n"
    "{i: integers.int | booleans.OR(((number_fields.+)(polynomials.c, number_fields.*(polynomials.r, polynomials.x))) /= 0, reals.>=(i, 0))}")))
 (power_linear_polynomial 0
  (power_linear_polynomial-1 nil 3569252338
   ("" (skeep)
    (("" (lemma "binomial_theorem")
      (("" (inst - "n" "r*x" "c")
        (("" (assert)
          (("" (replaces -1)
            (("" (expand "polynomial")
              (("" (lemma "sigma_split")
                (("" (invoke (name "iggypop" "%1") (! 1 1))
                  (("1" (label "iggypopname" -1)
                    (("1" (replace "iggypopname")
                      (("1" (hide "iggypopname")
                        (("1" (inst?)
                          (("1" (inst - "n")
                            (("1" (assert)
                              (("1"
                                (invoke (case "NOT %1 = 0") (! -1 2 2))
                                (("1"
                                  (hide-all-but 1)
                                  (("1"
                                    (rewrite "sigma_restrict_eq_0")
                                    (("1"
                                      (hide 2)
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (expand "power_linear")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (replaces -1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (replaces -1)
                                      (("2"
                                        (expand "iggypop")
                                        (("2"
                                          (rewrite "sigma_eq")
                                          (("1"
                                            (hide 2)
                                            (("1"
                                              (skosimp*)
                                              (("1"
                                                (rewrite "mult_expt")
                                                (("1"
                                                  (expand
                                                   "power_linear")
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (ground)
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (expand "^")
                                                          (("1"
                                                            (expand
                                                             "expt")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (replaces -1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (ground)
                                                          (("1"
                                                            (expand
                                                             "^")
                                                            (("1"
                                                              (expand
                                                               "expt")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (ground)
                                                                    (("1"
                                                                      (expand
                                                                       "power_linear")
                                                                      (("1"
                                                                        (replaces
                                                                         -2)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (replaces
                                                                             -1)
                                                                            (("1"
                                                                              (expand
                                                                               "^")
                                                                              (("1"
                                                                                (expand
                                                                                 "expt")
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "power_linear")
                                                                      (("2"
                                                                        (replaces
                                                                         -1)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (typepred
                                                                             "n")
                                                                            (("2"
                                                                              (expand
                                                                               "^")
                                                                              (("2"
                                                                                (expand
                                                                                 "expt"
                                                                                 +
                                                                                 2)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "expt"
                                                                                     +
                                                                                     3)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "^")
                                                            (("2"
                                                              (expand
                                                               "expt")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (lift-if)
                                                                  (("2"
                                                                    (ground)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (flatten)
                                                  (("3"
                                                    (replaces -1)
                                                    (("3"
                                                      (assert)
                                                      (("3"
                                                        (lift-if)
                                                        (("3"
                                                          (ground)
                                                          (("1"
                                                            (replaces
                                                             -1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "power_linear")
                                                                (("1"
                                                                  (expand
                                                                   "^")
                                                                  (("1"
                                                                    (expand
                                                                     "expt")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "^")
                                                            (("2"
                                                              (expand
                                                               "expt")
                                                              (("2"
                                                                (lift-if)
                                                                (("2"
                                                                  (ground)
                                                                  (("1"
                                                                    (expand
                                                                     "power_linear")
                                                                    (("1"
                                                                      (expand
                                                                       "^")
                                                                      (("1"
                                                                        (expand
                                                                         "expt")
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "power_linear")
                                                                    (("2"
                                                                      (expand
                                                                       "^")
                                                                      (("2"
                                                                        (expand
                                                                         "expt")
                                                                        (("2"
                                                                          (lift-if)
                                                                          (("2"
                                                                            (ground)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2" (grind) nil nil))
                                            nil)
                                           ("3"
                                            (hide 2)
                                            (("3" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)
                   ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((binomial_theorem formula-decl nil polynomials nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (T_low type-eq-decl nil sigma nil)
    (T_high type-eq-decl nil sigma nil)
    (sigma def-decl "real" sigma nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (C const-decl "posnat" binomial nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (power_linear const-decl "real" polynomials nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (sigma_eq formula-decl nil sigma nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (expt def-decl "real" exponentiation nil)
    (mult_expt formula-decl nil exponentiation nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subrange type-eq-decl nil integers nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (iggypop skolem-const-decl "real" polynomials nil)
    (sigma_restrict_eq_0 formula-decl nil sigma nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sigma_split formula-decl nil sigma nil)
    (TRUE const-decl "bool" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (polynomial_prod_TCC1 0
  (polynomial_prod_TCC1-1 nil 3569159746 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (polynomial_prod subtype
    "real_defs.max((number_fields.-)(polynomials.i, polynomials.m), 0)"
    "T_low[nat]")))
 (polynomial_prod_TCC2 0
  (polynomial_prod_TCC2-1 nil 3569159746 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (polynomial_prod subtype
    "(number_fields.-)(polynomials.i, polynomials.k)" "nat")))
 (polynomial_prod_def 0
  (polynomial_prod_def-1 nil 3569159747
   ("" (lemma "sigma_product")
    (("" (skeep)
      (("" (expand "polynomial" + (1 2))
        (("" (rewrite -1)
          (("" (hide -1)
            (("" (expand "polynomial")
              (("" (rewrite "sigma_eq")
                (("1" (hide 2)
                  (("1" (skosimp*)
                    (("1" (lemma "sigma_split")
                      (("1" (inst?)
                        (("1" (inst - "max(n!1 - m, 0)-1")
                          (("1" (assert)
                            (("1" (split -)
                              (("1"
                                (replaces -1)
                                (("1"
                                  (invoke
                                   (case "NOT %1 = 0")
                                   (! 1 1 1))
                                  (("1"
                                    (hide 2)
                                    (("1"
                                      (rewrite "sigma_restrict_eq_0")
                                      (("1"
                                        (hide 2)
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (typepred "i!1")
                                            (("1"
                                              (expand "max")
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (ground)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2" (grind) nil nil))
                                        nil)
                                       ("3"
                                        (hide 2)
                                        (("3" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (replaces -1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "polynomial_prod")
                                        (("2"
                                          (rewrite
                                           "sigma_scal_right"
                                           :dir
                                           rl)
                                          (("1"
                                            (rewrite "sigma_eq")
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (lift-if)
                                                            (("1"
                                                              (lift-if)
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (lift-if)
                                                                    (("1"
                                                                      (lift-if)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (lift-if)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (ground)
                                                                              (("1"
                                                                                (lemma
                                                                                 "expt_plus")
                                                                                (("1"
                                                                                  (inst
                                                                                   -
                                                                                   "n!1-n!2"
                                                                                   "n!2"
                                                                                   "x")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (replaces
                                                                                         -1)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "^")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "expt")
                                                                                              (("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2" (grind) nil nil))
                                              nil)
                                             ("3"
                                              (hide 2)
                                              (("3" (grind) nil nil))
                                              nil)
                                             ("4"
                                              (hide 2)
                                              (("4" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (hide 2)
                                    (("3" (grind) nil nil))
                                    nil)
                                   ("4"
                                    (hide 2)
                                    (("4" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2" (grind) nil nil))
                                nil)
                               ("3"
                                (hide 2)
                                (("3" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2) (("2" (grind) nil nil)) nil)
                         ("3" (hide 2) (("3" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2) (("2" (grind) nil nil)) nil)
                 ("3" (hide 2) (("3" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sequence type-eq-decl nil sequences nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (sigma_split formula-decl nil sigma nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (sigma_restrict_eq_0 formula-decl nil sigma nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sigma_scal_right formula-decl nil sigma nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (expt_plus formula-decl nil exponentiation nil)
    (TRUE const-decl "bool" booleans nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (x skolem-const-decl "real" polynomials nil)
    (n!1 skolem-const-decl "subrange(0, m + n)" polynomials nil)
    (subrange type-eq-decl nil integers nil)
    (n skolem-const-decl "nat" polynomials nil)
    (m skolem-const-decl "nat" polynomials nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (polynomial_prod const-decl "real" polynomials nil)
    (> const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil) (sigma def-decl "real" sigma nil)
    (T_high type-eq-decl nil sigma nil)
    (T_low type-eq-decl nil sigma nil) (<= const-decl "bool" reals nil)
    (sigma_eq formula-decl nil sigma nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (sigma_product formula-decl nil sigma_nat nil))
   shostak))
 (poly_shift_TCC1 0
  (poly_shift_TCC1-1 nil 3485508358 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (poly_shift subtype "polynomials.j"
    "{i_1: naturalnumbers.nat | reals.<=(i_1, polynomials.i)}")))
 (poly_shift_TCC2 0
  (poly_shift_TCC2-1 nil 3485508358 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (poly_shift subtype
    "((number_fields.-)(polynomials.i, polynomials.j))"
    "{i: integers.int | booleans.OR(polynomials.c /= 0, reals.>=(i, 0))}")))
 (poly_shift_id 0
  (poly_shift_id-1 nil 3485508358
   ("" (skeep)
    (("" (expand "polynomial")
      (("" (expand "poly_shift")
        ((""
          (case "NOT ((LAMBDA (i: nat):
                                   a(i) * (IF i = 0 THEN 1 ELSE (c + x) ^ i ENDIF)) = (LAMBDA (i: nat):
                                   a(i) * (c+x)^i))")
          (("1" (hide 2)
            (("1" (decompose-equality 1)
              (("1" (lift-if)
                (("1" (ground)
                  (("1" (replace -1)
                    (("1" (expand "^")
                      (("1" (expand "expt") (("1" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (replace -1)
            (("2" (hide -1)
              (("2"
                (case "NOT ((LAMBDA (i: nat):
                                 sigma(i, n,
                                       LAMBDA (i_1: nat):
                                         IF (i_1 < i OR i_1 > n) THEN 0
                                         ELSE a(i_1) * C(i_1,i) * c ^ (i_1 - i)
                                         ENDIF)
                                  * (IF i = 0 THEN 1 ELSE x ^ i ENDIF)) = (LAMBDA (i: nat):
                                 sigma(i, n,
                                       LAMBDA (i_1: nat):
                                         IF (i_1 < i OR i_1 > n) THEN 0
                                         ELSE a(i_1) * C(i_1,i) * c ^ (i_1 - i)
                                         ENDIF)
                                  * x^i))")
                (("1" (hide-all-but 1)
                  (("1" (decompose-equality 1)
                    (("1" (lift-if)
                      (("1" (ground)
                        (("1" (replace -1)
                          (("1" (expand "^")
                            (("1" (expand "expt" 1 3)
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skosimp*) (("2" (assert) nil nil)) nil)
                     ("3" (skosimp*) (("3" (assert) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (replace -1)
                  (("2" (hide -)
                    (("2"
                      (case "NOT ((LAMBDA (i: nat):
                sigma(i, n,
                      LAMBDA (i_1: nat):
                        IF (i_1 < i OR i_1 > n) THEN 0
                        ELSE a(i_1) * C(i_1, i) * c ^ (i_1 - i)
                        ENDIF)
                 * x ^ i) = (LAMBDA (j: nat):
                sigma(j, n,
                      LAMBDA (i: nat):
                        IF (i < j OR i > n) THEN 0
                        ELSE a(i) * C(i, j) * c ^ (i - j)
                        ENDIF)
                 * x ^ j))")
                      (("1" (propax) nil nil)
                       ("2" (replace -1)
                        (("2" (hide -1)
                          (("2"
                            (name "F"
                                  "LAMBDA (j,i:nat): IF (i < j OR i > n) THEN 0
                        ELSE a(i) * C(i, j) * c ^ (i - j) * x^j
                        ENDIF")
                            (("2"
                              (case "NOT ((LAMBDA (j: nat):
                sigma(j, n,
                      LAMBDA (i: nat):
                        IF (i < j OR i > n) THEN 0
                        ELSE a(i) * C(i, j) * c ^ (i - j)
                        ENDIF)
                 * x ^ j) = (LAMBDA (j: nat):
                sigma(j, n,
                      LAMBDA (i: nat):
                        F(j,i))))")
                              (("1"
                                (hide 2)
                                (("1"
                                  (decompose-equality 1)
                                  (("1"
                                    (lemma "sigma_restrict_eq")
                                    (("1"
                                      (lemma "sigma_scal")
                                      (("1"
                                        (inst
                                         -
                                         "LAMBDA (i: nat):
              IF (i < x!1 OR i > n) THEN 0
              ELSE a(i) * C(i, x!1) * c ^ (i - x!1)
              ENDIF"
                                         "x^x!1"
                                         "n"
                                         "x!1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -1 :dir rl)
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide 2)
                                                    (("1"
                                                      (decompose-equality
                                                       1)
                                                      (("1"
                                                        (expand
                                                         "restrict")
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (ground)
                                                            (("1"
                                                              (expand
                                                               "F"
                                                               3)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skosimp*)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (skosimp*)
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skosimp*)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (skosimp*)
                                                  (("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skosimp*)
                                          (("2" (assert) nil nil))
                                          nil)
                                         ("3"
                                          (skosimp*)
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skosimp*)
                                    (("2" (assert) nil nil))
                                    nil)
                                   ("3"
                                    (skosimp*)
                                    (("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (replace -1)
                                (("2"
                                  (hide -1)
                                  (("2"
                                    (lemma "sigma_swap_triangle")
                                    (("2"
                                      (inst - "F" "n" "n" "0")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (replace -1)
                                          (("2"
                                            (hide -1)
                                            (("2"
                                              (lemma
                                               "sigma_restrict_eq")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide 2)
                                                    (("2"
                                                      (decompose-equality
                                                       1)
                                                      (("2"
                                                        (expand
                                                         "restrict")
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (ground)
                                                            (("2"
                                                              (expand
                                                               "F"
                                                               2)
                                                              (("2"
                                                                (lemma
                                                                 "binomial_theorem")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "x!1"
                                                                   "x"
                                                                   "c")
                                                                  (("2"
                                                                    (replace
                                                                     -1
                                                                     +)
                                                                    (("2"
                                                                      (hide
                                                                       -1)
                                                                      (("2"
                                                                        (lemma
                                                                         "sigma_scal")
                                                                        (("2"
                                                                          (inst?)
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             :dir
                                                                             rl)
                                                                            (("1"
                                                                              (hide
                                                                               -1)
                                                                              (("1"
                                                                                (lemma
                                                                                 "sigma_restrict_eq")
                                                                                (("1"
                                                                                  (inst?)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (hide
                                                                                       3)
                                                                                      (("1"
                                                                                        (decompose-equality
                                                                                         1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "restrict")
                                                                                          (("1"
                                                                                            (lift-if)
                                                                                            (("1"
                                                                                              (ground)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (skosimp*)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (skosimp*)
                                                                                          (("3"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("4"
                                                                                          (skosimp*)
                                                                                          (("4"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("5"
                                                                                          (skosimp*)
                                                                                          (("5"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (skosimp*)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (skosimp*)
                                                                                    (("3"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("4"
                                                                                    (skosimp*)
                                                                                    (("4"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("5"
                                                                                    (skosimp*)
                                                                                    (("5"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (skosimp*)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (skosimp*)
                                                                            (("3"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (skosimp*) (("3" (assert) nil nil)) nil)
                 ("4" (skosimp*) (("4" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((polynomial const-decl "[real -> real]" polynomials nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (sequence type-eq-decl nil sequences nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (expt def-decl "real" exponentiation nil)
    (sigma_scal formula-decl nil sigma nil)
    (restrict const-decl "[T -> real]" sigma nil)
    (F skolem-const-decl "[[nat, nat] -> real]" polynomials nil)
    (x!1 skolem-const-decl "nat" polynomials nil)
    (sigma_restrict_eq formula-decl nil sigma nil)
    (x!1 skolem-const-decl "nat" polynomials nil)
    (binomial_theorem formula-decl nil polynomials nil)
    (sigma_swap_triangle formula-decl nil sigma_swap nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (c skolem-const-decl "real" polynomials nil)
    (n skolem-const-decl "nat" polynomials nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (<= const-decl "bool" reals nil) (T_low type-eq-decl nil sigma nil)
    (T_high type-eq-decl nil sigma nil)
    (sigma def-decl "real" sigma nil) (< const-decl "bool" reals nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (C const-decl "posnat" binomial nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (poly_shift const-decl "sequence[real]" polynomials nil))
   shostak))
 (poly_scal_def 0
  (poly_scal_def-1 nil 3541261933
   ("" (skeep)
    (("" (expand "poly_scal")
      (("" (expand "polynomial")
        (("" (rewrite "sigma_eq")
          (("" (hide 2)
            (("" (skosimp*)
              (("" (lift-if)
                (("" (ground)
                  (("1" (replace -1) (("1" (grind) nil nil)) nil)
                   ("2" (lemma "mult_expt")
                    (("2" (inst - "n!1" "c" "x")
                      (("1" (assert) nil nil)
                       ("2" (flatten)
                        (("2" (replace -1)
                          (("2" (assert)
                            (("2" (case "0^n!1 = 0")
                              (("1" (assert) nil nil)
                               ("2"
                                (hide-all-but (1 2))
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (flatten)
                        (("3" (replace -1)
                          (("3" (assert)
                            (("3" (case "0^n!1 = 0")
                              (("1" (assert) nil nil)
                               ("2"
                                (hide-all-but (1 2))
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((poly_scal const-decl "sequence[real]" polynomials nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sigma_eq formula-decl nil sigma nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sequence type-eq-decl nil sequences nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (<= const-decl "bool" reals nil)
    (T_high type-eq-decl nil sigma nil)
    (T_low type-eq-decl nil sigma nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (expt def-decl "real" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (c skolem-const-decl "real" polynomials nil)
    (x skolem-const-decl "real" polynomials nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (subrange type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (mult_expt formula-decl nil exponentiation nil)
    (polynomial const-decl "[real -> real]" polynomials nil))
   shostak))
 (poly_eq_le_degree 0
  (poly_eq_le_degree-1 nil 3564744170
   ("" (skeep)
    (("" (expand "polynomial")
      (("" (rewrite "sigma_eq")
        (("" (hide 2)
          (("" (skosimp*)
            (("" (assert)
              (("" (inst - "n!1")
                (("" (assert)
                  (("" (replace -1) (("" (propax) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((polynomial const-decl "[real -> real]" polynomials nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subrange type-eq-decl nil integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T_low type-eq-decl nil sigma nil)
    (T_high type-eq-decl nil sigma nil)
    (<= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (sequence type-eq-decl nil sequences nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sigma_eq formula-decl nil sigma nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil))
   shostak))
 (poly_reduce_degree 0
  (poly_reduce_degree-1 nil 3612873815
   ("" (skeep)
    (("" (expand "polynomial")
      (("" (lemma "sigma_split")
        (("" (inst?)
          (("" (inst - "m")
            (("" (assert)
              (("" (replaces -1)
                (("" (assert)
                  (("" (rewrite "sigma_restrict_eq_0")
                    (("" (hide 2)
                      (("" (skosimp*)
                        (("" (inst - "i!1") (("" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((polynomial const-decl "[real -> real]" polynomials nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sequence type-eq-decl nil sequences nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (<= const-decl "bool" reals nil)
    (T_high type-eq-decl nil sigma nil)
    (T_low type-eq-decl nil sigma nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (subrange type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sigma_restrict_eq_0 formula-decl nil sigma nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (sigma_split formula-decl nil sigma nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   shostak))
 (poly_eq 0
  (poly_eq-1 nil 3612873901
   ("" (skeep)
    (("" (case "n >= m")
      (("1" (lemma "poly_reduce_degree")
        (("1" (inst - "a" "m" "n" "x")
          (("1" (assert)
            (("1" (split -)
              (("1" (replaces -1)
                (("1" (rewrite "poly_eq_le_degree" 1)
                  (("1" (skosimp*)
                    (("1" (inst -4 "ii!1")
                      (("1" (assert)
                        (("1" (expand "min")
                          (("1" (assert)
                            (("1" (lift-if) (("1" (ground) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep)
                (("2" (inst - "ii")
                  (("2" (split -)
                    (("1" (assert) nil nil)
                     ("2" (expand "min")
                      (("2" (lift-if) (("2" (ground) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma "poly_reduce_degree")
        (("2" (inst - "b" "n" "m" "x")
          (("2" (assert)
            (("2" (split -)
              (("1" (replaces -1)
                (("1" (rewrite "poly_eq_le_degree" 2)
                  (("1" (skosimp*)
                    (("1" (inst -3 "ii!1")
                      (("1" (assert)
                        (("1" (expand "min" +) (("1" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep)
                (("2" (inst - "ii")
                  (("2" (split -)
                    (("1" (assert) nil nil)
                     ("2" (expand "min" 1) (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sequence type-eq-decl nil sequences nil)
    (poly_eq_le_degree formula-decl nil polynomials nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (TRUE const-decl "bool" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (poly_reduce_degree formula-decl nil polynomials nil))
   shostak))
 (prop_extends_monomial 0
  (prop_extends_monomial-1 nil 3564416599
   ("" (skoletin 1)
    (("" (skeep)
      ((""
        (case "FORALL (kk:nat): FORALL (a): eventzero(a) AND (FORALL (mm:nat):mm>kk IMPLIES a(mm) = 0) IMPLIES P(a)")
        (("1" (skeep)
          (("1" (expand "eventzero" -4)
            (("1" (skosimp*)
              (("1" (inst - "kk!1")
                (("1" (inst - "a")
                  (("1" (assert)
                    (("1" (replace -3)
                      (("1" (expand "eventzero" 1)
                        (("1" (inst + "kk!1") nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (induct "kk")
            (("1" (skeep)
              (("1" (assert)
                (("1" (inst -3 "0" "a(0)")
                  (("1" (invoke (case "NOT (%1) = a") (! -3 1))
                    (("1" (decompose-equality)
                      (("1" (lift-if)
                        (("1" (ground)
                          (("1" (inst - "x!1") (("1" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (skeep)
                (("2"
                  (name "alow"
                        "LAMBDA (ii:nat): IF ii<=j THEN a(ii) ELSE 0 ENDIF")
                  (("2"
                    (name "ahigh"
                          "LAMBDA (ii:nat): IF ii = 1+j THEN a(1+j) ELSE 0 ENDIF")
                    (("2" (inst -7 "alow" "ahigh")
                      (("2" (case "alow + ahigh = a")
                        (("1" (replace -1)
                          (("1" (assert)
                            (("1" (split +)
                              (("1"
                                (inst - "alow")
                                (("1"
                                  (assert)
                                  (("1"
                                    (invoke (case "%1") (! 2 2))
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (expand "eventzero" +)
                                          (("1" (inst + "j") nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 3)
                                      (("2"
                                        (skosimp*)
                                        (("2"
                                          (inst - "mm!1")
                                          (("2"
                                            (case "NOT mm!1 = 1+j")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "alow" +)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (replace -1)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "alow" +)
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "ahigh" +)
                                (("2"
                                  (inst -7 "1+j" "a(1+j)")
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (decompose-equality +)
                            (("2" (case "x!1 > 1+j")
                              (("1"
                                (inst -6 "x!1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (replace -6)
                                    (("1"
                                      (expand "+" +)
                                      (("1"
                                        (expand "ahigh")
                                        (("1"
                                          (expand "alow")
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide -)
                                (("2"
                                  (expand "ahigh")
                                  (("2"
                                    (expand "alow")
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((<= const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (alow skolem-const-decl "[nat -> real]" polynomials nil)
    (ahigh skolem-const-decl "[nat -> real]" polynomials nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (eventzero skolem-const-decl "[sequence[real] -> boolean]"
     polynomials nil)
    (+ const-decl "[T -> real]" real_fun_ops nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (poly_translate_TCC1 0
  (poly_translate_TCC1-1 nil 3495365915 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (poly_translate subtype "polynomials.j"
    "{i: integers.int | booleans.OR(((number_fields.-)(polynomials.B, polynomials.A)) /= 0, reals.>=(i, 0))}")))
 (poly_translate_id_TCC1 0
  (poly_translate_id_TCC1-1 nil 3495365915 ("" (subtype-tcc) nil nil)
   nil nil
   (poly_translate_id subtype
    "((number_fields.-)(polynomials.B, polynomials.A))" "nznum")))
 (poly_translate_id 0
  (poly_translate_id-1 nil 3495365915
   (""
    (case "FORALL (A, B: real, a: sequence[real], n: nat, x: real):
               A /= B IMPLIES
                polynomial(a, n)((B-A)*x+A) =
                 polynomial(poly_translate(a, n)(A, B), n)(x)")
    (("1" (skeep)
      (("1" (name "xx" "(x - A) / (B - A)")
        (("1" (case "(B-A)*xx+A = x")
          (("1" (inst - "A" "B" "a" "n" "xx")
            (("1" (assert)
              (("1" (replace -1)
                (("1" (replace -2 :dir rl) (("1" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide-all-but (1 2))
            (("2" (expand "xx") (("2" (field) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep)
        (("2" (lemma "poly_shift_id")
          (("2" (inst - "a" "A" "n" "(B-A)*x")
            (("2" (replace -1)
              (("2" (hide -1)
                (("2" (expand "poly_shift")
                  (("2" (expand "poly_translate")
                    (("2" (expand "polynomial")
                      (("2" (rewrite "sigma_restrict_eq")
                        (("1" (hide 3)
                          (("1" (decompose-equality)
                            (("1" (expand "restrict")
                              (("1"
                                (lift-if)
                                (("1"
                                  (split)
                                  (("1" (propax) nil nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (split)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (expand "^")
                                            (("1"
                                              (expand "expt")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (case
                                           "(B-A)^x!1*x^x!1 = (B * x - A * x) ^ x!1")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (hide 3)
                                            (("2"
                                              (lemma "mult_expt")
                                              (("2"
                                                (inst
                                                 -
                                                 "x!1"
                                                 "B-A"
                                                 "x")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (replace -1)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand "^")
                                                          (("2"
                                                            (expand
                                                             "expt")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skosimp*) (("2" (assert) nil nil))
                              nil)
                             ("3" (skosimp*) (("3" (assert) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skosimp*) (("2" (assert) nil nil)) nil)
                         ("3" (skosimp*) (("3" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((poly_shift_id formula-decl nil polynomials nil)
    (poly_shift const-decl "sequence[real]" polynomials nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (expt def-decl "real" exponentiation nil)
    (mult_expt formula-decl nil exponentiation nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (x skolem-const-decl "real" polynomials nil)
    (restrict const-decl "[T -> real]" sigma nil)
    (A skolem-const-decl "real" polynomials nil)
    (n skolem-const-decl "nat" polynomials nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (^ const-decl "real" exponentiation nil)
    (C const-decl "posnat" binomial nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (sigma def-decl "real" sigma nil)
    (T_high type-eq-decl nil sigma nil)
    (T_low type-eq-decl nil sigma nil) (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (sigma_restrict_eq formula-decl nil sigma nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (xx skolem-const-decl "real" polynomials nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (poly_translate const-decl "sequence[real]" polynomials nil))
   shostak))
 (polynomial_zero_factor 0
  (polynomial_zero_factor-1 nil 3482760205
   ("" (skeep)
    (("" (lemma "poly_shift_id")
      (("" (inst - "a" "y" "pn" "0")
        (("" (replace -1)
          (("" (name "bb" "poly_shift(a,pn)(y)")
            (("" (replace -1)
              (("" (case "bb(0) = 0")
                (("1" (name "rr" "(LAMBDA (i:nat): bb(i+1))")
                  (("1" (name "PG" "poly_shift(rr,pn-1)(-y)")
                    (("1" (inst + "PG")
                      (("1" (skosimp*)
                        (("1" (lemma "poly_shift_id")
                          (("1" (inst - "a" "y" "pn" "x!1-y")
                            (("1" (replace -1)
                              (("1"
                                (hide -1)
                                (("1"
                                  (name "K1" "x!1-y")
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (expand "PG" 1)
                                      (("1"
                                        (lemma "poly_shift_id")
                                        (("1"
                                          (inst
                                           -
                                           "rr"
                                           "-y"
                                           "pn-1"
                                           "x!1")
                                          (("1"
                                            (replace -1 :dir rl)
                                            (("1"
                                              (replace -2)
                                              (("1"
                                                (expand "polynomial" 1)
                                                (("1"
                                                  (lemma "sigma_split")
                                                  (("1"
                                                    (inst
                                                     -
                                                     "LAMBDA (i: nat):
                                poly_shift(a, pn)(y)(i) * (IF i = 0 THEN 1 ELSE K1 ^ i ENDIF)"
                                                     "pn"
                                                     "0"
                                                     "0")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (expand
                                                             "sigma"
                                                             1
                                                             1)
                                                            (("1"
                                                              (expand
                                                               "sigma"
                                                               1
                                                               1)
                                                              (("1"
                                                                (case
                                                                 "poly_shift(a,pn)(y)(0) = 0")
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (lemma
                                                                       "sigma_scal")
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           :dir
                                                                           rl)
                                                                          (("1"
                                                                            (hide
                                                                             -1)
                                                                            (("1"
                                                                              (lemma
                                                                               "sigma_shift_T2")
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "LAMBDA (i_1: nat):
                                   K1 * (rr(i_1) * (IF i_1 = 0 THEN 1 ELSE K1 ^ i_1 ENDIF))"
                                                                                 "pn"
                                                                                 "1"
                                                                                 "-1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("1"
                                                                                        (hide
                                                                                         -1)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "sigma_restrict_eq")
                                                                                          (("1"
                                                                                            (inst?)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 2)
                                                                                                (("1"
                                                                                                  (decompose-equality
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "restrict")
                                                                                                    (("1"
                                                                                                      (lift-if)
                                                                                                      (("1"
                                                                                                        (ground)
                                                                                                        (("1"
                                                                                                          (lift-if)
                                                                                                          (("1"
                                                                                                            (ground)
                                                                                                            (("1"
                                                                                                              (case
                                                                                                               "x!2 = 1")
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "rr"
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "bb"
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "^"
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "expt"
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "expt"
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (expand
                                                                                                               "rr"
                                                                                                               +)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "bb"
                                                                                                                 +)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "^"
                                                                                                                   +)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "expt"
                                                                                                                     2
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (skosimp*)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (skosimp*)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (hide 2)
                    (("2" (lemma "polynomial_x0")
                      (("2" (inst - "bb" "pn") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((poly_shift_id formula-decl nil polynomials nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (polynomial_x0 formula-decl nil polynomials nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (PG skolem-const-decl "sequence[real]" polynomials nil)
    (sigma_split formula-decl nil sigma nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sigma_scal formula-decl nil sigma nil)
    (sigma_shift_T2 formula-decl nil sigma nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (sigma_restrict_eq formula-decl nil sigma nil)
    (restrict const-decl "[T -> real]" sigma nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (bb skolem-const-decl "sequence[real]" polynomials nil)
    (expt def-decl "real" exponentiation nil)
    (rr skolem-const-decl "[nat -> real]" polynomials nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (K1 skolem-const-decl "real" polynomials nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sigma def-decl "real" sigma nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (<= const-decl "bool" reals nil)
    (T_high type-eq-decl nil sigma nil)
    (T_low type-eq-decl nil sigma nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (poly_shift const-decl "sequence[real]" polynomials nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (polynomial_zero_factor2 0
  (polynomial_zero_factor2-1 nil 3616846107
   ("" (skeep)
    (("" (lemma "poly_shift_id")
      (("" (inst - "a" "y" "pn" "0")
        (("" (replace -1)
          (("" (name "bb" "poly_shift(a,pn)(y)")
            (("" (replace -1)
              (("" (case "bb(0) = 0")
                (("1" (name "rr" "(LAMBDA (i:nat): bb(i+1))")
                  (("1" (name "PG" "poly_shift(rr,pn-1)(-y)")
                    (("1" (skoletin 1)
                      (("1" (case "NOT g = PG")
                        (("1" (assert) nil nil)
                         ("2" (replaces -1)
                          (("2" (hide -1)
                            (("2" (skosimp*)
                              (("2"
                                (lemma "poly_shift_id")
                                (("2"
                                  (inst - "a" "y" "pn" "x!1-y")
                                  (("2"
                                    (replace -1)
                                    (("2"
                                      (hide -1)
                                      (("2"
                                        (name "K1" "x!1-y")
                                        (("2"
                                          (replace -1)
                                          (("2"
                                            (expand "PG" 1)
                                            (("2"
                                              (lemma "poly_shift_id")
                                              (("2"
                                                (inst
                                                 -
                                                 "rr"
                                                 "-y"
                                                 "pn-1"
                                                 "x!1")
                                                (("2"
                                                  (replace -1 :dir rl)
                                                  (("2"
                                                    (replace -2)
                                                    (("2"
                                                      (expand
                                                       "polynomial"
                                                       1)
                                                      (("2"
                                                        (lemma
                                                         "sigma_split")
                                                        (("2"
                                                          (inst
                                                           -
                                                           "LAMBDA (i: nat):
                                        poly_shift(a, pn)(y)(i) * (IF i = 0 THEN 1 ELSE K1 ^ i ENDIF)"
                                                           "pn"
                                                           "0"
                                                           "0")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (replace
                                                               -1)
                                                              (("2"
                                                                (hide
                                                                 -1)
                                                                (("2"
                                                                  (expand
                                                                   "sigma"
                                                                   1
                                                                   1)
                                                                  (("2"
                                                                    (expand
                                                                     "sigma"
                                                                     1
                                                                     1)
                                                                    (("2"
                                                                      (case
                                                                       "poly_shift(a,pn)(y)(0) = 0")
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (lemma
                                                                             "sigma_scal")
                                                                            (("1"
                                                                              (inst?)
                                                                              (("1"
                                                                                (replace
                                                                                 -1
                                                                                 :dir
                                                                                 rl)
                                                                                (("1"
                                                                                  (hide
                                                                                   -1)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "sigma_shift_T2")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "LAMBDA (i_1: nat):
                                               K1 * (rr(i_1) * (IF i_1 = 0 THEN 1 ELSE K1 ^ i_1 ENDIF))"
                                                                                       "pn"
                                                                                       "1"
                                                                                       "-1")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -1)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "sigma_restrict_eq")
                                                                                                (("1"
                                                                                                  (inst?)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       2)
                                                                                                      (("1"
                                                                                                        (decompose-equality
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "restrict")
                                                                                                          (("1"
                                                                                                            (lift-if)
                                                                                                            (("1"
                                                                                                              (ground)
                                                                                                              (("1"
                                                                                                                (lift-if)
                                                                                                                (("1"
                                                                                                                  (ground)
                                                                                                                  (("1"
                                                                                                                    (case
                                                                                                                     "x!2 = 1")
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "rr"
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "bb"
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "^"
                                                                                                                               1)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "expt"
                                                                                                                                 1)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "expt"
                                                                                                                                   1)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (expand
                                                                                                                     "rr"
                                                                                                                     +)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "bb"
                                                                                                                       +)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "^"
                                                                                                                         +)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "expt"
                                                                                                                           2
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (skosimp*)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (skosimp*)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (hide 2)
                    (("2" (lemma "polynomial_x0")
                      (("2" (inst - "bb" "pn") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((poly_shift_id formula-decl nil polynomials nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (polynomial_x0 formula-decl nil polynomials nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (T_low type-eq-decl nil sigma nil)
    (T_high type-eq-decl nil sigma nil)
    (<= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (sigma def-decl "real" sigma nil)
    (K1 skolem-const-decl "real" polynomials nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rr skolem-const-decl "[nat -> real]" polynomials nil)
    (expt def-decl "real" exponentiation nil)
    (bb skolem-const-decl "sequence[real]" polynomials nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (restrict const-decl "[T -> real]" sigma nil)
    (sigma_restrict_eq formula-decl nil sigma nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (sigma_shift_T2 formula-decl nil sigma nil)
    (sigma_scal formula-decl nil sigma nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (sigma_split formula-decl nil sigma nil)
    (PG skolem-const-decl "sequence[real]" polynomials nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (poly_shift const-decl "sequence[real]" polynomials nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (polynomial_linear_divisor 0
  (polynomial_linear_divisor-1 nil 3523365655
   ("" (skeep)
    (("" (lemma "polynomial_zero_factor")
      (("" (inst - "a WITH [0:=a(0)-polynomial(a,pn)(y)]" "pn" "y")
        (("" (split -1)
          (("1" (skeep -1)
            (("1" (inst + "g")
              (("1" (skeep)
                (("1" (inst - "x")
                  (("1" (replace -1 :dir rl)
                    (("1" (hide -1)
                      (("1" (expand "polynomial" + 2)
                        (("1" (lemma "sigma_split")
                          (("1" (inst?)
                            (("1" (inst - "0")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "sigma" - 2)
                                  (("1"
                                    (expand "sigma" - 2)
                                    (("1"
                                      (lemma "sigma_restrict_eq")
                                      (("1"
                                        (inst - _ _ "pn" "1")
                                        (("1"
                                          (inst
                                           -
                                           "LAMBDA (i: nat):
                    a WITH [(0) := a(0) - polynomial(a, pn)(y)](i) *
                     (IF i = 0 THEN 1 ELSE x ^ i ENDIF)"
                                           _)
                                          (("1"
                                            (inst
                                             -
                                             "LAMBDA (i: nat):
                    a(i) *
                     (IF i = 0 THEN 1 ELSE x ^ i ENDIF)")
                                            (("1"
                                              (split -1)
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (hide -1)
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (hide -)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "polynomial"
                                                           +
                                                           1)
                                                          (("1"
                                                            (lemma
                                                             "sigma_split")
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "0")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "sigma"
                                                                     -
                                                                     2)
                                                                    (("1"
                                                                      (expand
                                                                       "sigma"
                                                                       -
                                                                       2)
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide (-1 2))
                                                (("2"
                                                  (expand "restrict")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (expand "polynomial" + 1)
              (("2" (lemma "sigma_split")
                (("2" (inst?)
                  (("2" (inst - "0")
                    (("2" (assert)
                      (("2" (replace -1)
                        (("2" (hide -)
                          (("2" (expand "sigma" + 1)
                            (("2" (expand "sigma" + 1)
                              (("2"
                                (lemma "sigma_restrict_eq")
                                (("2"
                                  (inst - _ _ "pn" "1")
                                  (("2"
                                    (inst
                                     -
                                     "LAMBDA (i: nat):
                    a WITH [(0) := a(0) - polynomial(a, pn)(y)](i) *
                     (IF i = 0 THEN 1 ELSE y ^ i ENDIF)"
                                     _)
                                    (("2"
                                      (inst
                                       -
                                       "LAMBDA (i: nat):
                    a(i) *
                     (IF i = 0 THEN 1 ELSE y ^ i ENDIF)")
                                      (("2"
                                        (split -1)
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (expand "polynomial")
                                              (("1"
                                                (lemma "sigma_split")
                                                (("1"
                                                  (inst - _ _ 0 _)
                                                  (("1"
                                                    (inst - _ _ 0)
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "sigma"
                                                           -
                                                           2)
                                                          (("1"
                                                            (expand
                                                             "sigma"
                                                             -
                                                             2)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (decompose-equality)
                                            (("2"
                                              (expand "restrict")
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((polynomial_zero_factor formula-decl nil polynomials nil)
    (sigma_split formula-decl nil sigma nil)
    (sigma def-decl "real" sigma nil)
    (sigma_restrict_eq formula-decl nil sigma nil)
    (restrict const-decl "[T -> real]" sigma nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (T_low type-eq-decl nil sigma nil)
    (T_high type-eq-decl nil sigma nil)
    (<= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (polynomial_eq_coeff 0
  (polynomial_eq_coeff-1 nil 3482747919
   (""
    (case "FORALL (a:sequence[real],n:nat): polynomial(a,n) = (LAMBDA (x:real): 0) IFF FORALL (jj:upto(n)): a(jj) = 0")
    (("1" (skeep)
      (("1" (inst - "a-b" "n")
        (("1" (ground)
          (("1" (skeep)
            (("1" (inst - "jj")
              (("1" (expand "-") (("1" (assert) nil nil)) nil)) nil))
            nil)
           ("2"
            (case "polynomial(a,n) - polynomial(b,n) = polynomial(a-b,n)")
            (("1" (replace -3)
              (("1" (hide-all-but (-1 1))
                (("1" (decompose-equality +)
                  (("1" (decompose-equality)
                    (("1" (inst - "x!1")
                      (("1" (expand "-") (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but 1)
              (("2" (decompose-equality)
                (("2" (expand "-" 1 1)
                  (("2" (expand "polynomial")
                    (("2" (lemma "sigma_minus")
                      (("2" (inst?)
                        (("2" (replace -1)
                          (("2" (hide -1)
                            (("2" (lemma "sigma_eq")
                              (("2"
                                (inst?)
                                (("2"
                                  (assert)
                                  (("2"
                                    (hide 2)
                                    (("2"
                                      (skosimp*)
                                      (("2"
                                        (expand "-")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (hide 1)
            (("3" (hide 1)
              (("3" (decompose-equality +)
                (("3" (decompose-equality -)
                  (("3" (inst - "x!1")
                    (("3" (expand "polynomial")
                      (("3" (lemma "sigma_minus")
                        (("3"
                          (inst -
                           "LAMBDA (i: nat): a(i) * (IF i = 0 THEN 1 ELSE x!1 ^ i ENDIF)"
                           "LAMBDA (i: nat): b(i) * (IF i = 0 THEN 1 ELSE x!1 ^ i ENDIF)"
                           "n" "0")
                          (("3" (replace -2)
                            (("3" (assert)
                              (("3"
                                (hide -2)
                                (("3"
                                  (expand "-")
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("4" (hide 2)
            (("4" (hide 2)
              (("4"
                (case "FORALL (jjj: upto(n)): polynomial(a,jjj) = polynomial(b,jjj)")
                (("1" (inst - "n") nil nil)
                 ("2" (hide 2)
                  (("2" (induct "jjj")
                    (("1" (inst - "0")
                      (("1" (expand "polynomial")
                        (("1" (expand "sigma")
                          (("1" (expand "sigma")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skeep 1)
                      (("2" (expand "polynomial")
                        (("2" (expand "sigma" +)
                          (("2" (inst - "1+jt")
                            (("1" (decompose-equality +)
                              (("1"
                                (decompose-equality -)
                                (("1"
                                  (inst - "x!1")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep)
        (("2" (ground)
          (("1"
            (case "EXISTS (m:upto(n)): polynomial(a,n) = polynomial(a,m) and a(m) /= 0")
            (("1" (skosimp*)
              (("1" (replace -1)
                (("1" (hide -1)
                  (("1"
                    (case "EXISTS (rr: posreal): rr > 1 AND abs(a(m!1))*rr > sigma(0,m!1-1,(LAMBDA (j: nat): abs(a(j))))")
                    (("1" (skosimp*)
                      (("1" (mult-by -2 "rr!1^(m!1-1)")
                        (("1"
                          (case "abs(a(m!1)) * rr!1 * rr!1 ^ (m!1 - 1) = abs(a(m!1)*rr!1^m!1)")
                          (("1" (replace -1)
                            (("1"
                              (case "sigma(0, m!1 - 1, (LAMBDA (j: nat): abs(a(j)))) * rr!1 ^ (m!1 - 1) = sigma(0, m!1 - 1, (LAMBDA (j: nat): abs(a(j))*rr!1^(m!1-1)))")
                              (("1"
                                (replace -1)
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (case
                                     "sigma(0, m!1 - 1, (LAMBDA (j: nat): abs(a(j)) * rr!1 ^ (m!1 - 1))) >= abs(polynomial(a,m!1-1)(rr!1))")
                                    (("1"
                                      (case
                                       "abs(a(m!1) * rr!1 ^ m!1) = abs(polynomial(a, m!1 - 1)(rr!1))")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (hide -1)
                                        (("2"
                                          (hide -1)
                                          (("2"
                                            (hide -2)
                                            (("2"
                                              (case
                                               "a(m!1)*rr!1^m!1 = -polynomial(a,m!1-1)(rr!1)")
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (expand "abs")
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (ground)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (decompose-equality
                                                   -)
                                                  (("2"
                                                    (inst - "rr!1")
                                                    (("2"
                                                      (expand
                                                       "polynomial")
                                                      (("2"
                                                        (expand
                                                         "sigma"
                                                         -1)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (case
                                                             "rr!1^m!1 = (IF m!1 = 0 THEN 1 ELSE rr!1 ^ m!1 ENDIF)")
                                                            (("1"
                                                              (replace
                                                               -1
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (hide
                                                                 -1)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               1)
                                                              (("2"
                                                                (lift-if)
                                                                (("2"
                                                                  (ground)
                                                                  (("2"
                                                                    (replace
                                                                     -1)
                                                                    (("2"
                                                                      (expand
                                                                       "^")
                                                                      (("2"
                                                                        (expand
                                                                         "expt")
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (1 -2))
                                      (("2"
                                        (expand "polynomial")
                                        (("2"
                                          (lemma "sigma_abs")
                                          (("2"
                                            (inst
                                             -
                                             "LAMBDA (i: nat):
                                                   a(i) * (IF i = 0 THEN 1 ELSE rr!1 ^ i ENDIF)"
                                             "m!1-1"
                                             "0")
                                            (("2"
                                              (case
                                               "sigma(0, m!1 - 1,
                                                       LAMBDA (n: nat):
                                                         abs(a(n) * (IF n = 0 THEN 1 ELSE rr!1 ^ n ENDIF))) <= sigma(0, m!1 - 1, (LAMBDA (j: nat): abs(a(j)) * rr!1 ^ (m!1 - 1)))")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (hide-all-but (1 -2))
                                                (("2"
                                                  (lemma "sigma_le")
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (hide 2)
                                                        (("2"
                                                          (skosimp*)
                                                          (("2"
                                                            (case
                                                             "rr!1^n!1 = (IF n!1 = 0 THEN 1 ELSE rr!1 ^ n!1 ENDIF)")
                                                            (("1"
                                                              (replace
                                                               -1
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (hide
                                                                 -1)
                                                                (("1"
                                                                  (rewrite
                                                                   "abs_mult")
                                                                  (("1"
                                                                    (case
                                                                     "abs(rr!1^n!1) <= rr!1^(m!1-1)")
                                                                    (("1"
                                                                      (mult-by
                                                                       -1
                                                                       "abs(a(n!1))")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       2)
                                                                      (("2"
                                                                        (case
                                                                         "rr!1 ^n!1 > 0")
                                                                        (("1"
                                                                          (expand
                                                                           "abs")
                                                                          (("1"
                                                                            (case
                                                                             "FORALL (jj:nat): rr!1^(n!1+jj) >= rr!1^n!1")
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "m!1-1-n!1")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (induct
                                                                                 "jj")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (skosimp*)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "^")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "expt"
                                                                                       1
                                                                                       1)
                                                                                      (("2"
                                                                                        (mult-by
                                                                                         -1
                                                                                         "rr!1")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (mult-by
                                                                                             -3
                                                                                             "expt(rr!1,n!1)")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (case
                                                                             "FORALL (jj:nat): rr!1^jj > 0")
                                                                            (("1"
                                                                              (inst?)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (induct
                                                                               "jj")
                                                                              (("1"
                                                                                (expand
                                                                                 "^")
                                                                                (("1"
                                                                                  (expand
                                                                                   "expt")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (skosimp*)
                                                                                (("2"
                                                                                  (expand
                                                                                   "^")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "expt"
                                                                                     1)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (lift-if)
                                                                (("2"
                                                                  (ground)
                                                                  (("2"
                                                                    (replace
                                                                     -1)
                                                                    (("2"
                                                                      (expand
                                                                       " ^")
                                                                      (("2"
                                                                        (expand
                                                                         "expt")
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (expand "sigma")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (case "m!1 = 0")
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (decompose-equality -5)
                                              (("1"
                                                (inst - "0")
                                                (("1"
                                                  (expand "polynomial")
                                                  (("1"
                                                    (expand "sigma")
                                                    (("1"
                                                      (expand "sigma")
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but 1)
                                (("2"
                                  (lemma "sigma_scal")
                                  (("2"
                                    (inst
                                     -
                                     "(LAMBDA (j: nat): abs(a(j)))"
                                     "rr!1^(m!1-1)"
                                     "m!1-1"
                                     "0")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (rewrite "abs_mult")
                            (("2" (expand "abs" 1 3)
                              (("2"
                                (case "m!1 > 0")
                                (("1"
                                  (expand "^")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "expt" 1 2)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (case "m!1 = 0")
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (expand "polynomial")
                                      (("1"
                                        (expand "sigma")
                                        (("1"
                                          (expand "sigma")
                                          (("1"
                                            (hide-all-but (-4 3))
                                            (("1"
                                              (name
                                               "F"
                                               "LAMBDA (nn:nat): (LAMBDA (x: real): a(0))(nn)")
                                              (("1"
                                                (name
                                                 "G"
                                                 "LAMBDA (nn:nat): (LAMBDA (x: real): 0)(nn)")
                                                (("1"
                                                  (case
                                                   "sigma(1,1,G) = sigma(1,1,F)")
                                                  (("1"
                                                    (replace
                                                     -2
                                                     -1
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (replace
                                                       -3
                                                       -1
                                                       :dir
                                                       rl)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "sigma")
                                                          (("1"
                                                            (expand
                                                             "sigma")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2"
                      (name "ccc"
                            "sigma(0, m!1 - 1, (LAMBDA (j: nat): abs(a(j))))/abs(a(m!1))")
                      (("1" (name "r1" "max(2,ccc+1)")
                        (("1" (inst + "r1")
                          (("1" (assert)
                            (("1" (typepred "r1")
                              (("1"
                                (case "r1 > ccc")
                                (("1"
                                  (expand "ccc" -1)
                                  (("1" (cross-mult -1) nil nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil)
                       ("3" (assert)
                        (("3" (flatten)
                          (("3" (case "m!1 = 0")
                            (("1" (replace -1)
                              (("1"
                                (inst + "0")
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (skosimp*)
                      (("3" (case "m!1 = 0")
                        (("1" (replace -1)
                          (("1" (inst + "0") (("1" (assert) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2"
              (name "m1"
                    "min({mm: upto(n) | FORALL (jj:upto(n)): jj> mm IMPLIES a(jj) = 0})")
              (("1" (inst + "m1")
                (("1" (typepred "m1")
                  (("1" (case "a(m1) /= 0")
                    (("1" (assert)
                      (("1" (decompose-equality 1)
                        (("1" (expand "polynomial" 1)
                          (("1" (lemma "sigma_split")
                            (("1"
                              (inst -
                               "LAMBDA (i: nat): a(i) * (IF i = 0 THEN 1 ELSE x!1 ^ i ENDIF)"
                               "n" "0" "m1")
                              (("1"
                                (assert)
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (hide -1)
                                    (("1"
                                      (lemma "sigma_restrict_eq")
                                      (("1"
                                        (inst
                                         -
                                         "LAMBDA (i: nat): a(i) * (IF i = 0 THEN 1 ELSE x!1 ^ i ENDIF)"
                                         "LAMBDA (i:nat): 0"
                                         "n"
                                         "1+m1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lemma "sigma_zero")
                                            (("1"
                                              (inst - "n" "1+m1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (decompose-equality
                                                   1)
                                                  (("1"
                                                    (expand "restrict")
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (ground)
                                                        (("1"
                                                          (inst
                                                           -
                                                           "x!2")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (flatten)
                        (("2" (inst -4 "m1-1")
                          (("1" (assert)
                            (("1" (skosimp 1)
                              (("1"
                                (case "jj!1 = m1")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (inst -3 "jj!1")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (case "m1 = 0")
                              (("1"
                                (skosimp 2)
                                (("1"
                                  (case "jj!1 = 0")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (inst -4 "jj!1")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "nonempty?")
                (("2" (expand "empty?")
                  (("2" (inst - "n")
                    (("2" (expand "member") (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (decompose-equality 1)
            (("2" (expand "polynomial" 1)
              (("2" (lemma "sigma_restrict_eq")
                (("2"
                  (inst -
                   "LAMBDA (i: nat): a(i) * (IF i = 0 THEN 1 ELSE x!1 ^ i ENDIF)"
                   "LAMBDA (i:nat): 0" "n" "0")
                  (("2" (lemma "sigma_zero")
                    (("2" (inst?)
                      (("2" (assert)
                        (("2" (decompose-equality 1)
                          (("2" (expand "restrict")
                            (("2" (lift-if)
                              (("2"
                                (ground)
                                (("1" (inst - "x!2") nil nil)
                                 ("2"
                                  (inst - "x!2")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((min const-decl "{a | S(a) AND (FORALL x: S(x) IMPLIES a <= x)}"
         min_nat nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (n skolem-const-decl "nat" polynomials nil)
    (a skolem-const-decl "sequence[real]" polynomials nil)
    (m1 skolem-const-decl "{a_1 |
   (FORALL (jj: upto(n)): jj > a_1 IMPLIES a(jj) = 0) AND
    FORALL (x: upto(n)):
      (FORALL (jj: upto(n)): jj > x IMPLIES a(jj) = 0) IMPLIES a_1 <= x}"
     polynomials nil)
    (sigma_restrict_eq formula-decl nil sigma nil)
    (restrict const-decl "[T -> real]" sigma nil)
    (sigma_zero formula-decl nil sigma nil)
    (sigma_split formula-decl nil sigma nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (ccc skolem-const-decl "real" polynomials nil)
    (r1 skolem-const-decl "{p: real | p >= 2 AND p >= 1 + ccc}"
     polynomials nil)
    (div_mult_pos_gt2 formula-decl nil extra_real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (sigma_abs formula-decl nil sigma nil)
    (sigma_le formula-decl nil sigma nil)
    (abs_mult formula-decl nil real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (posreal_expt application-judgement "posreal" exponentiation nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (subrange type-eq-decl nil integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (expt def-decl "real" exponentiation nil)
    (sigma_scal formula-decl nil sigma nil)
    (sigma_nnreal application-judgement "nnreal" sigma_nat nil)
    (sigma_nat application-judgement "nat" sigma_nat nil)
    (even_nat nonempty-type-eq-decl nil naturalnumbers nil)
    (even? const-decl "bool" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (both_sides_times_pos_gt1 formula-decl nil real_props nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (sigma_minus formula-decl nil sigma nil)
    (sigma_eq formula-decl nil sigma nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (T_low type-eq-decl nil sigma nil)
    (T_high type-eq-decl nil sigma nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (jt skolem-const-decl "upto(n)" polynomials nil)
    (n skolem-const-decl "nat" polynomials nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (sigma def-decl "real" sigma nil)
    (upto_induction formula-decl nil bounded_nat_inductions nil)
    (pred type-eq-decl nil defined_types nil)
    (- const-decl "[T -> real]" real_fun_ops nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil))
   shostak))
 (poly_eq_0_le_degree 0
  (poly_eq_0_le_degree-1 nil 3595074460
   ("" (skeep)
    (("" (ground)
      (("1" (skeep)
        (("1" (expand "polynomial")
          (("1" (rewrite "sigma_restrict_eq_0")
            (("1" (skosimp*)
              (("1" (inst - "i!1")
                (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma "polynomial_eq_coeff")
        (("2" (inst - "a" "LAMBDA (ii:nat): 0" "n")
          (("2" (ground)
            (("1" (skeep) (("1" (inst - "ii") nil nil)) nil)
             ("2" (decompose-equality 2)
              (("2" (inst - "x!1")
                (("2" (replace -1)
                  (("2" (expand "polynomial" 1)
                    (("2" (rewrite "sigma_restrict_eq_0")
                      (("2" (skosimp*)
                        (("2" (lift-if) (("2" (ground) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((polynomial const-decl "[real -> real]" polynomials nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subrange type-eq-decl nil integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T_low type-eq-decl nil sigma nil)
    (T_high type-eq-decl nil sigma nil)
    (<= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (sequence type-eq-decl nil sequences nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sigma_restrict_eq_0 formula-decl nil sigma nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (ii skolem-const-decl "nat" polynomials nil)
    (n skolem-const-decl "nat" polynomials nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (polynomial_eq_coeff formula-decl nil polynomials nil))
   shostak))
 (poly_image_size 0
  (poly_image_size-1 nil 3607954949
   (""
    (case "FORALL (a: sequence[real], m: nat): LET n=m+1 IN
                                    (EXISTS (fp: [below(1 + n) -> real]):
                                       (FORALL (i, j: below(1 + n)):
                                         i/=j IMPLIES fp(i) /= fp(j)) AND (FORALL (i:below(1+n)): polynomial(a,n)(fp(i))=0))
                                     IMPLIES FORALL (k:subrange(0,n)): a(k)=0")
    (("1" (skeep)
      (("1" (skeep)
        (("1" (assert)
          (("1" (skeep)
            (("1" (assert)
              (("1"
                (name "bb" "a WITH [0:=a(0)-polynomial(a,n)(fp(0))]")
                (("1" (inst - "bb" "n-1")
                  (("1" (assert)
                    (("1" (split -)
                      (("1" (inst - "k")
                        (("1" (expand "bb" -1) (("1" (propax) nil nil))
                          nil))
                        nil)
                       ("2" (inst + "fp")
                        (("2" (split)
                          (("1" (skeep)
                            (("1" (inst - "i" "j")
                              (("1" (ground) nil nil)) nil))
                            nil)
                           ("2" (skeep)
                            (("2" (inst - "0" "i")
                              (("2"
                                (assert)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (rewrite "polynomial_eq_a0_plus")
                                    (("2"
                                      (lemma "polynomial_eq_a0_plus")
                                      (("2"
                                        (inst - "a" "n" "fp(i)")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (case
                                             "(LAMBDA (i_1: nat): a(1 + i_1)) = (LAMBDA (i_1: nat): bb(1 + i_1))")
                                            (("1"
                                              (replace -1)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (decompose-equality 1)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (assert)
      (("2" (hide 2)
        (("2" (induct "m")
          (("1" (assert)
            (("1" (skeep)
              (("1" (skeep)
                (("1" (skeep)
                  (("1" (typepred "k")
                    (("1"
                      (case "NOT polynomial(a,1) = (LAMBDA (x:real): a(0) + a(1)*x)")
                      (("1" (decompose-equality 1)
                        (("1" (hide -) (("1" (grind) nil nil)) nil))
                        nil)
                       ("2" (replace -1)
                        (("2" (assert)
                          (("2" (inst-cp - "0" "1")
                            (("2" (assert)
                              (("2"
                                (flatten)
                                (("2"
                                  (hide -4)
                                  (("2"
                                    (inst-cp - "0")
                                    (("2"
                                      (inst - "1")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (case "a(1)/=0")
                                          (("1"
                                            (mult-by 1 "a(1)")
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (replace -1)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (typepred "k")
                                                  (("2"
                                                    (case
                                                     "NOT (k=0 OR k=1)")
                                                    (("1"
                                                      (ground)
                                                      (("1"
                                                        (case
                                                         "NOT FORALL (kv:subrange(0,1)): kv=0 OR kv=1")
                                                        (("1"
                                                          (eval-formula
                                                           1)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (inst - "k")
                                                          (("2"
                                                            (ground)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skolem 1 "k")
            (("2" (assert)
              (("2" (flatten)
                (("2" (skeep)
                  (("2" (assert)
                    (("2" (skolem 1 "m")
                      (("2" (skeep -2)
                        (("2" (typepred "m")
                          (("2" (inst-cp -5 "2+k")
                            (("2" (lemma "polynomial_linear_divisor")
                              (("2"
                                (inst - "a" "2+k" "fp(2+k)")
                                (("2"
                                  (name "ry" "fp(2+k)")
                                  (("2"
                                    (replace -1)
                                    (("2"
                                      (replace -8 -2)
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (inst -5 "g")
                                          (("2"
                                            (split -)
                                            (("1"
                                              (case
                                               "polynomial(g,2+k-1) = (LAMBDA (xy:real): 0)")
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lemma
                                                     "poly_eq_0_le_degree")
                                                    (("1"
                                                      (inst
                                                       -
                                                       "a"
                                                       "2+k")
                                                      (("1"
                                                        (replace -5)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (inst
                                                             -
                                                             "m")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma
                                                 "poly_eq_0_le_degree")
                                                (("2"
                                                  (inst - "g" "k+1")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (hide -2)
                                                        (("2"
                                                          (split -1)
                                                          (("1"
                                                            (decompose-equality
                                                             1)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (skeep)
                                                            (("2"
                                                              (inst
                                                               -
                                                               "ii")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (name
                                               "IZ"
                                               "LAMBDA (ij:below(2+k)): fp(ij)")
                                              (("2"
                                                (inst + "IZ")
                                                (("2"
                                                  (split +)
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (inst - "i" "j")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "IZ"
                                                           -1)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (skeep)
                                                    (("2"
                                                      (expand "IZ" +)
                                                      (("2"
                                                        (inst
                                                         -
                                                         "i"
                                                         "2+k")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (replace
                                                             -2)
                                                            (("2"
                                                              (inst
                                                               -
                                                               "fp(i)")
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "i")
                                                                (("2"
                                                                  (replace
                                                                   -7)
                                                                  (("2"
                                                                    (lemma
                                                                     "nzreal_times_nzreal_is_nzreal")
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "fp(i)-ry"
                                                                       "polynomial(g,1+k)(fp(i))")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sigma def-decl "real" sigma nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (a skolem-const-decl "sequence[real]" polynomials nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (polynomial_linear_divisor formula-decl nil polynomials nil)
    (IZ skolem-const-decl "[below(2 + k) -> real]" polynomials nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (nzreal_times_nzreal_is_nzreal judgement-tcc nil real_types nil)
    (poly_eq_0_le_degree formula-decl nil polynomials nil)
    (ii skolem-const-decl "nat" polynomials nil)
    (k skolem-const-decl "nat" polynomials nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (bb skolem-const-decl "sequence[real]" polynomials nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (polynomial_eq_a0_plus formula-decl nil polynomials nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (<= const-decl "bool" reals nil)
    (subrange type-eq-decl nil integers nil))
   shostak))
 (polynomial_is_zero 0
  (polynomial_is_zero-1 nil 3780829683
   ("" (skeep)
    (("" (lemma "poly_image_size")
      (("" (inst?)
        (("" (assert)
          (("" (case "n=0")
            (("1" (hide -2)
              (("1" (skeep)
                (("1" (case "not k=0")
                  (("1" (assert) nil nil)
                   ("2" (copy -3)
                    (("2" (inst -1 "0")
                      (("2" (rewrite "polynomial_x0")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (split -1)
                (("1" (skeep)
                  (("1" (case "k=0")
                    (("1" (inst -3 "0")
                      (("1" (rewrite "polynomial_x0")
                        (("1" (assert) nil nil)) nil))
                      nil)
                     ("2" (inst -1 "k") (("2" (assert) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (inst 1 "lambda(x:below(1+n)): x")
                  (("2" (skeep)
                    (("2" (split 1)
                      (("1" (flatten) nil nil)
                       ("2" (assert)
                        (("2" (inst-cp -1 "i")
                          (("2" (inst -1 "j") (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((poly_image_size formula-decl nil polynomials nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (subrange type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (k skolem-const-decl "nat" polynomials nil)
    (n skolem-const-decl "nat" polynomials nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (polynomial_x0 formula-decl nil polynomials nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (poly_constant_on_interval 0
  (poly_constant_on_interval-1 nil 3607957502
   ("" (skeep)
    (("" (case "n = 0")
      (("1" (skosimp*) (("1" (assert) nil nil)) nil)
       ("2" (lemma "poly_image_size")
        (("2" (inst - "a" "n")
          (("2" (assert)
            (("2" (replace 2)
              (("2"
                (name "KP" "LAMBDA (j:below(1+n)): x + (y-x)/(j+2)")
                (("2" (inst + "KP")
                  (("2" (hide 3)
                    (("2" (skeep)
                      (("2" (split)
                        (("1" (flatten)
                          (("1" (expand "KP" -1)
                            (("1" (name "e" "y-x")
                              (("1"
                                (replace -1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (cross-mult -2)
                                    (("1"
                                      (div-by -2 "e")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2"
                          (case "FORALL (ii,jj:below(1+n)): ii<jj IMPLIES polynomial(a, n)(KP(ii)) = polynomial(a, n)(KP(jj))")
                          (("1" (inst-cp - "i" "j")
                            (("1" (inst - "j" "i")
                              (("1" (ground) nil nil)) nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (skeep)
                              (("2"
                                (inst - "KP(jj)" "KP(ii)")
                                (("2"
                                  (assert)
                                  (("2"
                                    (split +)
                                    (("1"
                                      (expand "KP" 1)
                                      (("1"
                                        (lemma
                                         "posreal_div_posreal_is_posreal")
                                        (("1"
                                          (inst - "y-x" "2+jj")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "KP" 1)
                                      (("2"
                                        (name "e" "y-x")
                                        (("2"
                                          (replace -1)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (case
                                               "e/(2+jj)<=e/(2+ii)")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (cross-mult 1)
                                                (("2"
                                                  (mult-by -2 "e")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (expand "KP" 1)
                                      (("3"
                                        (name "e" "y-x")
                                        (("3"
                                          (case "e/(2+ii)<e")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (cross-mult 1)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (lemma
                                                 "nnreal_times_nnreal_is_nnreal")
                                                (("2"
                                                  (inst - "e" "ii")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sequence type-eq-decl nil sequences nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_times_nnreal_is_nnreal judgement-tcc nil real_types nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (<= const-decl "bool" reals nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal_div_posreal_is_posreal judgement-tcc nil real_types nil)
    (both_sides_div1 formula-decl nil real_props nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (div_cancel4 formula-decl nil real_props nil)
    (times_div2 formula-decl nil real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel3 formula-decl nil real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (KP skolem-const-decl "[below(1 + n) -> real]" polynomials nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (poly_image_size formula-decl nil polynomials nil))
   shostak))
 (polynomial_div_id 0
  (polynomial_div_id-1 nil 3482755254
   ("" (name "idf" "(LAMBDA (x:real): x)")
    ((""
      (case "FORALL (ss:sequence[real],nn:nat): idf*polynomial(ss,nn) = polynomial((LAMBDA (i:nat): IF i = 0 THEN 0 ELSE ss(i-1) ENDIF),nn+1)")
      (("1" (skeep)
        (("1" (replace -2)
          (("1" (assert)
            (("1" (flatten)
              (("1" (lemma "polynomial_eq_coeff")
                (("1" (inst?)
                  (("1" (assert)
                    (("1" (hide 2)
                      (("1"
                        (name "aa"
                              "(LAMBDA (i:nat): IF i = 0 THEN 0 ELSE a(i-1) ENDIF)")
                        (("1"
                          (name "bb"
                                "(LAMBDA (i:nat): IF i = 0 THEN 0 ELSE b(i-1) ENDIF)")
                          (("1"
                            (case "idf*polynomial(a,n) = polynomial(aa,n+1)")
                            (("1" (replace -1)
                              (("1"
                                (case
                                 "idf*polynomial(b,n) = polynomial(bb,n+1)")
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (lemma "polynomial_eq_coeff")
                                    (("1"
                                      (inst - "aa" "bb" "n+1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (inst - "jj!1+1")
                                            (("1"
                                              (expand "aa" -1)
                                              (("1"
                                                (expand "bb" -1)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (inst - "b" "n")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (inst - "a" "n")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (skeep)
          (("2" (decompose-equality 1)
            (("1" (expand "*")
              (("1" (expand "idf" +)
                (("1" (expand "polynomial" 1)
                  (("1" (lemma "sigma_scal")
                    (("1"
                      (inst -
                       "LAMBDA (i: nat): ss(i) * (IF i = 0 THEN 1 ELSE x!1 ^ i ENDIF)"
                       "x!1" "nn" "0")
                      (("1" (replace -1 :dir rl)
                        (("1" (hide -1)
                          (("1" (lemma "sigma_split")
                            (("1"
                              (inst - "LAMBDA (i_1: nat):
               IF i_1 = 0 THEN 0 ELSE ss(i_1 - 1) ENDIF *
                (IF i_1 = 0 THEN 1 ELSE x!1 ^ i_1 ENDIF)" "1+nn" "0"
                               "0")
                              (("1"
                                (assert)
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (hide -1)
                                    (("1"
                                      (expand "sigma" 1 2)
                                      (("1"
                                        (expand "sigma" 1 2)
                                        (("1"
                                          (lemma "sigma_shift_T2")
                                          (("1"
                                            (inst
                                             -
                                             "LAMBDA (i_1: nat):
               IF i_1 = 0 THEN 0 ELSE ss(i_1 - 1) ENDIF *
                (IF i_1 = 0 THEN 1 ELSE x!1 ^ i_1 ENDIF)"
                                             "nn"
                                             "0"
                                             "1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (hide -1)
                                                  (("1"
                                                    (lemma
                                                     "sigma_restrict_eq")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide 2)
                                                          (("1"
                                                            (decompose-equality
                                                             1)
                                                            (("1"
                                                              (expand
                                                               "restrict")
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (ground)
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "^")
                                                                        (("1"
                                                                          (expand
                                                                           "expt")
                                                                          (("1"
                                                                            (expand
                                                                             "expt")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "^")
                                                                    (("2"
                                                                      (expand
                                                                       "expt"
                                                                       2
                                                                       2)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (skosimp*)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skosimp*)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp*) (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil)
       ("3" (skosimp*) (("3" (assert) nil nil)) nil))
      nil))
    nil)
   ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (* const-decl "[T -> real]" real_fun_ops nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (aa skolem-const-decl "[nat -> real]" polynomials nil)
    (bb skolem-const-decl "[nat -> real]" polynomials nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (polynomial_eq_coeff formula-decl nil polynomials nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (T_low type-eq-decl nil sigma nil)
    (T_high type-eq-decl nil sigma nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sigma def-decl "real" sigma nil)
    (sigma_shift_T2 formula-decl nil sigma nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (expt def-decl "real" exponentiation nil)
    (restrict const-decl "[T -> real]" sigma nil)
    (sigma_restrict_eq formula-decl nil sigma nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (sigma_split formula-decl nil sigma nil)
    (sigma_scal formula-decl nil sigma nil)
    (idf skolem-const-decl "[real -> real]" polynomials nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   shostak))
 (poly_translate_rat_TCC1 0
  (poly_translate_rat_TCC1-1 nil 3541326252 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (poly_translate_rat subtype
    "(number_fields.-)(polynomials.n, polynomials.i)" "nat")))
 (poly_translate_rat_TCC2 0
  (poly_translate_rat_TCC2-1 nil 3541326252 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (poly_translate_rat subtype "polynomials.k"
    "{i_1: naturalnumbers.nat | reals.<=(i_1, (number_fields.-)(polynomials.n, polynomials.i))}")))
 (poly_translate_rat_TCC3 0
  (poly_translate_rat_TCC3-1 nil 3541326252 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/= const-decl "boolean" notequal nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (poly_translate_rat subtype
    "((number_fields.+)((number_fields.-)(number_fields.*((number_fields.-)(1), polynomials.k), polynomials.i), polynomials.n))"
    "{i: integers.int | booleans.OR(polynomials.D /= 0, reals.>=(i, 0))}")))
 (poly_translate_rat_TCC4 0
  (poly_translate_rat_TCC4-1 nil 3541326252 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (poly_translate_rat subtype "polynomials.k"
    "{i: integers.int | booleans.OR(polynomials.C /= 0, reals.>=(i, 0))}")))
 (poly_translate_rat_TCC5 0
  (poly_translate_rat_TCC5-1 nil 3541326252 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (poly_translate_rat subtype
    "(number_fields.-)(polynomials.d, polynomials.k)"
    "{i_1: naturalnumbers.nat | reals.<=(i_1, polynomials.i)}")))
 (poly_translate_rat_TCC6 0
  (poly_translate_rat_TCC6-1 nil 3541326252 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/= const-decl "boolean" notequal nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (poly_translate_rat subtype
    "((number_fields.+)((number_fields.-)(polynomials.k, polynomials.d), polynomials.i))"
    "{i: integers.int | booleans.OR(polynomials.B /= 0, reals.>=(i, 0))}")))
 (poly_translate_rat_TCC7 0
  (poly_translate_rat_TCC7-1 nil 3541326252 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (poly_translate_rat subtype
    "((number_fields.-)(polynomials.d, polynomials.k))"
    "{i: integers.int | booleans.OR(polynomials.A /= 0, reals.>=(i, 0))}")))
 (poly_translate_rat_def_TCC1 0
  (poly_translate_rat_def_TCC1-1 nil 3541332284
   ("" (subtype-tcc) nil nil)
   ((real_times_real_is_real application-judgement "real" reals nil))
   nil
   (poly_translate_rat_def subtype "polynomials.n"
    "{i: integers.int | booleans.OR((booleans.NOT)((number_fields.+)(polynomials.D, number_fields.*(polynomials.C, polynomials.x)) = 0), reals.>=(i, 0))}")))
 (poly_translate_rat_def 0
  (poly_translate_rat_def-3 nil 3563057290
   (""
    (deftactic step_and_grind (step)
     (branch step ((skip) (then (hide-all-but 1) (finalize (grind))))))
    (("" (skeep)
      (("" (expand "polynomial")
        (("" (rewrite "sigma_scal" :dir rl)
          (("" (expand "poly_translate_rat")
            ((""
              (case "sigma(0, n,
                                  LAMBDA (i: nat):
                                    sigma(0, n,
                                          LAMBDA (i_1: nat):
                                            a(i_1) *
                                             sigma(0, n - i_1,
                                                   LAMBDA (k: nat):
                                                     IF (k < i - i_1 OR k > i OR k > n - i_1)
                                                       THEN 0
                                                     ELSE (C(i_1, i - k) * C(n - i_1, k)
                                                           *
                                                           A ^ (i - k)
                                                           *
                                                           B ^ (i_1 + k - i))
                                                          *
                                                          C ^ k
                                                          *
                                                          D ^ (-1 * i_1 - k + n)
                                                     ENDIF))
                                     * (IF i = 0 THEN 1 ELSE x ^ i ENDIF)) = sigma(0, n,
                                  LAMBDA (i: nat):
                                    sigma(0, n,
                                          LAMBDA (i_1: nat):
                                            a(i_1) *
                                             sigma(0, n - i_1,
                                                   LAMBDA (k: nat):
                                                     IF (k < i - i_1 OR k > i OR k > n - i_1)
                                                       THEN 0
                                                     ELSE (C(i_1, i - k) * C(n - i_1, k)
                                                           *
                                                           A ^ (i - k)
                                                           *
                                                           B ^ (i_1 + k - i))
                                                          *
                                                          C ^ k
                                                          *
                                                          D ^ (-1 * i_1 - k + n)
                                                     ENDIF
                                     * (IF i = 0 THEN 1 ELSE x ^ i ENDIF))))")
              (("1" (replace -1)
                (("1" (hide -1)
                  (("1" (step_and_grind (rewrite "sigma_swap"))
                    (("1" (step_and_grind (rewrite "sigma_eq"))
                      (("1" (hide 3)
                        (("1" (skolem 1 "vv")
                          (("1"
                            (case "(D + C * x) ^ n *
                                                                                               (a(vv) *
                                                                                                 (IF vv = 0 THEN 1 ELSE ((B + A * x) / (D + C * x)) ^ vv ENDIF)) = a(vv)*((D + C*x)^(n-vv) * (B+A*x)^vv)")
                            (("1" (replace -1)
                              (("1"
                                (hide -1)
                                (("1"
                                  (lemma "binomial_theorem")
                                  (("1"
                                    (inst - "vv" "A*x" "B")
                                    (("1"
                                      (lemma "binomial_theorem")
                                      (("1"
                                        (inst - "n-vv" "C*x" "D")
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (replaces -1)
                                            (("1"
                                              (step_and_grind
                                               (rewrite
                                                "sigma_product"))
                                              (("1"
                                                (step_and_grind
                                                 (rewrite
                                                  "sigma_scal"))
                                                (("1"
                                                  (case
                                                   "FORALL (aa1,aa2:real): aa1=aa2 IMPLIES a(vv)*aa1 = a(vv)*aa2")
                                                  (("1"
                                                    (rewrite -1)
                                                    (("1"
                                                      (hide 2)
                                                      (("1"
                                                        (hide -1)
                                                        (("1"
                                                          (step_and_grind
                                                           (rewrite
                                                            "sigma_eq"))
                                                          (("1"
                                                            (hide 2)
                                                            (("1"
                                                              (skosimp*)
                                                              (("1"
                                                                (step_and_grind
                                                                 (rewrite
                                                                  "sigma_eq"))
                                                                (("1"
                                                                  (hide
                                                                   2)
                                                                  (("1"
                                                                    (skosimp*)
                                                                    (("1"
                                                                      (lift-if)
                                                                      (("1"
                                                                        (split
                                                                         +)
                                                                        (("1"
                                                                          (ground)
                                                                          (("1"
                                                                            (case
                                                                             "FORALL (eg1:real): 0*eg1 = 0")
                                                                            (("1"
                                                                              (rewrite
                                                                               -1)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (case
                                                                             "x = 0")
                                                                            (("1"
                                                                              (replaces
                                                                               -1)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (case
                                                                                   "n!2 = 0")
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (case
                                                                                         "n!1 = 0")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (case
                                                                                             "0^0 = 1")
                                                                                            (("1"
                                                                                              (case
                                                                                               "C^0 = 1")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (replaces
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (replaces
                                                                                                     -2)
                                                                                                    (("1"
                                                                                                      (replaces
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (case
                                                                                                         "A^0 = 1")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (hide-all-but
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide-all-but
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide-all-but
                                                                                               1)
                                                                                              (("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (case
                                                                                             "0^n!1 = 0")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide-all-but
                                                                                               (1
                                                                                                2))
                                                                                              (("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (case
                                                                                       "0^n!2 = 0 AND 0^n!1 = 0")
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide-all-but
                                                                                         (1
                                                                                          2
                                                                                          3
                                                                                          4))
                                                                                        (("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (case
                                                                               "n!2 = 0")
                                                                              (("1"
                                                                                (replaces
                                                                                 -1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (case
                                                                                     "n!1 = 0")
                                                                                    (("1"
                                                                                      (replaces
                                                                                       -1)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (case
                                                                                           "A^0 = 1 AND C^0 = 1 AND (A*x)^0 = 1 AND (C*x)^0 = 1")
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide-all-but
                                                                                             1)
                                                                                            (("2"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (rewrite
                                                                                         "mult_expt")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (case
                                                                                             "C^0 = 1 AND (C*x)^0 = 1")
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide-all-but
                                                                                               1)
                                                                                              (("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("2"
                                                                                              (case
                                                                                               "0^n!1 = 0")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide-all-but
                                                                                                 (1
                                                                                                  2))
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (case
                                                                                 "n!1 = 0")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (label
                                                                                   "hyp"
                                                                                   6)
                                                                                  (("2"
                                                                                    (case
                                                                                     "(IF n!1 = 0 THEN 1 ELSE x ^ n!1 ENDIF) = x^n!1")
                                                                                    (("1"
                                                                                      (replaces
                                                                                       -1)
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "mult_expt")
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "mult_expt")
                                                                                          (("1"
                                                                                            (case
                                                                                             "x^(n!1-n!2)*x^n!2 = x^n!1")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide
                                                                                               "hyp")
                                                                                              (("2"
                                                                                                (rewrite
                                                                                                 "expt_plus"
                                                                                                 :dir
                                                                                                 rl)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (replaces
                                                                                               -1)
                                                                                              (("2"
                                                                                                (case
                                                                                                 "0^n!2 = 0")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide-all-but
                                                                                                   (1
                                                                                                    2
                                                                                                    3))
                                                                                                  (("2"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "mult_expt")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -
                                                                                                 "n!2"
                                                                                                 "C"
                                                                                                 "x")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (replaces
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (case
                                                                                                         "n!1 = n!2")
                                                                                                        (("1"
                                                                                                          (replaces
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (case
                                                                                                           "0^(n!1 -n!2) = 0")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (hide
                                                                                                             "hyp")
                                                                                                            (("2"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (case
                                                                                                     "0^n!2 = 0")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide
                                                                                                       "hyp")
                                                                                                      (("2"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (lift-if
                                                                                       1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (hide 2)
                                                      (("3"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("4"
                                                      (hide 2)
                                                      (("4"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("5"
                                                      (hide 2)
                                                      (("5"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("6"
                                                      (hide 2)
                                                      (("6"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("7"
                                                      (hide 2)
                                                      (("7"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("8"
                                                      (hide 2)
                                                      (("8"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("9"
                                                      (hide 2)
                                                      (("9"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("10"
                                                      (hide 2)
                                                      (("10"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("11"
                                                      (hide 2)
                                                      (("11"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (lift-if)
                                (("2"
                                  (ground)
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case "(B+A*x)^ 0 = 1")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (hide 2)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (rewrite "div_expt")
                                    (("1"
                                      (cross-mult 2)
                                      (("1"
                                        (lemma "expt_plus")
                                        (("1"
                                          (inst - "n-vv" "vv" "D+C*x")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (replace -1)
                                        (("2"
                                          (case "0^vv = 0")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (hide-all-but (1 2))
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 3)
                (("2" (rewrite "sigma_eq")
                  (("1" (hide 2)
                    (("1" (skosimp*)
                      (("1"
                        (step_and_grind
                         (rewrite "sigma_scal_right" :dir rl))
                        (("1" (assert)
                          (("1" (step_and_grind (rewrite "sigma_eq"))
                            (("1" (hide 2)
                              (("1"
                                (skosimp*)
                                (("1"
                                  (step_and_grind
                                   (rewrite "sigma_scal" :dir rl))
                                  (("1"
                                    (step_and_grind
                                     (rewrite "sigma_scal" :dir rl))
                                    (("1"
                                      (step_and_grind
                                       (rewrite
                                        "sigma_scal_right"
                                        :dir
                                        rl))
                                      (("1"
                                        (assert)
                                        (("1"
                                          (step_and_grind
                                           (rewrite "sigma_eq"))
                                          (("1"
                                            (hide 2)
                                            (("1"
                                              (skosimp*)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2) (("2" (grind) nil nil)) nil))
                  nil))
                nil)
               ("3" (hide 3) (("3" (grind) nil nil)) nil)
               ("4" (hide 3) (("4" (grind) nil nil)) nil)
               ("5" (hide 3) (("5" (grind) nil nil)) nil)
               ("6" (hide 3) (("6" (grind) nil nil)) nil)
               ("7" (hide 3) (("7" (grind) nil nil)) nil)
               ("8" (hide 3) (("8" (grind) nil nil)) nil)
               ("9" (hide 3) (("9" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (sigma_scal formula-decl nil sigma nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sequence type-eq-decl nil sequences nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (T_high type-eq-decl nil sigma nil)
    (T_low type-eq-decl nil sigma nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (sigma def-decl "real" sigma nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (C const-decl "posnat" binomial nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sigma_eq formula-decl nil sigma nil)
    (times_div1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel3 formula-decl nil real_props nil)
    (div_expt formula-decl nil exponentiation nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (binomial_theorem formula-decl nil polynomials nil)
    (sigma_product formula-decl nil sigma_nat nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (mult_expt formula-decl nil exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (C skolem-const-decl "real" polynomials nil)
    (expt_plus formula-decl nil exponentiation nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (x skolem-const-decl "real" polynomials nil)
    (A skolem-const-decl "real" polynomials nil)
    (B skolem-const-decl "real" polynomials nil)
    (D skolem-const-decl "real" polynomials nil)
    (vv skolem-const-decl "subrange(0, n)" polynomials nil)
    (n skolem-const-decl "nat" polynomials nil)
    (subrange type-eq-decl nil integers nil)
    (sigma_swap formula-decl nil sigma_swap nil)
    (sigma_scal_right formula-decl nil sigma nil)
    (poly_translate_rat const-decl "real" polynomials nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (TRUE const-decl "bool" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil)
  (poly_translate_rat_def-2 nil 3563057188
   (""
    (deftactic step_and_grind (step)
     (branch step ((skip) (then (hide-all-but 1) (finalize (grind))))))
    (("" (skeep)
      (("" (expand "polynomial")
        (("" (rewrite "sigma_scal" :dir rl)
          (("" (expand "poly_translate_rat")
            ((""
              (case "sigma(0, n,
                           LAMBDA (i: nat):
                             sigma(0, n,
                                   LAMBDA (i_1: nat):
                                     a(i_1) *
                                      sigma(0, n - i_1,
                                            LAMBDA (k: nat):
                                              IF (k < i - i_1 OR k > i OR k > n - i_1)
                                                THEN 0
                                              ELSE (C(i_1, i - k) * C(n - i_1, k)
                                                    *
                                                    A ^ (i - k)
                                                    *
                                                    B ^ (i_1 + k - i))
                                                   *
                                                   C ^ k
                                                   *
                                                   D ^ (-1 * i_1 - k + n)
                                              ENDIF))
                              * (IF i = 0 THEN 1 ELSE x ^ i ENDIF)) = sigma(0, n,
                           LAMBDA (i: nat):
                             sigma(0, n,
                                   LAMBDA (i_1: nat):
                                     a(i_1) *
                                      sigma(0, n - i_1,
                                            LAMBDA (k: nat):
                                              IF (k < i - i_1 OR k > i OR k > n - i_1)
                                                THEN 0
                                              ELSE (C(i_1, i - k) * C(n - i_1, k)
                                                    *
                                                    A ^ (i - k)
                                                    *
                                                    B ^ (i_1 + k - i))
                                                   *
                                                   C ^ k
                                                   *
                                                   D ^ (-1 * i_1 - k + n)
                                              ENDIF
                              * (IF i = 0 THEN 1 ELSE x ^ i ENDIF))))")
              (("1" (replace -1)
                (("1" (hide -1)
                  (("1" (rewrite "sigma_swap")
                    (("1" (step_and_grind (rewrite "sigma_eq"))
                      (("1" (hide 3)
                        (("1" (skolem 1 "vv")
                          (("1"
                            (case "(D + C * x) ^ n *
                                                                                    (a(vv) *
                                                                                      (IF vv = 0 THEN 1 ELSE ((B + A * x) / (D + C * x)) ^ vv ENDIF)) = a(vv)*((D + C*x)^(n-vv) * (B+A*x)^vv)")
                            (("1" (replace -1)
                              (("1"
                                (hide -1)
                                (("1"
                                  (lemma "binomial_theorem")
                                  (("1"
                                    (inst - "vv" "A*x" "B")
                                    (("1"
                                      (lemma "binomial_theorem")
                                      (("1"
                                        (inst - "n-vv" "C*x" "D")
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (replaces -1)
                                            (("1"
                                              (step_and_grind
                                               (rewrite
                                                "sigma_product"))
                                              (("1"
                                                (step_and_grind
                                                 (rewrite
                                                  "sigma_scal"))
                                                (("1"
                                                  (case
                                                   "FORALL (aa1,aa2:real): aa1=aa2 IMPLIES a(vv)*aa1 = a(vv)*aa2")
                                                  (("1"
                                                    (rewrite -1)
                                                    (("1"
                                                      (hide 2)
                                                      (("1"
                                                        (hide -1)
                                                        (("1"
                                                          (step_and_grind
                                                           (rewrite
                                                            "sigma_eq"))
                                                          (("1"
                                                            (hide 2)
                                                            (("1"
                                                              (skosimp*)
                                                              (("1"
                                                                (step_and_grind
                                                                 (rewrite
                                                                  "sigma_eq"))
                                                                (("1"
                                                                  (hide
                                                                   2)
                                                                  (("1"
                                                                    (skosimp*)
                                                                    (("1"
                                                                      (lift-if)
                                                                      (("1"
                                                                        (split
                                                                         +)
                                                                        (("1"
                                                                          (ground)
                                                                          (("1"
                                                                            (case
                                                                             "FORALL (eg1:real): 0*eg1 = 0")
                                                                            (("1"
                                                                              (rewrite
                                                                               -1)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (case
                                                                             "x = 0")
                                                                            (("1"
                                                                              (replaces
                                                                               -1)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (case
                                                                                   "n!2 = 0")
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (case
                                                                                         "n!1 = 0")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (case
                                                                                             "0^0 = 1")
                                                                                            (("1"
                                                                                              (case
                                                                                               "C^0 = 1")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (replaces
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (replaces
                                                                                                     -2)
                                                                                                    (("1"
                                                                                                      (replaces
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (case
                                                                                                         "A^0 = 1")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (hide-all-but
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide-all-but
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide-all-but
                                                                                               1)
                                                                                              (("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (case
                                                                                             "0^n!1 = 0")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide-all-but
                                                                                               (1
                                                                                                2))
                                                                                              (("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (case
                                                                                       "0^n!2 = 0 AND 0^n!1 = 0")
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide-all-but
                                                                                         (1
                                                                                          2
                                                                                          3
                                                                                          4))
                                                                                        (("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (case
                                                                               "n!2 = 0")
                                                                              (("1"
                                                                                (replaces
                                                                                 -1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (case
                                                                                     "n!1 = 0")
                                                                                    (("1"
                                                                                      (replaces
                                                                                       -1)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (case
                                                                                           "A^0 = 1 AND C^0 = 1 AND (A*x)^0 = 1 AND (C*x)^0 = 1")
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide-all-but
                                                                                             1)
                                                                                            (("2"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (rewrite
                                                                                         "mult_expt")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (case
                                                                                             "C^0 = 1 AND (C*x)^0 = 1")
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide-all-but
                                                                                               1)
                                                                                              (("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("2"
                                                                                              (case
                                                                                               "0^n!1 = 0")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide-all-but
                                                                                                 (1
                                                                                                  2))
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (case
                                                                                 "n!1 = 0")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (label
                                                                                   "hyp"
                                                                                   6)
                                                                                  (("2"
                                                                                    (case
                                                                                     "(IF n!1 = 0 THEN 1 ELSE x ^ n!1 ENDIF) = x^n!1")
                                                                                    (("1"
                                                                                      (replaces
                                                                                       -1)
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "mult_expt")
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "mult_expt")
                                                                                          (("1"
                                                                                            (case
                                                                                             "x^(n!1-n!2)*x^n!2 = x^n!1")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide
                                                                                               "hyp")
                                                                                              (("2"
                                                                                                (rewrite
                                                                                                 "expt_plus"
                                                                                                 :dir
                                                                                                 rl)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (replaces
                                                                                               -1)
                                                                                              (("2"
                                                                                                (case
                                                                                                 "0^n!2 = 0")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide-all-but
                                                                                                   (1
                                                                                                    2
                                                                                                    3))
                                                                                                  (("2"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "mult_expt")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -
                                                                                                 "n!2"
                                                                                                 "C"
                                                                                                 "x")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (replaces
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (case
                                                                                                         "n!1 = n!2")
                                                                                                        (("1"
                                                                                                          (replaces
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (case
                                                                                                           "0^(n!1 -n!2) = 0")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (hide
                                                                                                             "hyp")
                                                                                                            (("2"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (case
                                                                                                     "0^n!2 = 0")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide
                                                                                                       "hyp")
                                                                                                      (("2"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (lift-if
                                                                                       1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (hide 2)
                                                      (("3"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("4"
                                                      (hide 2)
                                                      (("4"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("5"
                                                      (hide 2)
                                                      (("5"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("6"
                                                      (hide 2)
                                                      (("6"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("7"
                                                      (hide 2)
                                                      (("7"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("8"
                                                      (hide 2)
                                                      (("8"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("9"
                                                      (hide 2)
                                                      (("9"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("10"
                                                      (hide 2)
                                                      (("10"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("11"
                                                      (hide 2)
                                                      (("11"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (lift-if)
                                (("2"
                                  (ground)
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case "(B+A*x)^ 0 = 1")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (hide 2)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (rewrite "div_expt")
                                    (("1"
                                      (cross-mult 2)
                                      (("1"
                                        (lemma "expt_plus")
                                        (("1"
                                          (inst - "n-vv" "vv" "D+C*x")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (replace -1)
                                        (("2"
                                          (case "0^vv = 0")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (hide-all-but (1 2))
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1) (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 3)
                (("2" (rewrite "sigma_eq")
                  (("2" (hide 2)
                    (("2" (skosimp*)
                      (("2"
                        (step_and_grind
                         (rewrite "sigma_scal_right" :dir rl))
                        (("2" (assert)
                          (("2" (step_and_grind (rewrite "sigma_eq"))
                            (("2" (hide 2)
                              (("2"
                                (skosimp*)
                                (("2"
                                  (step_and_grind
                                   (rewrite "sigma_scal" :dir rl))
                                  (("2"
                                    (step_and_grind
                                     (rewrite "sigma_scal" :dir rl))
                                    (("2"
                                      (step_and_grind
                                       (rewrite
                                        "sigma_scal_right"
                                        :dir
                                        rl))
                                      (("2"
                                        (assert)
                                        (("2"
                                          (step_and_grind
                                           (rewrite "sigma_eq"))
                                          (("2"
                                            (hide 2)
                                            (("2"
                                              (skosimp*)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 3) (("3" (grind) nil nil)) nil)
               ("4" (hide 3) (("4" (grind) nil nil)) nil)
               ("5" (hide 3) (("5" (grind) nil nil)) nil)
               ("6" (hide 3) (("6" (grind) nil nil)) nil)
               ("7" (hide 3) (("7" (grind) nil nil)) nil)
               ("8" (hide 3) (("8" (grind) nil nil)) nil)
               ("9" (hide 3) (("9" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma_scal_right formula-decl nil sigma nil)
    (sigma_swap formula-decl nil sigma_swap nil)
    (sigma_product formula-decl nil sigma_nat nil)
    (sigma_eq formula-decl nil sigma nil)
    (C const-decl "posnat" binomial nil)
    (sigma def-decl "real" sigma nil)
    (T_low type-eq-decl nil sigma nil)
    (T_high type-eq-decl nil sigma nil)
    (sigma_scal formula-decl nil sigma nil))
   nil)
  (poly_translate_rat_def-1 nil 3541332286
   ("" (skeep)
    (("" (expand "polynomial")
      (("" (rewrite "sigma_scal" :dir rl)
        (("" (expand "poly_translate_rat")
          ((""
            (case "sigma(0, n,
                    LAMBDA (i: nat):
                      sigma(0, n,
                            LAMBDA (i_1: nat):
                              a(i_1) *
                               sigma(0, n - i_1,
                                     LAMBDA (k: nat):
                                       IF (k < i - i_1 OR k > i OR k > n - i_1)
                                         THEN 0
                                       ELSE (C(i_1, i - k) * C(n - i_1, k)
                                             *
                                             A ^ (i - k)
                                             *
                                             B ^ (i_1 + k - i))
                                            *
                                            C ^ k
                                            *
                                            D ^ (-1 * i_1 - k + n)
                                       ENDIF))
                       * (IF i = 0 THEN 1 ELSE x ^ i ENDIF)) = sigma(0, n,
                    LAMBDA (i: nat):
                      sigma(0, n,
                            LAMBDA (i_1: nat):
                              a(i_1) *
                               sigma(0, n - i_1,
                                     LAMBDA (k: nat):
                                       IF (k < i - i_1 OR k > i OR k > n - i_1)
                                         THEN 0
                                       ELSE (C(i_1, i - k) * C(n - i_1, k)
                                             *
                                             A ^ (i - k)
                                             *
                                             B ^ (i_1 + k - i))
                                            *
                                            C ^ k
                                            *
                                            D ^ (-1 * i_1 - k + n)
                                       ENDIF
                       * (IF i = 0 THEN 1 ELSE x ^ i ENDIF))))")
            (("1" (replace -1)
              (("1" (hide -1)
                (("1" (rewrite "sigma_swap")
                  (("1" (rewrite "sigma_eq")
                    (("1" (hide 3)
                      (("1" (skolem 1 "vv")
                        (("1"
                          (case "(D + C * x) ^ n *
                                                                         (a(vv) *
                                                                           (IF vv = 0 THEN 1 ELSE ((B + A * x) / (D + C * x)) ^ vv ENDIF)) = a(vv)*((D + C*x)^(n-vv) * (B+A*x)^vv)")
                          (("1" (replace -1)
                            (("1" (hide -1)
                              (("1"
                                (lemma "binomial_theorem")
                                (("1"
                                  (inst - "vv" "A*x" "B")
                                  (("1"
                                    (lemma "binomial_theorem")
                                    (("1"
                                      (inst - "n-vv" "C*x" "D")
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (rewrite "sigma_product")
                                            (("1"
                                              (rewrite "sigma_scal")
                                              (("1"
                                                (case
                                                 "FORALL (aa1,aa2:real): aa1=aa2 IMPLIES a(vv)*aa1 = a(vv)*aa2")
                                                (("1"
                                                  (rewrite -1)
                                                  (("1"
                                                    (hide 2)
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (rewrite
                                                         "sigma_eq")
                                                        (("1"
                                                          (hide 2)
                                                          (("1"
                                                            (skosimp*)
                                                            (("1"
                                                              (rewrite
                                                               "sigma_eq")
                                                              (("1"
                                                                (hide
                                                                 2)
                                                                (("1"
                                                                  (skosimp*)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (lift-if)
                                                                      (("1"
                                                                        (split
                                                                         +)
                                                                        (("1"
                                                                          (ground)
                                                                          (("1"
                                                                            (case
                                                                             "FORALL (eg1:real): 0*eg1 = 0")
                                                                            (("1"
                                                                              (rewrite
                                                                               -1)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (case
                                                                             "x = 0")
                                                                            (("1"
                                                                              (replaces
                                                                               -1)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (case
                                                                                   "n!2 = 0")
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (case
                                                                                         "n!1 = 0")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (case
                                                                                             "0^0 = 1")
                                                                                            (("1"
                                                                                              (case
                                                                                               "C^0 = 1")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (replaces
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (replaces
                                                                                                     -2)
                                                                                                    (("1"
                                                                                                      (replaces
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (case
                                                                                                         "A^0 = 1")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (hide-all-but
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide-all-but
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide-all-but
                                                                                               1)
                                                                                              (("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (case
                                                                                             "0^n!1 = 0")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide-all-but
                                                                                               (1
                                                                                                2))
                                                                                              (("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (case
                                                                                       "0^n!2 = 0 AND 0^n!1 = 0")
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide-all-but
                                                                                         (1
                                                                                          2
                                                                                          3
                                                                                          4))
                                                                                        (("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (case
                                                                               "n!2 = 0")
                                                                              (("1"
                                                                                (replaces
                                                                                 -1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (case
                                                                                     "n!1 = 0")
                                                                                    (("1"
                                                                                      (replaces
                                                                                       -1)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (case
                                                                                           "A^0 = 1 AND C^0 = 1 AND (A*x)^0 = 1 AND (C*x)^0 = 1")
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide-all-but
                                                                                             1)
                                                                                            (("2"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (rewrite
                                                                                         "mult_expt")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (case
                                                                                             "C^0 = 1 AND (C*x)^0 = 1")
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide-all-but
                                                                                               1)
                                                                                              (("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("2"
                                                                                              (case
                                                                                               "0^n!1 = 0")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide-all-but
                                                                                                 (1
                                                                                                  2))
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (case
                                                                                 "n!1 = 0")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (label
                                                                                   "hyp"
                                                                                   6)
                                                                                  (("2"
                                                                                    (case
                                                                                     "(IF n!1 = 0 THEN 1 ELSE x ^ n!1 ENDIF) = x^n!1")
                                                                                    (("1"
                                                                                      (replaces
                                                                                       -1)
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "mult_expt")
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "mult_expt")
                                                                                          (("1"
                                                                                            (case
                                                                                             "x^(n!1-n!2)*x^n!2 = x^n!1")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide
                                                                                               "hyp")
                                                                                              (("2"
                                                                                                (rewrite
                                                                                                 "expt_plus"
                                                                                                 :dir
                                                                                                 rl)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (replaces
                                                                                               -1)
                                                                                              (("2"
                                                                                                (case
                                                                                                 "0^n!2 = 0")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide-all-but
                                                                                                   (1
                                                                                                    2
                                                                                                    3))
                                                                                                  (("2"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "mult_expt")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "n!2"
                                                                                                   "C"
                                                                                                   "x")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (replaces
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (case
                                                                                                           "n!1 = n!2")
                                                                                                          (("1"
                                                                                                            (replaces
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (case
                                                                                                             "0^(n!1 -n!2) = 0")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (hide
                                                                                                               "hyp")
                                                                                                              (("2"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (case
                                                                                                       "0^n!2 = 0")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide
                                                                                                         "hyp")
                                                                                                        (("2"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (lift-if
                                                                                       1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (hide
                                                                 2)
                                                                (("3"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("4"
                                                                (hide
                                                                 2)
                                                                (("4"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("5"
                                                                (hide
                                                                 2)
                                                                (("5"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("6"
                                                                (hide
                                                                 2)
                                                                (("6"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("7"
                                                                (hide
                                                                 2)
                                                                (("7"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("8"
                                                                (hide
                                                                 2)
                                                                (("8"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("9"
                                                                (hide
                                                                 2)
                                                                (("9"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("10"
                                                                (hide
                                                                 2)
                                                                (("10"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("11"
                                                                (hide
                                                                 2)
                                                                (("11"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (hide 2)
                                                          (("3"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("4"
                                                          (hide 2)
                                                          (("4"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("5"
                                                          (hide 2)
                                                          (("5"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("6"
                                                          (hide 2)
                                                          (("6"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("7"
                                                          (hide 2)
                                                          (("7"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("8"
                                                          (hide 2)
                                                          (("8"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("9"
                                                          (hide 2)
                                                          (("9"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("10"
                                                          (hide 2)
                                                          (("10"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("11"
                                                          (hide 2)
                                                          (("11"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (hide 2)
                                                    (("3"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("4"
                                                    (hide 2)
                                                    (("4"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("5"
                                                    (hide 2)
                                                    (("5"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("6"
                                                    (hide 2)
                                                    (("6"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("7"
                                                    (hide 2)
                                                    (("7"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("8"
                                                    (hide 2)
                                                    (("8"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("9"
                                                    (hide 2)
                                                    (("9"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("10"
                                                    (hide 2)
                                                    (("10"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("11"
                                                    (hide 2)
                                                    (("11"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2" (grind) nil nil))
                                                nil)
                                               ("3"
                                                (hide 2)
                                                (("3" (grind) nil nil))
                                                nil)
                                               ("4"
                                                (hide 2)
                                                (("4" (grind) nil nil))
                                                nil)
                                               ("5"
                                                (hide 2)
                                                (("5" (grind) nil nil))
                                                nil)
                                               ("6"
                                                (hide 2)
                                                (("6" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2" (grind) nil nil))
                                              nil)
                                             ("3"
                                              (hide 2)
                                              (("3" (grind) nil nil))
                                              nil)
                                             ("4"
                                              (hide 2)
                                              (("4" (grind) nil nil))
                                              nil)
                                             ("5"
                                              (hide 2)
                                              (("5" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (lift-if)
                              (("2"
                                (ground)
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (case "(B+A*x)^ 0 = 1")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (hide 2)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (rewrite "div_expt")
                                  (("1"
                                    (cross-mult 2)
                                    (("1"
                                      (lemma "expt_plus")
                                      (("1"
                                        (inst - "n-vv" "vv" "D+C*x")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (replace -1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (case "0^vv = 0")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (hide-all-but (1 2))
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 3) (("2" (grind) nil nil)) nil)
                     ("3" (hide 3) (("3" (grind) nil nil)) nil)
                     ("4" (hide 3) (("4" (grind) nil nil)) nil)
                     ("5" (hide 3) (("5" (grind) nil nil)) nil)
                     ("6" (hide 3) (("6" (grind) nil nil)) nil)
                     ("7" (hide 3) (("7" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 3)
              (("2" (rewrite "sigma_eq")
                (("2" (hide 2)
                  (("2" (skosimp*)
                    (("2" (rewrite "sigma_scal_right" :dir rl)
                      (("1" (assert)
                        (("1" (rewrite "sigma_eq")
                          (("1" (hide 2)
                            (("1" (skosimp*)
                              (("1"
                                (rewrite "sigma_scal" :dir rl)
                                (("1"
                                  (rewrite "sigma_scal" :dir rl)
                                  (("1"
                                    (rewrite
                                     "sigma_scal_right"
                                     :dir
                                     rl)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (rewrite "sigma_eq")
                                        (("1"
                                          (hide 2)
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2" (grind) nil nil))
                                          nil)
                                         ("3"
                                          (hide 2)
                                          (("3" (grind) nil nil))
                                          nil)
                                         ("4"
                                          (hide 2)
                                          (("4" (grind) nil nil))
                                          nil)
                                         ("5"
                                          (hide 2)
                                          (("5" (grind) nil nil))
                                          nil)
                                         ("6"
                                          (hide 2)
                                          (("6" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2" (grind) nil nil))
                                      nil)
                                     ("3"
                                      (hide 2)
                                      (("3" (grind) nil nil))
                                      nil)
                                     ("4"
                                      (hide 2)
                                      (("4" (grind) nil nil))
                                      nil)
                                     ("5"
                                      (hide 2)
                                      (("5" (grind) nil nil))
                                      nil)
                                     ("6"
                                      (hide 2)
                                      (("6" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2" (grind) nil nil))
                                    nil)
                                   ("3"
                                    (hide 2)
                                    (("3" (grind) nil nil))
                                    nil)
                                   ("4"
                                    (hide 2)
                                    (("4" (grind) nil nil))
                                    nil)
                                   ("5"
                                    (hide 2)
                                    (("5" (grind) nil nil))
                                    nil)
                                   ("6"
                                    (hide 2)
                                    (("6" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2" (grind) nil nil))
                                  nil)
                                 ("3"
                                  (hide 2)
                                  (("3" (grind) nil nil))
                                  nil)
                                 ("4"
                                  (hide 2)
                                  (("4" (grind) nil nil))
                                  nil)
                                 ("5"
                                  (hide 2)
                                  (("5" (grind) nil nil))
                                  nil)
                                 ("6"
                                  (hide 2)
                                  (("6" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2) (("2" (grind) nil nil)) nil)
                           ("3" (hide 2) (("3" (grind) nil nil)) nil)
                           ("4" (hide 2) (("4" (grind) nil nil)) nil)
                           ("5" (hide 2) (("5" (grind) nil nil)) nil)
                           ("6" (hide 2) (("6" (grind) nil nil)) nil)
                           ("7" (hide 2) (("7" (grind) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (hide 2) (("2" (grind) nil nil)) nil)
                       ("3" (hide 2) (("3" (grind) nil nil)) nil)
                       ("4" (hide 2) (("4" (grind) nil nil)) nil)
                       ("5" (hide 2) (("5" (grind) nil nil)) nil)
                       ("6" (hide 2) (("6" (grind) nil nil)) nil)
                       ("7" (hide 2) (("7" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (hide 3) (("3" (grind) nil nil)) nil)
             ("4" (hide 3) (("4" (grind) nil nil)) nil)
             ("5" (hide 3) (("5" (grind) nil nil)) nil)
             ("6" (hide 3) (("6" (grind) nil nil)) nil)
             ("7" (hide 3) (("7" (grind) nil nil)) nil)
             ("8" (hide 3) (("8" (grind) nil nil)) nil)
             ("9" (hide 3) (("9" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma_scal_right formula-decl nil sigma nil)
    (sigma_swap formula-decl nil sigma_swap nil)
    (sigma_product formula-decl nil sigma_nat nil)
    (sigma_eq formula-decl nil sigma nil)
    (C const-decl "posnat" binomial nil)
    (sigma def-decl "real" sigma nil)
    (T_low type-eq-decl nil sigma nil)
    (T_high type-eq-decl nil sigma nil)
    (sigma_scal formula-decl nil sigma nil))
   shostak))
 (poly_translate_rat_bounded_left_TCC1 0
  (poly_translate_rat_bounded_left_TCC1-1 nil 3541520014
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (poly_translate_rat_bounded_left subtype
    "((number_fields.-)(polynomials.x, polynomials.A))" "nznum")))
 (poly_translate_rat_bounded_left 0
  (poly_translate_rat_bounded_left-1 nil 3541520015
   ("" (skeep)
    (("" (lemma "poly_translate_rat_def")
      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((poly_translate_rat_def formula-decl nil polynomials nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (poly_translate_rat_bounded_right_TCC1 0
  (poly_translate_rat_bounded_right_TCC1-1 nil 3541520014
   ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil))
   nil
   (poly_translate_rat_bounded_right subtype "polynomials.n"
    "{i: integers.int | booleans.OR(((number_fields.-)(polynomials.B, polynomials.x)) /= 0, reals.>=(i, 0))}")))
 (poly_translate_rat_bounded_right_TCC2 0
  (poly_translate_rat_bounded_right_TCC2-1 nil 3541520014
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (poly_translate_rat_bounded_right subtype
    "((number_fields.-)(polynomials.B, polynomials.x))" "nznum")))
 (poly_translate_rat_bounded_right 0
  (poly_translate_rat_bounded_right-1 nil 3541520039
   ("" (skeep)
    (("" (lemma "poly_translate_rat_def")
      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((poly_translate_rat_def formula-decl nil polynomials nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   nil))
 (poly_translate_rat2_TCC1 0
  (poly_translate_rat2_TCC1-1 nil 3541506976 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (poly_translate_rat2 subtype "polynomials.j"
    "{i: naturalnumbers.nat | reals.<=(i, polynomials.k)}")))
 (poly_translate_rat2_TCC2 0
  (poly_translate_rat2_TCC2-1 nil 3541506976 ("" (subtype-tcc) nil nil)
   ((even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (poly_translate_rat2 subtype "polynomials.j"
    "{i: integers.int | booleans.OR(polynomials.B /= 0, reals.>=(i, 0))}")))
 (poly_translate_rat2_TCC3 0
  (poly_translate_rat2_TCC3-1 nil 3541506976 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (/= const-decl "boolean" notequal nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (poly_translate_rat2 subtype
    "((number_fields.-)(polynomials.k, polynomials.j))"
    "{i: integers.int | booleans.OR(polynomials.A /= 0, reals.>=(i, 0))}")))
 (poly_translate_rat2_TCC4 0
  (poly_translate_rat2_TCC4-1 nil 3541506976 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (poly_translate_rat2 subtype
    "(number_fields.-)(polynomials.n, polynomials.k)" "nat")))
 (poly_translate_rat2_TCC5 0
  (poly_translate_rat2_TCC5-1 nil 3541506976 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (poly_translate_rat2 subtype
    "(number_fields.-)(polynomials.i, polynomials.j)"
    "{i: naturalnumbers.nat | reals.<=(i, (number_fields.-)(polynomials.n, polynomials.k))}")))
 (poly_translate_rat2_TCC6 0
  (poly_translate_rat2_TCC6-1 nil 3541506976 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (/= const-decl "boolean" notequal nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (poly_translate_rat2 subtype
    "((number_fields.-)(polynomials.i, polynomials.j))"
    "{i: integers.int | booleans.OR(polynomials.D /= 0, reals.>=(i, 0))}")))
 (poly_translate_rat2_TCC7 0
  (poly_translate_rat2_TCC7-1 nil 3541506976 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (/= const-decl "boolean" notequal nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (poly_translate_rat2 subtype
    "((number_fields.+)((number_fields.-)((number_fields.-)(polynomials.j, polynomials.i), polynomials.k), polynomials.n))"
    "{i: integers.int | booleans.OR(polynomials.C /= 0, reals.>=(i, 0))}")))
 (poly_translate_rat2_TCC8 0
  (poly_translate_rat2_TCC8-1 nil 3541506976 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (poly_translate_rat2 subtype
    "(number_fields.+)((number_fields.-)((number_fields.-)(number_fields.*((number_fields.-)(1), polynomials.i), polynomials.q), polynomials.k), number_fields.*(2, polynomials.n))"
    "{i: naturalnumbers.nat | reals.<=(i, (number_fields.-)(polynomials.n, polynomials.k))}")))
 (poly_translate_rat2_TCC9 0
  (poly_translate_rat2_TCC9-1 nil 3541506976 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (/= const-decl "boolean" notequal nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (poly_translate_rat2 subtype
    "((number_fields.+)((number_fields.-)((number_fields.-)(number_fields.*((number_fields.-)(1), polynomials.i), polynomials.q), polynomials.k), number_fields.*(2, polynomials.n)))"
    "{i: integers.int | booleans.OR(polynomials.F /= 0, reals.>=(i, 0))}")))
 (poly_translate_rat2_TCC10 0
  (poly_translate_rat2_TCC10-1 nil 3616846101
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (/= const-decl "boolean" notequal nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (poly_translate_rat2 subtype
    "((number_fields.-)((number_fields.+)(polynomials.i, polynomials.q), polynomials.n))"
    "{i: integers.int | booleans.OR(polynomials.E /= 0, reals.>=(i, 0))}")))
 (poly_translate_rat2_def_TCC1 0
  (poly_translate_rat2_def_TCC1-1 nil 3541499591
   ("" (subtype-tcc) nil nil)
   ((real_times_real_is_real application-judgement "real" reals nil))
   nil
   (poly_translate_rat2_def subtype "polynomials.n"
    "{i: integers.int | booleans.OR((booleans.NOT)((number_fields.+)(polynomials.F, number_fields.*(polynomials.E, polynomials.x)) = 0), reals.>=(i, 0))}")))
 (poly_translate_rat2_def_TCC2 0
  (poly_translate_rat2_def_TCC2-1 nil 3541499591
   ("" (skeep) (("" (grind-reals :dontdistrib -) nil nil)) nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (poly_translate_rat2_def subtype
    "(number_fields.*(((number_fields.+)(number_fields.*(polynomials.C, polynomials.x), polynomials.D)), ((number_fields.+)(number_fields.*(polynomials.E, polynomials.x), polynomials.F))))"
    "nznum")))
 (poly_translate_rat2_def 0
  (poly_translate_rat2_def-6 nil 3563056013
   (""
    (deftactic step_and_grind (step)
     (branch step ((skip) (then (hide-all-but 1) (finalize (grind))))))
    (("" (lemma "mult_expt")
      ((""
        (case "NOT FORALL (i: nat, n0x, n0y: real): (n0x * n0y) ^ i = n0x ^ i * n0y ^ i")
        (("1" (hide 2)
          (("1" (skeep)
            (("1" (case "n0x = 0 OR n0y = 0")
              (("1" (hide -2)
                (("1" (split -)
                  (("1" (replace -1)
                    (("1" (case "i = 0")
                      (("1" (replace -1) (("1" (grind) nil nil)) nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil)
                   ("2" (replace -1)
                    (("2" (case "i = 0")
                      (("1" (replace -1) (("1" (grind) nil nil)) nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (inst - "i" "n0x" "n0y")
                (("1" (ground) nil nil) ("2" (ground) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (hide -2)
          (("2" (label "me1" -1)
            (("2" (hide "me1")
              (("2" (lemma "expt_plus")
                (("2"
                  (case "NOT FORALL (i, j: nat, n0x: real): n0x ^ (i + j) = n0x ^ i * n0x ^ j")
                  (("1" (hide 2)
                    (("1" (skeep)
                      (("1" (inst - "i" "j" "n0x")
                        (("1" (flatten)
                          (("1" (replace -1)
                            (("1" (case "i = 0 AND j = 0")
                              (("1"
                                (flatten)
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (replace -2)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (label "ep1" -1)
                    (("2" (hide -2)
                      (("2" (hide "ep1")
                        (("2" (skeep)
                          (("2" (label "hyp" 3)
                            (("2" (expand "polynomial")
                              (("2"
                                (rewrite "sigma_scal" :dir rl)
                                (("1"
                                  (case
                                   "sigma(0, n,
                                                                                                                                                                                                                                     LAMBDA (i_1: nat):
                                                                                                                                                                                                                                       a(i_1) * (D + C * x) ^ n * (F + E * x) ^ n *
                                                                                                                                                                                                                                        (IF i_1 = 0 THEN 1
                                                                                                                                                                                                                                         ELSE ((B + A * x) /
                                                                                                                                                                                                                                                (D * F + D * E * x + (C * F * x + C * E * x * x)))
                                                                                                                                                                                                                                               ^ i_1
                                                                                                                                                                                                                                         ENDIF)) = sigma(0, n,
                                                                                                                                                                                                                                     LAMBDA (i_1: nat):
                                                                                                                                                                                                                                       a(i_1) * ((B + A * x)^i_1*(D+C*x)^(n-i_1)*(F+E*x)^(n-i_1)))")
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (expand "poly_translate_rat2")
                                        (("1"
                                          (step_and_grind
                                           (case
                                            "(LAMBDA (i: nat):
                                                                                                                                                                                                                 sigma(0, n,
                                                                                                                                                                                                                       LAMBDA (k: nat):
                                                                                                                                                                                                                         a(k) *
                                                                                                                                                                                                                          sigma(0, n,
                                                                                                                                                                                                                                LAMBDA (i_1: nat):
                                                                                                                                                                                                                                  sigma(0,
                                                                                                                                                                                                                                        k,
                                                                                                                                                                                                                                        LAMBDA
                                                                                                                                                                                                                                        (j: nat):
                                                                                                                                                                                                                                        IF (    i > 2 * n - k
                                                                                                                                                                                                                                             OR i_1 < n - i
                                                                                                                                                                                                                                             OR i_1 > -1 * i - k + 2 * n
                                                                                                                                                                                                                                             OR j < i_1 + k - n
                                                                                                                                                                                                                                             OR j > i_1
                                                                                                                                                                                                                                             OR j > k
                                                                                                                                                                                                                                             OR k > n)
                                                                                                                                                                                                                                        THEN 0
                                                                                                                                                                                                                                        ELSE C(k, j) * C(n - k, i_1 - j)
                                                                                                                                                                                                                                             *
                                                                                                                                                                                                                                             C
                                                                                                                                                                                                                                             (n - k,
                                                                                                                                                                                                                                              -1 * i - i_1 - k + 2 * n)
                                                                                                                                                                                                                                             *
                                                                                                                                                                                                                                             A ^ (k - j)
                                                                                                                                                                                                                                             *
                                                                                                                                                                                                                                             B ^ j
                                                                                                                                                                                                                                             *
                                                                                                                                                                                                                                             C ^ (j - i_1 - k + n)
                                                                                                                                                                                                                                             *
                                                                                                                                                                                                                                             D ^ (i_1 - j)
                                                                                                                                                                                                                                             *
                                                                                                                                                                                                                                             E ^ (i + i_1 - n)
                                                                                                                                                                                                                                             *
                                                                                                                                                                                                                                             F ^ (-1 * i - i_1 - k + 2 * n)
                                                                                                                                                                                                                                        ENDIF)))
                                                                                                                                                                                                                  * (IF i = 0 THEN 1 ELSE x ^ i ENDIF)) = (LAMBDA (i: nat):
                                                                                                                                                                                                                 sigma(0, n,
                                                                                                                                                                                                                       LAMBDA (k: nat):
                                                                                                                                                                                                                         a(k) *
                                                                                                                                                                                                                          sigma(0, n,
                                                                                                                                                                                                                                LAMBDA (i_1: nat):
                                                                                                                                                                                                                                  sigma(0,
                                                                                                                                                                                                                                        k,
                                                                                                                                                                                                                                        LAMBDA
                                                                                                                                                                                                                                        (j: nat):
                                                                                                                                                                                                                                        IF (    i > 2 * n - k
                                                                                                                                                                                                                                             OR i_1 < n - i
                                                                                                                                                                                                                                             OR i_1 > -1 * i - k + 2 * n
                                                                                                                                                                                                                                             OR j < i_1 + k - n
                                                                                                                                                                                                                                             OR j > i_1
                                                                                                                                                                                                                                             OR j > k
                                                                                                                                                                                                                                             OR k > n)
                                                                                                                                                                                                                                        THEN 0
                                                                                                                                                                                                                                        ELSE C(k, j) * C(n - k, i_1 - j)
                                                                                                                                                                                                                                             *
                                                                                                                                                                                                                                             C
                                                                                                                                                                                                                                             (n - k,
                                                                                                                                                                                                                                              -1 * i - i_1 - k + 2 * n)
                                                                                                                                                                                                                                             *
                                                                                                                                                                                                                                             A ^ (k - j)
                                                                                                                                                                                                                                             *
                                                                                                                                                                                                                                             B ^ j
                                                                                                                                                                                                                                             *
                                                                                                                                                                                                                                             C ^ (j - i_1 - k + n)
                                                                                                                                                                                                                                             *
                                                                                                                                                                                                                                             D ^ (i_1 - j)
                                                                                                                                                                                                                                             *
                                                                                                                                                                                                                                             E ^ (i + i_1 - n)
                                                                                                                                                                                                                                             *
                                                                                                                                                                                                                                             F ^ (-1 * i - i_1 - k + 2 * n)
                                                                                                                                                                                                                                        ENDIF))
                                                                                                                                                                                                                  * (IF i = 0 THEN 1 ELSE x ^ i ENDIF)))"))
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (step_and_grind
                                                 (rewrite
                                                  "sigma_swap"))
                                                (("1"
                                                  (step_and_grind
                                                   (rewrite
                                                    "sigma_eq"))
                                                  (("1"
                                                    (skolem 1 "k")
                                                    (("1"
                                                      (rewrite
                                                       "binomial_theorem")
                                                      (("1"
                                                        (rewrite
                                                         "binomial_theorem")
                                                        (("1"
                                                          (rewrite
                                                           "binomial_theorem")
                                                          (("1"
                                                            (step_and_grind
                                                             (invoke
                                                              (name-replace
                                                               "AAC2"
                                                               "%1")
                                                              (! 1 2)))
                                                            (("1"
                                                              (step_and_grind
                                                               (rewrite
                                                                "sigma_product"))
                                                              (("1"
                                                                (step_and_grind
                                                                 (rewrite
                                                                  "sigma_product"))
                                                                (("1"
                                                                  (expand
                                                                   "AAC2")
                                                                  (("1"
                                                                    (step_and_grind
                                                                     (rewrite
                                                                      "sigma_reverse"))
                                                                    (("1"
                                                                      (step_and_grind
                                                                       (rewrite
                                                                        "sigma_scal"
                                                                        :dir
                                                                        rl))
                                                                      (("1"
                                                                        (lemma
                                                                         "sigma_split")
                                                                        (("1"
                                                                          (step_and_grind
                                                                           (invoke
                                                                            (inst
                                                                             -
                                                                             "%1"
                                                                             "2*n"
                                                                             "0"
                                                                             "2*n-k")
                                                                            (!
                                                                             1
                                                                             2
                                                                             3)))
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (step_and_grind
                                                                               (invoke
                                                                                (case-replace
                                                                                 "%1 = 0")
                                                                                (!
                                                                                 -1
                                                                                 2
                                                                                 2)))
                                                                              (("1"
                                                                                (hide
                                                                                 -1)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (step_and_grind
                                                                                         (rewrite
                                                                                          "sigma_eq"))
                                                                                        (("1"
                                                                                          (hide
                                                                                           2)
                                                                                          (("1"
                                                                                            (skolem
                                                                                             1
                                                                                             "q")
                                                                                            (("1"
                                                                                              (step_and_grind
                                                                                               (rewrite
                                                                                                "sigma_scal"
                                                                                                :dir
                                                                                                rl))
                                                                                              (("1"
                                                                                                (step_and_grind
                                                                                                 (rewrite
                                                                                                  "sigma_scal"
                                                                                                  :dir
                                                                                                  rl))
                                                                                                (("1"
                                                                                                  (step_and_grind
                                                                                                   (rewrite
                                                                                                    "sigma_scal_right"
                                                                                                    :dir
                                                                                                    rl))
                                                                                                  (("1"
                                                                                                    (step_and_grind
                                                                                                     (rewrite
                                                                                                      "sigma_eq"))
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       2)
                                                                                                      (("1"
                                                                                                        (skolem
                                                                                                         1
                                                                                                         "j")
                                                                                                        (("1"
                                                                                                          (lift-if)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (split
                                                                                                               +)
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                (("1"
                                                                                                                  (split
                                                                                                                   -)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (rewrite
                                                                                                                       "sigma_zero")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (case
                                                                                                                           "FORALL (eg1:real): 0*eg1 = 0")
                                                                                                                          (("1"
                                                                                                                            (rewrite
                                                                                                                             -1)
                                                                                                                            nil
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (rewrite
                                                                                                                       "sigma_zero")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (flatten)
                                                                                                                (("2"
                                                                                                                  (step_and_grind
                                                                                                                   (rewrite
                                                                                                                    "sigma_scal_right"
                                                                                                                    :dir
                                                                                                                    rl))
                                                                                                                  (("2"
                                                                                                                    (step_and_grind
                                                                                                                     (rewrite
                                                                                                                      "sigma_scal"
                                                                                                                      :dir
                                                                                                                      rl))
                                                                                                                    (("2"
                                                                                                                      (step_and_grind
                                                                                                                       (rewrite
                                                                                                                        "sigma_scal"
                                                                                                                        :dir
                                                                                                                        rl))
                                                                                                                      (("2"
                                                                                                                        (step_and_grind
                                                                                                                         (rewrite
                                                                                                                          "sigma_scal_right"
                                                                                                                          :dir
                                                                                                                          rl))
                                                                                                                        (("2"
                                                                                                                          (step_and_grind
                                                                                                                           (rewrite
                                                                                                                            "sigma_eq"))
                                                                                                                          (("2"
                                                                                                                            (hide
                                                                                                                             "hyp")
                                                                                                                            (("2"
                                                                                                                              (skolem
                                                                                                                               1
                                                                                                                               "i")
                                                                                                                              (("2"
                                                                                                                                (lift-if)
                                                                                                                                (("2"
                                                                                                                                  (ground)
                                                                                                                                  (("2"
                                                                                                                                    (reveal
                                                                                                                                     "me1")
                                                                                                                                    (("2"
                                                                                                                                      (rewrite
                                                                                                                                       "me1")
                                                                                                                                      (("2"
                                                                                                                                        (rewrite
                                                                                                                                         "me1")
                                                                                                                                        (("2"
                                                                                                                                          (rewrite
                                                                                                                                           "me1")
                                                                                                                                          (("2"
                                                                                                                                            (case
                                                                                                                                             "x ^ (k - i)*x ^ (-1 * j - k + i + n)*x ^ (j - n + q)=x^q")
                                                                                                                                            (("1"
                                                                                                                                              (case
                                                                                                                                               "(IF q = 0 THEN 1 ELSE x ^ q ENDIF) = x^q")
                                                                                                                                              (("1"
                                                                                                                                                (replace
                                                                                                                                                 -1)
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (hide-all-but
                                                                                                                                                 1)
                                                                                                                                                (("2"
                                                                                                                                                  (lift-if)
                                                                                                                                                  (("2"
                                                                                                                                                    (ground)
                                                                                                                                                    (("2"
                                                                                                                                                      (replace
                                                                                                                                                       -1)
                                                                                                                                                      (("2"
                                                                                                                                                        (expand
                                                                                                                                                         "^")
                                                                                                                                                        (("2"
                                                                                                                                                          (expand
                                                                                                                                                           "expt")
                                                                                                                                                          (("2"
                                                                                                                                                            (propax)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (assert)
                                                                                                                                              (("2"
                                                                                                                                                (hide
                                                                                                                                                 (3
                                                                                                                                                  4
                                                                                                                                                  5
                                                                                                                                                  6
                                                                                                                                                  7
                                                                                                                                                  8
                                                                                                                                                  9
                                                                                                                                                  10))
                                                                                                                                                (("2"
                                                                                                                                                  (reveal
                                                                                                                                                   "ep1")
                                                                                                                                                  (("2"
                                                                                                                                                    (rewrite
                                                                                                                                                     "ep1"
                                                                                                                                                     :dir
                                                                                                                                                     rl)
                                                                                                                                                    (("2"
                                                                                                                                                      (rewrite
                                                                                                                                                       "ep1"
                                                                                                                                                       :dir
                                                                                                                                                       rl)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (step_and_grind
                                                                                 (rewrite
                                                                                  "sigma_restrict_eq_0"))
                                                                                (("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (skosimp*)
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "sigma_zero")
                                                                                      (("2"
                                                                                        (rewrite
                                                                                         "sigma_zero")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (step_and_grind
                                             (decompose-equality))
                                            (("2"
                                              (step_and_grind
                                               (rewrite
                                                "sigma_scal_right"
                                                :dir
                                                rl))
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (step_and_grind
                                                   (rewrite
                                                    "sigma_eq"))
                                                  (("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide "hyp")
                                    (("2"
                                      (step_and_grind
                                       (rewrite "sigma_eq"))
                                      (("1"
                                        (hide 2)
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (ground)
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "^")
                                                    (("1"
                                                      (expand "expt")
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (rewrite "div_expt")
                                                (("1"
                                                  (reveal "me1")
                                                  (("1"
                                                    (copy "me1")
                                                    (("1"
                                                      (inst
                                                       -
                                                       "n!1"
                                                       "D+C*x"
                                                       "F+E*x")
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (cross-mult
                                                             2)
                                                            (("1"
                                                              (lemma
                                                               "expt_plus")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "n-n!1"
                                                                 "n!1"
                                                                 _)
                                                                (("1"
                                                                  (inst-cp
                                                                   -
                                                                   "F + E*x")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "D+C*x")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (replace -1)
                                                    (("2"
                                                      (case
                                                       "0^n!1 = 0")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (1 2))
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma
                                         "nzreal_times_nzreal_is_nzreal")
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (inst - "D+C*x" "F+E*x")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (hide "hyp")
                                    (("3"
                                      (lemma
                                       "nzreal_times_nzreal_is_nzreal")
                                      (("3"
                                        (skeep)
                                        (("3"
                                          (inst - "D+C*x" "F+E*x")
                                          (("1" (assert) nil nil)
                                           ("2" (assert) nil nil)
                                           ("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("4" (assert) nil nil)
                                   ("5"
                                    (lemma
                                     "nzreal_times_nzreal_is_nzreal")
                                    (("5"
                                      (skeep)
                                      (("5"
                                        (inst - "D+C*x" "F+E*x")
                                        (("1" (assert) nil nil)
                                         ("2" (assert) nil nil)
                                         ("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma
                                   "nzreal_times_nzreal_is_nzreal")
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (inst - "D+C*x" "F+E*x")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mult_expt formula-decl nil exponentiation nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (n0x skolem-const-decl "real" polynomials nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (sigma def-decl "real" sigma nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (C const-decl "posnat" binomial nil)
    (sigma_eq formula-decl nil sigma nil)
    (subrange type-eq-decl nil integers nil)
    (binomial_theorem formula-decl nil polynomials nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (sigma_product formula-decl nil sigma_nat nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (AAC2 skolem-const-decl "real" polynomials nil)
    (F skolem-const-decl "real" polynomials nil)
    (E skolem-const-decl "real" polynomials nil)
    (D skolem-const-decl "real" polynomials nil)
    (C skolem-const-decl "real" polynomials nil)
    (A skolem-const-decl "real" polynomials nil)
    (k skolem-const-decl "subrange(0, n)" polynomials nil)
    (n skolem-const-decl "nat" polynomials nil)
    (sigma_scal_right formula-decl nil sigma nil)
    (sigma_zero formula-decl nil sigma nil)
    (sigma_nat application-judgement "nat" sigma_nat nil)
    (sigma_restrict_eq_0 formula-decl nil sigma nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (sigma_split formula-decl nil sigma nil)
    (sigma_reverse formula-decl nil sigma_nat nil)
    (sigma_swap formula-decl nil sigma_swap nil)
    (poly_translate_rat2 const-decl "real" polynomials nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (div_cancel3 formula-decl nil real_props nil)
    (times_div2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div1 formula-decl nil real_props nil)
    (div_expt formula-decl nil exponentiation nil)
    (nzreal_times_nzreal_is_nzreal judgement-tcc nil real_types nil)
    (x skolem-const-decl "real" polynomials nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (sigma_scal formula-decl nil sigma nil)
    (sequence type-eq-decl nil sequences nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (T_high type-eq-decl nil sigma nil)
    (T_low type-eq-decl nil sigma nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (expt_plus formula-decl nil exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (n0y skolem-const-decl "real" polynomials nil)
    (n0x skolem-const-decl "real" polynomials nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (TRUE const-decl "bool" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil)
  (poly_translate_rat2_def-5 nil 3563055801
   (""
    (deftactic step_and_grind (step)
     (branch step ((skip) (then (hide-all-but 1) (finalize (grind))))))
    (("" (lemma "mult_expt")
      ((""
        (case "NOT FORALL (i: nat, n0x, n0y: real): (n0x * n0y) ^ i = n0x ^ i * n0y ^ i")
        (("1" (hide 2)
          (("1" (skeep)
            (("1" (case "n0x = 0 OR n0y = 0")
              (("1" (hide -2)
                (("1" (split -)
                  (("1" (replace -1)
                    (("1" (case "i = 0")
                      (("1" (replace -1) (("1" (grind) nil nil)) nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil)
                   ("2" (replace -1)
                    (("2" (case "i = 0")
                      (("1" (replace -1) (("1" (grind) nil nil)) nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (inst - "i" "n0x" "n0y")
                (("1" (ground) nil nil) ("2" (ground) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (hide -2)
          (("2" (label "me1" -1)
            (("2" (hide "me1")
              (("2" (lemma "expt_plus")
                (("2"
                  (case "NOT FORALL (i, j: nat, n0x: real): n0x ^ (i + j) = n0x ^ i * n0x ^ j")
                  (("1" (hide 2)
                    (("1" (skeep)
                      (("1" (inst - "i" "j" "n0x")
                        (("1" (flatten)
                          (("1" (replace -1)
                            (("1" (case "i = 0 AND j = 0")
                              (("1"
                                (flatten)
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (replace -2)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (label "ep1" -1)
                    (("2" (hide -2)
                      (("2" (hide "ep1")
                        (("2" (skeep)
                          (("2" (label "hyp" 3)
                            (("2" (expand "polynomial")
                              (("2"
                                (step_and_grind
                                 (rewrite "sigma_scal" :dir rl))
                                (("1"
                                  (case
                                   "sigma(0, n,
                                                                                                                                                                                              LAMBDA (i_1: nat):
                                                                                                                                                                                                a(i_1) * (D + C * x) ^ n * (F + E * x) ^ n *
                                                                                                                                                                                                 (IF i_1 = 0 THEN 1
                                                                                                                                                                                                  ELSE ((B + A * x) /
                                                                                                                                                                                                         (D * F + D * E * x + (C * F * x + C * E * x * x)))
                                                                                                                                                                                                        ^ i_1
                                                                                                                                                                                                  ENDIF)) = sigma(0, n,
                                                                                                                                                                                              LAMBDA (i_1: nat):
                                                                                                                                                                                                a(i_1) * ((B + A * x)^i_1*(D+C*x)^(n-i_1)*(F+E*x)^(n-i_1)))")
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (expand "poly_translate_rat2")
                                        (("1"
                                          (case
                                           "(LAMBDA (i: nat):
                                                                                                                                                                  sigma(0, n,
                                                                                                                                                                        LAMBDA (k: nat):
                                                                                                                                                                          a(k) *
                                                                                                                                                                           sigma(0, n,
                                                                                                                                                                                 LAMBDA (i_1: nat):
                                                                                                                                                                                   sigma(0,
                                                                                                                                                                                         k,
                                                                                                                                                                                         LAMBDA
                                                                                                                                                                                         (j: nat):
                                                                                                                                                                                         IF (    i > 2 * n - k
                                                                                                                                                                                              OR i_1 < n - i
                                                                                                                                                                                              OR i_1 > -1 * i - k + 2 * n
                                                                                                                                                                                              OR j < i_1 + k - n
                                                                                                                                                                                              OR j > i_1
                                                                                                                                                                                              OR j > k
                                                                                                                                                                                              OR k > n)
                                                                                                                                                                                         THEN 0
                                                                                                                                                                                         ELSE C(k, j) * C(n - k, i_1 - j)
                                                                                                                                                                                              *
                                                                                                                                                                                              C
                                                                                                                                                                                              (n - k,
                                                                                                                                                                                               -1 * i - i_1 - k + 2 * n)
                                                                                                                                                                                              *
                                                                                                                                                                                              A ^ (k - j)
                                                                                                                                                                                              *
                                                                                                                                                                                              B ^ j
                                                                                                                                                                                              *
                                                                                                                                                                                              C ^ (j - i_1 - k + n)
                                                                                                                                                                                              *
                                                                                                                                                                                              D ^ (i_1 - j)
                                                                                                                                                                                              *
                                                                                                                                                                                              E ^ (i + i_1 - n)
                                                                                                                                                                                              *
                                                                                                                                                                                              F ^ (-1 * i - i_1 - k + 2 * n)
                                                                                                                                                                                         ENDIF)))
                                                                                                                                                                   * (IF i = 0 THEN 1 ELSE x ^ i ENDIF)) = (LAMBDA (i: nat):
                                                                                                                                                                  sigma(0, n,
                                                                                                                                                                        LAMBDA (k: nat):
                                                                                                                                                                          a(k) *
                                                                                                                                                                           sigma(0, n,
                                                                                                                                                                                 LAMBDA (i_1: nat):
                                                                                                                                                                                   sigma(0,
                                                                                                                                                                                         k,
                                                                                                                                                                                         LAMBDA
                                                                                                                                                                                         (j: nat):
                                                                                                                                                                                         IF (    i > 2 * n - k
                                                                                                                                                                                              OR i_1 < n - i
                                                                                                                                                                                              OR i_1 > -1 * i - k + 2 * n
                                                                                                                                                                                              OR j < i_1 + k - n
                                                                                                                                                                                              OR j > i_1
                                                                                                                                                                                              OR j > k
                                                                                                                                                                                              OR k > n)
                                                                                                                                                                                         THEN 0
                                                                                                                                                                                         ELSE C(k, j) * C(n - k, i_1 - j)
                                                                                                                                                                                              *
                                                                                                                                                                                              C
                                                                                                                                                                                              (n - k,
                                                                                                                                                                                               -1 * i - i_1 - k + 2 * n)
                                                                                                                                                                                              *
                                                                                                                                                                                              A ^ (k - j)
                                                                                                                                                                                              *
                                                                                                                                                                                              B ^ j
                                                                                                                                                                                              *
                                                                                                                                                                                              C ^ (j - i_1 - k + n)
                                                                                                                                                                                              *
                                                                                                                                                                                              D ^ (i_1 - j)
                                                                                                                                                                                              *
                                                                                                                                                                                              E ^ (i + i_1 - n)
                                                                                                                                                                                              *
                                                                                                                                                                                              F ^ (-1 * i - i_1 - k + 2 * n)
                                                                                                                                                                                         ENDIF))
                                                                                                                                                                   * (IF i = 0 THEN 1 ELSE x ^ i ENDIF)))")
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (step_and_grind
                                                 (rewrite
                                                  "sigma_swap"))
                                                (("1"
                                                  (step_and_grind
                                                   (rewrite
                                                    "sigma_eq"))
                                                  (("1"
                                                    (skolem 1 "k")
                                                    (("1"
                                                      (rewrite
                                                       "binomial_theorem")
                                                      (("1"
                                                        (rewrite
                                                         "binomial_theorem")
                                                        (("1"
                                                          (rewrite
                                                           "binomial_theorem")
                                                          (("1"
                                                            (step_and_grind
                                                             (invoke
                                                              (name-replace
                                                               "AAC2"
                                                               "%1")
                                                              (! 1 2)))
                                                            (("1"
                                                              (step_and_grind
                                                               (rewrite
                                                                "sigma_product"))
                                                              (("1"
                                                                (step_and_grind
                                                                 (rewrite
                                                                  "sigma_product"))
                                                                (("1"
                                                                  (expand
                                                                   "AAC2")
                                                                  (("1"
                                                                    (step_and_grind
                                                                     (rewrite
                                                                      "sigma_reverse"))
                                                                    (("1"
                                                                      (step_and_grind
                                                                       (rewrite
                                                                        "sigma_scal"
                                                                        :dir
                                                                        rl))
                                                                      (("1"
                                                                        (lemma
                                                                         "sigma_split")
                                                                        (("1"
                                                                          (step_and_grind
                                                                           (invoke
                                                                            (inst
                                                                             -
                                                                             "%1"
                                                                             "2*n"
                                                                             "0"
                                                                             "2*n-k")
                                                                            (!
                                                                             1
                                                                             2
                                                                             3)))
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (step_and_grind
                                                                               (invoke
                                                                                (case-replace
                                                                                 "%1 = 0")
                                                                                (!
                                                                                 -1
                                                                                 2
                                                                                 2)))
                                                                              (("1"
                                                                                (hide
                                                                                 -1)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (step_and_grind
                                                                                         (rewrite
                                                                                          "sigma_eq"))
                                                                                        (("1"
                                                                                          (hide
                                                                                           2)
                                                                                          (("1"
                                                                                            (skolem
                                                                                             1
                                                                                             "q")
                                                                                            (("1"
                                                                                              (step_and_grind
                                                                                               (rewrite
                                                                                                "sigma_scal"
                                                                                                :dir
                                                                                                rl))
                                                                                              (("1"
                                                                                                (step_and_grind
                                                                                                 (rewrite
                                                                                                  "sigma_scal"
                                                                                                  :dir
                                                                                                  rl))
                                                                                                (("1"
                                                                                                  (step_and_grind
                                                                                                   (rewrite
                                                                                                    "sigma_scal_right"
                                                                                                    :dir
                                                                                                    rl))
                                                                                                  (("1"
                                                                                                    (step_and_grind
                                                                                                     (rewrite
                                                                                                      "sigma_eq"))
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       2)
                                                                                                      (("1"
                                                                                                        (skolem
                                                                                                         1
                                                                                                         "j")
                                                                                                        (("1"
                                                                                                          (lift-if)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (split
                                                                                                               +)
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                (("1"
                                                                                                                  (split
                                                                                                                   -)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (rewrite
                                                                                                                       "sigma_zero")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (case
                                                                                                                           "FORALL (eg1:real): 0*eg1 = 0")
                                                                                                                          (("1"
                                                                                                                            (rewrite
                                                                                                                             -1)
                                                                                                                            nil
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (rewrite
                                                                                                                       "sigma_zero")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (flatten)
                                                                                                                (("2"
                                                                                                                  (step_and_grind
                                                                                                                   (rewrite
                                                                                                                    "sigma_scal_right"
                                                                                                                    :dir
                                                                                                                    rl))
                                                                                                                  (("2"
                                                                                                                    (step_and_grind
                                                                                                                     (rewrite
                                                                                                                      "sigma_scal"
                                                                                                                      :dir
                                                                                                                      rl))
                                                                                                                    (("2"
                                                                                                                      (step_and_grind
                                                                                                                       (rewrite
                                                                                                                        "sigma_scal"
                                                                                                                        :dir
                                                                                                                        rl))
                                                                                                                      (("2"
                                                                                                                        (step_and_grind
                                                                                                                         (rewrite
                                                                                                                          "sigma_scal_right"
                                                                                                                          :dir
                                                                                                                          rl))
                                                                                                                        (("2"
                                                                                                                          (step_and_grind
                                                                                                                           (rewrite
                                                                                                                            "sigma_eq"))
                                                                                                                          (("2"
                                                                                                                            (hide
                                                                                                                             "hyp")
                                                                                                                            (("2"
                                                                                                                              (skolem
                                                                                                                               1
                                                                                                                               "i")
                                                                                                                              (("2"
                                                                                                                                (lift-if)
                                                                                                                                (("2"
                                                                                                                                  (ground)
                                                                                                                                  (("2"
                                                                                                                                    (reveal
                                                                                                                                     "me1")
                                                                                                                                    (("2"
                                                                                                                                      (rewrite
                                                                                                                                       "me1")
                                                                                                                                      (("2"
                                                                                                                                        (rewrite
                                                                                                                                         "me1")
                                                                                                                                        (("2"
                                                                                                                                          (rewrite
                                                                                                                                           "me1")
                                                                                                                                          (("2"
                                                                                                                                            (case
                                                                                                                                             "x ^ (k - i)*x ^ (-1 * j - k + i + n)*x ^ (j - n + q)=x^q")
                                                                                                                                            (("1"
                                                                                                                                              (case
                                                                                                                                               "(IF q = 0 THEN 1 ELSE x ^ q ENDIF) = x^q")
                                                                                                                                              (("1"
                                                                                                                                                (replace
                                                                                                                                                 -1)
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (hide-all-but
                                                                                                                                                 1)
                                                                                                                                                (("2"
                                                                                                                                                  (lift-if)
                                                                                                                                                  (("2"
                                                                                                                                                    (ground)
                                                                                                                                                    (("2"
                                                                                                                                                      (replace
                                                                                                                                                       -1)
                                                                                                                                                      (("2"
                                                                                                                                                        (expand
                                                                                                                                                         "^")
                                                                                                                                                        (("2"
                                                                                                                                                          (expand
                                                                                                                                                           "expt")
                                                                                                                                                          (("2"
                                                                                                                                                            (propax)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (assert)
                                                                                                                                              (("2"
                                                                                                                                                (hide
                                                                                                                                                 (3
                                                                                                                                                  4
                                                                                                                                                  5
                                                                                                                                                  6
                                                                                                                                                  7
                                                                                                                                                  8
                                                                                                                                                  9
                                                                                                                                                  10))
                                                                                                                                                (("2"
                                                                                                                                                  (reveal
                                                                                                                                                   "ep1")
                                                                                                                                                  (("2"
                                                                                                                                                    (rewrite
                                                                                                                                                     "ep1"
                                                                                                                                                     :dir
                                                                                                                                                     rl)
                                                                                                                                                    (("2"
                                                                                                                                                      (rewrite
                                                                                                                                                       "ep1"
                                                                                                                                                       :dir
                                                                                                                                                       rl)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (step_and_grind
                                                                                 (rewrite
                                                                                  "sigma_restrict_eq_0"))
                                                                                (("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (skosimp*)
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "sigma_zero")
                                                                                      (("2"
                                                                                        (rewrite
                                                                                         "sigma_zero")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide "hyp")
                                            (("2"
                                              (step_and_grind
                                               (decompose-equality))
                                              (("2"
                                                (step_and_grind
                                                 (rewrite
                                                  "sigma_scal_right"
                                                  :dir
                                                  rl))
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (step_and_grind
                                                     (rewrite
                                                      "sigma_eq"))
                                                    (("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (hide "hyp")
                                            (("3"
                                              (hide-all-but 1)
                                              (("3" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("4"
                                            (hide-all-but 1)
                                            (("4" (grind) nil nil))
                                            nil)
                                           ("5"
                                            (hide-all-but 1)
                                            (("5" (grind) nil nil))
                                            nil)
                                           ("6"
                                            (hide-all-but 1)
                                            (("6" (grind) nil nil))
                                            nil)
                                           ("7"
                                            (hide-all-but 1)
                                            (("7" (grind) nil nil))
                                            nil)
                                           ("8"
                                            (hide-all-but 1)
                                            (("8" (grind) nil nil))
                                            nil)
                                           ("9"
                                            (hide-all-but 1)
                                            (("9" (grind) nil nil))
                                            nil)
                                           ("10"
                                            (hide-all-but 1)
                                            (("10" (grind) nil nil))
                                            nil)
                                           ("11"
                                            (hide-all-but 1)
                                            (("11" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide "hyp")
                                    (("2"
                                      (step_and_grind
                                       (rewrite "sigma_eq"))
                                      (("1"
                                        (hide 2)
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (ground)
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "^")
                                                    (("1"
                                                      (expand "expt")
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (rewrite "div_expt")
                                                (("1"
                                                  (reveal "me1")
                                                  (("1"
                                                    (copy "me1")
                                                    (("1"
                                                      (inst
                                                       -
                                                       "n!1"
                                                       "D+C*x"
                                                       "F+E*x")
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (cross-mult
                                                             2)
                                                            (("1"
                                                              (lemma
                                                               "expt_plus")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "n-n!1"
                                                                 "n!1"
                                                                 _)
                                                                (("1"
                                                                  (inst-cp
                                                                   -
                                                                   "F + E*x")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "D+C*x")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (replace -1)
                                                    (("2"
                                                      (case
                                                       "0^n!1 = 0")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (1 2))
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma
                                         "nzreal_times_nzreal_is_nzreal")
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (inst - "D+C*x" "F+E*x")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (hide "hyp")
                                    (("3"
                                      (lemma
                                       "nzreal_times_nzreal_is_nzreal")
                                      (("3"
                                        (skeep)
                                        (("3"
                                          (inst - "D+C*x" "F+E*x")
                                          (("1" (assert) nil nil)
                                           ("2" (assert) nil nil)
                                           ("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("4" (assert) nil nil)
                                   ("5"
                                    (lemma
                                     "nzreal_times_nzreal_is_nzreal")
                                    (("5"
                                      (skeep)
                                      (("5"
                                        (inst - "D+C*x" "F+E*x")
                                        (("1" (assert) nil nil)
                                         ("2" (assert) nil nil)
                                         ("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma
                                   "nzreal_times_nzreal_is_nzreal")
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (inst - "D+C*x" "F+E*x")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T_low type-eq-decl nil sigma nil)
    (T_high type-eq-decl nil sigma nil)
    (sigma_scal formula-decl nil sigma nil)
    (sigma_swap formula-decl nil sigma_swap nil)
    (sigma_reverse formula-decl nil sigma_nat nil)
    (sigma_split formula-decl nil sigma nil)
    (sigma_restrict_eq_0 formula-decl nil sigma nil) nil nil
    (sigma_zero formula-decl nil sigma nil)
    (sigma_scal_right formula-decl nil sigma nil)
    (sigma_product formula-decl nil sigma_nat nil)
    (sigma_eq formula-decl nil sigma nil)
    (C const-decl "posnat" binomial nil)
    (sigma def-decl "real" sigma nil))
   nil)
  (poly_translate_rat2_def-4 nil 3563054469
   (""
    (deftactic step_and_grind (step)
     (branch step ((skip) (then (hide-all-but 1) (finalize (grind))))))
    (("" (lemma "mult_expt")
      ((""
        (case "NOT FORALL (i: nat, n0x, n0y: real): (n0x * n0y) ^ i = n0x ^ i * n0y ^ i")
        (("1" (hide 2)
          (("1" (skeep)
            (("1" (case "n0x = 0 OR n0y = 0")
              (("1" (hide -2)
                (("1" (split -)
                  (("1" (replace -1)
                    (("1" (case "i = 0")
                      (("1" (replace -1) (("1" (grind) nil nil)) nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil)
                   ("2" (replace -1)
                    (("2" (case "i = 0")
                      (("1" (replace -1) (("1" (grind) nil nil)) nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (inst - "i" "n0x" "n0y")
                (("1" (ground) nil nil) ("2" (ground) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (hide -2)
          (("2" (label "me1" -1)
            (("2" (hide "me1")
              (("2" (lemma "expt_plus")
                (("2"
                  (case "NOT FORALL (i, j: nat, n0x: real): n0x ^ (i + j) = n0x ^ i * n0x ^ j")
                  (("1" (hide 2)
                    (("1" (skeep)
                      (("1" (inst - "i" "j" "n0x")
                        (("1" (flatten)
                          (("1" (replace -1)
                            (("1" (case "i = 0 AND j = 0")
                              (("1"
                                (flatten)
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (replace -2)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (label "ep1" -1)
                    (("2" (hide -2)
                      (("2" (hide "ep1")
                        (("2" (skeep)
                          (("2" (label "hyp" 3)
                            (("2" (expand "polynomial")
                              (("2"
                                (step_and_grind
                                 (rewrite "sigma_scal" :dir rl))
                                (("1"
                                  (case
                                   "sigma(0, n,
                                                                                                                                                                                 LAMBDA (i_1: nat):
                                                                                                                                                                                   a(i_1) * (D + C * x) ^ n * (F + E * x) ^ n *
                                                                                                                                                                                    (IF i_1 = 0 THEN 1
                                                                                                                                                                                     ELSE ((B + A * x) /
                                                                                                                                                                                            (D * F + D * E * x + (C * F * x + C * E * x * x)))
                                                                                                                                                                                           ^ i_1
                                                                                                                                                                                     ENDIF)) = sigma(0, n,
                                                                                                                                                                                 LAMBDA (i_1: nat):
                                                                                                                                                                                   a(i_1) * ((B + A * x)^i_1*(D+C*x)^(n-i_1)*(F+E*x)^(n-i_1)))")
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (expand "poly_translate_rat2")
                                        (("1"
                                          (case
                                           "(LAMBDA (i: nat):
                                                                                                                                                   sigma(0, n,
                                                                                                                                                         LAMBDA (k: nat):
                                                                                                                                                           a(k) *
                                                                                                                                                            sigma(0, n,
                                                                                                                                                                  LAMBDA (i_1: nat):
                                                                                                                                                                    sigma(0,
                                                                                                                                                                          k,
                                                                                                                                                                          LAMBDA
                                                                                                                                                                          (j: nat):
                                                                                                                                                                          IF (    i > 2 * n - k
                                                                                                                                                                               OR i_1 < n - i
                                                                                                                                                                               OR i_1 > -1 * i - k + 2 * n
                                                                                                                                                                               OR j < i_1 + k - n
                                                                                                                                                                               OR j > i_1
                                                                                                                                                                               OR j > k
                                                                                                                                                                               OR k > n)
                                                                                                                                                                          THEN 0
                                                                                                                                                                          ELSE C(k, j) * C(n - k, i_1 - j)
                                                                                                                                                                               *
                                                                                                                                                                               C
                                                                                                                                                                               (n - k,
                                                                                                                                                                                -1 * i - i_1 - k + 2 * n)
                                                                                                                                                                               *
                                                                                                                                                                               A ^ (k - j)
                                                                                                                                                                               *
                                                                                                                                                                               B ^ j
                                                                                                                                                                               *
                                                                                                                                                                               C ^ (j - i_1 - k + n)
                                                                                                                                                                               *
                                                                                                                                                                               D ^ (i_1 - j)
                                                                                                                                                                               *
                                                                                                                                                                               E ^ (i + i_1 - n)
                                                                                                                                                                               *
                                                                                                                                                                               F ^ (-1 * i - i_1 - k + 2 * n)
                                                                                                                                                                          ENDIF)))
                                                                                                                                                    * (IF i = 0 THEN 1 ELSE x ^ i ENDIF)) = (LAMBDA (i: nat):
                                                                                                                                                   sigma(0, n,
                                                                                                                                                         LAMBDA (k: nat):
                                                                                                                                                           a(k) *
                                                                                                                                                            sigma(0, n,
                                                                                                                                                                  LAMBDA (i_1: nat):
                                                                                                                                                                    sigma(0,
                                                                                                                                                                          k,
                                                                                                                                                                          LAMBDA
                                                                                                                                                                          (j: nat):
                                                                                                                                                                          IF (    i > 2 * n - k
                                                                                                                                                                               OR i_1 < n - i
                                                                                                                                                                               OR i_1 > -1 * i - k + 2 * n
                                                                                                                                                                               OR j < i_1 + k - n
                                                                                                                                                                               OR j > i_1
                                                                                                                                                                               OR j > k
                                                                                                                                                                               OR k > n)
                                                                                                                                                                          THEN 0
                                                                                                                                                                          ELSE C(k, j) * C(n - k, i_1 - j)
                                                                                                                                                                               *
                                                                                                                                                                               C
                                                                                                                                                                               (n - k,
                                                                                                                                                                                -1 * i - i_1 - k + 2 * n)
                                                                                                                                                                               *
                                                                                                                                                                               A ^ (k - j)
                                                                                                                                                                               *
                                                                                                                                                                               B ^ j
                                                                                                                                                                               *
                                                                                                                                                                               C ^ (j - i_1 - k + n)
                                                                                                                                                                               *
                                                                                                                                                                               D ^ (i_1 - j)
                                                                                                                                                                               *
                                                                                                                                                                               E ^ (i + i_1 - n)
                                                                                                                                                                               *
                                                                                                                                                                               F ^ (-1 * i - i_1 - k + 2 * n)
                                                                                                                                                                          ENDIF))
                                                                                                                                                    * (IF i = 0 THEN 1 ELSE x ^ i ENDIF)))")
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (step_and_grind
                                                 (rewrite
                                                  "sigma_swap"))
                                                (("1"
                                                  (step_and_grind
                                                   (rewrite
                                                    "sigma_eq"))
                                                  (("1"
                                                    (skolem 1 "k")
                                                    (("1"
                                                      (rewrite
                                                       "binomial_theorem")
                                                      (("1"
                                                        (rewrite
                                                         "binomial_theorem")
                                                        (("1"
                                                          (rewrite
                                                           "binomial_theorem")
                                                          (("1"
                                                            (step_and_grind
                                                             (invoke
                                                              (name-replace
                                                               "AAC2"
                                                               "%1")
                                                              (! 1 2)))
                                                            (("1"
                                                              (step_and_grind
                                                               (rewrite
                                                                "sigma_product"))
                                                              (("1"
                                                                (step_and_grind
                                                                 (rewrite
                                                                  "sigma_product"))
                                                                (("1"
                                                                  (expand
                                                                   "AAC2")
                                                                  (("1"
                                                                    (step_and_grind
                                                                     (rewrite
                                                                      "sigma_reverse"))
                                                                    (("1"
                                                                      (step_and_grind
                                                                       (rewrite
                                                                        "sigma_scal"
                                                                        :dir
                                                                        rl))
                                                                      (("1"
                                                                        (lemma
                                                                         "sigma_split")
                                                                        (("1"
                                                                          (step_and_grind
                                                                           (invoke
                                                                            (inst
                                                                             -
                                                                             "%1"
                                                                             "2*n"
                                                                             "0"
                                                                             "2*n-k")
                                                                            (!
                                                                             1
                                                                             2
                                                                             3)))
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (step_and_grind
                                                                               (invoke
                                                                                (case-replace
                                                                                 "%1 = 0")
                                                                                (!
                                                                                 -1
                                                                                 2
                                                                                 2)))
                                                                              (("1"
                                                                                (hide
                                                                                 -1)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (step_and_grind
                                                                                         (rewrite
                                                                                          "sigma_eq"))
                                                                                        (("1"
                                                                                          (hide
                                                                                           2)
                                                                                          (("1"
                                                                                            (skolem
                                                                                             1
                                                                                             "q")
                                                                                            (("1"
                                                                                              (step_and_grind
                                                                                               (rewrite
                                                                                                "sigma_scal"
                                                                                                :dir
                                                                                                rl))
                                                                                              (("1"
                                                                                                (step_and_grind
                                                                                                 (rewrite
                                                                                                  "sigma_scal"
                                                                                                  :dir
                                                                                                  rl))
                                                                                                (("1"
                                                                                                  (step_and_grind
                                                                                                   (rewrite
                                                                                                    "sigma_scal_right"
                                                                                                    :dir
                                                                                                    rl))
                                                                                                  (("1"
                                                                                                    (step_and_grind
                                                                                                     (rewrite
                                                                                                      "sigma_eq"))
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       2)
                                                                                                      (("1"
                                                                                                        (skolem
                                                                                                         1
                                                                                                         "j")
                                                                                                        (("1"
                                                                                                          (lift-if)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (split
                                                                                                               +)
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                (("1"
                                                                                                                  (split
                                                                                                                   -)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (rewrite
                                                                                                                       "sigma_zero")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (case
                                                                                                                           "FORALL (eg1:real): 0*eg1 = 0")
                                                                                                                          (("1"
                                                                                                                            (rewrite
                                                                                                                             -1)
                                                                                                                            nil
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (rewrite
                                                                                                                       "sigma_zero")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (flatten)
                                                                                                                (("2"
                                                                                                                  (step_and_grind
                                                                                                                   (rewrite
                                                                                                                    "sigma_scal_right"
                                                                                                                    :dir
                                                                                                                    rl))
                                                                                                                  (("2"
                                                                                                                    (step_and_grind
                                                                                                                     (rewrite
                                                                                                                      "sigma_scal"
                                                                                                                      :dir
                                                                                                                      rl))
                                                                                                                    (("2"
                                                                                                                      (step_and_grind
                                                                                                                       (rewrite
                                                                                                                        "sigma_scal"
                                                                                                                        :dir
                                                                                                                        rl))
                                                                                                                      (("2"
                                                                                                                        (step_and_grind
                                                                                                                         (rewrite
                                                                                                                          "sigma_scal_right"
                                                                                                                          :dir
                                                                                                                          rl))
                                                                                                                        (("2"
                                                                                                                          (step_and_grind
                                                                                                                           (rewrite
                                                                                                                            "sigma_eq"))
                                                                                                                          (("2"
                                                                                                                            (hide
                                                                                                                             "hyp")
                                                                                                                            (("2"
                                                                                                                              (skolem
                                                                                                                               1
                                                                                                                               "i")
                                                                                                                              (("2"
                                                                                                                                (lift-if)
                                                                                                                                (("2"
                                                                                                                                  (ground)
                                                                                                                                  (("2"
                                                                                                                                    (reveal
                                                                                                                                     "me1")
                                                                                                                                    (("2"
                                                                                                                                      (rewrite
                                                                                                                                       "me1")
                                                                                                                                      (("2"
                                                                                                                                        (rewrite
                                                                                                                                         "me1")
                                                                                                                                        (("2"
                                                                                                                                          (rewrite
                                                                                                                                           "me1")
                                                                                                                                          (("2"
                                                                                                                                            (case
                                                                                                                                             "x ^ (k - i)*x ^ (-1 * j - k + i + n)*x ^ (j - n + q)=x^q")
                                                                                                                                            (("1"
                                                                                                                                              (case
                                                                                                                                               "(IF q = 0 THEN 1 ELSE x ^ q ENDIF) = x^q")
                                                                                                                                              (("1"
                                                                                                                                                (replace
                                                                                                                                                 -1)
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (hide-all-but
                                                                                                                                                 1)
                                                                                                                                                (("2"
                                                                                                                                                  (lift-if)
                                                                                                                                                  (("2"
                                                                                                                                                    (ground)
                                                                                                                                                    (("2"
                                                                                                                                                      (replace
                                                                                                                                                       -1)
                                                                                                                                                      (("2"
                                                                                                                                                        (expand
                                                                                                                                                         "^")
                                                                                                                                                        (("2"
                                                                                                                                                          (expand
                                                                                                                                                           "expt")
                                                                                                                                                          (("2"
                                                                                                                                                            (propax)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (assert)
                                                                                                                                              (("2"
                                                                                                                                                (hide
                                                                                                                                                 (3
                                                                                                                                                  4
                                                                                                                                                  5
                                                                                                                                                  6
                                                                                                                                                  7
                                                                                                                                                  8
                                                                                                                                                  9
                                                                                                                                                  10))
                                                                                                                                                (("2"
                                                                                                                                                  (reveal
                                                                                                                                                   "ep1")
                                                                                                                                                  (("2"
                                                                                                                                                    (rewrite
                                                                                                                                                     "ep1"
                                                                                                                                                     :dir
                                                                                                                                                     rl)
                                                                                                                                                    (("2"
                                                                                                                                                      (rewrite
                                                                                                                                                       "ep1"
                                                                                                                                                       :dir
                                                                                                                                                       rl)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (step_and_grind
                                                                                 (rewrite
                                                                                  "sigma_restrict_eq_0"))
                                                                                (("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (skosimp*)
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "sigma_zero")
                                                                                      (("2"
                                                                                        (rewrite
                                                                                         "sigma_zero")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide "hyp")
                                            (("2"
                                              (decompose-equality)
                                              (("1"
                                                (step_and_grind
                                                 (rewrite
                                                  "sigma_scal_right"
                                                  :dir
                                                  rl))
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (step_and_grind
                                                     (rewrite
                                                      "sigma_eq"))
                                                    (("1"
                                                      (hide-all-but 1)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2" (grind) nil nil))
                                                nil)
                                               ("3"
                                                (hide-all-but 1)
                                                (("3" (grind) nil nil))
                                                nil)
                                               ("4"
                                                (hide-all-but 1)
                                                (("4" (grind) nil nil))
                                                nil)
                                               ("5"
                                                (hide-all-but 1)
                                                (("5" (grind) nil nil))
                                                nil)
                                               ("6"
                                                (hide-all-but 1)
                                                (("6" (grind) nil nil))
                                                nil)
                                               ("7"
                                                (hide-all-but 1)
                                                (("7" (grind) nil nil))
                                                nil)
                                               ("8"
                                                (hide-all-but 1)
                                                (("8" (grind) nil nil))
                                                nil)
                                               ("9"
                                                (hide-all-but 1)
                                                (("9" (grind) nil nil))
                                                nil)
                                               ("10"
                                                (hide-all-but 1)
                                                (("10"
                                                  (grind)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (hide "hyp")
                                            (("3"
                                              (hide-all-but 1)
                                              (("3" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("4"
                                            (hide-all-but 1)
                                            (("4" (grind) nil nil))
                                            nil)
                                           ("5"
                                            (hide-all-but 1)
                                            (("5" (grind) nil nil))
                                            nil)
                                           ("6"
                                            (hide-all-but 1)
                                            (("6" (grind) nil nil))
                                            nil)
                                           ("7"
                                            (hide-all-but 1)
                                            (("7" (grind) nil nil))
                                            nil)
                                           ("8"
                                            (hide-all-but 1)
                                            (("8" (grind) nil nil))
                                            nil)
                                           ("9"
                                            (hide-all-but 1)
                                            (("9" (grind) nil nil))
                                            nil)
                                           ("10"
                                            (hide-all-but 1)
                                            (("10" (grind) nil nil))
                                            nil)
                                           ("11"
                                            (hide-all-but 1)
                                            (("11" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide "hyp")
                                    (("2"
                                      (step_and_grind
                                       (rewrite "sigma_eq"))
                                      (("1"
                                        (hide 2)
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (ground)
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "^")
                                                    (("1"
                                                      (expand "expt")
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (rewrite "div_expt")
                                                (("1"
                                                  (reveal "me1")
                                                  (("1"
                                                    (copy "me1")
                                                    (("1"
                                                      (inst
                                                       -
                                                       "n!1"
                                                       "D+C*x"
                                                       "F+E*x")
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (cross-mult
                                                             2)
                                                            (("1"
                                                              (lemma
                                                               "expt_plus")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "n-n!1"
                                                                 "n!1"
                                                                 _)
                                                                (("1"
                                                                  (inst-cp
                                                                   -
                                                                   "F + E*x")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "D+C*x")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (replace -1)
                                                    (("2"
                                                      (case
                                                       "0^n!1 = 0")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (1 2))
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma
                                         "nzreal_times_nzreal_is_nzreal")
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (inst - "D+C*x" "F+E*x")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (hide "hyp")
                                    (("3"
                                      (lemma
                                       "nzreal_times_nzreal_is_nzreal")
                                      (("3"
                                        (skeep)
                                        (("3"
                                          (inst - "D+C*x" "F+E*x")
                                          (("1" (assert) nil nil)
                                           ("2" (assert) nil nil)
                                           ("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("4" (assert) nil nil)
                                   ("5"
                                    (lemma
                                     "nzreal_times_nzreal_is_nzreal")
                                    (("5"
                                      (skeep)
                                      (("5"
                                        (inst - "D+C*x" "F+E*x")
                                        (("1" (assert) nil nil)
                                         ("2" (assert) nil nil)
                                         ("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma
                                   "nzreal_times_nzreal_is_nzreal")
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (inst - "D+C*x" "F+E*x")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T_low type-eq-decl nil sigma nil)
    (T_high type-eq-decl nil sigma nil)
    (sigma_scal formula-decl nil sigma nil)
    (sigma_swap formula-decl nil sigma_swap nil)
    (sigma_reverse formula-decl nil sigma_nat nil)
    (sigma_split formula-decl nil sigma nil)
    (sigma_restrict_eq_0 formula-decl nil sigma nil) nil nil
    (sigma_zero formula-decl nil sigma nil)
    (sigma_scal_right formula-decl nil sigma nil)
    (sigma_product formula-decl nil sigma_nat nil)
    (sigma_eq formula-decl nil sigma nil)
    (C const-decl "posnat" binomial nil)
    (sigma def-decl "real" sigma nil))
   nil)
  (poly_translate_rat2_def-3 nil 3563054069
   (""
    (deftactic step_and_grind (step)
     (branch step ((skip) (then (hide-all-but 1) (finalize (grind))))))
    (("" (lemma "mult_expt")
      ((""
        (case "NOT FORALL (i: nat, n0x, n0y: real): (n0x * n0y) ^ i = n0x ^ i * n0y ^ i")
        (("1" (hide 2)
          (("1" (skeep)
            (("1" (case "n0x = 0 OR n0y = 0")
              (("1" (hide -2)
                (("1" (split -)
                  (("1" (replace -1)
                    (("1" (case "i = 0")
                      (("1" (replace -1) (("1" (grind) nil)))
                       ("2" (grind) nil)))))
                   ("2" (replace -1)
                    (("2" (case "i = 0")
                      (("1" (replace -1) (("1" (grind) nil)))
                       ("2" (grind) nil)))))))))
               ("2" (inst - "i" "n0x" "n0y")
                (("1" (ground) nil) ("2" (ground) nil)))))))))
         ("2" (hide -2)
          (("2" (label "me1" -1)
            (("2" (hide "me1")
              (("2" (lemma "expt_plus")
                (("2"
                  (case "NOT FORALL (i, j: nat, n0x: real): n0x ^ (i + j) = n0x ^ i * n0x ^ j")
                  (("1" (hide 2)
                    (("1" (skeep)
                      (("1" (inst - "i" "j" "n0x")
                        (("1" (flatten)
                          (("1" (replace -1)
                            (("1" (case "i = 0 AND j = 0")
                              (("1"
                                (flatten)
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (replace -2)
                                    (("1" (grind) nil)))))))
                               ("2" (grind) nil)))))))))))))
                   ("2" (label "ep1" -1)
                    (("2" (hide -2)
                      (("2" (hide "ep1")
                        (("2" (skeep)
                          (("2" (label "hyp" 3)
                            (("2" (expand "polynomial")
                              (("2"
                                (step_and_grind
                                 (rewrite "sigma_scal" :dir rl))
                                (("1"
                                  (step_and_grind
                                   (case
                                    "sigma(0, n,
                                                                                                                                                                   LAMBDA (i_1: nat):
                                                                                                                                                                     a(i_1) * (D + C * x) ^ n * (F + E * x) ^ n *
                                                                                                                                                                      (IF i_1 = 0 THEN 1
                                                                                                                                                                       ELSE ((B + A * x) /
                                                                                                                                                                              (D * F + D * E * x + (C * F * x + C * E * x * x)))
                                                                                                                                                                             ^ i_1
                                                                                                                                                                       ENDIF)) = sigma(0, n,
                                                                                                                                                                   LAMBDA (i_1: nat):
                                                                                                                                                                     a(i_1) * ((B + A * x)^i_1*(D+C*x)^(n-i_1)*(F+E*x)^(n-i_1)))"))
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (expand "poly_translate_rat2")
                                        (("1"
                                          (step_and_grind
                                           (case
                                            "(LAMBDA (i: nat):
                                                                                                                                   sigma(0, n,
                                                                                                                                         LAMBDA (k: nat):
                                                                                                                                           a(k) *
                                                                                                                                            sigma(0, n,
                                                                                                                                                  LAMBDA (i_1: nat):
                                                                                                                                                    sigma(0,
                                                                                                                                                          k,
                                                                                                                                                          LAMBDA
                                                                                                                                                          (j: nat):
                                                                                                                                                          IF (    i > 2 * n - k
                                                                                                                                                               OR i_1 < n - i
                                                                                                                                                               OR i_1 > -1 * i - k + 2 * n
                                                                                                                                                               OR j < i_1 + k - n
                                                                                                                                                               OR j > i_1
                                                                                                                                                               OR j > k
                                                                                                                                                               OR k > n)
                                                                                                                                                          THEN 0
                                                                                                                                                          ELSE C(k, j) * C(n - k, i_1 - j)
                                                                                                                                                               *
                                                                                                                                                               C
                                                                                                                                                               (n - k,
                                                                                                                                                                -1 * i - i_1 - k + 2 * n)
                                                                                                                                                               *
                                                                                                                                                               A ^ (k - j)
                                                                                                                                                               *
                                                                                                                                                               B ^ j
                                                                                                                                                               *
                                                                                                                                                               C ^ (j - i_1 - k + n)
                                                                                                                                                               *
                                                                                                                                                               D ^ (i_1 - j)
                                                                                                                                                               *
                                                                                                                                                               E ^ (i + i_1 - n)
                                                                                                                                                               *
                                                                                                                                                               F ^ (-1 * i - i_1 - k + 2 * n)
                                                                                                                                                          ENDIF)))
                                                                                                                                    * (IF i = 0 THEN 1 ELSE x ^ i ENDIF)) = (LAMBDA (i: nat):
                                                                                                                                   sigma(0, n,
                                                                                                                                         LAMBDA (k: nat):
                                                                                                                                           a(k) *
                                                                                                                                            sigma(0, n,
                                                                                                                                                  LAMBDA (i_1: nat):
                                                                                                                                                    sigma(0,
                                                                                                                                                          k,
                                                                                                                                                          LAMBDA
                                                                                                                                                          (j: nat):
                                                                                                                                                          IF (    i > 2 * n - k
                                                                                                                                                               OR i_1 < n - i
                                                                                                                                                               OR i_1 > -1 * i - k + 2 * n
                                                                                                                                                               OR j < i_1 + k - n
                                                                                                                                                               OR j > i_1
                                                                                                                                                               OR j > k
                                                                                                                                                               OR k > n)
                                                                                                                                                          THEN 0
                                                                                                                                                          ELSE C(k, j) * C(n - k, i_1 - j)
                                                                                                                                                               *
                                                                                                                                                               C
                                                                                                                                                               (n - k,
                                                                                                                                                                -1 * i - i_1 - k + 2 * n)
                                                                                                                                                               *
                                                                                                                                                               A ^ (k - j)
                                                                                                                                                               *
                                                                                                                                                               B ^ j
                                                                                                                                                               *
                                                                                                                                                               C ^ (j - i_1 - k + n)
                                                                                                                                                               *
                                                                                                                                                               D ^ (i_1 - j)
                                                                                                                                                               *
                                                                                                                                                               E ^ (i + i_1 - n)
                                                                                                                                                               *
                                                                                                                                                               F ^ (-1 * i - i_1 - k + 2 * n)
                                                                                                                                                          ENDIF))
                                                                                                                                    * (IF i = 0 THEN 1 ELSE x ^ i ENDIF)))"))
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (step_and_grind
                                                 (rewrite
                                                  "sigma_swap"))
                                                (("1"
                                                  (step_and_grind
                                                   (rewrite
                                                    "sigma_eq"))
                                                  (("1"
                                                    (skolem 1 "k")
                                                    (("1"
                                                      (rewrite
                                                       "binomial_theorem")
                                                      (("1"
                                                        (rewrite
                                                         "binomial_theorem")
                                                        (("1"
                                                          (rewrite
                                                           "binomial_theorem")
                                                          (("1"
                                                            (step_and_grind
                                                             (invoke
                                                              (name-replace
                                                               "AAC2"
                                                               "%1")
                                                              (! 1 2)))
                                                            (("1"
                                                              (step_and_grind
                                                               (rewrite
                                                                "sigma_product"))
                                                              (("1"
                                                                (step_and_grind
                                                                 (rewrite
                                                                  "sigma_product"))
                                                                (("1"
                                                                  (expand
                                                                   "AAC2")
                                                                  (("1"
                                                                    (step_and_grind
                                                                     (rewrite
                                                                      "sigma_reverse"))
                                                                    (("1"
                                                                      (step_and_grind
                                                                       (rewrite
                                                                        "sigma_scal"
                                                                        :dir
                                                                        rl))
                                                                      (("1"
                                                                        (lemma
                                                                         "sigma_split")
                                                                        (("1"
                                                                          (step_and_grind
                                                                           (invoke
                                                                            (inst
                                                                             -
                                                                             "%1"
                                                                             "2*n"
                                                                             "0"
                                                                             "2*n-k")
                                                                            (!
                                                                             1
                                                                             2
                                                                             3)))
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (step_and_grind
                                                                               (invoke
                                                                                (case-replace
                                                                                 "%1 = 0")
                                                                                (!
                                                                                 -1
                                                                                 2
                                                                                 2)))
                                                                              (("1"
                                                                                (hide
                                                                                 -1)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (step_and_grind
                                                                                         (rewrite
                                                                                          "sigma_eq"))
                                                                                        (("1"
                                                                                          (hide
                                                                                           2)
                                                                                          (("1"
                                                                                            (skolem
                                                                                             1
                                                                                             "q")
                                                                                            (("1"
                                                                                              (step_and_grind
                                                                                               (rewrite
                                                                                                "sigma_scal"
                                                                                                :dir
                                                                                                rl))
                                                                                              (("1"
                                                                                                (step_and_grind
                                                                                                 (rewrite
                                                                                                  "sigma_scal"
                                                                                                  :dir
                                                                                                  rl))
                                                                                                (("1"
                                                                                                  (step_and_grind
                                                                                                   (rewrite
                                                                                                    "sigma_scal_right"
                                                                                                    :dir
                                                                                                    rl))
                                                                                                  (("1"
                                                                                                    (step_and_grind
                                                                                                     (rewrite
                                                                                                      "sigma_eq"))
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       2)
                                                                                                      (("1"
                                                                                                        (skolem
                                                                                                         1
                                                                                                         "j")
                                                                                                        (("1"
                                                                                                          (lift-if)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (split
                                                                                                               +)
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                (("1"
                                                                                                                  (split
                                                                                                                   -)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (rewrite
                                                                                                                       "sigma_zero")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (case
                                                                                                                           "FORALL (eg1:real): 0*eg1 = 0")
                                                                                                                          (("1"
                                                                                                                            (rewrite
                                                                                                                             -1)
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (assert)
                                                                                                                            nil)))))))))
                                                                                                                   ("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (rewrite
                                                                                                                       "sigma_zero")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil)))))))))
                                                                                                               ("2"
                                                                                                                (flatten)
                                                                                                                (("2"
                                                                                                                  (step_and_grind
                                                                                                                   (rewrite
                                                                                                                    "sigma_scal_right"
                                                                                                                    :dir
                                                                                                                    rl))
                                                                                                                  (("2"
                                                                                                                    (step_and_grind
                                                                                                                     (rewrite
                                                                                                                      "sigma_scal"
                                                                                                                      :dir
                                                                                                                      rl))
                                                                                                                    (("2"
                                                                                                                      (step_and_grind
                                                                                                                       (rewrite
                                                                                                                        "sigma_scal"
                                                                                                                        :dir
                                                                                                                        rl))
                                                                                                                      (("2"
                                                                                                                        (step_and_grind
                                                                                                                         (rewrite
                                                                                                                          "sigma_scal_right"
                                                                                                                          :dir
                                                                                                                          rl))
                                                                                                                        (("2"
                                                                                                                          (step_and_grind
                                                                                                                           (rewrite
                                                                                                                            "sigma_eq"))
                                                                                                                          (("2"
                                                                                                                            (hide
                                                                                                                             "hyp")
                                                                                                                            (("2"
                                                                                                                              (skolem
                                                                                                                               1
                                                                                                                               "i")
                                                                                                                              (("2"
                                                                                                                                (lift-if)
                                                                                                                                (("2"
                                                                                                                                  (ground)
                                                                                                                                  (("2"
                                                                                                                                    (reveal
                                                                                                                                     "me1")
                                                                                                                                    (("2"
                                                                                                                                      (rewrite
                                                                                                                                       "me1")
                                                                                                                                      (("2"
                                                                                                                                        (rewrite
                                                                                                                                         "me1")
                                                                                                                                        (("2"
                                                                                                                                          (rewrite
                                                                                                                                           "me1")
                                                                                                                                          (("2"
                                                                                                                                            (case
                                                                                                                                             "x ^ (k - i)*x ^ (-1 * j - k + i + n)*x ^ (j - n + q)=x^q")
                                                                                                                                            (("1"
                                                                                                                                              (case
                                                                                                                                               "(IF q = 0 THEN 1 ELSE x ^ q ENDIF) = x^q")
                                                                                                                                              (("1"
                                                                                                                                                (replace
                                                                                                                                                 -1)
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  nil)))
                                                                                                                                               ("2"
                                                                                                                                                (hide-all-but
                                                                                                                                                 1)
                                                                                                                                                (("2"
                                                                                                                                                  (lift-if)
                                                                                                                                                  (("2"
                                                                                                                                                    (ground)
                                                                                                                                                    (("2"
                                                                                                                                                      (replace
                                                                                                                                                       -1)
                                                                                                                                                      (("2"
                                                                                                                                                        (expand
                                                                                                                                                         "^")
                                                                                                                                                        (("2"
                                                                                                                                                          (expand
                                                                                                                                                           "expt")
                                                                                                                                                          (("2"
                                                                                                                                                            (propax)
                                                                                                                                                            nil)))))))))))))))
                                                                                                                                             ("2"
                                                                                                                                              (assert)
                                                                                                                                              (("2"
                                                                                                                                                (hide
                                                                                                                                                 (3
                                                                                                                                                  4
                                                                                                                                                  5
                                                                                                                                                  6
                                                                                                                                                  7
                                                                                                                                                  8
                                                                                                                                                  9
                                                                                                                                                  10))
                                                                                                                                                (("2"
                                                                                                                                                  (reveal
                                                                                                                                                   "ep1")
                                                                                                                                                  (("2"
                                                                                                                                                    (rewrite
                                                                                                                                                     "ep1"
                                                                                                                                                     :dir
                                                                                                                                                     rl)
                                                                                                                                                    (("2"
                                                                                                                                                      (rewrite
                                                                                                                                                       "ep1"
                                                                                                                                                       :dir
                                                                                                                                                       rl)
                                                                                                                                                      nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                                                                               ("2"
                                                                                (hide
                                                                                 2)
                                                                                (("2"
                                                                                  (hide
                                                                                   -1)
                                                                                  (("2"
                                                                                    (hide
                                                                                     "hyp")
                                                                                    (("2"
                                                                                      (step_and_grind
                                                                                       (rewrite
                                                                                        "sigma_restrict_eq_0"))
                                                                                      (("2"
                                                                                        (hide
                                                                                         2)
                                                                                        (("2"
                                                                                          (skosimp*)
                                                                                          (("2"
                                                                                            (rewrite
                                                                                             "sigma_zero")
                                                                                            (("2"
                                                                                              (rewrite
                                                                                               "sigma_zero")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil)))))))))))))))))
                                                                               ("3"
                                                                                (hide
                                                                                 2)
                                                                                (("3"
                                                                                  (hide
                                                                                   -1)
                                                                                  (("3"
                                                                                    (hide-all-but
                                                                                     1)
                                                                                    (("3"
                                                                                      (grind)
                                                                                      nil)))))))
                                                                               ("4"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("4"
                                                                                  (grind)
                                                                                  nil)))
                                                                               ("5"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("5"
                                                                                  (grind)
                                                                                  nil)))
                                                                               ("6"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("6"
                                                                                  (grind)
                                                                                  nil)))
                                                                               ("7"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("7"
                                                                                  (grind)
                                                                                  nil)))
                                                                               ("8"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("8"
                                                                                  (grind)
                                                                                  nil)))
                                                                               ("9"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("9"
                                                                                  (grind)
                                                                                  nil)))
                                                                               ("10"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("10"
                                                                                  (grind)
                                                                                  nil)))))))
                                                                           ("2"
                                                                            (hide-all-but
                                                                             1)
                                                                            (("2"
                                                                              (grind)
                                                                              nil)))
                                                                           ("3"
                                                                            (hide-all-but
                                                                             1)
                                                                            (("3"
                                                                              (grind)
                                                                              nil)))
                                                                           ("4"
                                                                            (hide-all-but
                                                                             1)
                                                                            (("4"
                                                                              (grind)
                                                                              nil)))
                                                                           ("5"
                                                                            (hide-all-but
                                                                             1)
                                                                            (("5"
                                                                              (grind)
                                                                              nil)))
                                                                           ("6"
                                                                            (hide-all-but
                                                                             1)
                                                                            (("6"
                                                                              (grind)
                                                                              nil)))
                                                                           ("7"
                                                                            (hide-all-but
                                                                             1)
                                                                            (("7"
                                                                              (grind)
                                                                              nil)))
                                                                           ("8"
                                                                            (hide-all-but
                                                                             1)
                                                                            (("8"
                                                                              (grind)
                                                                              nil)))
                                                                           ("9"
                                                                            (hide-all-but
                                                                             1)
                                                                            (("9"
                                                                              (grind)
                                                                              nil)))))))))))))))))
                                                             ("2"
                                                              (hide-all-but
                                                               1)
                                                              (("2"
                                                                (grind)
                                                                nil)))
                                                             ("3"
                                                              (hide-all-but
                                                               1)
                                                              (("3"
                                                                (grind)
                                                                nil)))
                                                             ("4"
                                                              (hide-all-but
                                                               1)
                                                              (("4"
                                                                (grind)
                                                                nil)))
                                                             ("5"
                                                              (hide-all-but
                                                               1)
                                                              (("5"
                                                                (grind)
                                                                nil)))
                                                             ("6"
                                                              (hide-all-but
                                                               1)
                                                              (("6"
                                                                (grind)
                                                                nil)))
                                                             ("7"
                                                              (hide-all-but
                                                               1)
                                                              (("7"
                                                                (grind)
                                                                nil)))
                                                             ("8"
                                                              (hide-all-but
                                                               1)
                                                              (("8"
                                                                (grind)
                                                                nil)))
                                                             ("9"
                                                              (hide-all-but
                                                               1)
                                                              (("9"
                                                                (grind)
                                                                nil)))))))))))))))))))))
                                           ("2"
                                            (hide "hyp")
                                            (("2"
                                              (decompose-equality)
                                              (("1"
                                                (step_and_grind
                                                 (rewrite
                                                  "sigma_scal_right"
                                                  :dir
                                                  rl))
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (step_and_grind
                                                     (rewrite
                                                      "sigma_eq"))
                                                    (("1"
                                                      (hide-all-but 1)
                                                      (("1"
                                                        (grind)
                                                        nil)))))))))
                                               ("2"
                                                (hide-all-but 1)
                                                (("2" (grind) nil)))
                                               ("3"
                                                (hide-all-but 1)
                                                (("3" (grind) nil)))
                                               ("4"
                                                (hide-all-but 1)
                                                (("4" (grind) nil)))
                                               ("5"
                                                (hide-all-but 1)
                                                (("5" (grind) nil)))
                                               ("6"
                                                (hide-all-but 1)
                                                (("6" (grind) nil)))
                                               ("7"
                                                (hide-all-but 1)
                                                (("7" (grind) nil)))
                                               ("8"
                                                (hide-all-but 1)
                                                (("8" (grind) nil)))
                                               ("9"
                                                (hide-all-but 1)
                                                (("9" (grind) nil)))
                                               ("10"
                                                (hide-all-but 1)
                                                (("10"
                                                  (grind)
                                                  nil)))))))
                                           ("3"
                                            (hide "hyp")
                                            (("3"
                                              (hide-all-but 1)
                                              (("3" (grind) nil)))))
                                           ("4"
                                            (hide-all-but 1)
                                            (("4" (grind) nil)))
                                           ("5"
                                            (hide-all-but 1)
                                            (("5" (grind) nil)))
                                           ("6"
                                            (hide-all-but 1)
                                            (("6" (grind) nil)))
                                           ("7"
                                            (hide-all-but 1)
                                            (("7" (grind) nil)))
                                           ("8"
                                            (hide-all-but 1)
                                            (("8" (grind) nil)))
                                           ("9"
                                            (hide-all-but 1)
                                            (("9" (grind) nil)))
                                           ("10"
                                            (hide-all-but 1)
                                            (("10" (grind) nil)))
                                           ("11"
                                            (hide-all-but 1)
                                            (("11"
                                              (grind)
                                              nil)))))))))))
                                   ("2"
                                    (hide "hyp")
                                    (("2"
                                      (step_and_grind
                                       (rewrite "sigma_eq"))
                                      (("1"
                                        (hide 2)
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (ground)
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "^")
                                                    (("1"
                                                      (expand "expt")
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (ground)
                                                          nil)))))))))))
                                               ("2"
                                                (rewrite "div_expt")
                                                (("1"
                                                  (reveal "me1")
                                                  (("1"
                                                    (copy "me1")
                                                    (("1"
                                                      (inst
                                                       -
                                                       "n!1"
                                                       "D+C*x"
                                                       "F+E*x")
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (cross-mult
                                                             2)
                                                            (("1"
                                                              (lemma
                                                               "expt_plus")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "n-n!1"
                                                                 "n!1"
                                                                 _)
                                                                (("1"
                                                                  (inst-cp
                                                                   -
                                                                   "F + E*x")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "D+C*x")
                                                                    (("1"
                                                                      (assert)
                                                                      nil)))))))))))))))))))))
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (replace -1)
                                                    (("2"
                                                      (case
                                                       "0^n!1 = 0")
                                                      (("1"
                                                        (assert)
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (1 2))
                                                        (("2"
                                                          (grind)
                                                          nil)))))))))))))))))))
                                       ("2"
                                        (lemma
                                         "nzreal_times_nzreal_is_nzreal")
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (inst - "D+C*x" "F+E*x")
                                            (("2"
                                              (assert)
                                              nil)))))))))))
                                   ("3"
                                    (hide "hyp")
                                    (("3"
                                      (lemma
                                       "nzreal_times_nzreal_is_nzreal")
                                      (("3"
                                        (skeep)
                                        (("3"
                                          (inst - "D+C*x" "F+E*x")
                                          (("1" (assert) nil)
                                           ("2" (assert) nil)
                                           ("3" (assert) nil)))))))))
                                   ("4" (assert) nil)
                                   ("5"
                                    (lemma
                                     "nzreal_times_nzreal_is_nzreal")
                                    (("5"
                                      (skeep)
                                      (("5"
                                        (inst - "D+C*x" "F+E*x")
                                        (("1" (assert) nil)
                                         ("2" (assert) nil)
                                         ("3" (assert) nil)))))))))
                                 ("2"
                                  (lemma
                                   "nzreal_times_nzreal_is_nzreal")
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (inst - "D+C*x" "F+E*x")
                                      (("2"
                                        (assert)
                                        nil))))))))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (poly_translate_rat2_def-2 nil 3563053485
   (""
    (deftactic step_and_grind (step)
     (branch step ((skip) (then (hide-all-but 1) (finalize (grind))))))
    (("" (lemma "mult_expt")
      ((""
        (case "NOT FORALL (i: nat, n0x, n0y: real): (n0x * n0y) ^ i = n0x ^ i * n0y ^ i")
        (("1" (hide 2)
          (("1" (skeep)
            (("1" (case "n0x = 0 OR n0y = 0")
              (("1" (hide -2)
                (("1" (split -)
                  (("1" (replace -1)
                    (("1" (case "i = 0")
                      (("1" (replace -1) (("1" (grind) nil nil)) nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil)
                   ("2" (replace -1)
                    (("2" (case "i = 0")
                      (("1" (replace -1) (("1" (grind) nil nil)) nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (inst - "i" "n0x" "n0y")
                (("1" (ground) nil nil) ("2" (ground) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (hide -2)
          (("2" (label "me1" -1)
            (("2" (hide "me1")
              (("2" (lemma "expt_plus")
                (("2"
                  (case "NOT FORALL (i, j: nat, n0x: real): n0x ^ (i + j) = n0x ^ i * n0x ^ j")
                  (("1" (hide 2)
                    (("1" (skeep)
                      (("1" (inst - "i" "j" "n0x")
                        (("1" (flatten)
                          (("1" (replace -1)
                            (("1" (case "i = 0 AND j = 0")
                              (("1"
                                (flatten)
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (replace -2)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (label "ep1" -1)
                    (("2" (hide -2)
                      (("2" (hide "ep1")
                        (("2" (skeep)
                          (("2" (label "hyp" 3)
                            (("2" (expand "polynomial")
                              (("2"
                                (step_and_grind
                                 (rewrite "sigma_scal" :dir rl))
                                (("1"
                                  (case
                                   "sigma(0, n,
                                                                                                                                                      LAMBDA (i_1: nat):
                                                                                                                                                        a(i_1) * (D + C * x) ^ n * (F + E * x) ^ n *
                                                                                                                                                         (IF i_1 = 0 THEN 1
                                                                                                                                                          ELSE ((B + A * x) /
                                                                                                                                                                 (D * F + D * E * x + (C * F * x + C * E * x * x)))
                                                                                                                                                                ^ i_1
                                                                                                                                                          ENDIF)) = sigma(0, n,
                                                                                                                                                      LAMBDA (i_1: nat):
                                                                                                                                                        a(i_1) * ((B + A * x)^i_1*(D+C*x)^(n-i_1)*(F+E*x)^(n-i_1)))")
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (expand "poly_translate_rat2")
                                        (("1"
                                          (case
                                           "(LAMBDA (i: nat):
                                                                                                                    sigma(0, n,
                                                                                                                          LAMBDA (k: nat):
                                                                                                                            a(k) *
                                                                                                                             sigma(0, n,
                                                                                                                                   LAMBDA (i_1: nat):
                                                                                                                                     sigma(0,
                                                                                                                                           k,
                                                                                                                                           LAMBDA
                                                                                                                                           (j: nat):
                                                                                                                                           IF (    i > 2 * n - k
                                                                                                                                                OR i_1 < n - i
                                                                                                                                                OR i_1 > -1 * i - k + 2 * n
                                                                                                                                                OR j < i_1 + k - n
                                                                                                                                                OR j > i_1
                                                                                                                                                OR j > k
                                                                                                                                                OR k > n)
                                                                                                                                           THEN 0
                                                                                                                                           ELSE C(k, j) * C(n - k, i_1 - j)
                                                                                                                                                *
                                                                                                                                                C
                                                                                                                                                (n - k,
                                                                                                                                                 -1 * i - i_1 - k + 2 * n)
                                                                                                                                                *
                                                                                                                                                A ^ (k - j)
                                                                                                                                                *
                                                                                                                                                B ^ j
                                                                                                                                                *
                                                                                                                                                C ^ (j - i_1 - k + n)
                                                                                                                                                *
                                                                                                                                                D ^ (i_1 - j)
                                                                                                                                                *
                                                                                                                                                E ^ (i + i_1 - n)
                                                                                                                                                *
                                                                                                                                                F ^ (-1 * i - i_1 - k + 2 * n)
                                                                                                                                           ENDIF)))
                                                                                                                     * (IF i = 0 THEN 1 ELSE x ^ i ENDIF)) = (LAMBDA (i: nat):
                                                                                                                    sigma(0, n,
                                                                                                                          LAMBDA (k: nat):
                                                                                                                            a(k) *
                                                                                                                             sigma(0, n,
                                                                                                                                   LAMBDA (i_1: nat):
                                                                                                                                     sigma(0,
                                                                                                                                           k,
                                                                                                                                           LAMBDA
                                                                                                                                           (j: nat):
                                                                                                                                           IF (    i > 2 * n - k
                                                                                                                                                OR i_1 < n - i
                                                                                                                                                OR i_1 > -1 * i - k + 2 * n
                                                                                                                                                OR j < i_1 + k - n
                                                                                                                                                OR j > i_1
                                                                                                                                                OR j > k
                                                                                                                                                OR k > n)
                                                                                                                                           THEN 0
                                                                                                                                           ELSE C(k, j) * C(n - k, i_1 - j)
                                                                                                                                                *
                                                                                                                                                C
                                                                                                                                                (n - k,
                                                                                                                                                 -1 * i - i_1 - k + 2 * n)
                                                                                                                                                *
                                                                                                                                                A ^ (k - j)
                                                                                                                                                *
                                                                                                                                                B ^ j
                                                                                                                                                *
                                                                                                                                                C ^ (j - i_1 - k + n)
                                                                                                                                                *
                                                                                                                                                D ^ (i_1 - j)
                                                                                                                                                *
                                                                                                                                                E ^ (i + i_1 - n)
                                                                                                                                                *
                                                                                                                                                F ^ (-1 * i - i_1 - k + 2 * n)
                                                                                                                                           ENDIF))
                                                                                                                     * (IF i = 0 THEN 1 ELSE x ^ i ENDIF)))")
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (step_and_grind
                                                 (rewrite
                                                  "sigma_swap"))
                                                (("1"
                                                  (step_and_grind
                                                   (rewrite
                                                    "sigma_eq"))
                                                  (("1"
                                                    (skolem 1 "k")
                                                    (("1"
                                                      (rewrite
                                                       "binomial_theorem")
                                                      (("1"
                                                        (rewrite
                                                         "binomial_theorem")
                                                        (("1"
                                                          (rewrite
                                                           "binomial_theorem")
                                                          (("1"
                                                            (invoke
                                                             (name-replace
                                                              "AAC2"
                                                              "%1")
                                                             (! 1 2))
                                                            (("1"
                                                              (step_and_grind
                                                               (rewrite
                                                                "sigma_product"))
                                                              (("1"
                                                                (step_and_grind
                                                                 (rewrite
                                                                  "sigma_product"))
                                                                (("1"
                                                                  (expand
                                                                   "AAC2")
                                                                  (("1"
                                                                    (step_and_grind
                                                                     (rewrite
                                                                      "sigma_reverse"))
                                                                    (("1"
                                                                      (step_and_grind
                                                                       (rewrite
                                                                        "sigma_scal"
                                                                        :dir
                                                                        rl))
                                                                      (("1"
                                                                        (lemma
                                                                         "sigma_split")
                                                                        (("1"
                                                                          (invoke
                                                                           (inst
                                                                            -
                                                                            "%1"
                                                                            "2*n"
                                                                            "0"
                                                                            "2*n-k")
                                                                           (!
                                                                            1
                                                                            2
                                                                            3))
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (invoke
                                                                               (case-replace
                                                                                "%1 = 0")
                                                                               (!
                                                                                -1
                                                                                2
                                                                                2))
                                                                              (("1"
                                                                                (hide
                                                                                 -1)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (step_and_grind
                                                                                         (rewrite
                                                                                          "sigma_eq"))
                                                                                        (("1"
                                                                                          (hide
                                                                                           2)
                                                                                          (("1"
                                                                                            (skolem
                                                                                             1
                                                                                             "q")
                                                                                            (("1"
                                                                                              (step_and_grind
                                                                                               (rewrite
                                                                                                "sigma_scal"
                                                                                                :dir
                                                                                                rl))
                                                                                              (("1"
                                                                                                (step_and_grind
                                                                                                 (rewrite
                                                                                                  "sigma_scal"
                                                                                                  :dir
                                                                                                  rl))
                                                                                                (("1"
                                                                                                  (step_and_grind
                                                                                                   (rewrite
                                                                                                    "sigma_scal_right"
                                                                                                    :dir
                                                                                                    rl))
                                                                                                  (("1"
                                                                                                    (step_and_grind
                                                                                                     (rewrite
                                                                                                      "sigma_eq"))
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       2)
                                                                                                      (("1"
                                                                                                        (skolem
                                                                                                         1
                                                                                                         "j")
                                                                                                        (("1"
                                                                                                          (lift-if)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (split
                                                                                                               +)
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                (("1"
                                                                                                                  (split
                                                                                                                   -)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (rewrite
                                                                                                                       "sigma_zero")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (case
                                                                                                                           "FORALL (eg1:real): 0*eg1 = 0")
                                                                                                                          (("1"
                                                                                                                            (rewrite
                                                                                                                             -1)
                                                                                                                            nil
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (rewrite
                                                                                                                       "sigma_zero")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (flatten)
                                                                                                                (("2"
                                                                                                                  (step_and_grind
                                                                                                                   (rewrite
                                                                                                                    "sigma_scal_right"
                                                                                                                    :dir
                                                                                                                    rl))
                                                                                                                  (("2"
                                                                                                                    (step_and_grind
                                                                                                                     (rewrite
                                                                                                                      "sigma_scal"
                                                                                                                      :dir
                                                                                                                      rl))
                                                                                                                    (("2"
                                                                                                                      (step_and_grind
                                                                                                                       (rewrite
                                                                                                                        "sigma_scal"
                                                                                                                        :dir
                                                                                                                        rl))
                                                                                                                      (("2"
                                                                                                                        (step_and_grind
                                                                                                                         (rewrite
                                                                                                                          "sigma_scal_right"
                                                                                                                          :dir
                                                                                                                          rl))
                                                                                                                        (("2"
                                                                                                                          (step_and_grind
                                                                                                                           (rewrite
                                                                                                                            "sigma_eq"))
                                                                                                                          (("2"
                                                                                                                            (hide
                                                                                                                             "hyp")
                                                                                                                            (("2"
                                                                                                                              (skolem
                                                                                                                               1
                                                                                                                               "i")
                                                                                                                              (("2"
                                                                                                                                (lift-if)
                                                                                                                                (("2"
                                                                                                                                  (ground)
                                                                                                                                  (("2"
                                                                                                                                    (reveal
                                                                                                                                     "me1")
                                                                                                                                    (("2"
                                                                                                                                      (rewrite
                                                                                                                                       "me1")
                                                                                                                                      (("2"
                                                                                                                                        (rewrite
                                                                                                                                         "me1")
                                                                                                                                        (("2"
                                                                                                                                          (rewrite
                                                                                                                                           "me1")
                                                                                                                                          (("2"
                                                                                                                                            (case
                                                                                                                                             "x ^ (k - i)*x ^ (-1 * j - k + i + n)*x ^ (j - n + q)=x^q")
                                                                                                                                            (("1"
                                                                                                                                              (case
                                                                                                                                               "(IF q = 0 THEN 1 ELSE x ^ q ENDIF) = x^q")
                                                                                                                                              (("1"
                                                                                                                                                (replace
                                                                                                                                                 -1)
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (hide-all-but
                                                                                                                                                 1)
                                                                                                                                                (("2"
                                                                                                                                                  (lift-if)
                                                                                                                                                  (("2"
                                                                                                                                                    (ground)
                                                                                                                                                    (("2"
                                                                                                                                                      (replace
                                                                                                                                                       -1)
                                                                                                                                                      (("2"
                                                                                                                                                        (expand
                                                                                                                                                         "^")
                                                                                                                                                        (("2"
                                                                                                                                                          (expand
                                                                                                                                                           "expt")
                                                                                                                                                          (("2"
                                                                                                                                                            (propax)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (assert)
                                                                                                                                              (("2"
                                                                                                                                                (hide
                                                                                                                                                 (3
                                                                                                                                                  4
                                                                                                                                                  5
                                                                                                                                                  6
                                                                                                                                                  7
                                                                                                                                                  8
                                                                                                                                                  9
                                                                                                                                                  10))
                                                                                                                                                (("2"
                                                                                                                                                  (reveal
                                                                                                                                                   "ep1")
                                                                                                                                                  (("2"
                                                                                                                                                    (rewrite
                                                                                                                                                     "ep1"
                                                                                                                                                     :dir
                                                                                                                                                     rl)
                                                                                                                                                    (("2"
                                                                                                                                                      (rewrite
                                                                                                                                                       "ep1"
                                                                                                                                                       :dir
                                                                                                                                                       rl)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 2)
                                                                                (("2"
                                                                                  (hide
                                                                                   -1)
                                                                                  (("2"
                                                                                    (hide
                                                                                     "hyp")
                                                                                    (("2"
                                                                                      (step_and_grind
                                                                                       (rewrite
                                                                                        "sigma_restrict_eq_0"))
                                                                                      (("2"
                                                                                        (hide
                                                                                         2)
                                                                                        (("2"
                                                                                          (skosimp*)
                                                                                          (("2"
                                                                                            (rewrite
                                                                                             "sigma_zero")
                                                                                            (("2"
                                                                                              (rewrite
                                                                                               "sigma_zero")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (hide
                                                                                 2)
                                                                                (("3"
                                                                                  (hide
                                                                                   -1)
                                                                                  (("3"
                                                                                    (hide-all-but
                                                                                     1)
                                                                                    (("3"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("4"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("4"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("5"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("5"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("6"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("6"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("7"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("7"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("8"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("8"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("9"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("9"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("10"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("10"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             1)
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (hide-all-but
                                                                             1)
                                                                            (("3"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("4"
                                                                            (hide-all-but
                                                                             1)
                                                                            (("4"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("5"
                                                                            (hide-all-but
                                                                             1)
                                                                            (("5"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("6"
                                                                            (hide-all-but
                                                                             1)
                                                                            (("6"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("7"
                                                                            (hide-all-but
                                                                             1)
                                                                            (("7"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("8"
                                                                            (hide-all-but
                                                                             1)
                                                                            (("8"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("9"
                                                                            (hide-all-but
                                                                             1)
                                                                            (("9"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               1)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (hide-all-but
                                                               1)
                                                              (("3"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("4"
                                                              (hide-all-but
                                                               1)
                                                              (("4"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("5"
                                                              (hide-all-but
                                                               1)
                                                              (("5"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("6"
                                                              (hide-all-but
                                                               1)
                                                              (("6"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("7"
                                                              (hide-all-but
                                                               1)
                                                              (("7"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("8"
                                                              (hide-all-but
                                                               1)
                                                              (("8"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("9"
                                                              (hide-all-but
                                                               1)
                                                              (("9"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide "hyp")
                                            (("2"
                                              (decompose-equality)
                                              (("1"
                                                (step_and_grind
                                                 (rewrite
                                                  "sigma_scal_right"
                                                  :dir
                                                  rl))
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (step_and_grind
                                                     (rewrite
                                                      "sigma_eq"))
                                                    (("1"
                                                      (hide-all-but 1)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2" (grind) nil nil))
                                                nil)
                                               ("3"
                                                (hide-all-but 1)
                                                (("3" (grind) nil nil))
                                                nil)
                                               ("4"
                                                (hide-all-but 1)
                                                (("4" (grind) nil nil))
                                                nil)
                                               ("5"
                                                (hide-all-but 1)
                                                (("5" (grind) nil nil))
                                                nil)
                                               ("6"
                                                (hide-all-but 1)
                                                (("6" (grind) nil nil))
                                                nil)
                                               ("7"
                                                (hide-all-but 1)
                                                (("7" (grind) nil nil))
                                                nil)
                                               ("8"
                                                (hide-all-but 1)
                                                (("8" (grind) nil nil))
                                                nil)
                                               ("9"
                                                (hide-all-but 1)
                                                (("9" (grind) nil nil))
                                                nil)
                                               ("10"
                                                (hide-all-but 1)
                                                (("10"
                                                  (grind)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (hide "hyp")
                                            (("3"
                                              (hide-all-but 1)
                                              (("3" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("4"
                                            (hide-all-but 1)
                                            (("4" (grind) nil nil))
                                            nil)
                                           ("5"
                                            (hide-all-but 1)
                                            (("5" (grind) nil nil))
                                            nil)
                                           ("6"
                                            (hide-all-but 1)
                                            (("6" (grind) nil nil))
                                            nil)
                                           ("7"
                                            (hide-all-but 1)
                                            (("7" (grind) nil nil))
                                            nil)
                                           ("8"
                                            (hide-all-but 1)
                                            (("8" (grind) nil nil))
                                            nil)
                                           ("9"
                                            (hide-all-but 1)
                                            (("9" (grind) nil nil))
                                            nil)
                                           ("10"
                                            (hide-all-but 1)
                                            (("10" (grind) nil nil))
                                            nil)
                                           ("11"
                                            (hide-all-but 1)
                                            (("11" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide "hyp")
                                    (("2"
                                      (step_and_grind
                                       (rewrite "sigma_eq"))
                                      (("1"
                                        (hide 2)
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (ground)
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "^")
                                                    (("1"
                                                      (expand "expt")
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (rewrite "div_expt")
                                                (("1"
                                                  (reveal "me1")
                                                  (("1"
                                                    (copy "me1")
                                                    (("1"
                                                      (inst
                                                       -
                                                       "n!1"
                                                       "D+C*x"
                                                       "F+E*x")
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (cross-mult
                                                             2)
                                                            (("1"
                                                              (lemma
                                                               "expt_plus")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "n-n!1"
                                                                 "n!1"
                                                                 _)
                                                                (("1"
                                                                  (inst-cp
                                                                   -
                                                                   "F + E*x")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "D+C*x")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (replace -1)
                                                    (("2"
                                                      (case
                                                       "0^n!1 = 0")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (1 2))
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma
                                         "nzreal_times_nzreal_is_nzreal")
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (inst - "D+C*x" "F+E*x")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (hide "hyp")
                                    (("3"
                                      (lemma
                                       "nzreal_times_nzreal_is_nzreal")
                                      (("3"
                                        (skeep)
                                        (("3"
                                          (inst - "D+C*x" "F+E*x")
                                          (("1" (assert) nil nil)
                                           ("2" (assert) nil nil)
                                           ("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("4" (assert) nil nil)
                                   ("5"
                                    (lemma
                                     "nzreal_times_nzreal_is_nzreal")
                                    (("5"
                                      (skeep)
                                      (("5"
                                        (inst - "D+C*x" "F+E*x")
                                        (("1" (assert) nil nil)
                                         ("2" (assert) nil nil)
                                         ("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma
                                   "nzreal_times_nzreal_is_nzreal")
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (inst - "D+C*x" "F+E*x")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T_low type-eq-decl nil sigma nil)
    (T_high type-eq-decl nil sigma nil)
    (sigma_scal formula-decl nil sigma nil)
    (sigma_swap formula-decl nil sigma_swap nil)
    (sigma_reverse formula-decl nil sigma_nat nil)
    (sigma_split formula-decl nil sigma nil)
    (sigma_restrict_eq_0 formula-decl nil sigma nil) nil nil
    (sigma_zero formula-decl nil sigma nil)
    (sigma_scal_right formula-decl nil sigma nil)
    (sigma_product formula-decl nil sigma_nat nil)
    (sigma_eq formula-decl nil sigma nil)
    (C const-decl "posnat" binomial nil)
    (sigma def-decl "real" sigma nil))
   nil)
  (poly_translate_rat2_def-1 nil 3541499592
   ("" (lemma "mult_expt")
    ((""
      (case "NOT FORALL (i: nat, n0x, n0y: real): (n0x * n0y) ^ i = n0x ^ i * n0y ^ i")
      (("1" (hide 2)
        (("1" (skeep)
          (("1" (case "n0x = 0 OR n0y = 0")
            (("1" (hide -2)
              (("1" (split -)
                (("1" (replace -1)
                  (("1" (case "i = 0")
                    (("1" (replace -1) (("1" (grind) nil nil)) nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil)
                 ("2" (replace -1)
                  (("2" (case "i = 0")
                    (("1" (replace -1) (("1" (grind) nil nil)) nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (inst - "i" "n0x" "n0y")
              (("1" (ground) nil nil) ("2" (ground) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (hide -2)
        (("2" (label "me1" -1)
          (("2" (hide "me1")
            (("2" (lemma "expt_plus")
              (("2"
                (case "NOT FORALL (i, j: nat, n0x: real): n0x ^ (i + j) = n0x ^ i * n0x ^ j")
                (("1" (hide 2)
                  (("1" (skeep)
                    (("1" (inst - "i" "j" "n0x")
                      (("1" (flatten)
                        (("1" (replace -1)
                          (("1" (case "i = 0 AND j = 0")
                            (("1" (flatten)
                              (("1"
                                (replace -1)
                                (("1"
                                  (replace -2)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (label "ep1" -1)
                  (("2" (hide -2)
                    (("2" (hide "ep1")
                      (("2" (skeep)
                        (("2" (label "hyp" 3)
                          (("2" (expand "polynomial")
                            (("2" (rewrite "sigma_scal" :dir rl)
                              (("1"
                                (case
                                 "sigma(0, n,
                                                                                                                                         LAMBDA (i_1: nat):
                                                                                                                                           a(i_1) * (D + C * x) ^ n * (F + E * x) ^ n *
                                                                                                                                            (IF i_1 = 0 THEN 1
                                                                                                                                             ELSE ((B + A * x) /
                                                                                                                                                    (D * F + D * E * x + (C * F * x + C * E * x * x)))
                                                                                                                                                   ^ i_1
                                                                                                                                             ENDIF)) = sigma(0, n,
                                                                                                                                         LAMBDA (i_1: nat):
                                                                                                                                           a(i_1) * ((B + A * x)^i_1*(D+C*x)^(n-i_1)*(F+E*x)^(n-i_1)))")
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (hide -1)
                                    (("1"
                                      (expand "poly_translate_rat2")
                                      (("1"
                                        (case
                                         "(LAMBDA (i: nat):
                                                                                                     sigma(0, n,
                                                                                                           LAMBDA (k: nat):
                                                                                                             a(k) *
                                                                                                              sigma(0, n,
                                                                                                                    LAMBDA (i_1: nat):
                                                                                                                      sigma(0,
                                                                                                                            k,
                                                                                                                            LAMBDA
                                                                                                                            (j: nat):
                                                                                                                            IF (    i > 2 * n - k
                                                                                                                                 OR i_1 < n - i
                                                                                                                                 OR i_1 > -1 * i - k + 2 * n
                                                                                                                                 OR j < i_1 + k - n
                                                                                                                                 OR j > i_1
                                                                                                                                 OR j > k
                                                                                                                                 OR k > n)
                                                                                                                            THEN 0
                                                                                                                            ELSE C(k, j) * C(n - k, i_1 - j)
                                                                                                                                 *
                                                                                                                                 C
                                                                                                                                 (n - k,
                                                                                                                                  -1 * i - i_1 - k + 2 * n)
                                                                                                                                 *
                                                                                                                                 A ^ (k - j)
                                                                                                                                 *
                                                                                                                                 B ^ j
                                                                                                                                 *
                                                                                                                                 C ^ (j - i_1 - k + n)
                                                                                                                                 *
                                                                                                                                 D ^ (i_1 - j)
                                                                                                                                 *
                                                                                                                                 E ^ (i + i_1 - n)
                                                                                                                                 *
                                                                                                                                 F ^ (-1 * i - i_1 - k + 2 * n)
                                                                                                                            ENDIF)))
                                                                                                      * (IF i = 0 THEN 1 ELSE x ^ i ENDIF)) = (LAMBDA (i: nat):
                                                                                                     sigma(0, n,
                                                                                                           LAMBDA (k: nat):
                                                                                                             a(k) *
                                                                                                              sigma(0, n,
                                                                                                                    LAMBDA (i_1: nat):
                                                                                                                      sigma(0,
                                                                                                                            k,
                                                                                                                            LAMBDA
                                                                                                                            (j: nat):
                                                                                                                            IF (    i > 2 * n - k
                                                                                                                                 OR i_1 < n - i
                                                                                                                                 OR i_1 > -1 * i - k + 2 * n
                                                                                                                                 OR j < i_1 + k - n
                                                                                                                                 OR j > i_1
                                                                                                                                 OR j > k
                                                                                                                                 OR k > n)
                                                                                                                            THEN 0
                                                                                                                            ELSE C(k, j) * C(n - k, i_1 - j)
                                                                                                                                 *
                                                                                                                                 C
                                                                                                                                 (n - k,
                                                                                                                                  -1 * i - i_1 - k + 2 * n)
                                                                                                                                 *
                                                                                                                                 A ^ (k - j)
                                                                                                                                 *
                                                                                                                                 B ^ j
                                                                                                                                 *
                                                                                                                                 C ^ (j - i_1 - k + n)
                                                                                                                                 *
                                                                                                                                 D ^ (i_1 - j)
                                                                                                                                 *
                                                                                                                                 E ^ (i + i_1 - n)
                                                                                                                                 *
                                                                                                                                 F ^ (-1 * i - i_1 - k + 2 * n)
                                                                                                                            ENDIF))
                                                                                                      * (IF i = 0 THEN 1 ELSE x ^ i ENDIF)))")
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (rewrite "sigma_swap")
                                              (("1"
                                                (rewrite "sigma_eq")
                                                (("1"
                                                  (skolem 1 "k")
                                                  (("1"
                                                    (rewrite
                                                     "binomial_theorem")
                                                    (("1"
                                                      (rewrite
                                                       "binomial_theorem")
                                                      (("1"
                                                        (rewrite
                                                         "binomial_theorem")
                                                        (("1"
                                                          (invoke
                                                           (name-replace
                                                            "AAC2"
                                                            "%1")
                                                           (! 1 2))
                                                          (("1"
                                                            (rewrite
                                                             "sigma_product")
                                                            (("1"
                                                              (rewrite
                                                               "sigma_product")
                                                              (("1"
                                                                (expand
                                                                 "AAC2")
                                                                (("1"
                                                                  (rewrite
                                                                   "sigma_reverse")
                                                                  (("1"
                                                                    (rewrite
                                                                     "sigma_scal"
                                                                     :dir
                                                                     rl)
                                                                    (("1"
                                                                      (lemma
                                                                       "sigma_split")
                                                                      (("1"
                                                                        (invoke
                                                                         (inst
                                                                          -
                                                                          "%1"
                                                                          "2*n"
                                                                          "0"
                                                                          "2*n-k")
                                                                         (!
                                                                          1
                                                                          2
                                                                          3))
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (invoke
                                                                             (case-replace
                                                                              "%1 = 0")
                                                                             (!
                                                                              -1
                                                                              2
                                                                              2))
                                                                            (("1"
                                                                              (hide
                                                                               -1)
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (hide
                                                                                   -1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "sigma_eq")
                                                                                      (("1"
                                                                                        (hide
                                                                                         2)
                                                                                        (("1"
                                                                                          (skolem
                                                                                           1
                                                                                           "q")
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "sigma_scal"
                                                                                             :dir
                                                                                             rl)
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "sigma_scal"
                                                                                               :dir
                                                                                               rl)
                                                                                              (("1"
                                                                                                (rewrite
                                                                                                 "sigma_scal_right"
                                                                                                 :dir
                                                                                                 rl)
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "sigma_eq")
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     2)
                                                                                                    (("1"
                                                                                                      (skolem
                                                                                                       1
                                                                                                       "j")
                                                                                                      (("1"
                                                                                                        (lift-if)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (split
                                                                                                             +)
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (split
                                                                                                                   -)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (rewrite
                                                                                                                       "sigma_zero")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (case
                                                                                                                             "FORALL (eg1:real): 0*eg1 = 0")
                                                                                                                            (("1"
                                                                                                                              (rewrite
                                                                                                                               -1)
                                                                                                                              nil
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (rewrite
                                                                                                                       "sigma_zero")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (flatten)
                                                                                                              (("2"
                                                                                                                (rewrite
                                                                                                                 "sigma_scal_right"
                                                                                                                 :dir
                                                                                                                 rl)
                                                                                                                (("1"
                                                                                                                  (rewrite
                                                                                                                   "sigma_scal"
                                                                                                                   :dir
                                                                                                                   rl)
                                                                                                                  (("1"
                                                                                                                    (rewrite
                                                                                                                     "sigma_scal"
                                                                                                                     :dir
                                                                                                                     rl)
                                                                                                                    (("1"
                                                                                                                      (rewrite
                                                                                                                       "sigma_scal_right"
                                                                                                                       :dir
                                                                                                                       rl)
                                                                                                                      (("1"
                                                                                                                        (rewrite
                                                                                                                         "sigma_eq")
                                                                                                                        (("1"
                                                                                                                          (hide
                                                                                                                           "hyp")
                                                                                                                          (("1"
                                                                                                                            (skolem
                                                                                                                             1
                                                                                                                             "i")
                                                                                                                            (("1"
                                                                                                                              (lift-if)
                                                                                                                              (("1"
                                                                                                                                (ground)
                                                                                                                                (("1"
                                                                                                                                  (reveal
                                                                                                                                   "me1")
                                                                                                                                  (("1"
                                                                                                                                    (rewrite
                                                                                                                                     "me1")
                                                                                                                                    (("1"
                                                                                                                                      (rewrite
                                                                                                                                       "me1")
                                                                                                                                      (("1"
                                                                                                                                        (rewrite
                                                                                                                                         "me1")
                                                                                                                                        (("1"
                                                                                                                                          (case
                                                                                                                                           "x ^ (k - i)*x ^ (-1 * j - k + i + n)*x ^ (j - n + q)=x^q")
                                                                                                                                          (("1"
                                                                                                                                            (case
                                                                                                                                             "(IF q = 0 THEN 1 ELSE x ^ q ENDIF) = x^q")
                                                                                                                                            (("1"
                                                                                                                                              (replace
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (hide-all-but
                                                                                                                                               1)
                                                                                                                                              (("2"
                                                                                                                                                (lift-if)
                                                                                                                                                (("2"
                                                                                                                                                  (ground)
                                                                                                                                                  (("2"
                                                                                                                                                    (replace
                                                                                                                                                     -1)
                                                                                                                                                    (("2"
                                                                                                                                                      (expand
                                                                                                                                                       "^")
                                                                                                                                                      (("2"
                                                                                                                                                        (expand
                                                                                                                                                         "expt")
                                                                                                                                                        (("2"
                                                                                                                                                          (propax)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (assert)
                                                                                                                                            (("2"
                                                                                                                                              (hide
                                                                                                                                               (3
                                                                                                                                                4
                                                                                                                                                5
                                                                                                                                                6
                                                                                                                                                7
                                                                                                                                                8
                                                                                                                                                9
                                                                                                                                                10))
                                                                                                                                              (("2"
                                                                                                                                                (reveal
                                                                                                                                                 "ep1")
                                                                                                                                                (("2"
                                                                                                                                                  (rewrite
                                                                                                                                                   "ep1"
                                                                                                                                                   :dir
                                                                                                                                                   rl)
                                                                                                                                                  (("2"
                                                                                                                                                    (rewrite
                                                                                                                                                     "ep1"
                                                                                                                                                     :dir
                                                                                                                                                     rl)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (hide
                                                                                                                           "hyp")
                                                                                                                          (("2"
                                                                                                                            (hide
                                                                                                                             4)
                                                                                                                            (("2"
                                                                                                                              (grind)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("3"
                                                                                                                          (hide-all-but
                                                                                                                           1)
                                                                                                                          (("3"
                                                                                                                            (grind)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("4"
                                                                                                                          (hide-all-but
                                                                                                                           1)
                                                                                                                          (("4"
                                                                                                                            (grind)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("5"
                                                                                                                          (hide-all-but
                                                                                                                           1)
                                                                                                                          (("5"
                                                                                                                            (grind)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("6"
                                                                                                                          (hide-all-but
                                                                                                                           1)
                                                                                                                          (("6"
                                                                                                                            (grind)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("7"
                                                                                                                          (hide-all-but
                                                                                                                           1)
                                                                                                                          (("7"
                                                                                                                            (grind)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("8"
                                                                                                                          (hide-all-but
                                                                                                                           1)
                                                                                                                          (("8"
                                                                                                                            (grind)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("9"
                                                                                                                          (hide-all-but
                                                                                                                           1)
                                                                                                                          (("9"
                                                                                                                            (grind)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("10"
                                                                                                                          (hide-all-but
                                                                                                                           1)
                                                                                                                          (("10"
                                                                                                                            (grind)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("11"
                                                                                                                          (hide-all-but
                                                                                                                           1)
                                                                                                                          (("11"
                                                                                                                            (grind)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (hide-all-but
                                                                                                                         1)
                                                                                                                        (("2"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("3"
                                                                                                                        (hide-all-but
                                                                                                                         1)
                                                                                                                        (("3"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("4"
                                                                                                                        (hide-all-but
                                                                                                                         1)
                                                                                                                        (("4"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("5"
                                                                                                                        (hide-all-but
                                                                                                                         1)
                                                                                                                        (("5"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("6"
                                                                                                                        (hide-all-but
                                                                                                                         1)
                                                                                                                        (("6"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (hide-all-but
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("3"
                                                                                                                      (hide-all-but
                                                                                                                       1)
                                                                                                                      (("3"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("4"
                                                                                                                      (hide-all-but
                                                                                                                       1)
                                                                                                                      (("4"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("5"
                                                                                                                      (hide-all-but
                                                                                                                       1)
                                                                                                                      (("5"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("6"
                                                                                                                      (hide-all-but
                                                                                                                       1)
                                                                                                                      (("6"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (hide-all-but
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("3"
                                                                                                                    (hide-all-but
                                                                                                                     1)
                                                                                                                    (("3"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("4"
                                                                                                                    (hide-all-but
                                                                                                                     1)
                                                                                                                    (("4"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("5"
                                                                                                                    (hide-all-but
                                                                                                                     1)
                                                                                                                    (("5"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("6"
                                                                                                                    (hide-all-but
                                                                                                                     1)
                                                                                                                    (("6"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide-all-but
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (grind)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("3"
                                                                                                                  (hide-all-but
                                                                                                                   1)
                                                                                                                  (("3"
                                                                                                                    (grind)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("4"
                                                                                                                  (hide-all-but
                                                                                                                   1)
                                                                                                                  (("4"
                                                                                                                    (grind)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("5"
                                                                                                                  (hide-all-but
                                                                                                                   1)
                                                                                                                  (("5"
                                                                                                                    (grind)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("6"
                                                                                                                  (hide-all-but
                                                                                                                   1)
                                                                                                                  (("6"
                                                                                                                    (grind)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide-all-but
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("3"
                                                                                                    (hide-all-but
                                                                                                     1)
                                                                                                    (("3"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("4"
                                                                                                    (hide-all-but
                                                                                                     1)
                                                                                                    (("4"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("5"
                                                                                                    (hide-all-but
                                                                                                     1)
                                                                                                    (("5"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("6"
                                                                                                    (hide-all-but
                                                                                                     1)
                                                                                                    (("6"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("7"
                                                                                                    (hide-all-but
                                                                                                     1)
                                                                                                    (("7"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("8"
                                                                                                    (hide-all-but
                                                                                                     1)
                                                                                                    (("8"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("9"
                                                                                                    (hide-all-but
                                                                                                     1)
                                                                                                    (("9"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("10"
                                                                                                    (hide-all-but
                                                                                                     1)
                                                                                                    (("10"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("11"
                                                                                                    (hide-all-but
                                                                                                     1)
                                                                                                    (("11"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("12"
                                                                                                    (hide-all-but
                                                                                                     1)
                                                                                                    (("12"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("13"
                                                                                                    (hide-all-but
                                                                                                     1)
                                                                                                    (("13"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("14"
                                                                                                    (hide-all-but
                                                                                                     1)
                                                                                                    (("14"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("15"
                                                                                                    (hide-all-but
                                                                                                     1)
                                                                                                    (("15"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("16"
                                                                                                    (hide-all-but
                                                                                                     1)
                                                                                                    (("16"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("17"
                                                                                                    (hide-all-but
                                                                                                     1)
                                                                                                    (("17"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide-all-but
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (hide-all-but
                                                                                                   1)
                                                                                                  (("3"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("4"
                                                                                                  (hide-all-but
                                                                                                   1)
                                                                                                  (("4"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("5"
                                                                                                  (hide-all-but
                                                                                                   1)
                                                                                                  (("5"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("6"
                                                                                                  (hide-all-but
                                                                                                   1)
                                                                                                  (("6"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("7"
                                                                                                  (hide-all-but
                                                                                                   1)
                                                                                                  (("7"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("8"
                                                                                                  (hide-all-but
                                                                                                   1)
                                                                                                  (("8"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("9"
                                                                                                  (hide-all-but
                                                                                                   1)
                                                                                                  (("9"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide-all-but
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("3"
                                                                                                (hide-all-but
                                                                                                 1)
                                                                                                (("3"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("4"
                                                                                                (hide-all-but
                                                                                                 1)
                                                                                                (("4"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("5"
                                                                                                (hide-all-but
                                                                                                 1)
                                                                                                (("5"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("6"
                                                                                                (hide-all-but
                                                                                                 1)
                                                                                                (("6"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("7"
                                                                                                (hide-all-but
                                                                                                 1)
                                                                                                (("7"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("8"
                                                                                                (hide-all-but
                                                                                                 1)
                                                                                                (("8"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("9"
                                                                                                (hide-all-but
                                                                                                 1)
                                                                                                (("9"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide-all-but
                                                                                               1)
                                                                                              (("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("3"
                                                                                              (hide-all-but
                                                                                               1)
                                                                                              (("3"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("4"
                                                                                              (hide-all-but
                                                                                               1)
                                                                                              (("4"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("5"
                                                                                              (hide-all-but
                                                                                               1)
                                                                                              (("5"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("6"
                                                                                              (hide-all-but
                                                                                               1)
                                                                                              (("6"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("7"
                                                                                              (hide-all-but
                                                                                               1)
                                                                                              (("7"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("8"
                                                                                              (hide-all-but
                                                                                               1)
                                                                                              (("8"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("9"
                                                                                              (hide-all-but
                                                                                               1)
                                                                                              (("9"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("3"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("4"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("4"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("5"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("5"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("6"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("6"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("7"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("7"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("8"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("8"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("9"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("9"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("10"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("10"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("11"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("11"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("12"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("12"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("13"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("13"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("14"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("14"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("15"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("15"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("16"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("16"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("17"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("17"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (hide
                                                                                 -1)
                                                                                (("2"
                                                                                  (hide
                                                                                   "hyp")
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     "sigma_restrict_eq_0")
                                                                                    (("1"
                                                                                      (hide
                                                                                       2)
                                                                                      (("1"
                                                                                        (skosimp*)
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "sigma_zero")
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "sigma_zero")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide-all-but
                                                                                       1)
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (hide-all-but
                                                                                       1)
                                                                                      (("3"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("4"
                                                                                      (hide-all-but
                                                                                       1)
                                                                                      (("4"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("5"
                                                                                      (hide-all-but
                                                                                       1)
                                                                                      (("5"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("6"
                                                                                      (hide-all-but
                                                                                       1)
                                                                                      (("6"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("7"
                                                                                      (hide-all-but
                                                                                       1)
                                                                                      (("7"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("8"
                                                                                      (hide-all-but
                                                                                       1)
                                                                                      (("8"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("9"
                                                                                      (hide-all-but
                                                                                       1)
                                                                                      (("9"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (hide
                                                                               2)
                                                                              (("3"
                                                                                (hide
                                                                                 -1)
                                                                                (("3"
                                                                                  (hide-all-but
                                                                                   1)
                                                                                  (("3"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("4"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("4"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("5"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("5"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("6"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("6"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("7"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("7"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("8"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("8"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("9"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("9"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("10"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("10"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("3"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("4"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("4"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("5"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("5"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("6"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("6"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("7"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("7"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("8"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("8"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("9"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("9"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("3"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("4"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("4"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("5"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("5"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("6"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("6"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("7"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("7"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("8"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("8"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("9"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("9"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("3"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("4"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("4"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("5"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("5"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("6"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("6"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("7"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("7"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("8"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("8"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("9"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("9"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (hide-all-but
                                                                 1)
                                                                (("3"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("4"
                                                                (hide-all-but
                                                                 1)
                                                                (("4"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("5"
                                                                (hide-all-but
                                                                 1)
                                                                (("5"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("6"
                                                                (hide-all-but
                                                                 1)
                                                                (("6"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("7"
                                                                (hide-all-but
                                                                 1)
                                                                (("7"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("8"
                                                                (hide-all-but
                                                                 1)
                                                                (("8"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               1)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (hide-all-but
                                                               1)
                                                              (("3"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("4"
                                                              (hide-all-but
                                                               1)
                                                              (("4"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("5"
                                                              (hide-all-but
                                                               1)
                                                              (("5"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (hide-all-but
                                                             1)
                                                            (("3"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("4"
                                                            (hide-all-but
                                                             1)
                                                            (("4"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("5"
                                                            (hide-all-but
                                                             1)
                                                            (("5"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("6"
                                                            (hide-all-but
                                                             1)
                                                            (("6"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("7"
                                                            (hide-all-but
                                                             1)
                                                            (("7"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("8"
                                                            (hide-all-but
                                                             1)
                                                            (("8"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("9"
                                                            (hide-all-but
                                                             1)
                                                            (("9"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide-all-but 1)
                                                  (("3"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (hide-all-but 1)
                                                  (("4"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("5"
                                                  (hide-all-but 1)
                                                  (("5"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("6"
                                                  (hide-all-but 1)
                                                  (("6"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("7"
                                                  (hide-all-but 1)
                                                  (("7"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("8"
                                                  (hide-all-but 1)
                                                  (("8"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("9"
                                                  (hide-all-but 1)
                                                  (("9"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("10"
                                                  (hide-all-but 1)
                                                  (("10"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2" (grind) nil nil))
                                                nil)
                                               ("3"
                                                (hide-all-but 1)
                                                (("3" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide "hyp")
                                          (("2"
                                            (decompose-equality)
                                            (("1"
                                              (rewrite
                                               "sigma_scal_right"
                                               :dir
                                               rl)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (rewrite "sigma_eq")
                                                  (("1"
                                                    (hide-all-but 1)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (hide-all-but 1)
                                                    (("3"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("4"
                                                    (hide-all-but 1)
                                                    (("4"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("5"
                                                    (hide-all-but 1)
                                                    (("5"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("6"
                                                    (hide-all-but 1)
                                                    (("6"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("7"
                                                    (hide-all-but 1)
                                                    (("7"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("8"
                                                    (hide-all-but 1)
                                                    (("8"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("9"
                                                    (hide-all-but 1)
                                                    (("9"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("10"
                                                    (hide-all-but 1)
                                                    (("10"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("11"
                                                    (hide-all-but 1)
                                                    (("11"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("12"
                                                    (hide-all-but 1)
                                                    (("12"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("13"
                                                    (hide-all-but 1)
                                                    (("13"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("14"
                                                    (hide-all-but 1)
                                                    (("14"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("15"
                                                    (hide-all-but 1)
                                                    (("15"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("16"
                                                    (hide-all-but 1)
                                                    (("16"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("17"
                                                    (hide-all-but 1)
                                                    (("17"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("18"
                                                    (hide-all-but 1)
                                                    (("18"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2" (grind) nil nil))
                                                nil)
                                               ("3"
                                                (hide-all-but 1)
                                                (("3" (grind) nil nil))
                                                nil)
                                               ("4"
                                                (hide-all-but 1)
                                                (("4" (grind) nil nil))
                                                nil)
                                               ("5"
                                                (hide-all-but 1)
                                                (("5" (grind) nil nil))
                                                nil)
                                               ("6"
                                                (hide-all-but 1)
                                                (("6" (grind) nil nil))
                                                nil)
                                               ("7"
                                                (hide-all-but 1)
                                                (("7" (grind) nil nil))
                                                nil)
                                               ("8"
                                                (hide-all-but 1)
                                                (("8" (grind) nil nil))
                                                nil)
                                               ("9"
                                                (hide-all-but 1)
                                                (("9" (grind) nil nil))
                                                nil)
                                               ("10"
                                                (hide-all-but 1)
                                                (("10"
                                                  (grind)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but 1)
                                              (("2" (grind) nil nil))
                                              nil)
                                             ("3"
                                              (hide-all-but 1)
                                              (("3" (grind) nil nil))
                                              nil)
                                             ("4"
                                              (hide-all-but 1)
                                              (("4" (grind) nil nil))
                                              nil)
                                             ("5"
                                              (hide-all-but 1)
                                              (("5" (grind) nil nil))
                                              nil)
                                             ("6"
                                              (hide-all-but 1)
                                              (("6" (grind) nil nil))
                                              nil)
                                             ("7"
                                              (hide-all-but 1)
                                              (("7" (grind) nil nil))
                                              nil)
                                             ("8"
                                              (hide-all-but 1)
                                              (("8" (grind) nil nil))
                                              nil)
                                             ("9"
                                              (hide-all-but 1)
                                              (("9" (grind) nil nil))
                                              nil)
                                             ("10"
                                              (hide-all-but 1)
                                              (("10" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (hide "hyp")
                                          (("3"
                                            (hide-all-but 1)
                                            (("3" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (hide-all-but 1)
                                          (("4" (grind) nil nil))
                                          nil)
                                         ("5"
                                          (hide-all-but 1)
                                          (("5" (grind) nil nil))
                                          nil)
                                         ("6"
                                          (hide-all-but 1)
                                          (("6" (grind) nil nil))
                                          nil)
                                         ("7"
                                          (hide-all-but 1)
                                          (("7" (grind) nil nil))
                                          nil)
                                         ("8"
                                          (hide-all-but 1)
                                          (("8" (grind) nil nil))
                                          nil)
                                         ("9"
                                          (hide-all-but 1)
                                          (("9" (grind) nil nil))
                                          nil)
                                         ("10"
                                          (hide-all-but 1)
                                          (("10" (grind) nil nil))
                                          nil)
                                         ("11"
                                          (hide-all-but 1)
                                          (("11" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide "hyp")
                                  (("2"
                                    (rewrite "sigma_eq")
                                    (("1"
                                      (hide 2)
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (ground)
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "^")
                                                  (("1"
                                                    (expand "expt")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (rewrite "div_expt")
                                                (("1"
                                                  (reveal "me1")
                                                  (("1"
                                                    (copy "me1")
                                                    (("1"
                                                      (inst
                                                       -
                                                       "n!1"
                                                       "D+C*x"
                                                       "F+E*x")
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (cross-mult
                                                             2)
                                                            (("1"
                                                              (lemma
                                                               "expt_plus")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "n-n!1"
                                                                 "n!1"
                                                                 _)
                                                                (("1"
                                                                  (inst-cp
                                                                   -
                                                                   "F + E*x")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "D+C*x")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (replace -1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (case
                                                         "0^n!1 = 0")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (1 2))
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (lemma
                                         "nzreal_times_nzreal_is_nzreal")
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (inst - "D+C*x" "F+E*x")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (hide "hyp")
                                  (("3"
                                    (lemma
                                     "nzreal_times_nzreal_is_nzreal")
                                    (("3"
                                      (skeep)
                                      (("3"
                                        (inst - "D+C*x" "F+E*x")
                                        (("1" (assert) nil nil)
                                         ("2" (assert) nil nil)
                                         ("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("4" (assert) nil nil)
                                 ("5"
                                  (lemma
                                   "nzreal_times_nzreal_is_nzreal")
                                  (("5"
                                    (skeep)
                                    (("5"
                                      (inst - "D+C*x" "F+E*x")
                                      (("1" (assert) nil nil)
                                       ("2" (assert) nil nil)
                                       ("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (lemma
                                   "nzreal_times_nzreal_is_nzreal")
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (inst - "D+C*x" "F+E*x")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma_scal formula-decl nil sigma nil)
    (T_high type-eq-decl nil sigma nil)
    (T_low type-eq-decl nil sigma nil)
    (sigma_swap formula-decl nil sigma_swap nil)
    (sigma_reverse formula-decl nil sigma_nat nil)
    (sigma_split formula-decl nil sigma nil)
    (sigma_restrict_eq_0 formula-decl nil sigma nil)
    (sigma_zero formula-decl nil sigma nil) nil nil
    (sigma_scal_right formula-decl nil sigma nil)
    (sigma_product formula-decl nil sigma_nat nil)
    (sigma_eq formula-decl nil sigma nil)
    (C const-decl "posnat" binomial nil)
    (sigma def-decl "real" sigma nil))
   shostak))
 (poly_translate_inf_pos_TCC1 0
  (poly_translate_inf_pos_TCC1-1 nil 3500729367
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (poly_translate_inf_pos subtype
    "(number_fields.-)(polynomials.n, polynomials.j)" "T_low[nat]")))
 (poly_translate_inf_pos_TCC2 0
  (poly_translate_inf_pos_TCC2-1 nil 3500729367
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (poly_translate_inf_pos subtype
    "(number_fields.+)((number_fields.-)(polynomials.i, polynomials.n), polynomials.j)"
    "{i_1: naturalnumbers.nat | reals.<=(i_1, polynomials.i)}")))
 (poly_translate_inf_pos_TCC3 0
  (poly_translate_inf_pos_TCC3-1 nil 3500729367
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (poly_translate_inf_pos subtype
    "((number_fields.+)((number_fields.-)(polynomials.i, polynomials.n), polynomials.j))"
    "{i: integers.int | booleans.OR(((number_fields.-)(polynomials.A, 1)) /= 0, reals.>=(i, 0))}")))
 (poly_translate_inf_neg_TCC1 0
  (poly_translate_inf_neg_TCC1-1 nil 3500823978
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (poly_translate_inf_neg subtype
    "((number_fields.+)((number_fields.-)(polynomials.i, polynomials.n), polynomials.j))"
    "{i: integers.int | booleans.OR(((number_fields.-)((number_fields.-)(polynomials.A), 1)) /= 0, reals.>=(i, 0))}")))
 (poly_translate_inf_pos_def 0
  (poly_translate_inf_pos_def-2 nil 3501441112
   ("" (skeep)
    (("" (name "yy" "1+x*(A-1)")
      (("" (replace -1)
        (("" (label "yyname" -1)
          (("" (expand "polynomial")
            (("" (expand "poly_translate_inf_pos")
              (("" (rewrite "sigma_scal" :dir rl)
                ((""
                  (case "NOT (LAMBDA (i_1: nat):
                                                                                           x ^ n *
                                                                                            (a(i_1) * (IF i_1 = 0 THEN 1 ELSE (yy / x) ^ i_1 ENDIF))) = (LAMBDA (j:nat): a(j)*yy^j*x^(n-j))")
                  (("1" (hide 3)
                    (("1" (decompose-equality +)
                      (("1"
                        (case "(IF x!1 = 0 THEN 1 ELSE (yy / x) ^ x!1 ENDIF) = yy^x!1/x^x!1")
                        (("1" (replace -1)
                          (("1" (hide -1)
                            (("1" (cross-mult 1)
                              (("1"
                                (lemma "expt_plus")
                                (("1"
                                  (inst - "n-x!1" "x!1" "x")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (lift-if)
                            (("2" (ground)
                              (("1"
                                (expand "^")
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (expand "expt")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "div_expt")
                                (("2"
                                  (inst - "x!1" "yy" "x")
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (replace -1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "^" +)
                                          (("2"
                                            (expand "expt" +)
                                            (("2" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (lemma "expt_eq_0")
                          (("3" (inst?)
                            (("1" (assert) nil nil)
                             ("2" (case "x!1 = 0")
                              (("1"
                                (replace -1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "^" +)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "expt" +)
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (replace -1)
                    (("2" (hide -1)
                      (("2"
                        (case "NOT (LAMBDA (j: nat): a(j) * yy ^ j * x ^ (n - j)) = (LAMBDA (j: nat): sigma(0,j,LAMBDA (i:nat): IF i>j THEN 0 ELSE C(j,i)*a(j)*(A-1)^i * x ^ (n - j+i) ENDIF))")
                        (("1" (hide 3)
                          (("1" (decompose-equality +)
                            (("1" (lemma "binomial_theorem")
                              (("1"
                                (inst - "x!1" "x*(A-1)" "1")
                                (("1"
                                  (replace "yyname")
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (rewrite "sigma_scal" :dir rl)
                                        (("1"
                                          (rewrite "sigma_restrict_eq")
                                          (("1"
                                            (hide 2)
                                            (("1"
                                              (decompose-equality +)
                                              (("1"
                                                (expand "restrict")
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (case
                                                       "FORALL (jj:nat): 1^jj=1")
                                                      (("1"
                                                        (inst
                                                         -
                                                         "x!1-x!2")
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (lemma
                                                                 "mult_expt")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "x!2"
                                                                   "x"
                                                                   "A-1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (hide
                                                                         -1)
                                                                        (("1"
                                                                          (lemma
                                                                           "expt_plus")
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "n-x!1"
                                                                             "x!2"
                                                                             "x")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (case
                                                                         "A = 1")
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (hide
                                                                             -1)
                                                                            (("1"
                                                                              (hide
                                                                               -1)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "^"
                                                                                   +)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "expt"
                                                                                     +)
                                                                                    (("1"
                                                                                      (lift-if)
                                                                                      (("1"
                                                                                        (ground)
                                                                                        (("1"
                                                                                          (lift-if)
                                                                                          (("1"
                                                                                            (ground)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (induct "jj")
                                                          (("1"
                                                            (expand
                                                             "^")
                                                            (("1"
                                                              (expand
                                                               "expt")
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skeep)
                                                            (("2"
                                                              (expand
                                                               "^")
                                                              (("2"
                                                                (expand
                                                                 "expt"
                                                                 +)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skosimp*)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skosimp*)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skosimp*)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skosimp*) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (replace -1)
                          (("2" (hide -1)
                            (("2"
                              (case "NOT (LAMBDA (j: nat):
                                                           sigma(0, j,
                                                                 LAMBDA (i: nat):
                                                                   IF i > j THEN 0
                                                                   ELSE C(j, i) * a(j) * (A - 1) ^ i * x ^ (n - j + i)
                                                                   ENDIF)) = (LAMBDA (j: nat):
                                                           sigma(0, j,
                                                                 LAMBDA (i: nat):
                                                                   IF i > j THEN 0
                                                                   ELSE C(j, j-i) * a(j) * (A - 1) ^ (j-i) * x ^ (n -i)
                                                                   ENDIF))")
                              (("1"
                                (hide 3)
                                (("1"
                                  (decompose-equality +)
                                  (("1"
                                    (lemma "sigma_reverse")
                                    (("1"
                                      (inst
                                       -
                                       "LAMBDA (i: nat):
                                                      IF i > x!1 THEN 0
                                                      ELSE a(x!1) * C(x!1, i) * (A - 1) ^ i * x ^ (i - x!1 + n)
                                                      ENDIF"
                                       "x!1"
                                       "0")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (skosimp*)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skosimp*)
                                    (("2" (assert) nil nil))
                                    nil)
                                   ("3"
                                    (skosimp*)
                                    (("3" (assert) nil nil))
                                    nil)
                                   ("4"
                                    (skosimp*)
                                    (("4" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (replace -1)
                                (("2"
                                  (hide -1)
                                  (("2"
                                    (name
                                     "FF"
                                     "LAMBDA (i,j:nat): IF i > j THEN 0
                                                              ELSE C(j, j - i) * a(j) * (A - 1) ^ (j - i) *
                                                                    x ^ (n - i)
                                                              ENDIF")
                                    (("1"
                                      (lemma "sigma_swap_triangle")
                                      (("1"
                                        (inst - "FF" "n" "n" "0")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "FF" -1 2)
                                            (("1"
                                              (replace -1 :dir rl)
                                              (("1"
                                                (hide -1)
                                                (("1"
                                                  (hide -1)
                                                  (("1"
                                                    (lemma
                                                     "sigma_reverse")
                                                    (("1"
                                                      (inst
                                                       -
                                                       "LAMBDA (i: nat): sigma(i, n, LAMBDA (j: nat): FF(i, j))"
                                                       "n"
                                                       "0")
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (rewrite
                                                               "sigma_restrict_eq")
                                                              (("1"
                                                                (hide
                                                                 3)
                                                                (("1"
                                                                  (decompose-equality
                                                                   +)
                                                                  (("1"
                                                                    (expand
                                                                     "restrict")
                                                                    (("1"
                                                                      (lift-if)
                                                                      (("1"
                                                                        (ground)
                                                                        (("1"
                                                                          (rewrite
                                                                           "sigma_scal_right"
                                                                           :dir
                                                                           rl)
                                                                          (("1"
                                                                            (rewrite
                                                                             "sigma_restrict_eq")
                                                                            (("1"
                                                                              (hide
                                                                               3)
                                                                              (("1"
                                                                                (decompose-equality
                                                                                 +)
                                                                                (("1"
                                                                                  (expand
                                                                                   "restrict")
                                                                                  (("1"
                                                                                    (lift-if)
                                                                                    (("1"
                                                                                      (ground)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "FF")
                                                                                        (("1"
                                                                                          (lift-if)
                                                                                          (("1"
                                                                                            (ground)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "^"
                                                                                                 +
                                                                                                 2)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "expt")
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (skosimp*)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (skosimp*)
                                                                                  (("3"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (skosimp*)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (skosimp*)
                                                                              (("3"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (skosimp*)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (skosimp*)
                                                                            (("3"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skosimp*)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (skosimp*)
                                                                    (("3"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("4"
                                                                    (skosimp*)
                                                                    (("4"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("5"
                                                                    (skosimp*)
                                                                    (("5"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skosimp*)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (skosimp*)
                                                                (("3"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("4"
                                                                (skosimp*)
                                                                (("4"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("5"
                                                                (skosimp*)
                                                                (("5"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (skosimp*) nil nil)
                                     ("3"
                                      (assert)
                                      (("3"
                                        (skosimp*)
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("4"
                                      (skosimp*)
                                      (("4" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3" (skosimp*) nil nil)
                               ("4"
                                (assert)
                                (("4"
                                  (skosimp*)
                                  (("4" (assert) nil nil))
                                  nil))
                                nil)
                               ("5"
                                (skosimp*)
                                (("5" (assert) nil nil))
                                nil)
                               ("6" (skosimp*) nil nil))
                              nil))
                            nil))
                          nil)
                         ("3" (assert) nil nil)
                         ("4" (skosimp*) (("4" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("3" (skosimp*) nil nil) ("4" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (poly_translate_inf_pos const-decl "sequence[real]" polynomials
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (x skolem-const-decl "real" polynomials nil)
    (n skolem-const-decl "nat" polynomials nil)
    (expt_eq_0 formula-decl nil exponentiation nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (x!1 skolem-const-decl "nat" polynomials nil)
    (> const-decl "bool" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (expt def-decl "real" exponentiation nil)
    (yy skolem-const-decl "real" polynomials nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (div_expt formula-decl nil exponentiation nil)
    (times_div1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel3 formula-decl nil real_props nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (expt_plus formula-decl nil exponentiation nil)
    (x!1 skolem-const-decl "nat" polynomials nil)
    (sigma_reverse formula-decl nil sigma_nat nil)
    (sigma_swap_triangle formula-decl nil sigma_swap nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (sigma_scal_right formula-decl nil sigma nil)
    (x!1 skolem-const-decl "nat" polynomials nil)
    (FF skolem-const-decl "[[nat, nat] -> real]" polynomials nil)
    (binomial_theorem formula-decl nil polynomials nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (sigma_restrict_eq formula-decl nil sigma nil)
    (x!1 skolem-const-decl "nat" polynomials nil)
    (restrict const-decl "[T -> real]" sigma nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (A skolem-const-decl "real" polynomials nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (int_exp application-judgement "int" exponentiation nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (mult_expt formula-decl nil exponentiation nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (C const-decl "posnat" binomial nil)
    (sigma def-decl "real" sigma nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (T_low type-eq-decl nil sigma nil)
    (T_high type-eq-decl nil sigma nil)
    (<= const-decl "bool" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (sequence type-eq-decl nil sequences nil)
    (sigma_scal formula-decl nil sigma nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil)
  (poly_translate_inf_pos_def-1 nil 3500730524
   ("" (skeep)
    (("" (name "yy" "1+x*(A-1)")
      (("" (replace -1)
        (("" (label "yyname" -1)
          (("" (expand "polynomial")
            (("" (expand "poly_translate_inf_pos")
              (("" (rewrite "sigma_scal" :dir rl)
                ((""
                  (case "NOT (LAMBDA (i_1: nat):
                                                                      x ^ n *
                                                                       (a(i_1) * (IF i_1 = 0 THEN 1 ELSE (yy / x) ^ i_1 ENDIF))) = (LAMBDA (j:nat): a(j)*yy^j*x^(n-j))")
                  (("1" (hide 2)
                    (("1" (decompose-equality +)
                      (("1"
                        (case "(IF x!1 = 0 THEN 1 ELSE (yy / x) ^ x!1 ENDIF) = yy^x!1/x^x!1")
                        (("1" (replace -1)
                          (("1" (hide -1)
                            (("1" (cross-mult 1)
                              (("1"
                                (lemma "expt_plus")
                                (("1"
                                  (inst - "n-x!1" "x!1" "x")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (lift-if)
                            (("2" (ground)
                              (("1"
                                (expand "^")
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (expand "expt")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "div_expt")
                                (("2"
                                  (inst - "x!1" "yy" "x")
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (replace -1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "^" +)
                                          (("2"
                                            (expand "expt" +)
                                            (("2" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (lemma "expt_eq_0")
                          (("3" (inst?)
                            (("1" (assert) nil nil)
                             ("2" (case "x!1 = 0")
                              (("1"
                                (replace -1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "^" +)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "expt" +)
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (replace -1)
                    (("2" (hide -1)
                      (("2"
                        (case "NOT (LAMBDA (j: nat): a(j) * yy ^ j * x ^ (n - j)) = (LAMBDA (j: nat): sigma(0,j,LAMBDA (i:nat): IF i>j THEN 0 ELSE C(j,i)*a(j)*(A-1)^i * x ^ (n - j+i) ENDIF))")
                        (("1" (hide 2)
                          (("1" (decompose-equality +)
                            (("1" (lemma "binomial_theorem")
                              (("1"
                                (inst - "x!1" "x*(A-1)" "1")
                                (("1"
                                  (replace "yyname")
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (rewrite "sigma_scal" :dir rl)
                                        (("1"
                                          (rewrite "sigma_restrict_eq")
                                          (("1"
                                            (hide 2)
                                            (("1"
                                              (decompose-equality +)
                                              (("1"
                                                (expand "restrict")
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (case
                                                       "FORALL (jj:nat): 1^jj=1")
                                                      (("1"
                                                        (inst
                                                         -
                                                         "x!1-x!2")
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (lemma
                                                                 "mult_expt")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "x!2"
                                                                   "x"
                                                                   "A-1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (hide
                                                                         -1)
                                                                        (("1"
                                                                          (lemma
                                                                           "expt_plus")
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "n-x!1"
                                                                             "x!2"
                                                                             "x")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (case
                                                                         "A = 1")
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (hide
                                                                             -1)
                                                                            (("1"
                                                                              (hide
                                                                               -1)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "^"
                                                                                   +)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "expt"
                                                                                     +)
                                                                                    (("1"
                                                                                      (lift-if)
                                                                                      (("1"
                                                                                        (ground)
                                                                                        (("1"
                                                                                          (lift-if)
                                                                                          (("1"
                                                                                            (ground)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (induct "jj")
                                                          (("1"
                                                            (expand
                                                             "^")
                                                            (("1"
                                                              (expand
                                                               "expt")
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skeep)
                                                            (("2"
                                                              (expand
                                                               "^")
                                                              (("2"
                                                                (expand
                                                                 "expt"
                                                                 +)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skosimp*)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skosimp*)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skosimp*)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skosimp*) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (replace -1)
                          (("2" (hide -1)
                            (("2"
                              (case "NOT (LAMBDA (j: nat):
                          sigma(0, j,
                                LAMBDA (i: nat):
                                  IF i > j THEN 0
                                  ELSE C(j, i) * a(j) * (A - 1) ^ i * x ^ (n - j + i)
                                  ENDIF)) = (LAMBDA (j: nat):
                          sigma(0, j,
                                LAMBDA (i: nat):
                                  IF i > j THEN 0
                                  ELSE C(j, j-i) * a(j) * (A - 1) ^ (j-i) * x ^ (n -i)
                                  ENDIF))")
                              (("1"
                                (hide 2)
                                (("1"
                                  (decompose-equality +)
                                  (("1"
                                    (lemma "sigma_reverse")
                                    (("1"
                                      (inst
                                       -
                                       "LAMBDA (i: nat):
                        IF i > x!1 THEN 0
                        ELSE a(x!1) * C(x!1, i) * (A - 1) ^ i * x ^ (i - x!1 + n)
                        ENDIF"
                                       "x!1"
                                       "0")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (skosimp*)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skosimp*)
                                    (("2" (assert) nil nil))
                                    nil)
                                   ("3"
                                    (skosimp*)
                                    (("3" (assert) nil nil))
                                    nil)
                                   ("4"
                                    (skosimp*)
                                    (("4" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (replace -1)
                                (("2"
                                  (hide -1)
                                  (("2"
                                    (name
                                     "FF"
                                     "LAMBDA (i,j:nat): IF i > j THEN 0
                       ELSE C(j, j - i) * a(j) * (A - 1) ^ (j - i) *
                             x ^ (n - i)
                       ENDIF")
                                    (("1"
                                      (lemma "sigma_swap_triangle")
                                      (("1"
                                        (inst - "FF" "n" "n" "0")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "FF" -1 2)
                                            (("1"
                                              (replace -1 :dir rl)
                                              (("1"
                                                (hide -1)
                                                (("1"
                                                  (hide -1)
                                                  (("1"
                                                    (lemma
                                                     "sigma_reverse")
                                                    (("1"
                                                      (inst
                                                       -
                                                       "LAMBDA (i: nat): sigma(i, n, LAMBDA (j: nat): FF(i, j))"
                                                       "n"
                                                       "0")
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (rewrite
                                                               "sigma_restrict_eq")
                                                              (("1"
                                                                (hide
                                                                 2)
                                                                (("1"
                                                                  (decompose-equality
                                                                   +)
                                                                  (("1"
                                                                    (expand
                                                                     "restrict")
                                                                    (("1"
                                                                      (lift-if)
                                                                      (("1"
                                                                        (ground)
                                                                        (("1"
                                                                          (rewrite
                                                                           "sigma_scal_right"
                                                                           :dir
                                                                           rl)
                                                                          (("1"
                                                                            (rewrite
                                                                             "sigma_restrict_eq")
                                                                            (("1"
                                                                              (hide
                                                                               3)
                                                                              (("1"
                                                                                (decompose-equality
                                                                                 +)
                                                                                (("1"
                                                                                  (expand
                                                                                   "restrict")
                                                                                  (("1"
                                                                                    (lift-if)
                                                                                    (("1"
                                                                                      (ground)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "FF")
                                                                                        (("1"
                                                                                          (lift-if)
                                                                                          (("1"
                                                                                            (ground)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "^"
                                                                                                 +
                                                                                                 2)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "expt")
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (skosimp*)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (skosimp*)
                                                                                  (("3"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (skosimp*)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (skosimp*)
                                                                              (("3"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (skosimp*)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (skosimp*)
                                                                            (("3"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skosimp*)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (skosimp*)
                                                                    (("3"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("4"
                                                                    (skosimp*)
                                                                    (("4"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("5"
                                                                    (skosimp*)
                                                                    (("5"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skosimp*)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (skosimp*)
                                                                (("3"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("4"
                                                                (skosimp*)
                                                                (("4"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("5"
                                                                (skosimp*)
                                                                (("5"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skosimp*)
                                      (("2" (assert) nil nil))
                                      nil)
                                     ("3"
                                      (skosimp*)
                                      (("3" (assert) nil nil))
                                      nil)
                                     ("4"
                                      (skosimp*)
                                      (("4" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (skosimp*)
                                (("3" (assert) nil nil))
                                nil)
                               ("4"
                                (skosimp*)
                                (("4" (assert) nil nil))
                                nil)
                               ("5"
                                (skosimp*)
                                (("5" (assert) nil nil))
                                nil)
                               ("6"
                                (skosimp*)
                                (("6" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (skosimp*) (("3" (assert) nil nil)) nil)
                         ("4" (skosimp*) (("4" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("3" (skosimp*) (("3" (assert) nil nil)) nil)
                   ("4" (skosimp*) (("4" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma_scal formula-decl nil sigma nil)
    (T_high type-eq-decl nil sigma nil)
    (T_low type-eq-decl nil sigma nil)
    (sigma def-decl "real" sigma nil)
    (C const-decl "posnat" binomial nil)
    (restrict const-decl "[T -> real]" sigma nil)
    (sigma_restrict_eq formula-decl nil sigma nil)
    (sigma_scal_right formula-decl nil sigma nil)
    (sigma_swap_triangle formula-decl nil sigma_swap nil)
    (sigma_reverse formula-decl nil sigma_nat nil))
   shostak))
 (poly_translate_inf_pos_def_rev_TCC1 0
  (poly_translate_inf_pos_def_rev_TCC1-1 nil 3501496131
   ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (poly_translate_inf_pos_def_rev subtype "polynomials.n"
    "{i: integers.int | booleans.OR((booleans.NOT)((number_fields.-)((number_fields.+)(1, polynomials.x), polynomials.A) = 0), reals.>=(i, 0))}")))
 (poly_translate_inf_pos_def_rev_TCC2 0
  (poly_translate_inf_pos_def_rev_TCC2-1 nil 3501496169
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (poly_translate_inf_pos_def_rev subtype
    "((number_fields.+)((number_fields.-)(polynomials.x, polynomials.A), 1))"
    "nznum")))
 (poly_translate_inf_pos_def_rev 0
  (poly_translate_inf_pos_def_rev-1 nil 3501496131
   ("" (skeep)
    (("" (lemma "poly_translate_inf_pos_def")
      (("" (inst - "A" "a" "n" "1/(x-A+1)")
        (("" (assert)
          ((""
            (case "NOT (1 + A * (1 / (1 - A + x)) - 1 / (1 - A + x)) /
                            (1 / (1 - A + x)) = x")
            (("1" (cross-mult 1) nil nil)
             ("2" (replace -1)
              (("2" (hide -1)
                (("2" (lemma "div_expt")
                  (("2" (inst - "n" "1" "x-A+1")
                    (("2" (replace -1)
                      (("2" (hide -1)
                        (("2" (case "FORALL (rr:nat): 1^rr = 1")
                          (("1" (inst - "n")
                            (("1" (replace -1)
                              (("1"
                                (hide -1)
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (induct "rr")
                            (("1" (expand "^" 1)
                              (("1"
                                (expand "expt" 1)
                                (("1" (propax) nil nil))
                                nil))
                              nil)
                             ("2" (skeep)
                              (("2"
                                (expand "^")
                                (("2"
                                  (expand "expt" +)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((poly_translate_inf_pos_def formula-decl nil polynomials nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (div_expt formula-decl nil exponentiation nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (expt def-decl "real" exponentiation nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div1 formula-decl nil real_props nil)
    (div_cancel3 formula-decl nil real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil))
   shostak))
 (poly_translate_inf_neg_def 0
  (poly_translate_inf_neg_def-1 nil 3501440552
   ("" (skeep)
    (("" (lemma "poly_translate_inf_pos_def")
      (("" (inst - "-A" "LAMBDA (i:nat): (-1)^i*a(i)" "n" "x")
        (("" (assert)
          (("" (name "yy" "(1 - x + -A * x) / x")
            (("" (replace -1)
              (("" (case "(-1 - -A * x + x) / x=-yy")
                (("1" (assert)
                  (("1" (replace -1)
                    (("1"
                      (case "NOT polynomial(a,n)(-yy) = polynomial(LAMBDA (i: nat): (-1) ^ i * a(i), n)(yy)")
                      (("1" (hide -3)
                        (("1" (hide 3)
                          (("1" (hide -1)
                            (("1" (hide -1)
                              (("1"
                                (expand "polynomial")
                                (("1"
                                  (rewrite "sigma_eq")
                                  (("1"
                                    (hide 2)
                                    (("1"
                                      (skosimp*)
                                      (("1"
                                        (case
                                         "FORALL (rr:real): IF n!1=0 THEN 1 ELSE rr^n!1 ENDIF = rr^n!1")
                                        (("1"
                                          (inst-cp - "-yy")
                                          (("1"
                                            (replace -2)
                                            (("1"
                                              (hide -2)
                                              (("1"
                                                (inst - "yy")
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (case
                                                       "FORALL (mm:nat): (-yy)^mm = (-1)^mm*yy^mm")
                                                      (("1"
                                                        (inst - "n!1")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (induct "mm")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (skeep)
                                                            (("2"
                                                              (expand
                                                               "^")
                                                              (("2"
                                                                (expand
                                                                 "expt"
                                                                 +)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (ground)
                                                (("2"
                                                  (replace -1)
                                                  (("2"
                                                    (expand "^")
                                                    (("2"
                                                      (expand "expt")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2"
                        (case "NOT polynomial(poly_translate_inf_neg(a, n)(A), n)(x) = polynomial(poly_translate_inf_pos(LAMBDA (i: nat): (-1) ^ i * a(i),
                                         n)
                                        (-A),
                  n)
                 (x)")
                        (("1" (hide -4)
                          (("1" (hide 3)
                            (("1" (hide -)
                              (("1"
                                (expand "polynomial")
                                (("1"
                                  (expand "poly_translate_inf_pos")
                                  (("1"
                                    (expand "poly_translate_inf_neg")
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((poly_translate_inf_pos_def formula-decl nil polynomials nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (int_exp application-judgement "int" exponentiation nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (T_low type-eq-decl nil sigma nil)
    (T_high type-eq-decl nil sigma nil)
    (<= const-decl "bool" reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (sigma_eq formula-decl nil sigma nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_expt application-judgement "int" exponentiation nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (subrange type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (poly_translate_inf_pos const-decl "sequence[real]" polynomials
     nil)
    (poly_translate_inf_neg const-decl "sequence[real]" polynomials
     nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (poly_translate_inf_neg_def_rev_TCC1 0
  (poly_translate_inf_neg_def_rev_TCC1-1 nil 3501496731
   ("" (subtype-tcc) nil nil)
   ((real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (poly_translate_inf_neg_def_rev subtype "polynomials.n"
    "{i: integers.int | booleans.OR((booleans.NOT)(((number_fields.-)((number_fields.+)(1, polynomials.A), polynomials.x)) = 0), reals.>=(i, 0))}")))
 (poly_translate_inf_neg_def_rev_TCC2 0
  (poly_translate_inf_neg_def_rev_TCC2-1 nil 3501496731
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (poly_translate_inf_neg_def_rev subtype
    "((number_fields.-)((number_fields.+)(polynomials.A, 1), polynomials.x))"
    "nznum")))
 (poly_translate_inf_neg_def_rev 0
  (poly_translate_inf_neg_def_rev-1 nil 3501496738
   ("" (skeep)
    (("" (lemma "poly_translate_inf_neg_def")
      (("" (inst - "A" "a" "n" "1/(A+1-x)")
        (("" (assert)
          ((""
            (case "NOT (1 / (1 + A - x) - 1 - 1 / (1 + A - x) * -A) /
                          (1 / (1 + A - x)) = x")
            (("1" (cross-mult 1) nil nil)
             ("2" (replace -1)
              (("2" (hide -1)
                (("2" (lemma "div_expt")
                  (("2" (inst - "n" "1" "A+1-x")
                    (("2" (replace -1)
                      (("2" (hide -1)
                        (("2" (case "FORALL (rr:nat): 1^rr = 1")
                          (("1" (inst - "n")
                            (("1" (replace -1)
                              (("1"
                                (hide -1)
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (induct "rr")
                            (("1" (expand "^" 1)
                              (("1"
                                (expand "expt" 1)
                                (("1" (propax) nil nil))
                                nil))
                              nil)
                             ("2" (skeep)
                              (("2"
                                (expand "^")
                                (("2"
                                  (expand "expt" +)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((poly_translate_inf_neg_def formula-decl nil polynomials nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (div_expt formula-decl nil exponentiation nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (expt def-decl "real" exponentiation nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div2 formula-decl nil real_props nil)
    (div_cancel3 formula-decl nil real_props nil)
    (times_div1 formula-decl nil real_props nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil))
   nil))
 (poly_translate_inf_pos_rel 0
  (poly_translate_inf_pos_rel-1 nil 3500729369
   ("" (skeep)
    (("" (label "reldef" -1)
      (("" (hide "reldef")
        (("" (ground)
          (("1" (skosimp*)
            (("1" (lemma "poly_translate_inf_pos_def")
              (("1" (case "FORALL (ii:nat): x!1^ii>0")
                (("1" (inst - "n")
                  (("1" (inst - "A" "a" "n" "x!1")
                    (("1" (assert)
                      (("1" (replace -2 :dir rl)
                        (("1"
                          (case "rel(polynomial(a, n)((1 + A * x!1 - x!1) / x!1), 0)")
                          (("1" (reveal "reldef")
                            (("1" (split -)
                              (("1"
                                (replace -1)
                                (("1"
                                  (mult-by -2 "x!1^n")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (replace -1)
                                (("2"
                                  (mult-by -2 "x!1^n")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil)
                               ("3"
                                (replace -1)
                                (("3"
                                  (mult-by -2 "x!1^n")
                                  (("3" (assert) nil nil))
                                  nil))
                                nil)
                               ("4"
                                (replace -1)
                                (("4"
                                  (mult-by -2 "x!1^n")
                                  (("4" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (hide -2)
                              (("2"
                                (inst?)
                                (("2"
                                  (assert)
                                  (("2"
                                    (cross-mult 2)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (induct "ii")
                  (("1" (expand "^")
                    (("1" (expand "expt") (("1" (assert) nil nil))
                      nil))
                    nil)
                   ("2" (skeep)
                    (("2" (expand "^")
                      (("2" (expand "expt" +)
                        (("2" (mult-by -1 "x!1")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skosimp*)
            (("2" (lemma "poly_translate_inf_pos_def")
              (("2" (inst - "A" "a" "n" "1/(x!1-A+1)")
                (("1" (assert)
                  (("1"
                    (case "NOT ((1 + A * (1 / (1 - A + x!1)) - 1 / (1 - A + x!1)) /
                                         (1 / (1 - A + x!1))) = x!1")
                    (("1" (field) nil nil)
                     ("2" (replace -1)
                      (("2" (hide -1)
                        (("2" (inst - "1 / (1 - A + x!1)")
                          (("2" (assert)
                            (("2"
                              (case "1 / (1 - A + x!1) > 0 AND 1 / (1 - A + x!1) <= 1")
                              (("1"
                                (flatten)
                                (("1"
                                  (assert)
                                  (("1"
                                    (case
                                     "FORALL (ii:nat): (1/(1-A+x!1))^ii > 0")
                                    (("1"
                                      (inst - "n")
                                      (("1"
                                        (reveal "reldef")
                                        (("1"
                                          (split -)
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (mult-by
                                               1
                                               "(1/(1-A+x!1))^n")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (replace -1)
                                            (("2"
                                              (mult-by
                                               1
                                               "(1/(1-A+x!1))^n")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (replace -1)
                                            (("3"
                                              (mult-by
                                               1
                                               "(1/(1-A+x!1))^n")
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("4"
                                            (replace -1)
                                            (("4"
                                              (mult-by
                                               1
                                               "(1/(1-A+x!1))^n")
                                              (("4" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (induct "ii")
                                        (("1"
                                          (expand "^")
                                          (("1"
                                            (expand "expt")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skeep)
                                          (("2"
                                            (expand "^")
                                            (("2"
                                              (expand "expt" +)
                                              (("2"
                                                (mult-by
                                                 -1
                                                 "(1/(1-A+x!1))")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (split)
                                (("1"
                                  (cross-mult 1)
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (cross-mult 1)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((poly_translate_inf_pos_def formula-decl nil polynomials nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (expt def-decl "real" exponentiation nil)
    (x!1 skolem-const-decl "real" polynomials nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (both_sides_times_pos_gt1 formula-decl nil real_props nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (sequence type-eq-decl nil sequences nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (<= const-decl "bool" reals nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (n skolem-const-decl "nat" polynomials nil)
    (< const-decl "bool" reals nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (zero_times1 formula-decl nil real_props nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (A skolem-const-decl "real" polynomials nil)
    (x!1 skolem-const-decl "real" polynomials nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil))
   shostak))
 (poly_translate_inf_neg_rel 0
  (poly_translate_inf_neg_rel-1 nil 3500823978
   ("" (skeep)
    (("" (name "aneg" "LAMBDA (i:nat): (-1)^i*a(i)")
      (("" (lemma "poly_translate_inf_pos_rel")
        (("" (inst - "-A" "aneg" "n" "rel")
          (("" (assert)
            (("" (replace -3)
              ((""
                (case "poly_translate_inf_pos(aneg, n)(-A)=
       poly_translate_inf_neg(a, n)(A)")
                (("1" (replace -1)
                  (("1" (hide -1)
                    (("1" (replace -1 :dir rl)
                      (("1" (hide -1)
                        (("1"
                          (case "FORALL (xy:real): polynomial(a,n)(xy) = polynomial(aneg,n)(-xy)")
                          (("1" (hide -3)
                            (("1" (ground)
                              (("1"
                                (skeep)
                                (("1"
                                  (inst - "-x")
                                  (("1"
                                    (inst - "-x")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skeep)
                                (("2"
                                  (inst - "-x")
                                  (("2"
                                    (inst - "x")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (skeep)
                              (("2"
                                (expand "polynomial" +)
                                (("2"
                                  (rewrite "sigma_restrict_eq")
                                  (("2"
                                    (hide 2)
                                    (("2"
                                      (decompose-equality +)
                                      (("2"
                                        (expand "restrict")
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (split +)
                                            (("1" (propax) nil nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (split +)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (expand "aneg" +)
                                                      (("1"
                                                        (expand "^" +)
                                                        (("1"
                                                          (expand
                                                           "expt"
                                                           +)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (expand "aneg" +)
                                                    (("2"
                                                      (lemma
                                                       "mult_expt")
                                                      (("2"
                                                        (inst
                                                         -
                                                         "x!1"
                                                         "-1"
                                                         "-xy")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (replace
                                                             -1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "^"
                                                                 +)
                                                                (("2"
                                                                  (expand
                                                                   "expt"
                                                                   +)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (hide -3)
                    (("2" (hide -1)
                      (("2" (expand "poly_translate_inf_pos")
                        (("2" (expand "poly_translate_inf_neg")
                          (("2" (decompose-equality +)
                            (("1" (lift-if)
                              (("1"
                                (ground)
                                (("1"
                                  (rewrite "sigma_restrict_eq")
                                  (("1"
                                    (hide 3)
                                    (("1"
                                      (decompose-equality +)
                                      (("1"
                                        (expand "restrict")
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (ground)
                                            (("1"
                                              (expand "aneg")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skosimp*)
                                        (("2" (assert) nil nil))
                                        nil)
                                       ("3"
                                        (skosimp*)
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skosimp*)
                                    (("2" (assert) nil nil))
                                    nil)
                                   ("3"
                                    (skosimp*)
                                    (("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skosimp*) (("2" (assert) nil nil))
                              nil)
                             ("3" (skosimp*) (("3" (assert) nil nil))
                              nil)
                             ("4" (skosimp*) (("4" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sequence type-eq-decl nil sequences nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (x!1 skolem-const-decl "nat" polynomials nil)
    (sigma def-decl "real" sigma nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (C const-decl "posnat" binomial nil)
    (A skolem-const-decl "real" polynomials nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (n skolem-const-decl "nat" polynomials nil)
    (> const-decl "bool" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T_low type-eq-decl nil sigma nil)
    (T_high type-eq-decl nil sigma nil)
    (<= const-decl "bool" reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (sigma_restrict_eq formula-decl nil sigma nil)
    (restrict const-decl "[T -> real]" sigma nil)
    (mult_expt formula-decl nil exponentiation nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (int_expt application-judgement "int" exponentiation nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (xy skolem-const-decl "real" polynomials nil)
    (aneg skolem-const-decl "[nat -> real]" polynomials nil)
    (expt def-decl "real" exponentiation nil)
    (poly_translate_inf_neg const-decl "sequence[real]" polynomials
     nil)
    (poly_translate_inf_pos const-decl "sequence[real]" polynomials
     nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (poly_translate_inf_pos_rel formula-decl nil polynomials nil))
   shostak))
 (poly_deriv_plus 0
  (poly_deriv_plus-1 nil 3564509384 ("" (grind) nil nil)
   ((+ const-decl "[T -> real]" real_fun_ops nil)
    (poly_deriv const-decl "real" polynomials nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (poly_deriv_scal 0
  (poly_deriv_scal-1 nil 3569856568
   ("" (skeep) (("" (decompose-equality) (("" (grind) nil nil)) nil))
    nil)
   ((sequence type-eq-decl nil sequences nil)
    (poly_deriv const-decl "real" polynomials nil)
    (* const-decl "[T -> real]" real_fun_ops nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (poly_deriv_minus 0
  (poly_deriv_minus-1 nil 3569091344 ("" (grind) nil nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (poly_deriv const-decl "real" polynomials nil)
    (- const-decl "[T -> real]" real_fun_ops nil))
   shostak))
 (poly_deriv_sub 0
  (poly_deriv_sub-1 nil 3569091121
   ("" (skeep) (("" (decompose-equality) (("" (grind) nil nil)) nil))
    nil)
   ((sequence type-eq-decl nil sequences nil)
    (poly_deriv const-decl "real" polynomials nil)
    (- const-decl "[T -> real]" real_fun_ops nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (poly_deriv_plus_eval 0
  (poly_deriv_plus_eval-1 nil 3564762693
   ("" (skeep)
    (("" (decompose-equality +)
      (("" (expand "+" + 2)
        (("" (expand "polynomial")
          (("" (rewrite "sigma_sum")
            (("" (rewrite "sigma_eq")
              (("" (hide 2)
                (("" (skosimp*)
                  (("" (rewrite "poly_deriv_plus")
                    (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (poly_deriv const-decl "real" polynomials nil)
    (+ const-decl "[T -> real]" real_fun_ops nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sigma_eq formula-decl nil sigma nil)
    (poly_deriv_plus formula-decl nil polynomials nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subrange type-eq-decl nil integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (T_low type-eq-decl nil sigma nil)
    (T_high type-eq-decl nil sigma nil)
    (<= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sigma_sum formula-decl nil sigma nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil))
   shostak))
 (poly_eq_deriv_plus_TCC1 0
  (poly_eq_deriv_plus_TCC1-1 nil 3564401784 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (poly_eq_deriv_plus subtype "2"
    "{i: integers.int | booleans.OR(polynomials.h /= 0, reals.>=(i, 0))}")))
 (poly_eq_deriv_plus 0
  (poly_eq_deriv_plus-2 nil 3564744893
   ("" (skeep)
    (("" (label "ngt0" -1)
      (("" (hide -1)
        ((""
          (name "P"
                "LAMBDA (aa:sequence[real]): EXISTS (nseq: [nat -> nat], pseq: [nat -> sequence[real]]):
                                                         FORALL (h: real, x):
                                                           polynomial(aa, n)(x + h) =
                                                            polynomial(aa, n)(x) + h * polynomial(poly_deriv(aa), n - 1)(x) +
                                                             h ^ 2 *
                                                              polynomial(LAMBDA (ii: nat):
                                                                           polynomial(pseq(ii), nseq(ii))(h),
                                                                         n - 1)
                                                                        (x)")
          (("1" (lemma "prop_extends_monomial")
            (("1" (skoletin -1)
              (("1"
                (case "(FORALL (aa:sequence[real]): eventzero(aa) IMPLIES P(aa)) IMPLIES (FORALL (aa:sequence[real]): P(aa))")
                (("1" (split -)
                  (("1" (inst - "a")
                    (("1" (assert)
                      (("1" (expand "P" -1) (("1" (propax) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (inst - "P")
                      (("2" (assert)
                        (("2" (replace 1)
                          (("2" (hide 1)
                            (("2" (hide -)
                              (("2"
                                (split +)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (expand "P")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case
                                         "j<=n IMPLIES polynomial(LAMBDA (i: nat): IF i = j THEN ar ELSE 0 ENDIF, n) = LAMBDA (x:real):ar*x^j")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "poly_deriv")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (case
                                                 "NOT (LAMBDA (n):
                                                                                                                                       IF 1 + n = j THEN ar ELSE 0 ENDIF +
                                                                                                                                        n * IF 1 + n = j THEN ar ELSE 0 ENDIF) =  (LAMBDA (n): IF n = j-1 THEN (1+n)*ar ELSE 0 ENDIF)")
                                                (("1"
                                                  (hide-all-but 1)
                                                  (("1"
                                                    (decompose-equality)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (replace -1)
                                                  (("2"
                                                    (hide -1)
                                                    (("2"
                                                      (case
                                                       "NOT (LAMBDA (n):
                                                                                                                                             IF 1 + n = j THEN ar ELSE 0 ENDIF +
                                                                                                                                              n * IF 1 + n = j THEN ar ELSE 0 ENDIF) =  (LAMBDA (n): IF n = j-1 THEN (1+n)*ar ELSE 0 ENDIF)")
                                                      (("1"
                                                        (hide-all-but
                                                         1)
                                                        (("1"
                                                          (decompose-equality)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (case "j<=n")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replace
                                                             -3)
                                                            (("1"
                                                              (case
                                                               "j>=2")
                                                              (("1"
                                                                (label
                                                                 "jge2"
                                                                 -1)
                                                                (("1"
                                                                  (label
                                                                   "jlen"
                                                                   -2)
                                                                  (("1"
                                                                    (case
                                                                     "polynomial((LAMBDA (m):
                                                                                                                                                                      IF m = j - 1 THEN (1 + m) * ar ELSE 0 ENDIF),
                                                                                                                                                                   n - 1) = LAMBDA (x:real): j*ar*x^(j-1)")
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (name
                                                                           "FF"
                                                                           "LAMBDA (h:real): LAMBDA (x:real): (LAMBDA (nn: nat):
                                                                                                                                                                                           IF 2 + nn > j THEN 0
                                                                                                                                                                                           ELSE (C(j, 2 + nn) * h ^ (2 + nn)) * x ^ (-2 - nn + j)
                                                                                                                                                                                           ENDIF)")
                                                                          (("1"
                                                                            (name
                                                                             "GG"
                                                                             "LAMBDA (h:real): LAMBDA (x:real): (LAMBDA (nn: nat):
                                                                                                                                                                                                   IF 2 + nn > j THEN 0
                                                                                                                                                                                                   ELSE (C(j, 2 + nn) * h ^ (nn)) * x ^ (-2 - nn + j)
                                                                                                                                                                                                   ENDIF)")
                                                                            (("1"
                                                                              (case
                                                                               "FORALL (h,x:real): FF(h)(x) = h^2*GG(h)(x)")
                                                                              (("1"
                                                                                (case
                                                                                 "EXISTS (nseq: [nat -> nat], pseq: [nat -> sequence[real]]): FORALL (h,x:real):
                                                                                                                                                                                                            sigma(0, j - 2, GG(h)(x))
                                                                                                                                                                                                             =
                                                                                                                                                                                                              polynomial(LAMBDA (ii: nat): polynomial(pseq(ii), nseq(ii))(h),
                                                                                                                                                                                                                         n - 1)
                                                                                                                                                                                                                        (x)")
                                                                                (("1"
                                                                                  (skeep
                                                                                   -)
                                                                                  (("1"
                                                                                    (inst
                                                                                     +
                                                                                     "nseq"
                                                                                     "LAMBDA (ii:nat): ar*pseq(ii)")
                                                                                    (("1"
                                                                                      (skeep)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "h"
                                                                                         "x")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "h"
                                                                                           "x")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (case
                                                                                               "polynomial(LAMBDA (ii_1: nat):
                                                                                                                                                                                                                                     polynomial(ar * pseq(ii_1), nseq(ii_1))(h),
                                                                                                                                                                                                                                   n - 1)
                                                                                                                                                                                                                                  (x) = ar*polynomial(LAMBDA (ii: nat): polynomial(pseq(ii), nseq(ii))(h),
                                                                                                                                                                                                                                  n - 1)
                                                                                                                                                                                                                                 (x)")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -2
                                                                                                     :dir
                                                                                                     rl)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "sigma_scal")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "GG(h)(x)"
                                                                                                           "h^2"
                                                                                                           "j-2"
                                                                                                           "0")
                                                                                                          (("1"
                                                                                                            (mult-by
                                                                                                             -1
                                                                                                             "ar")
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1
                                                                                                               :dir
                                                                                                               rl)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "*"
                                                                                                                   -4)
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -4
                                                                                                                     :dir
                                                                                                                     rl)
                                                                                                                    (("1"
                                                                                                                      (lemma
                                                                                                                       "binomial_theorem")
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -
                                                                                                                         "j"
                                                                                                                         "h"
                                                                                                                         "x")
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (hide
                                                                                                                             (-1
                                                                                                                              -2
                                                                                                                              -3
                                                                                                                              -4
                                                                                                                              -5
                                                                                                                              -6
                                                                                                                              -7))
                                                                                                                            (("1"
                                                                                                                              (lemma
                                                                                                                               "sigma_split")
                                                                                                                              (("1"
                                                                                                                                (inst?)
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -
                                                                                                                                   "1")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (replace
                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (hide
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "sigma"
                                                                                                                                           +
                                                                                                                                           1)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "sigma"
                                                                                                                                             +
                                                                                                                                             1)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "sigma"
                                                                                                                                               +
                                                                                                                                               1)
                                                                                                                                              (("1"
                                                                                                                                                (case
                                                                                                                                                 "C(j,0) = 1")
                                                                                                                                                (("1"
                                                                                                                                                  (replace
                                                                                                                                                   -1)
                                                                                                                                                  (("1"
                                                                                                                                                    (case
                                                                                                                                                     "C(j,1) = j")
                                                                                                                                                    (("1"
                                                                                                                                                      (replace
                                                                                                                                                       -1)
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (case
                                                                                                                                                           "h^0 = 1 AND h^1 = h")
                                                                                                                                                          (("1"
                                                                                                                                                            (flatten)
                                                                                                                                                            (("1"
                                                                                                                                                              (replace
                                                                                                                                                               -1)
                                                                                                                                                              (("1"
                                                                                                                                                                (replace
                                                                                                                                                                 -2)
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (lemma
                                                                                                                                                                     "sigma_shift")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (inst
                                                                                                                                                                       -
                                                                                                                                                                       "LAMBDA (i: nat):
                                                                                                                                                                                                                                   IF i > j THEN 0 ELSE C(j, i) * h ^ i * x ^ (j - i) ENDIF"
                                                                                                                                                                       "j-2"
                                                                                                                                                                       "0"
                                                                                                                                                                       "2")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (replace
                                                                                                                                                                           -1)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (hide
                                                                                                                                                                             -1)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (expand
                                                                                                                                                                               "FF"
                                                                                                                                                                               +)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (assert)
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil)
                                                                                                                                                                       ("2"
                                                                                                                                                                        (hide
                                                                                                                                                                         2)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (skosimp*)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (assert)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil)
                                                                                                                                                                       ("3"
                                                                                                                                                                        (hide
                                                                                                                                                                         2)
                                                                                                                                                                        (("3"
                                                                                                                                                                          (skosimp*)
                                                                                                                                                                          (("3"
                                                                                                                                                                            (assert)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (hide-all-but
                                                                                                                                                             1)
                                                                                                                                                            (("2"
                                                                                                                                                              (grind)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (expand
                                                                                                                                                       "C"
                                                                                                                                                       +)
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        (("2"
                                                                                                                                                          (expand
                                                                                                                                                           "factorial"
                                                                                                                                                           +
                                                                                                                                                           1)
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (expand
                                                                                                                                                   "C"
                                                                                                                                                   +)
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (hide
                                                                                                                                   2)
                                                                                                                                  (("2"
                                                                                                                                    (skosimp*)
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("3"
                                                                                                                                  (hide
                                                                                                                                   2)
                                                                                                                                  (("3"
                                                                                                                                    (skosimp*)
                                                                                                                                    (("3"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide-all-but
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "polynomial")
                                                                                                  (("2"
                                                                                                    (reveal
                                                                                                     "jlen")
                                                                                                    (("2"
                                                                                                      (reveal
                                                                                                       "jge2")
                                                                                                      (("2"
                                                                                                        (rewrite
                                                                                                         "sigma_scal"
                                                                                                         :dir
                                                                                                         rl)
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           "sigma_eq")
                                                                                                          (("1"
                                                                                                            (hide
                                                                                                             2)
                                                                                                            (("1"
                                                                                                              (skosimp*)
                                                                                                              (("1"
                                                                                                                (case
                                                                                                                 "FORALL (a,b,cc:real): a=ar*b IMPLIES a*cc = ar*(b*cc)")
                                                                                                                (("1"
                                                                                                                  (rewrite
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (hide
                                                                                                                     (-1
                                                                                                                      2))
                                                                                                                    (("1"
                                                                                                                      (rewrite
                                                                                                                       "sigma_scal"
                                                                                                                       :dir
                                                                                                                       rl)
                                                                                                                      (("1"
                                                                                                                        (rewrite
                                                                                                                         "sigma_eq")
                                                                                                                        (("1"
                                                                                                                          (hide
                                                                                                                           2)
                                                                                                                          (("1"
                                                                                                                            (skosimp*)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide-all-but
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (hide
                                                                                                             2)
                                                                                                            (("2"
                                                                                                              (skosimp*)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (hide
                                                                                                           2)
                                                                                                          (("2"
                                                                                                            (skosimp*)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   (1
                                                                                    "jge2"
                                                                                    "jlen"))
                                                                                  (("2"
                                                                                    (inst
                                                                                     +
                                                                                     "LAMBDA (ii:nat): j-2"
                                                                                     "LAMBDA (ii:nat): LAMBDA (k:nat): IF k = -2-ii+j THEN C(j,j-ii) ELSE 0 ENDIF")
                                                                                    (("1"
                                                                                      (skeep)
                                                                                      (("1"
                                                                                        (case
                                                                                         "(LAMBDA (ii_1: nat):
                                                                                                                                                                                                                                                  polynomial(LAMBDA (k: nat):
                                                                                                                                                                                                                                                               IF k = -2 - ii_1 + j THEN C(j, j - ii_1)
                                                                                                                                                                                                                                                               ELSE 0
                                                                                                                                                                                                                                                               ENDIF,
                                                                                                                                                                                                                                                             j - 2)
                                                                                                                                                                                                                                                            (h)) = LAMBDA (ii:nat): IF ii>j-2 THEN 0 ELSE C(j,j-ii)*h^(-2-ii+j) ENDIF")
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("1"
                                                                                            (hide
                                                                                             -1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "GG")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "polynomial")
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "sigma_split")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -
                                                                                                     _
                                                                                                     "n-1"
                                                                                                     _
                                                                                                     _)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -
                                                                                                       _
                                                                                                       _
                                                                                                       "j-2")
                                                                                                      (("1"
                                                                                                        (inst?)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (invoke
                                                                                                             (case
                                                                                                              "%1 = 0")
                                                                                                             (!
                                                                                                              -1
                                                                                                              2
                                                                                                              2))
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (hide
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (hide
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (lemma
                                                                                                                         "sigma_reverse")
                                                                                                                        (("1"
                                                                                                                          (invoke
                                                                                                                           (inst
                                                                                                                            -
                                                                                                                            "%1"
                                                                                                                            _
                                                                                                                            _)
                                                                                                                           (!
                                                                                                                            1
                                                                                                                            2
                                                                                                                            3))
                                                                                                                          (("1"
                                                                                                                            (inst?)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (replace
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (hide
                                                                                                                                   -1)
                                                                                                                                  (("1"
                                                                                                                                    (rewrite
                                                                                                                                     "sigma_eq")
                                                                                                                                    (("1"
                                                                                                                                      (hide
                                                                                                                                       2)
                                                                                                                                      (("1"
                                                                                                                                        (skosimp*)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (lift-if)
                                                                                                                                            (("1"
                                                                                                                                              (ground)
                                                                                                                                              (("1"
                                                                                                                                                (replace
                                                                                                                                                 -1)
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (case
                                                                                                                                                     "x^0 = 1")
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (hide-all-but
                                                                                                                                                       1)
                                                                                                                                                      (("2"
                                                                                                                                                        (grind)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (hide
                                                                                                                                       2)
                                                                                                                                      (("2"
                                                                                                                                        (skosimp*)
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("3"
                                                                                                                                      (skosimp*)
                                                                                                                                      (("3"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("4"
                                                                                                                                      (hide
                                                                                                                                       2)
                                                                                                                                      (("4"
                                                                                                                                        (skosimp*)
                                                                                                                                        (("4"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (hide
                                                                                                                             2)
                                                                                                                            (("2"
                                                                                                                              (skosimp*)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("3"
                                                                                                                            (hide
                                                                                                                             2)
                                                                                                                            (("3"
                                                                                                                              (skosimp*)
                                                                                                                              (("3"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (hide
                                                                                                               (-1
                                                                                                                2))
                                                                                                              (("2"
                                                                                                                (rewrite
                                                                                                                 "sigma_restrict_eq_0")
                                                                                                                (("1"
                                                                                                                  (hide
                                                                                                                   2)
                                                                                                                  (("1"
                                                                                                                    (skosimp*)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide
                                                                                                                   2)
                                                                                                                  (("2"
                                                                                                                    (grind)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("3"
                                                                                                              (hide
                                                                                                               (-1
                                                                                                                2))
                                                                                                              (("3"
                                                                                                                (skosimp*)
                                                                                                                (("3"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("4"
                                                                                                              (hide-all-but
                                                                                                               1)
                                                                                                              (("4"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (hide
                                                                                                           (-1
                                                                                                            2))
                                                                                                          (("2"
                                                                                                            (skosimp*)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("3"
                                                                                                          (hide
                                                                                                           (-1
                                                                                                            2))
                                                                                                          (("3"
                                                                                                            (skosimp*)
                                                                                                            (("3"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide
                                                                                           2)
                                                                                          (("2"
                                                                                            (decompose-equality)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "polynomial")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "sigma_eq_one_arg")
                                                                                                  (("1"
                                                                                                    (inst?)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "-2-x!1+j")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (case
                                                                                                           "x!1 > j-2")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (rewrite
                                                                                                               "sigma_restrict_eq_0")
                                                                                                              (("1"
                                                                                                                (hide
                                                                                                                 2)
                                                                                                                (("1"
                                                                                                                  (skosimp*)
                                                                                                                  (("1"
                                                                                                                    (lift-if)
                                                                                                                    (("1"
                                                                                                                      (ground)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (split
                                                                                                               -)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (lift-if)
                                                                                                                  (("1"
                                                                                                                    (ground)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (case
                                                                                                                         "h^0 = 1")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (hide-all-but
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (grind)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (skosimp*)
                                                                                                                (("2"
                                                                                                                  (lift-if)
                                                                                                                  (("2"
                                                                                                                    (ground)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (skosimp*)
                                                                                                      (("2"
                                                                                                        (lift-if)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (skosimp*)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("3"
                                                                                              (skosimp*)
                                                                                              (("3"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("4"
                                                                                              (skosimp*)
                                                                                              (("4"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (hide
                                                                                           2)
                                                                                          (("3"
                                                                                            (skosimp*)
                                                                                            (("3"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("4"
                                                                                          (hide
                                                                                           2)
                                                                                          (("4"
                                                                                            (skosimp*)
                                                                                            (("4"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("5"
                                                                                          (hide
                                                                                           2)
                                                                                          (("5"
                                                                                            (skosimp*)
                                                                                            (("5"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (skosimp*)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 (-1
                                                                                  -2
                                                                                  2))
                                                                                (("2"
                                                                                  (skeep)
                                                                                  (("2"
                                                                                    (decompose-equality)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "FF")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "GG")
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "expt_plus")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "*")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "expt_plus")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "2"
                                                                                                   "x!1"
                                                                                                   "h")
                                                                                                  (("1"
                                                                                                    (lift-if)
                                                                                                    (("1"
                                                                                                      (ground)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (replace
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "^"
                                                                                                           +)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "expt"
                                                                                                             +)
                                                                                                            (("2"
                                                                                                              (lift-if)
                                                                                                              (("2"
                                                                                                                (ground)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             2)
                                                                            (("2"
                                                                              (skosimp*)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (skosimp*)
                                                                            (("3"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       2)
                                                                      (("2"
                                                                        (decompose-equality)
                                                                        (("2"
                                                                          (expand
                                                                           "polynomial")
                                                                          (("2"
                                                                            (lemma
                                                                             "sigma_eq_one_arg")
                                                                            (("2"
                                                                              (inst?)
                                                                              (("2"
                                                                                (inst
                                                                                 -
                                                                                 "j-1")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (skosimp*)
                                                                                    (("2"
                                                                                      (lift-if)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (inst
                                                                 +
                                                                 "LAMBDA (i:nat): 0"
                                                                 "LAMBDA (i:nat): LAMBDA (k:nat): 0")
                                                                (("2"
                                                                  (skeep
                                                                   2)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (case
                                                                       "polynomial(LAMBDA (ii: nat): polynomial(LAMBDA (k: nat): 0, 0)(h),
                                                                     n - 1)
                                                                    (x) = 0")
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "polynomial"
                                                                             +)
                                                                            (("1"
                                                                              (lemma
                                                                               "sigma_split")
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (inst
                                                                                   -
                                                                                   "1")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (case
                                                                                       "n >= 2")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (invoke
                                                                                           (case
                                                                                            "%1 = 0")
                                                                                           (!
                                                                                            -2
                                                                                            2
                                                                                            2))
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -3)
                                                                                                (("1"
                                                                                                  (case
                                                                                                   "j = 0 OR j = 1")
                                                                                                  (("1"
                                                                                                    (split
                                                                                                     -)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (hide
                                                                                                         -)
                                                                                                        (("1"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (replace
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (hide
                                                                                                         -)
                                                                                                        (("2"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (rewrite
                                                                                             "sigma_restrict_eq_0")
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (case
                                                                                           "j = 0 OR j = 1")
                                                                                          (("1"
                                                                                            (case
                                                                                             "n = 0 OR n = 1")
                                                                                            (("1"
                                                                                              (hide
                                                                                               -3)
                                                                                              (("1"
                                                                                                (ground)
                                                                                                (("1"
                                                                                                  (replaces
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (replaces
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       -)
                                                                                                      (("1"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (replaces
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (replaces
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (hide
                                                                                                       -)
                                                                                                      (("2"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (replaces
                                                                                                   -1)
                                                                                                  (("3"
                                                                                                    (replaces
                                                                                                     -1)
                                                                                                    (("3"
                                                                                                      (hide
                                                                                                       -)
                                                                                                      (("3"
                                                                                                        (assert)
                                                                                                        (("3"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("2"
                                                                          (expand
                                                                           "polynomial")
                                                                          (("2"
                                                                            (rewrite
                                                                             "sigma_restrict_eq_0")
                                                                            (("2"
                                                                              (rewrite
                                                                               "sigma_restrict_eq_0")
                                                                              (("2"
                                                                                (hide
                                                                                 2)
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide -2)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (inst
                                                               +
                                                               "LAMBDA (i:nat): 0"
                                                               "LAMBDA (i:nat): LAMBDA (k:nat): 0")
                                                              (("2"
                                                                (skeep
                                                                 2)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (hide
                                                                     -)
                                                                    (("2"
                                                                      (invoke
                                                                       (case
                                                                        "%1 = 0")
                                                                       (!
                                                                        2
                                                                        1))
                                                                      (("1"
                                                                        (invoke
                                                                         (case
                                                                          "%1 = 0")
                                                                         (!
                                                                          2
                                                                          2
                                                                          1))
                                                                        (("1"
                                                                          (invoke
                                                                           (case
                                                                            "%1 = 0")
                                                                           (!
                                                                            2
                                                                            2
                                                                            2
                                                                            2))
                                                                          (("1"
                                                                            (invoke
                                                                             (case
                                                                              "%1 = 0")
                                                                             (!
                                                                              2
                                                                              2
                                                                              3
                                                                              2))
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               (-
                                                                                3))
                                                                              (("2"
                                                                                (expand
                                                                                 "polynomial")
                                                                                (("2"
                                                                                  (rewrite
                                                                                   "sigma_restrict_eq_0")
                                                                                  (("2"
                                                                                    (skosimp*)
                                                                                    (("2"
                                                                                      (lift-if)
                                                                                      (("2"
                                                                                        (ground)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             (-
                                                                              3))
                                                                            (("2"
                                                                              (expand
                                                                               "polynomial")
                                                                              (("2"
                                                                                (rewrite
                                                                                 "sigma_restrict_eq_0")
                                                                                (("2"
                                                                                  (rewrite
                                                                                   "sigma_restrict_eq_0")
                                                                                  (("2"
                                                                                    (skosimp*)
                                                                                    (("2"
                                                                                      (lift-if)
                                                                                      (("2"
                                                                                        (ground)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           (-
                                                                            3))
                                                                          (("2"
                                                                            (expand
                                                                             "polynomial")
                                                                            (("2"
                                                                              (rewrite
                                                                               "sigma_restrict_eq_0")
                                                                              (("2"
                                                                                (skosimp*)
                                                                                (("2"
                                                                                  (lift-if)
                                                                                  (("2"
                                                                                    (ground)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         (-
                                                                          3))
                                                                        (("2"
                                                                          (expand
                                                                           "polynomial")
                                                                          (("2"
                                                                            (rewrite
                                                                             "sigma_restrict_eq_0")
                                                                            (("2"
                                                                              (skosimp*)
                                                                              (("2"
                                                                                (lift-if)
                                                                                (("2"
                                                                                  (ground)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (expand "polynomial")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (decompose-equality)
                                                (("2"
                                                  (lemma
                                                   "sigma_eq_one_arg")
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (inst - "j")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (split -)
                                                          (("1"
                                                            (lift-if)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (ground)
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (case
                                                                       "x!1^0 = 1")
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skosimp*)
                                                            (("2"
                                                              (lift-if)
                                                              (("2"
                                                                (ground)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skolem 1 ("aa" "bb"))
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (expand "P")
                                      (("2"
                                        (skolem -1 ("nseqa" _))
                                        (("2"
                                          (skolem -2 ("nseqb" _))
                                          (("2"
                                            (skolem -1 "psqueaka")
                                            (("2"
                                              (skolem -2 "psqueakb")
                                              (("2"
                                                (name
                                                 "pseqa"
                                                 "LAMBDA (nn:nat): LAMBDA (ii:nat): IF ii>nseqa(nn) THEN 0 ELSE psqueaka(nn)(ii) ENDIF")
                                                (("2"
                                                  (name
                                                   "pseqb"
                                                   "LAMBDA (nn:nat): LAMBDA (ii:nat): IF ii>nseqb(nn) THEN 0 ELSE psqueakb(nn)(ii) ENDIF")
                                                  (("2"
                                                    (inst
                                                     +
                                                     "nseqa+nseqb"
                                                     "LAMBDA (nn:nat): pseqa(nn) + pseqb(nn)")
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (hide (-1 -2))
                                                        (("1"
                                                          (inst
                                                           -
                                                           "h"
                                                           "x")
                                                          (("1"
                                                            (inst
                                                             -
                                                             "h"
                                                             "x")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (rewrite
                                                                 "sum_polynomial_eq_degree"
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (expand
                                                                   "+"
                                                                   +)
                                                                  (("1"
                                                                    (replaces
                                                                     -1)
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (invoke
                                                                           (case
                                                                            "%1 + %2 = %3")
                                                                           (!
                                                                            1
                                                                            1
                                                                            1
                                                                            2)
                                                                           (!
                                                                            1
                                                                            1
                                                                            2
                                                                            2)
                                                                           (!
                                                                            1
                                                                            2
                                                                            1
                                                                            2))
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             :dir
                                                                             rl)
                                                                            (("1"
                                                                              (invoke
                                                                               (case
                                                                                "%1 + %2 = %3")
                                                                               (!
                                                                                1
                                                                                1
                                                                                3
                                                                                2)
                                                                               (!
                                                                                1
                                                                                1
                                                                                4
                                                                                2)
                                                                               (!
                                                                                1
                                                                                2
                                                                                2
                                                                                2))
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "polynomial")
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     "sigma_sum")
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "sigma_eq")
                                                                                      (("2"
                                                                                        (hide
                                                                                         2)
                                                                                        (("2"
                                                                                          (skeep)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "poly_deriv")
                                                                                            (("2"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             2)
                                                                            (("2"
                                                                              (expand
                                                                               "polynomial")
                                                                              (("2"
                                                                                (rewrite
                                                                                 "sigma_sum")
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "sigma_eq")
                                                                                  (("1"
                                                                                    (hide
                                                                                     2)
                                                                                    (("1"
                                                                                      (skolem
                                                                                       1
                                                                                       "nn")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "sigma_scal_right"
                                                                                           :dir
                                                                                           rl)
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "sigma_scal_right"
                                                                                             :dir
                                                                                             rl)
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "sigma_scal_right"
                                                                                               :dir
                                                                                               rl)
                                                                                              (("1"
                                                                                                (rewrite
                                                                                                 "sigma_sum"
                                                                                                 :dir
                                                                                                 rl)
                                                                                                (("1"
                                                                                                  (invoke
                                                                                                   (case
                                                                                                    "%1 = %2 AND %3 = %4")
                                                                                                   (!
                                                                                                    1
                                                                                                    1
                                                                                                    1)
                                                                                                   (!
                                                                                                    1
                                                                                                    2
                                                                                                    1)
                                                                                                   (!
                                                                                                    1
                                                                                                    1
                                                                                                    2)
                                                                                                   (!
                                                                                                    1
                                                                                                    2
                                                                                                    2))
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (split)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "sigma_split")
                                                                                                        (("1"
                                                                                                          (invoke
                                                                                                           (inst
                                                                                                            -
                                                                                                            "%1"
                                                                                                            _
                                                                                                            _
                                                                                                            _)
                                                                                                           (!
                                                                                                            1
                                                                                                            2
                                                                                                            3))
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "nseqa(nn) + nseqb(nn)"
                                                                                                             "0"
                                                                                                             "nseqb(nn)")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (invoke
                                                                                                                   (case
                                                                                                                    "%1 = 0")
                                                                                                                   (!
                                                                                                                    1
                                                                                                                    2
                                                                                                                    2))
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (hide
                                                                                                                         -)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (rewrite
                                                                                                                             "sigma_eq")
                                                                                                                            (("1"
                                                                                                                              (hide
                                                                                                                               2)
                                                                                                                              (("1"
                                                                                                                                (skosimp*)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "pseqb")
                                                                                                                                  (("1"
                                                                                                                                    (propax)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (hide-all-but
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (rewrite
                                                                                                                       "sigma_restrict_eq_0")
                                                                                                                      (("2"
                                                                                                                        (hide
                                                                                                                         2)
                                                                                                                        (("2"
                                                                                                                          (skosimp*)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "pseqb")
                                                                                                                            (("2"
                                                                                                                              (propax)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (lemma
                                                                                                         "sigma_split")
                                                                                                        (("2"
                                                                                                          (invoke
                                                                                                           (inst
                                                                                                            -
                                                                                                            "%1"
                                                                                                            _
                                                                                                            _
                                                                                                            _)
                                                                                                           (!
                                                                                                            1
                                                                                                            2
                                                                                                            3))
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "nseqa(nn) + nseqb(nn)"
                                                                                                             "0"
                                                                                                             "nseqa(nn)")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (replace
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (invoke
                                                                                                                   (case
                                                                                                                    "%1 = 0")
                                                                                                                   (!
                                                                                                                    1
                                                                                                                    2
                                                                                                                    2))
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (hide
                                                                                                                         -)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (rewrite
                                                                                                                             "sigma_eq")
                                                                                                                            (("1"
                                                                                                                              (hide
                                                                                                                               2)
                                                                                                                              (("1"
                                                                                                                                (skosimp*)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "pseqa")
                                                                                                                                  (("1"
                                                                                                                                    (propax)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (hide-all-but
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (rewrite
                                                                                                                       "sigma_restrict_eq_0")
                                                                                                                      (("2"
                                                                                                                        (hide
                                                                                                                         2)
                                                                                                                        (("2"
                                                                                                                          (skosimp*)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "pseqa")
                                                                                                                            (("2"
                                                                                                                              (propax)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     2)
                                                                                    (("2"
                                                                                      (skosimp*)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (hide
                                                                                     2)
                                                                                    (("3"
                                                                                      (skosimp*)
                                                                                      (("3"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("4"
                                                                                    (hide-all-but
                                                                                     1)
                                                                                    (("4"
                                                                                      (skosimp*)
                                                                                      (("4"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   1)
                                                                                  (("2"
                                                                                    (skosimp*)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (hide-all-but
                                                                                   1)
                                                                                  (("3"
                                                                                    (skosimp*)
                                                                                    (("3"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (hide -)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1)
                  (("2" (flatten)
                    (("2" (skeep)
                      (("2" (expand "P" +)
                        (("2"
                          (name "aaa"
                                "LAMBDA (ii:nat): IF ii>n THEN 0 ELSE aa(ii) ENDIF")
                          (("2" (inst -2 "aaa")
                            (("2" (case "eventzero(aaa)")
                              (("1"
                                (assert)
                                (("1"
                                  (hide (-1 -2))
                                  (("1"
                                    (expand "P")
                                    (("1"
                                      (skeep -1)
                                      (("1"
                                        (inst + "nseq" "pseq")
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (inst - "h" "x")
                                            (("1"
                                              (invoke
                                               (case "%1 = %2")
                                               (! -1 1)
                                               (! 1 1))
                                              (("1"
                                                (invoke
                                                 (case "%1 = %2")
                                                 (! -2 2 1)
                                                 (! 1 2 1))
                                                (("1"
                                                  (invoke
                                                   (case "%1 = %2")
                                                   (! -3 2 2 2)
                                                   (! 1 2 2 2))
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (rewrite
                                                       "poly_eq_le_degree")
                                                      (("2"
                                                        (hide 2)
                                                        (("2"
                                                          (expand
                                                           "aaa")
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (rewrite
                                                   "poly_eq_le_degree")
                                                  (("2"
                                                    (expand "aaa")
                                                    (("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2"
                                                  (rewrite
                                                   "poly_eq_le_degree")
                                                  (("2"
                                                    (hide 2)
                                                    (("2"
                                                      (expand "aaa")
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (expand "eventzero")
                                  (("2"
                                    (inst + "n")
                                    (("2"
                                      (hide-all-but 1)
                                      (("2"
                                        (expand "aaa")
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (case "NOT n = 0")
              (("1" (assert) nil nil)
               ("2" (hide 1)
                (("2" (replace -1)
                  (("2"
                    (inst + "LAMBDA (ii:nat): 0"
                     "LAMBDA (ii:nat): LAMBDA (nn:nat): 0")
                    (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (poly_deriv const-decl "real" polynomials nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (+ const-decl "[T -> real]" real_fun_ops nil)
    (poly_eq_le_degree formula-decl nil polynomials nil)
    (aaa skolem-const-decl "[nat -> real]" polynomials nil)
    (eventzero skolem-const-decl "[sequence[real] -> boolean]"
     polynomials nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (P skolem-const-decl "[sequence[real] -> boolean]" polynomials nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (sigma_sum formula-decl nil sigma nil)
    (sigma_scal_right formula-decl nil sigma nil)
    (pseqb skolem-const-decl "[nat -> [nat -> real]]" polynomials nil)
    (pseqa skolem-const-decl "[nat -> [nat -> real]]" polynomials nil)
    (sum_polynomial_eq_degree formula-decl nil polynomials nil)
    (nseqb skolem-const-decl "[nat -> nat]" polynomials nil)
    (nseqa skolem-const-decl "[nat -> nat]" polynomials nil)
    (n skolem-const-decl "nat" polynomials nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (C const-decl "posnat" binomial nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (* const-decl "[T -> real]" real_fun_ops nil)
    (sigma_eq_one_arg formula-decl nil sigma nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (x!1 skolem-const-decl "nat" polynomials nil)
    (GG skolem-const-decl "[real -> [real -> [nat -> real]]]"
     polynomials nil)
    (sigma_restrict_eq_0 formula-decl nil sigma nil)
    (sigma_reverse formula-decl nil sigma_nat nil)
    (h skolem-const-decl "real" polynomials nil)
    (sigma_scal formula-decl nil sigma nil)
    (both_sides_times1_imp formula-decl nil extra_real_props nil)
    (j skolem-const-decl "nat" polynomials nil)
    (x skolem-const-decl "real" polynomials nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (expt def-decl "real" exponentiation nil)
    (sigma_shift formula-decl nil sigma_nat nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (FF skolem-const-decl "[real -> [real -> [nat -> real]]]"
     polynomials nil)
    (factorial_1 formula-decl nil factorial "ints/")
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (factorial def-decl "posnat" factorial "ints/")
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (factorial_0 formula-decl nil factorial "ints/")
    (sigma_split formula-decl nil sigma nil)
    (binomial_theorem formula-decl nil polynomials nil)
    (sigma_eq formula-decl nil sigma nil)
    (subrange type-eq-decl nil integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sigma def-decl "real" sigma nil)
    (T_high type-eq-decl nil sigma nil)
    (T_low type-eq-decl nil sigma nil)
    (expt_plus formula-decl nil exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (h skolem-const-decl "real" polynomials nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (sigma_0_neg formula-decl nil sigma_nat nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<= const-decl "bool" reals nil)
    (prop_extends_monomial formula-decl nil polynomials nil))
   nil)
  (poly_eq_deriv_plus-1 nil 3564401785
   ("" (skeep)
    ((""
      (name "P"
            "LAMBDA (aa:sequence[real]): EXISTS (nseq: [nat -> nat], pseq: [nat -> sequence[real]]):
                                                  FORALL (h: real, x):
                                                    polynomial(aa, n)(x + h) =
                                                     polynomial(aa, n)(x) + h * polynomial(poly_deriv(aa), n - 1)(x) +
                                                      h ^ 2 *
                                                       polynomial(LAMBDA (ii: nat):
                                                                    polynomial(pseq(ii), nseq(ii))(h),
                                                                  n - 1)
                                                                 (x)")
      (("1" (lemma "prop_extends_monomial")
        (("1" (skoletin -1)
          (("1"
            (case "(FORALL (aa:sequence[real]): eventzero(aa) IMPLIES P(aa)) IMPLIES (FORALL (aa:sequence[real]): P(aa))")
            (("1" (split -)
              (("1" (inst - "a")
                (("1" (assert)
                  (("1" (expand "P" -1) (("1" (propax) nil nil)) nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (inst - "P")
                  (("2" (assert)
                    (("2" (replace 1)
                      (("2" (hide 1)
                        (("2" (hide -)
                          (("2" (split +)
                            (("1" (skeep)
                              (("1"
                                (expand "P")
                                (("1"
                                  (assert)
                                  (("1"
                                    (case
                                     "j<=n IMPLIES polynomial(LAMBDA (i: nat): IF i = j THEN ar ELSE 0 ENDIF, n) = LAMBDA (x:real):ar*x^j")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "poly_deriv")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (case
                                             "NOT (LAMBDA (n):
                                                                                                                      IF 1 + n = j THEN ar ELSE 0 ENDIF +
                                                                                                                       n * IF 1 + n = j THEN ar ELSE 0 ENDIF) =  (LAMBDA (n): IF n = j-1 THEN (1+n)*ar ELSE 0 ENDIF)")
                                            (("1"
                                              (hide-all-but 1)
                                              (("1"
                                                (decompose-equality)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (replace -1)
                                              (("2"
                                                (hide -1)
                                                (("2"
                                                  (case
                                                   "NOT (LAMBDA (n):
                                                                                                                          IF 1 + n = j THEN ar ELSE 0 ENDIF +
                                                                                                                           n * IF 1 + n = j THEN ar ELSE 0 ENDIF) =  (LAMBDA (n): IF n = j-1 THEN (1+n)*ar ELSE 0 ENDIF)")
                                                  (("1"
                                                    (hide-all-but 1)
                                                    (("1"
                                                      (decompose-equality)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (case "j<=n")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replace -3)
                                                        (("1"
                                                          (case "j>=2")
                                                          (("1"
                                                            (label
                                                             "jge2"
                                                             -1)
                                                            (("1"
                                                              (label
                                                               "jlen"
                                                               -2)
                                                              (("1"
                                                                (case
                                                                 "polynomial((LAMBDA (m):
                                                                                                                                             IF m = j - 1 THEN (1 + m) * ar ELSE 0 ENDIF),
                                                                                                                                          n - 1) = LAMBDA (x:real): j*ar*x^(j-1)")
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (name
                                                                       "FF"
                                                                       "LAMBDA (h:real): LAMBDA (x:real): (LAMBDA (nn: nat):
                                                                                                                                                                IF 2 + nn > j THEN 0
                                                                                                                                                                ELSE (C(j, 2 + nn) * h ^ (2 + nn)) * x ^ (-2 - nn + j)
                                                                                                                                                                ENDIF)")
                                                                      (("1"
                                                                        (name
                                                                         "GG"
                                                                         "LAMBDA (h:real): LAMBDA (x:real): (LAMBDA (nn: nat):
                                                                                                                                                                      IF 2 + nn > j THEN 0
                                                                                                                                                                      ELSE (C(j, 2 + nn) * h ^ (nn)) * x ^ (-2 - nn + j)
                                                                                                                                                                      ENDIF)")
                                                                        (("1"
                                                                          (case
                                                                           "FORALL (h,x:real): FF(h)(x) = h^2*GG(h)(x)")
                                                                          (("1"
                                                                            (case
                                                                             "EXISTS (nseq: [nat -> nat], pseq: [nat -> sequence[real]]): FORALL (h,x:real):
                                                                                                                                                                             sigma(0, j - 2, GG(h)(x))
                                                                                                                                                                              =
                                                                                                                                                                               polynomial(LAMBDA (ii: nat): polynomial(pseq(ii), nseq(ii))(h),
                                                                                                                                                                                          n - 1)
                                                                                                                                                                                         (x)")
                                                                            (("1"
                                                                              (skeep
                                                                               -)
                                                                              (("1"
                                                                                (inst
                                                                                 +
                                                                                 "nseq"
                                                                                 "LAMBDA (ii:nat): ar*pseq(ii)")
                                                                                (("1"
                                                                                  (skeep)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "h"
                                                                                     "x")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "h"
                                                                                       "x")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (case
                                                                                           "polynomial(LAMBDA (ii_1: nat):
                                                                                                                                                                                                    polynomial(ar * pseq(ii_1), nseq(ii_1))(h),
                                                                                                                                                                                                  n - 1)
                                                                                                                                                                                                 (x) = ar*polynomial(LAMBDA (ii: nat): polynomial(pseq(ii), nseq(ii))(h),
                                                                                                                                                                                                 n - 1)
                                                                                                                                                                                                (x)")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -2
                                                                                                 :dir
                                                                                                 rl)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "sigma_scal")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "GG(h)(x)"
                                                                                                       "h^2"
                                                                                                       "j-2"
                                                                                                       "0")
                                                                                                      (("1"
                                                                                                        (mult-by
                                                                                                         -1
                                                                                                         "ar")
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -1
                                                                                                           :dir
                                                                                                           rl)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "*"
                                                                                                               -4)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -4
                                                                                                                 :dir
                                                                                                                 rl)
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "binomial_theorem")
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "j"
                                                                                                                     "h"
                                                                                                                     "x")
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (hide
                                                                                                                         (-1
                                                                                                                          -2
                                                                                                                          -3
                                                                                                                          -4
                                                                                                                          -5
                                                                                                                          -6
                                                                                                                          -7))
                                                                                                                        (("1"
                                                                                                                          (lemma
                                                                                                                           "sigma_split")
                                                                                                                          (("1"
                                                                                                                            (inst?)
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -
                                                                                                                               "1")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (replace
                                                                                                                                   -1)
                                                                                                                                  (("1"
                                                                                                                                    (hide
                                                                                                                                     -1)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "sigma"
                                                                                                                                       +
                                                                                                                                       1)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "sigma"
                                                                                                                                         +
                                                                                                                                         1)
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "sigma"
                                                                                                                                           +
                                                                                                                                           1)
                                                                                                                                          (("1"
                                                                                                                                            (case
                                                                                                                                             "C(j,0) = 1")
                                                                                                                                            (("1"
                                                                                                                                              (replace
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (case
                                                                                                                                                 "C(j,1) = j")
                                                                                                                                                (("1"
                                                                                                                                                  (replace
                                                                                                                                                   -1)
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (case
                                                                                                                                                       "h^0 = 1 AND h^1 = h")
                                                                                                                                                      (("1"
                                                                                                                                                        (flatten)
                                                                                                                                                        (("1"
                                                                                                                                                          (replace
                                                                                                                                                           -1)
                                                                                                                                                          (("1"
                                                                                                                                                            (replace
                                                                                                                                                             -2)
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (lemma
                                                                                                                                                                 "sigma_shift")
                                                                                                                                                                (("1"
                                                                                                                                                                  (inst
                                                                                                                                                                   -
                                                                                                                                                                   "LAMBDA (i: nat):
                                                                                                                                                                                             IF i > j THEN 0 ELSE C(j, i) * h ^ i * x ^ (j - i) ENDIF"
                                                                                                                                                                   "j-2"
                                                                                                                                                                   "0"
                                                                                                                                                                   "2")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (replace
                                                                                                                                                                       -1)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (hide
                                                                                                                                                                         -1)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (expand
                                                                                                                                                                           "FF"
                                                                                                                                                                           +)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (assert)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (hide
                                                                                                                                                                     2)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (skosimp*)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (assert)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("3"
                                                                                                                                                                    (hide
                                                                                                                                                                     2)
                                                                                                                                                                    (("3"
                                                                                                                                                                      (skosimp*)
                                                                                                                                                                      (("3"
                                                                                                                                                                        (assert)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (hide-all-but
                                                                                                                                                         1)
                                                                                                                                                        (("2"
                                                                                                                                                          (grind)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (expand
                                                                                                                                                   "C"
                                                                                                                                                   +)
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    (("2"
                                                                                                                                                      (expand
                                                                                                                                                       "factorial"
                                                                                                                                                       +
                                                                                                                                                       1)
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (expand
                                                                                                                                               "C"
                                                                                                                                               +)
                                                                                                                                              (("2"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (hide
                                                                                                                               2)
                                                                                                                              (("2"
                                                                                                                                (skosimp*)
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("3"
                                                                                                                              (hide
                                                                                                                               2)
                                                                                                                              (("3"
                                                                                                                                (skosimp*)
                                                                                                                                (("3"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide-all-but
                                                                                             1)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "polynomial")
                                                                                              (("2"
                                                                                                (reveal
                                                                                                 "jlen")
                                                                                                (("2"
                                                                                                  (reveal
                                                                                                   "jge2")
                                                                                                  (("2"
                                                                                                    (rewrite
                                                                                                     "sigma_scal"
                                                                                                     :dir
                                                                                                     rl)
                                                                                                    (("1"
                                                                                                      (rewrite
                                                                                                       "sigma_eq")
                                                                                                      (("1"
                                                                                                        (hide
                                                                                                         2)
                                                                                                        (("1"
                                                                                                          (skosimp*)
                                                                                                          (("1"
                                                                                                            (case
                                                                                                             "FORALL (a,b,cc:real): a=ar*b IMPLIES a*cc = ar*(b*cc)")
                                                                                                            (("1"
                                                                                                              (rewrite
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (hide
                                                                                                                 (-1
                                                                                                                  2))
                                                                                                                (("1"
                                                                                                                  (rewrite
                                                                                                                   "sigma_scal"
                                                                                                                   :dir
                                                                                                                   rl)
                                                                                                                  (("1"
                                                                                                                    (rewrite
                                                                                                                     "sigma_eq")
                                                                                                                    (("1"
                                                                                                                      (hide
                                                                                                                       2)
                                                                                                                      (("1"
                                                                                                                        (skosimp*)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (grind)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (hide-all-but
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (grind)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide
                                                                                                         2)
                                                                                                        (("2"
                                                                                                          (skosimp*)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (skosimp*)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               (1
                                                                                "jge2"
                                                                                "jlen"))
                                                                              (("2"
                                                                                (inst
                                                                                 +
                                                                                 "LAMBDA (ii:nat): j-2"
                                                                                 "LAMBDA (ii:nat): LAMBDA (k:nat): IF k = -2-ii+j THEN C(j,j-ii) ELSE 0 ENDIF")
                                                                                (("1"
                                                                                  (skeep)
                                                                                  (("1"
                                                                                    (case
                                                                                     "(LAMBDA (ii_1: nat):
                                                                                                                                                                                                               polynomial(LAMBDA (k: nat):
                                                                                                                                                                                                                            IF k = -2 - ii_1 + j THEN C(j, j - ii_1)
                                                                                                                                                                                                                            ELSE 0
                                                                                                                                                                                                                            ENDIF,
                                                                                                                                                                                                                          j - 2)
                                                                                                                                                                                                                         (h)) = LAMBDA (ii:nat): IF ii>j-2 THEN 0 ELSE C(j,j-ii)*h^(-2-ii+j) ENDIF")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("1"
                                                                                        (hide
                                                                                         -1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "GG")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "polynomial")
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "sigma_split")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -
                                                                                                 _
                                                                                                 "n-1"
                                                                                                 _
                                                                                                 _)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -
                                                                                                   _
                                                                                                   _
                                                                                                   "j-2")
                                                                                                  (("1"
                                                                                                    (inst?)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (invoke
                                                                                                         (case
                                                                                                          "%1 = 0")
                                                                                                         (!
                                                                                                          -1
                                                                                                          2
                                                                                                          2))
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (hide
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (hide
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (lemma
                                                                                                                     "sigma_reverse")
                                                                                                                    (("1"
                                                                                                                      (invoke
                                                                                                                       (inst
                                                                                                                        -
                                                                                                                        "%1"
                                                                                                                        _
                                                                                                                        _)
                                                                                                                       (!
                                                                                                                        1
                                                                                                                        2
                                                                                                                        3))
                                                                                                                      (("1"
                                                                                                                        (inst?)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (hide
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (rewrite
                                                                                                                                 "sigma_eq")
                                                                                                                                (("1"
                                                                                                                                  (hide
                                                                                                                                   2)
                                                                                                                                  (("1"
                                                                                                                                    (skosimp*)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (lift-if)
                                                                                                                                        (("1"
                                                                                                                                          (ground)
                                                                                                                                          (("1"
                                                                                                                                            (replace
                                                                                                                                             -1)
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (case
                                                                                                                                                 "x^0 = 1")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (hide-all-but
                                                                                                                                                   1)
                                                                                                                                                  (("2"
                                                                                                                                                    (grind)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (hide
                                                                                                                                   2)
                                                                                                                                  (("2"
                                                                                                                                    (skosimp*)
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("3"
                                                                                                                                  (skosimp*)
                                                                                                                                  (("3"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("4"
                                                                                                                                  (hide
                                                                                                                                   2)
                                                                                                                                  (("4"
                                                                                                                                    (skosimp*)
                                                                                                                                    (("4"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (hide
                                                                                                                         2)
                                                                                                                        (("2"
                                                                                                                          (skosimp*)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("3"
                                                                                                                        (hide
                                                                                                                         2)
                                                                                                                        (("3"
                                                                                                                          (skosimp*)
                                                                                                                          (("3"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (hide
                                                                                                           (-1
                                                                                                            2))
                                                                                                          (("2"
                                                                                                            (rewrite
                                                                                                             "sigma_restrict_eq_0")
                                                                                                            (("2"
                                                                                                              (hide
                                                                                                               2)
                                                                                                              (("2"
                                                                                                                (skosimp*)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("3"
                                                                                                          (hide
                                                                                                           (-1
                                                                                                            2))
                                                                                                          (("3"
                                                                                                            (skosimp*)
                                                                                                            (("3"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide
                                                                                                       (-1
                                                                                                        2))
                                                                                                      (("2"
                                                                                                        (skosimp*)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("3"
                                                                                                      (hide
                                                                                                       (-1
                                                                                                        2))
                                                                                                      (("3"
                                                                                                        (skosimp*)
                                                                                                        (("3"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       2)
                                                                                      (("2"
                                                                                        (decompose-equality)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "polynomial")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "sigma_eq_one_arg")
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "-2-x!1+j")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (case
                                                                                                       "x!1 > j-2")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           "sigma_restrict_eq_0")
                                                                                                          (("1"
                                                                                                            (hide
                                                                                                             2)
                                                                                                            (("1"
                                                                                                              (skosimp*)
                                                                                                              (("1"
                                                                                                                (lift-if)
                                                                                                                (("1"
                                                                                                                  (ground)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (split
                                                                                                           -)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (lift-if)
                                                                                                              (("1"
                                                                                                                (ground)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (case
                                                                                                                     "h^0 = 1")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (hide-all-but
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (skosimp*)
                                                                                                            (("2"
                                                                                                              (lift-if)
                                                                                                              (("2"
                                                                                                                (ground)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (skosimp*)
                                                                                                  (("2"
                                                                                                    (lift-if)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (skosimp*)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (skosimp*)
                                                                                          (("3"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("4"
                                                                                          (skosimp*)
                                                                                          (("4"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (hide
                                                                                       2)
                                                                                      (("3"
                                                                                        (skosimp*)
                                                                                        (("3"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("4"
                                                                                      (hide
                                                                                       2)
                                                                                      (("4"
                                                                                        (skosimp*)
                                                                                        (("4"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("5"
                                                                                      (hide
                                                                                       2)
                                                                                      (("5"
                                                                                        (skosimp*)
                                                                                        (("5"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (skosimp*)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             (-1
                                                                              -2
                                                                              2))
                                                                            (("2"
                                                                              (skeep)
                                                                              (("2"
                                                                                (decompose-equality)
                                                                                (("2"
                                                                                  (expand
                                                                                   "FF")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "GG")
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "expt_plus")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "*")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (lemma
                                                                                             "expt_plus")
                                                                                            (("2"
                                                                                              (inst
                                                                                               -
                                                                                               "2"
                                                                                               "x!1"
                                                                                               "h")
                                                                                              (("1"
                                                                                                (lift-if)
                                                                                                (("1"
                                                                                                  (ground)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "^"
                                                                                                       +)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "expt"
                                                                                                         +)
                                                                                                        (("2"
                                                                                                          (lift-if)
                                                                                                          (("2"
                                                                                                            (ground)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         2)
                                                                        (("2"
                                                                          (skosimp*)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (skosimp*)
                                                                        (("3"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (decompose-equality)
                                                                    (("2"
                                                                      (expand
                                                                       "polynomial")
                                                                      (("2"
                                                                        (lemma
                                                                         "sigma_eq_one_arg")
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "j-1")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (skosimp*)
                                                                                (("2"
                                                                                  (lift-if)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (inst
                                                             +
                                                             "LAMBDA (i:nat): 0"
                                                             "LAMBDA (i:nat): LAMBDA (k:nat): 0")
                                                            (("2"
                                                              (skeep 2)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (case
                                                                   "polynomial(LAMBDA (ii: nat): polynomial(LAMBDA (k: nat): 0, 0)(h),
                                            n - 1)
                                           (x) = 0")
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "polynomial"
                                                                         +)
                                                                        (("1"
                                                                          (lemma
                                                                           "sigma_split")
                                                                          (("1"
                                                                            (inst?)
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "1")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (case
                                                                                   "n >= 2")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (invoke
                                                                                       (case
                                                                                        "%1 = 0")
                                                                                       (!
                                                                                        -2
                                                                                        2
                                                                                        2))
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -3)
                                                                                            (("1"
                                                                                              (case
                                                                                               "j = 0 OR j = 1")
                                                                                              (("1"
                                                                                                (split
                                                                                                 -)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     -)
                                                                                                    (("1"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (hide
                                                                                                     -)
                                                                                                    (("2"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (rewrite
                                                                                         "sigma_restrict_eq_0")
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (case
                                                                                       "j = 0 OR j = 1")
                                                                                      (("1"
                                                                                        (case
                                                                                         "n = 0 OR n = 1")
                                                                                        (("1"
                                                                                          (hide
                                                                                           -3)
                                                                                          (("1"
                                                                                            (ground)
                                                                                            (("1"
                                                                                              (replaces
                                                                                               -1)
                                                                                              (("1"
                                                                                                (replaces
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (hide
                                                                                                   -)
                                                                                                  (("1"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (replaces
                                                                                               -1)
                                                                                              (("2"
                                                                                                (replaces
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (hide
                                                                                                   -)
                                                                                                  (("2"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("3"
                                                                                              (replaces
                                                                                               -1)
                                                                                              (("3"
                                                                                                (replaces
                                                                                                 -1)
                                                                                                (("3"
                                                                                                  (hide
                                                                                                   -)
                                                                                                  (("3"
                                                                                                    (assert)
                                                                                                    (("3"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "polynomial")
                                                                      (("2"
                                                                        (rewrite
                                                                         "sigma_restrict_eq_0")
                                                                        (("2"
                                                                          (rewrite
                                                                           "sigma_restrict_eq_0")
                                                                          (("2"
                                                                            (hide
                                                                             2)
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide -2)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (inst
                                                           +
                                                           "LAMBDA (i:nat): 0"
                                                           "LAMBDA (i:nat): LAMBDA (k:nat): 0")
                                                          (("2"
                                                            (skeep 2)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (hide
                                                                 -)
                                                                (("2"
                                                                  (invoke
                                                                   (case
                                                                    "%1 = 0")
                                                                   (!
                                                                    2
                                                                    1))
                                                                  (("1"
                                                                    (invoke
                                                                     (case
                                                                      "%1 = 0")
                                                                     (!
                                                                      2
                                                                      2
                                                                      1))
                                                                    (("1"
                                                                      (invoke
                                                                       (case
                                                                        "%1 = 0")
                                                                       (!
                                                                        2
                                                                        2
                                                                        2
                                                                        2))
                                                                      (("1"
                                                                        (invoke
                                                                         (case
                                                                          "%1 = 0")
                                                                         (!
                                                                          2
                                                                          2
                                                                          3
                                                                          2))
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           (-
                                                                            3))
                                                                          (("2"
                                                                            (expand
                                                                             "polynomial")
                                                                            (("2"
                                                                              (rewrite
                                                                               "sigma_restrict_eq_0")
                                                                              (("2"
                                                                                (skosimp*)
                                                                                (("2"
                                                                                  (lift-if)
                                                                                  (("2"
                                                                                    (ground)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         (-
                                                                          3))
                                                                        (("2"
                                                                          (expand
                                                                           "polynomial")
                                                                          (("2"
                                                                            (rewrite
                                                                             "sigma_restrict_eq_0")
                                                                            (("2"
                                                                              (rewrite
                                                                               "sigma_restrict_eq_0")
                                                                              (("2"
                                                                                (skosimp*)
                                                                                (("2"
                                                                                  (lift-if)
                                                                                  (("2"
                                                                                    (ground)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       (-
                                                                        3))
                                                                      (("2"
                                                                        (expand
                                                                         "polynomial")
                                                                        (("2"
                                                                          (rewrite
                                                                           "sigma_restrict_eq_0")
                                                                          (("2"
                                                                            (skosimp*)
                                                                            (("2"
                                                                              (lift-if)
                                                                              (("2"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     (-
                                                                      3))
                                                                    (("2"
                                                                      (expand
                                                                       "polynomial")
                                                                      (("2"
                                                                        (rewrite
                                                                         "sigma_restrict_eq_0")
                                                                        (("2"
                                                                          (skosimp*)
                                                                          (("2"
                                                                            (lift-if)
                                                                            (("2"
                                                                              (ground)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (expand "polynomial")
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (decompose-equality)
                                            (("2"
                                              (lemma
                                               "sigma_eq_one_arg")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (inst - "j")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (split -)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (ground)
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (case
                                                                   "x!1^0 = 1")
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skosimp*)
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (ground)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skolem 1 ("aa" "bb"))
                              (("2"
                                (flatten)
                                (("2"
                                  (expand "P")
                                  (("2"
                                    (skolem -1 ("nseqa" _))
                                    (("2"
                                      (skolem -2 ("nseqb" _))
                                      (("2"
                                        (skolem -1 "psqueaka")
                                        (("2"
                                          (skolem -2 "psqueakb")
                                          (("2"
                                            (name
                                             "pseqa"
                                             "LAMBDA (nn:nat): LAMBDA (ii:nat): IF ii>nseqa(nn) THEN 0 ELSE psqueaka(nn)(ii) ENDIF")
                                            (("2"
                                              (name
                                               "pseqb"
                                               "LAMBDA (nn:nat): LAMBDA (ii:nat): IF ii>nseqb(nn) THEN 0 ELSE psqueakb(nn)(ii) ENDIF")
                                              (("2"
                                                (inst
                                                 +
                                                 "nseqa+nseqb"
                                                 "LAMBDA (nn:nat): pseqa(nn) + pseqb(nn)")
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (hide (-1 -2))
                                                    (("1"
                                                      (inst - "h" "x")
                                                      (("1"
                                                        (inst
                                                         -
                                                         "h"
                                                         "x")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (rewrite
                                                             "sum_polynomial_eq_degree"
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (expand
                                                               "+"
                                                               +)
                                                              (("1"
                                                                (replaces
                                                                 -1)
                                                                (("1"
                                                                  (replaces
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (invoke
                                                                       (case
                                                                        "%1 + %2 = %3")
                                                                       (!
                                                                        1
                                                                        1
                                                                        1
                                                                        2)
                                                                       (!
                                                                        1
                                                                        1
                                                                        2
                                                                        2)
                                                                       (!
                                                                        1
                                                                        2
                                                                        1
                                                                        2))
                                                                      (("1"
                                                                        (replace
                                                                         -1
                                                                         :dir
                                                                         rl)
                                                                        (("1"
                                                                          (invoke
                                                                           (case
                                                                            "%1 + %2 = %3")
                                                                           (!
                                                                            1
                                                                            1
                                                                            3
                                                                            2)
                                                                           (!
                                                                            1
                                                                            1
                                                                            4
                                                                            2)
                                                                           (!
                                                                            1
                                                                            2
                                                                            2
                                                                            2))
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             1)
                                                                            (("2"
                                                                              (expand
                                                                               "polynomial")
                                                                              (("2"
                                                                                (rewrite
                                                                                 "sigma_sum")
                                                                                (("2"
                                                                                  (rewrite
                                                                                   "sigma_eq")
                                                                                  (("2"
                                                                                    (hide
                                                                                     2)
                                                                                    (("2"
                                                                                      (skeep)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "poly_deriv")
                                                                                        (("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         2)
                                                                        (("2"
                                                                          (expand
                                                                           "polynomial")
                                                                          (("2"
                                                                            (rewrite
                                                                             "sigma_sum")
                                                                            (("1"
                                                                              (rewrite
                                                                               "sigma_eq")
                                                                              (("1"
                                                                                (hide
                                                                                 2)
                                                                                (("1"
                                                                                  (skolem
                                                                                   1
                                                                                   "nn")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "sigma_scal_right"
                                                                                       :dir
                                                                                       rl)
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "sigma_scal_right"
                                                                                         :dir
                                                                                         rl)
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "sigma_scal_right"
                                                                                           :dir
                                                                                           rl)
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "sigma_sum"
                                                                                             :dir
                                                                                             rl)
                                                                                            (("1"
                                                                                              (invoke
                                                                                               (case
                                                                                                "%1 = %2 AND %3 = %4")
                                                                                               (!
                                                                                                1
                                                                                                1
                                                                                                1)
                                                                                               (!
                                                                                                1
                                                                                                2
                                                                                                1)
                                                                                               (!
                                                                                                1
                                                                                                1
                                                                                                2)
                                                                                               (!
                                                                                                1
                                                                                                2
                                                                                                2))
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide
                                                                                                 2)
                                                                                                (("2"
                                                                                                  (split)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "sigma_split")
                                                                                                    (("1"
                                                                                                      (invoke
                                                                                                       (inst
                                                                                                        -
                                                                                                        "%1"
                                                                                                        _
                                                                                                        _
                                                                                                        _)
                                                                                                       (!
                                                                                                        1
                                                                                                        2
                                                                                                        3))
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "nseqa(nn) + nseqb(nn)"
                                                                                                         "0"
                                                                                                         "nseqb(nn)")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (invoke
                                                                                                               (case
                                                                                                                "%1 = 0")
                                                                                                               (!
                                                                                                                1
                                                                                                                2
                                                                                                                2))
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (hide
                                                                                                                     -)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (rewrite
                                                                                                                         "sigma_eq")
                                                                                                                        (("1"
                                                                                                                          (hide
                                                                                                                           2)
                                                                                                                          (("1"
                                                                                                                            (skosimp*)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "pseqb")
                                                                                                                              (("1"
                                                                                                                                (propax)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (hide-all-but
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (rewrite
                                                                                                                   "sigma_restrict_eq_0")
                                                                                                                  (("2"
                                                                                                                    (hide
                                                                                                                     2)
                                                                                                                    (("2"
                                                                                                                      (skosimp*)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "pseqb")
                                                                                                                        (("2"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (lemma
                                                                                                     "sigma_split")
                                                                                                    (("2"
                                                                                                      (invoke
                                                                                                       (inst
                                                                                                        -
                                                                                                        "%1"
                                                                                                        _
                                                                                                        _
                                                                                                        _)
                                                                                                       (!
                                                                                                        1
                                                                                                        2
                                                                                                        3))
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "nseqa(nn) + nseqb(nn)"
                                                                                                         "0"
                                                                                                         "nseqa(nn)")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (replace
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (invoke
                                                                                                               (case
                                                                                                                "%1 = 0")
                                                                                                               (!
                                                                                                                1
                                                                                                                2
                                                                                                                2))
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (hide
                                                                                                                     -)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (rewrite
                                                                                                                         "sigma_eq")
                                                                                                                        (("1"
                                                                                                                          (hide
                                                                                                                           2)
                                                                                                                          (("1"
                                                                                                                            (skosimp*)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "pseqa")
                                                                                                                              (("1"
                                                                                                                                (propax)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (hide-all-but
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (rewrite
                                                                                                                   "sigma_restrict_eq_0")
                                                                                                                  (("2"
                                                                                                                    (hide
                                                                                                                     2)
                                                                                                                    (("2"
                                                                                                                      (skosimp*)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "pseqa")
                                                                                                                        (("2"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 2)
                                                                                (("2"
                                                                                  (skosimp*)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (hide
                                                                                 2)
                                                                                (("3"
                                                                                  (skosimp*)
                                                                                  (("3"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("4"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("4"
                                                                                  (skosimp*)
                                                                                  (("4"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (skosimp*)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("3"
                                                                                (skosimp*)
                                                                                (("3"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (hide -)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but 1)
              (("2" (flatten)
                (("2" (skeep)
                  (("2" (expand "P" +)
                    (("2"
                      (name "aaa"
                            "LAMBDA (ii:nat): IF ii>n THEN 0 ELSE aa(ii) ENDIF")
                      (("2" (inst -2 "aaa")
                        (("2" (case "eventzero(aaa)")
                          (("1" (assert)
                            (("1" (hide (-1 -2))
                              (("1"
                                (expand "P")
                                (("1"
                                  (skeep -1)
                                  (("1"
                                    (inst + "nseq" "pseq")
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (inst - "h" "x")
                                        (("1"
                                          (invoke
                                           (case "%1 = %2")
                                           (! -1 1)
                                           (! 1 1))
                                          (("1"
                                            (invoke
                                             (case "%1 = %2")
                                             (! -2 2 1)
                                             (! 1 2 1))
                                            (("1"
                                              (invoke
                                               (case "%1 = %2")
                                               (! -3 2 2 2)
                                               (! 1 2 2 2))
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2"
                                                  (rewrite
                                                   "poly_eq_le_degree")
                                                  (("2"
                                                    (hide 2)
                                                    (("2"
                                                      (expand "aaa")
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (rewrite
                                               "poly_eq_le_degree")
                                              (("2"
                                                (expand "aaa")
                                                (("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2"
                                              (rewrite
                                               "poly_eq_le_degree")
                                              (("2"
                                                (hide 2)
                                                (("2"
                                                  (expand "aaa")
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (expand "eventzero")
                              (("2"
                                (inst + "n")
                                (("2"
                                  (hide-all-but 1)
                                  (("2"
                                    (expand "aaa")
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (assert)
        (("2" (case "NOT n = 0")
          (("1" (assert) nil nil)
           ("2" (hide 1)
            (("2" (replace -1)
              (("2"
                (inst + "LAMBDA (ii:nat): 0"
                 "LAMBDA (ii:nat): LAMBDA (nn:nat): 0")
                (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma_0_neg formula-decl nil sigma_nat nil)
    (T_low type-eq-decl nil sigma nil)
    (T_high type-eq-decl nil sigma nil)
    (sigma def-decl "real" sigma nil)
    (sigma_eq formula-decl nil sigma nil)
    (sigma_scal formula-decl nil sigma nil)
    (sigma_shift formula-decl nil sigma_nat nil)
    (factorial_1 formula-decl nil factorial "ints/")
    (factorial def-decl "posnat" factorial "ints/")
    (factorial_0 formula-decl nil factorial "ints/")
    (sigma_split formula-decl nil sigma nil)
    (sigma_reverse formula-decl nil sigma_nat nil)
    (sigma_restrict_eq_0 formula-decl nil sigma nil)
    (sigma_eq_one_arg formula-decl nil sigma nil)
    (C const-decl "posnat" binomial nil)
    (sigma_scal_right formula-decl nil sigma nil)
    (sigma_sum formula-decl nil sigma nil)
    (+ const-decl "[T -> real]" real_fun_ops nil))
   shostak))
 (poly_deriv_const 0
  (poly_deriv_const-1 nil 3569327213
   ("" (skeep) (("" (decompose-equality) (("" (grind) nil nil)) nil))
    nil)
   ((sequence type-eq-decl nil sequences nil)
    (poly_deriv const-decl "real" polynomials nil)
    (* const-decl "[T -> real]" real_fun_ops nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (poly_product_rule_TCC1 0
  (poly_product_rule_TCC1-1 nil 3569163427 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (poly_product_rule subtype
    "(number_fields.-)((number_fields.+)(polynomials.n, polynomials.m), 1)"
    "nat")))
 (poly_product_rule_TCC2 0
  (poly_product_rule_TCC2-1 nil 3569163427 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (poly_product_rule subtype "(number_fields.-)(polynomials.m, 1)"
    "nat")))
 (poly_product_rule 0
  (poly_product_rule-1 nil 3569163429
   ("" (skeep)
    (("" (rewrite "polynomial_prod_def")
      (("" (rewrite "polynomial_prod_def")
        (("" (assert)
          (("" (rewrite "sum_polynomial_eq_degree_eval")
            (("" (rewrite "poly_eq_le_degree")
              (("" (hide 2)
                (("" (skosimp*)
                  (("" (assert)
                    (("" (expand "+")
                      (("" (expand "poly_deriv" + 1 :assert? none)
                        (("" (name "jj" "ii!1+1")
                          (("" (replace -1)
                            (("" (assert)
                              ((""
                                (expand "polynomial_prod")
                                ((""
                                  (case
                                   "FORALL (aa,bb,cc:real): aa-cc = bb IMPLIES aa=bb+cc")
                                  (("1"
                                    (rewrite -1)
                                    (("1"
                                      (hide 2)
                                      (("1"
                                        (rewrite "sigma_scal" :dir rl)
                                        (("1"
                                          (case
                                           "max(jj-m,0) = max(1-m+ii!1,0)")
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (rewrite "sigma_minus")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (case "ii!1>=m")
                                                  (("1"
                                                    (expand "max")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (rewrite
                                                         "sigma_shift_fun_eq")
                                                        (("1"
                                                          (hide 2)
                                                          (("1"
                                                            (skosimp*)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "poly_deriv")
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (lift-if)
                                                                    (("1"
                                                                      (lift-if)
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (lift-if)
                                                                          (("1"
                                                                            (lift-if)
                                                                            (("1"
                                                                              (lift-if)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (hide 2)
                                                          (("3"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (case
                                                       "ii!1 = m-1")
                                                      (("1"
                                                        (replaces -1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "max")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replaces
                                                                 -3
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "poly_deriv")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (invoke
                                                                         (name
                                                                          "FF1"
                                                                          "%1")
                                                                         (!
                                                                          2
                                                                          1
                                                                          3))
                                                                        (("1"
                                                                          (replaces
                                                                           -1)
                                                                          (("1"
                                                                            (invoke
                                                                             (name
                                                                              "FF2"
                                                                              "%1")
                                                                             (!
                                                                              2
                                                                              2
                                                                              3))
                                                                            (("1"
                                                                              (replaces
                                                                               -1)
                                                                              (("1"
                                                                                (case
                                                                                 "FORALL (nn:nat): sigma(0,nn,FF1) = sigma(0,nn-1,FF2)")
                                                                                (("1"
                                                                                  (inst?)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   3)
                                                                                  (("2"
                                                                                    (induct
                                                                                     "nn")
                                                                                    (("1"
                                                                                      (hide
                                                                                       -1)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "FF1")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "FF2")
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (hide
                                                                                         -1)
                                                                                        (("2"
                                                                                          (skeep)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "sigma"
                                                                                               +)
                                                                                              (("2"
                                                                                                (case
                                                                                                 "FF1(1+j) = FF2(j)")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide
                                                                                                   (-1
                                                                                                    2))
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "FF1")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "FF2")
                                                                                                      (("2"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (assert)
                                                                                      (("3"
                                                                                        (skeep)
                                                                                        (("3"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (skeep)
                                                                                  (("3"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (skeep)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (skeep)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (skeep)
                                                                          (("3"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "max")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (invoke
                                                               (name
                                                                "FF1"
                                                                "%1")
                                                               (!
                                                                3
                                                                1
                                                                3))
                                                              (("1"
                                                                (replaces
                                                                 -1)
                                                                (("1"
                                                                  (invoke
                                                                   (name
                                                                    "FF2"
                                                                    "%1")
                                                                   (!
                                                                    3
                                                                    2
                                                                    3))
                                                                  (("1"
                                                                    (replaces
                                                                     -1)
                                                                    (("1"
                                                                      (case
                                                                       "FORALL (nn:nat): sigma(0,nn,FF1) = sigma(0,nn-1,FF2)")
                                                                      (("1"
                                                                        (inst?)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         (-1
                                                                          4))
                                                                        (("2"
                                                                          (induct
                                                                           "nn")
                                                                          (("1"
                                                                            (expand
                                                                             "FF1")
                                                                            (("1"
                                                                              (expand
                                                                               "FF2")
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (skeep)
                                                                            (("2"
                                                                              (expand
                                                                               "sigma"
                                                                               +)
                                                                              (("2"
                                                                                (case
                                                                                 "FF1(1+j) = FF2(j)")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   (-1
                                                                                    2))
                                                                                  (("2"
                                                                                    (expand
                                                                                     "FF1")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "FF2")
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (skosimp*)
                                                                            (("3"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (skosimp*)
                                                                        (("3"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skosimp*)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skosimp*)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (skosimp*)
                                                                (("3"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skosimp*)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("3"
                                                (skosimp*)
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (skosimp*)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (skosimp*)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (hide 2)
                                      (("3"
                                        (skosimp*)
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (skosimp*)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (polynomial_prod_def formula-decl nil polynomials nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (poly_deriv const-decl "real" polynomials nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[T -> real]" real_fun_ops nil)
    (poly_eq_le_degree formula-decl nil polynomials nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sigma_minus formula-decl nil sigma nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sigma_shift_fun_eq formula-decl nil sigma nil)
    (FF2 skolem-const-decl "[nat -> real]" polynomials nil)
    (FF1 skolem-const-decl "[nat -> real]" polynomials nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (TRUE const-decl "bool" booleans nil)
    (FF2 skolem-const-decl "[nat -> real]" polynomials nil)
    (FF1 skolem-const-decl "[nat -> real]" polynomials nil)
    (sigma_scal formula-decl nil sigma nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (T_low type-eq-decl nil sigma nil)
    (T_high type-eq-decl nil sigma nil)
    (sigma def-decl "real" sigma nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (ii!1 skolem-const-decl "nat" polynomials nil)
    (jj skolem-const-decl "posint" polynomials nil)
    (<= const-decl "bool" reals nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sum_polynomial_eq_degree_eval formula-decl nil polynomials nil)
    (polynomial_prod const-decl "real" polynomials nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   shostak))
 (deriv_power_linear_TCC1 0
  (deriv_power_linear_TCC1-1 nil 3569257461 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (deriv_power_linear subtype
    "real_defs.max((number_fields.-)(polynomials.n, 1), 0)" "nat")))
 (deriv_power_linear 0
  (deriv_power_linear-1 nil 3569257462
   ("" (skeep)
    (("" (expand "max")
      (("" (lift-if)
        (("" (ground)
          (("1" (case "n = 0")
            (("1" (replaces -1)
              (("1" (decompose-equality) (("1" (grind) nil nil)) nil))
              nil)
             ("2" (assert) nil nil))
            nil)
           ("2" (expand "poly_deriv")
            (("2" (expand "power_linear")
              (("2" (decompose-equality)
                (("1" (expand "*")
                  (("1" (lift-if)
                    (("1" (lift-if)
                      (("1" (lift-if)
                        (("1" (assert)
                          (("1" (ground)
                            (("1" (case "r^(x!1)*r = r^(x!1+1)")
                              (("1"
                                (replace -1 :dir rl)
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (case
                                     "(1+x!1)*C(n,1+x!1) = n*C(n-1,x!1)")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (hide 3)
                                      (("2"
                                        (name "iguana" "1+x!1")
                                        (("2"
                                          (replace -1)
                                          (("2"
                                            (expand "C")
                                            (("2"
                                              (expand "factorial" + 1)
                                              (("2"
                                                (expand
                                                 "factorial"
                                                 +
                                                 2)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (field)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 3)
                                (("2"
                                  (lemma "expt_plus")
                                  (("2"
                                    (inst - "x!1" "1" "r")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "^" - 3)
                                        (("1"
                                          (expand "expt")
                                          (("1"
                                            (expand "expt")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (replace -1)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil) ("3" (grind) nil nil)
                 ("4" (grind) nil nil) ("5" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (factorial def-decl "posnat" factorial "ints/")
    (C const-decl "posnat" binomial nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[T -> real]" real_fun_ops nil)
    (power_linear const-decl "real" polynomials nil)
    (poly_deriv const-decl "real" polynomials nil)
    (sequence type-eq-decl nil sequences nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (times_div1 formula-decl nil real_props nil)
    (cross_mult formula-decl nil real_props nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (expt_plus formula-decl nil exponentiation nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (r skolem-const-decl "real" polynomials nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (c skolem-const-decl "real" polynomials nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (n skolem-const-decl "nat" polynomials nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (poly_n_deriv_TCC1 0
  (poly_n_deriv_TCC1-1 nil 3569259739 ("" (subtype-tcc) nil nil) nil
   nil
   (poly_n_deriv subtype "polynomials.n"
    "{i_1: naturalnumbers.nat | reals.<=(i_1, (number_fields.+)(polynomials.i, polynomials.n))}")))
 (poly_n_deriv_def 0
  (poly_n_deriv_def-1 nil 3569259740
   ("" (skeep)
    (("" (split)
      (("1" (decompose-equality) (("1" (grind) nil nil)) nil)
       ("2" (assert)
        (("2" (expand "poly_n_deriv")
          (("2" (expand "poly_deriv")
            (("2" (decompose-equality)
              (("2" (expand "C")
                (("2" (expand "factorial" + 1) (("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (assert)
        (("3" (skeep)
          (("3" (expand "poly_n_deriv")
            (("3" (expand "poly_deriv")
              (("3" (decompose-equality)
                (("3" (name "fd" "1+n")
                  (("3" (replace -1)
                    (("3" (expand "factorial" + 3)
                      (("3" (assert)
                        (("3" (case "fd -1 = n")
                          (("1" (replace -1)
                            (("1"
                              (case "C(fd+x!1,n)*(1+x!1) = C(fd+x!1,fd)*fd")
                              (("1" (assert) nil nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (name "dd" "1+x!1")
                                  (("2"
                                    (replace -1)
                                    (("2"
                                      (expand "C")
                                      (("2"
                                        (case "fd -n = 1")
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (expand "factorial" + 5)
                                            (("1"
                                              (expand "factorial" + 3)
                                              (("1"
                                                (assert)
                                                (("1" (field) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((factorial def-decl "posnat" factorial "ints/")
    (C const-decl "posnat" binomial nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (poly_n_deriv const-decl "real" polynomials nil)
    (sequence type-eq-decl nil sequences nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (factorial_1 formula-decl nil factorial "ints/")
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (poly_deriv const-decl "real" polynomials nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (times_div2 formula-decl nil real_props nil)
    (cross_mult formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (poly_n_deriv_0 0
  (poly_n_deriv_0-1 nil 3569261443
   ("" (skeep)
    (("" (rewrite "polynomial_x0")
      (("" (expand "poly_n_deriv")
        (("" (expand "C") (("" (cross-mult 1) nil nil)) nil)) nil))
      nil))
    nil)
   ((polynomial_x0 formula-decl nil polynomials nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (poly_n_deriv const-decl "real" polynomials nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (C const-decl "posnat" binomial nil)
    (div_cancel3 formula-decl nil real_props nil)
    (factorial_0 formula-decl nil factorial "ints/")
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (factorial def-decl "posnat" factorial "ints/")
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (times_div1 formula-decl nil real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (poly_continuous 0
  (poly_continuous-1 nil 3568981117
   ("" (skeep)
    (("" (lemma "poly_eq_deriv_plus")
      (("" (inst - "a" "n")
        (("" (assert)
          (("" (case "n = 0")
            (("1" (replaces -1)
              (("1" (inst + "epsil")
                (("1" (hide -) (("1" (grind) nil nil)) nil)) nil))
              nil)
             ("2" (assert)
              (("2" (skeep -1)
                (("2"
                  (case "EXISTS (M:posreal): FORALL (ii:nat,h:real): abs(h) <= 1 AND ii<=n-1 IMPLIES abs(polynomial(pseq(ii), nseq(ii))(h)*x^ii) <= M")
                  (("1"
                    (case "EXISTS (M:posreal): FORALL (h:real): abs(h) <= 1 IMPLIES abs(polynomial(LAMBDA (ii: nat): polynomial(pseq(ii), nseq(ii))(h),
                                                                  n - 1)
                                                                 (x)) <= M")
                    (("1" (hide -2)
                      (("1"
                        (case "EXISTS (M:posreal): FORALL (h:real): abs(h) <= 1 IMPLIES abs(polynomial(poly_deriv(a), n - 1)(x) +
                                                              h *
                                                               polynomial(LAMBDA (ii: nat): polynomial(pseq(ii), nseq(ii))(h),
                                                                          n - 1)
                                                                         (x)) <= M")
                        (("1" (hide -2)
                          (("1" (skeep -1)
                            (("1" (name "delta" "min(1/2,epsil/(2*M))")
                              (("1"
                                (inst + "delta")
                                (("1"
                                  (skeep 2)
                                  (("1"
                                    (name "h" "y-x")
                                    (("1"
                                      (case "y = x+h")
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (rewrite "abs_mult")
                                              (("1"
                                                (expand "abs" -4 1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst - "h")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst
                                                         -
                                                         "h"
                                                         "x")
                                                        (("1"
                                                          (replaces -3)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (mult-by
                                                               -2
                                                               "abs(h)")
                                                              (("1"
                                                                (rewrite
                                                                 "abs_mult"
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case
                                                                     "M*abs(h) < epsil")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "^")
                                                                        (("1"
                                                                          (expand
                                                                           "expt")
                                                                          (("1"
                                                                            (expand
                                                                             "expt")
                                                                            (("1"
                                                                              (expand
                                                                               "expt")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "abs")
                                                                                  (("1"
                                                                                    (lift-if)
                                                                                    (("1"
                                                                                      (lift-if)
                                                                                      (("1"
                                                                                        (lift-if)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       3)
                                                                      (("2"
                                                                        (mult-by
                                                                         -3
                                                                         "M")
                                                                        (("2"
                                                                          (case
                                                                           "delta*M < epsil")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "delta"
                                                                             1)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "min")
                                                                                  (("2"
                                                                                    (lift-if)
                                                                                    (("2"
                                                                                      (grind)
                                                                                      (("2"
                                                                                        (cross-mult
                                                                                         1)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 3)
                          (("2" (skeep -1)
                            (("2"
                              (inst +
                               "abs(polynomial(poly_deriv(a), n - 1)(x)) + M")
                              (("2"
                                (skeep)
                                (("2"
                                  (inst - "h")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (lemma "triangle")
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (rewrite "abs_mult")
                                            (("2"
                                              (invoke
                                               (case "abs(h)*%1 <= M")
                                               (! -3 1))
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (mult-ineq -2 -3)
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (hide (3 4 5))
                                                  (("2"
                                                    (split)
                                                    (("1"
                                                      (hide-all-but 1)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "abs"
                                                       +
                                                       1)
                                                      (("2"
                                                        (expand
                                                         "abs"
                                                         +
                                                         2)
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide (-2 3))
                      (("2" (skeep -1)
                        (("2" (inst + "n*M")
                          (("1" (skeep)
                            (("1"
                              (case "FORALL (jj:nat): jj<=n-1 IMPLIES abs(polynomial(LAMBDA (ii: nat): polynomial(pseq(ii), nseq(ii))(h),
                                                                  jj)
                                                                 (x))
                                                    <= (jj+1) * M")
                              (("1"
                                (inst - "n-1")
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (induct "jj")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "polynomial" + 1)
                                      (("1"
                                        (expand "sigma")
                                        (("1"
                                          (expand "sigma")
                                          (("1"
                                            (inst - "0" "h")
                                            (("1"
                                              (expand "^")
                                              (("1"
                                                (expand "expt")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skeep)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "polynomial" + 1)
                                        (("2"
                                          (expand "sigma")
                                          (("2"
                                            (expand "polynomial" - 1)
                                            (("2"
                                              (lemma "triangle")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (invoke
                                                   (case "%1<=M")
                                                   (! -1 2 2))
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (hide (-1 2))
                                                    (("2"
                                                      (inst
                                                       -
                                                       "1+j"
                                                       "h")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide (-1 3))
                    (("2"
                      (case "FORALL (ii:nat): ii<=n-1 IMPLIES EXISTS (M: posreal):
                   FORALL (h: real):
                     abs(h) <= 1 IMPLIES
                      abs(polynomial(pseq(ii), nseq(ii))(h) * x ^ ii) <= M")
                      (("1"
                        (case "FORALL (KK:nat): KK<=n-1 IMPLIES EXISTS (M: posreal):
                     FORALL (ii: nat, h: real):
                       abs(h) <= 1 AND ii <= KK IMPLIES
                        abs(polynomial(pseq(ii), nseq(ii))(h) * x ^ ii) <= M")
                        (("1" (inst - "n-1") (("1" (assert) nil nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (induct "KK")
                            (("1" (inst - "0")
                              (("1"
                                (assert)
                                (("1"
                                  (skeep -1)
                                  (("1"
                                    (inst + "M")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst - "h")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skeep)
                              (("2"
                                (assert)
                                (("2"
                                  (skeep -1)
                                  (("2"
                                    (inst -3 "1+j")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (skosimp*)
                                        (("2"
                                          (inst + "M + M!1")
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (inst - "ii" "h")
                                              (("2"
                                                (inst - "h")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (skeep)
                          (("2"
                            (case "FORALL (KK:nat): EXISTS (M:posreal): FORALL (h:real): abs(h)<=1 IMPLIES abs(polynomial(pseq(ii), KK)(h))<=M")
                            (("1" (inst - "nseq(ii)")
                              (("1"
                                (assert)
                                (("1"
                                  (skeep -1)
                                  (("1"
                                    (inst + "M*abs(x^ii)+1")
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (inst - "h")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (mult-by -1 "abs(x^ii)")
                                            (("1"
                                              (rewrite "abs_mult")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (induct "KK")
                                (("1"
                                  (inst + "abs(pseq(ii)(0))+1")
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (skeep)
                                  (("2"
                                    (skeep -1)
                                    (("2"
                                      (inst
                                       +
                                       "M + abs(pseq(ii)(j+1)) + 1")
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (inst - "h")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "polynomial")
                                              (("2"
                                                (expand "sigma" +)
                                                (("2"
                                                  (lemma "triangle")
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (case
                                                         "abs(pseq(ii)(1 + j) * h ^ (1 + j)) <= 1 + abs(pseq(ii)(1 + j))")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide
                                                           (-1 -2 2))
                                                          (("2"
                                                            (rewrite
                                                             "abs_mult")
                                                            (("2"
                                                              (case
                                                               "abs(h^(1+j))<=1")
                                                              (("1"
                                                                (mult-by
                                                                 -1
                                                                 "abs(pseq(ii)(1+j))")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (lemma
                                                                   "abs_expt")
                                                                  (("2"
                                                                    (rewrite
                                                                     -1
                                                                     :dir
                                                                     rl)
                                                                    (("1"
                                                                      (hide
                                                                       -1)
                                                                      (("1"
                                                                        (lemma
                                                                         "both_sides_expt_pos_ge")
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           "1+j"
                                                                           "1"
                                                                           "abs(h)")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (rewrite
                                                                               "expt_1i")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (case
                                                                               "abs(h) = 0")
                                                                              (("1"
                                                                                (replaces
                                                                                 -1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (replaces
                                                                           -1)
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((poly_eq_deriv_plus formula-decl nil polynomials nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (n skolem-const-decl "nat" polynomials nil)
    (M skolem-const-decl "posreal" polynomials nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (T_low type-eq-decl nil sigma nil)
    (T_high type-eq-decl nil sigma nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (triangle formula-decl nil real_props nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nzrat_abs_is_pos application-judgement "{r: posrat | r >= q}"
     real_defs nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (le_times_le_any1 formula-decl nil extra_real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (abs_mult formula-decl nil real_props nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div2 formula-decl nil real_props nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (div_mult_pos_gt2 formula-decl nil extra_real_props nil)
    (delta skolem-const-decl
     "{z: posreal | z <= 1/2 AND z <= epsil / (2 * M)}" polynomials
     nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (< const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (poly_deriv const-decl "real" polynomials nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs_expt formula-decl nil exponentiation nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (expt_1i formula-decl nil exponentiation nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (both_sides_expt_pos_ge formula-decl nil exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (h skolem-const-decl "real" polynomials nil)
    (nnreal_exp application-judgement "nnreal" exponentiation nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (sigma def-decl "real" sigma nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (poly_attains_maximum 0
  (poly_attains_maximum-1 nil 3569004650
   ("" (skeep)
    ((""
      (case "FORALL (ss:[nat->real]): (FORALL (ii:nat): x<=ss(ii) AND ss(ii)<=y) IMPLIES (EXISTS (xy:real): x<=xy AND xy<=y AND (FORALL (epsil:posreal,N:nat): EXISTS (jj:nat): jj>=N AND abs(xy-ss(jj)) < epsil))")
      (("1" (label "thislem" -1)
        (("1" (name "f" "polynomial(a,n)")
          (("1" (label "fname" -1)
            (("1" (lemma "poly_continuous")
              (("1" (label "polycont" -1)
                (("1"
                  (name "Fset"
                        "LAMBDA (xy:real): EXISTS (cc:real): x<=cc AND cc<=y AND polynomial(a,n)(cc) = xy")
                  (("1" (label "Fsetname" -1)
                    (("1" (case "nonempty?[real](Fset)")
                      (("1" (label "nonemptyFset" -1)
                        (("1" (name "ismax" "lub(Fset)")
                          (("1" (label "ismaxname" -1)
                            (("1"
                              (case "FORALL (N:nat): EXISTS (vv:real): x<=vv AND vv<=y AND f(vv)>ismax-1/(2*N+1)")
                              (("1"
                                (name
                                 "thisset"
                                 "LAMBDA (ii:nat): LAMBDA (xii:real): x<=xii AND xii<=y AND f(xii)>ismax-1/(2*ii+1)")
                                (("1"
                                  (case
                                   "FORALL (ii:nat): nonempty?[real](thisset(ii))")
                                  (("1"
                                    (name
                                     "ss"
                                     "LAMBDA (ii:nat): choose(thisset(ii))")
                                    (("1"
                                      (inst "thislem" "ss")
                                      (("1"
                                        (split "thislem")
                                        (("1"
                                          (skeep "thislem")
                                          (("1"
                                            (case "NOT f(xy) = ismax")
                                            (("1"
                                              (case "f(xy) <= ismax")
                                              (("1"
                                                (name
                                                 "newep"
                                                 "(ismax-f(xy))/10")
                                                (("1"
                                                  (case
                                                   "NOT newep > 0")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     "archimedean")
                                                    (("2"
                                                      (inst - "newep")
                                                      (("1"
                                                        (skosimp*)
                                                        (("1"
                                                          (inst
                                                           "polycont"
                                                           "a"
                                                           "n"
                                                           "xy"
                                                           "newep")
                                                          (("1"
                                                            (skeep
                                                             "polycont")
                                                            (("1"
                                                              (replace
                                                               "fname")
                                                              (("1"
                                                                (lemma
                                                                 "archimedean")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "delta")
                                                                  (("1"
                                                                    (skosimp*)
                                                                    (("1"
                                                                      (inst
                                                                       "thislem"
                                                                       "delta"
                                                                       "2*n!1")
                                                                      (("1"
                                                                        (skeep
                                                                         "thislem")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (inst
                                                                             "polycont"
                                                                             "ss(jj)")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (typepred
                                                                                 "ss(jj)")
                                                                                (("1"
                                                                                  (expand
                                                                                   "thisset"
                                                                                   -1)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (case
                                                                                       "1/(1+2*jj) + newep < ismax - f(xy)")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "abs")
                                                                                        (("1"
                                                                                          (lift-if)
                                                                                          (("1"
                                                                                            (ground)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         (2
                                                                                          3))
                                                                                        (("2"
                                                                                          (case
                                                                                           "1/(1+2*jj) < 1/(2*n!1)")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (cross-mult
                                                                                             1)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (typepred "ismax")
                                                  (("2"
                                                    (expand
                                                     "least_upper_bound?")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (expand
                                                         "upper_bound?")
                                                        (("2"
                                                          (inst
                                                           -
                                                           "f(xy)")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "Fset"
                                                               1)
                                                              (("2"
                                                                (inst
                                                                 +
                                                                 "xy")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (inst + "xy")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (skeep)
                                                  (("2"
                                                    (replace "fname")
                                                    (("2"
                                                      (replace -1)
                                                      (("2"
                                                        (typepred
                                                         "ismax")
                                                        (("2"
                                                          (expand
                                                           "least_upper_bound?")
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (expand
                                                               "upper_bound?")
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "f(cc)")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "Fset"
                                                                     1)
                                                                    (("2"
                                                                      (inst
                                                                       +
                                                                       "cc")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (typepred "ss(ii)")
                                              (("2"
                                                (expand "thisset")
                                                (("2"
                                                  (ground)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (propax) nil nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (expand "nonempty?" +)
                                        (("2"
                                          (expand "empty?")
                                          (("2"
                                            (inst -3 "ii")
                                            (("2"
                                              (skeep -3)
                                              (("2"
                                                (inst - "vv")
                                                (("2"
                                                  (expand "member")
                                                  (("2"
                                                    (expand "thisset")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (skeep)
                                  (("2"
                                    (typepred "ismax")
                                    (("2"
                                      (expand "least_upper_bound?")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (inst - "ismax - 1/(2*N+1)")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand
                                                 "upper_bound?"
                                                 +)
                                                (("2"
                                                  (skeep)
                                                  (("2"
                                                    (typepred "s")
                                                    (("2"
                                                      (expand
                                                       "Fset"
                                                       -1)
                                                      (("2"
                                                        (skeep -1)
                                                        (("2"
                                                          (inst + "cc")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (hide-all-but 1)
                              (("2"
                                (expand "Fset")
                                (("2"
                                  (name
                                   "KK"
                                   "polynomial(LAMBDA (ii:nat): abs(a(ii)),n)(max(abs(x),abs(y)))")
                                  (("2"
                                    (expand "bounded_above?")
                                    (("2"
                                      (inst + "KK")
                                      (("2"
                                        (expand "upper_bound?")
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (typepred "s")
                                            (("2"
                                              (skeep -1)
                                              (("2"
                                                (replace -3 :dir rl)
                                                (("2"
                                                  (expand "KK" +)
                                                  (("2"
                                                    (expand
                                                     "polynomial"
                                                     +)
                                                    (("2"
                                                      (lemma
                                                       "sigma_le")
                                                      (("2"
                                                        (rewrite -1)
                                                        (("2"
                                                          (hide 2)
                                                          (("2"
                                                            (skosimp*)
                                                            (("2"
                                                              (case
                                                               "FORALL (ar1,br1:real,anr1,bnr1:nnreal): abs(ar1)<=anr1 AND abs(br1)<=bnr1 IMPLIES ar1*br1<=anr1*bnr1")
                                                              (("1"
                                                                (rewrite
                                                                 -1)
                                                                (("1"
                                                                  (hide
                                                                   2)
                                                                  (("1"
                                                                    (lift-if)
                                                                    (("1"
                                                                      (ground)
                                                                      (("1"
                                                                        (expand
                                                                         "abs")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (lemma
                                                                         "both_sides_expt_pos_le")
                                                                        (("2"
                                                                          (rewrite
                                                                           "abs_expt"
                                                                           :dir
                                                                           rl)
                                                                          (("1"
                                                                            (rewrite
                                                                             -1)
                                                                            (("1"
                                                                              (hide-all-but
                                                                               (-4
                                                                                -5
                                                                                2))
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("3"
                                                                              (assert)
                                                                              (("3"
                                                                                (case
                                                                                 "abs(cc) = 0")
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (hide
                                                                                       -)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "nnreal_expt")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "n!1"
                                                                                           "max(abs(x),abs(y))")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "^")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "expt"
                                                                                                 +
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (replaces
                                                                               -1)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (hide
                                                                                   -)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "nnreal_expt")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -
                                                                                       "n!1"
                                                                                       "max(abs(x),abs(y))")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "^")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "expt"
                                                                                           +
                                                                                           1)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "abs"
                                                                                               +
                                                                                               1)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (mult-ineq
                                                                     -1
                                                                     -2)
                                                                    (("1"
                                                                      (rewrite
                                                                       "abs_mult"
                                                                       :dir
                                                                       rl)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (expand "nonempty?")
                          (("2" (expand "empty?")
                            (("2" (inst - "f(x)")
                              (("2"
                                (expand "member")
                                (("2"
                                  (expand "Fset")
                                  (("2"
                                    (inst + "x")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (skeep)
          (("2"
            (name "Dset"
                  "LAMBDA (xx:real): x<=xx AND xx<=y AND EXISTS (N:nat): FORALL (ii:nat): ii>=N IMPLIES ss(ii) < xx")
            (("2" (case "nonempty?[real](Dset)")
              (("1" (name "xb" "glb(Dset)")
                (("1" (case "xb = x")
                  (("1" (inst + "x")
                    (("1" (replace -1 :dir rl)
                      (("1" (assert)
                        (("1" (skeep)
                          (("1" (typepred "xb")
                            (("1" (expand "greatest_lower_bound?")
                              (("1"
                                (flatten)
                                (("1"
                                  (inst - "xb + epsil/2")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "lower_bound?")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (typepred "s")
                                          (("1"
                                            (expand "Dset" -1)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (inst
                                                   +
                                                   "max(N,N!1)+10")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (split +)
                                                      (("1"
                                                        (hide-all-but
                                                         1)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (inst
                                                         -
                                                         "max(N,N!1)+10")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "abs")
                                                            (("2"
                                                              (lift-if)
                                                              (("2"
                                                                (ground)
                                                                (("2"
                                                                  (inst
                                                                   -9
                                                                   "10 + max(N,N!1)")
                                                                  (("2"
                                                                    (ground)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (inst + "xb")
                    (("2" (assert)
                      (("2" (case "x<=xb AND xb <= y")
                        (("1" (flatten)
                          (("1" (assert)
                            (("1" (skeep)
                              (("1"
                                (typepred "xb")
                                (("1"
                                  (expand "greatest_lower_bound?")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand "lower_bound?" -1)
                                      (("1"
                                        (name
                                         "newx"
                                         "max(x,xb-epsil/2)")
                                        (("1"
                                          (inst - "newx")
                                          (("1"
                                            (case "xb > newx")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (expand "newx" +)
                                              (("2"
                                                (expand "max" 1)
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (ground)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "Dset" 1)
                                            (("2"
                                              (case
                                               "NOT ( x<=newx AND newx <=y )")
                                              (("1"
                                                (hide 2)
                                                (("1"
                                                  (expand "newx" 1)
                                                  (("1"
                                                    (expand "max" 1)
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (ground)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (inst
                                                     -
                                                     "xb + epsil/2")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "lower_bound?")
                                                        (("2"
                                                          (skeep 2)
                                                          (("2"
                                                            (typepred
                                                             "s")
                                                            (("2"
                                                              (expand
                                                               "Dset"
                                                               -1)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (skosimp*)
                                                                  (("2"
                                                                    (inst
                                                                     +
                                                                     "max(N,N!1)+10")
                                                                    (("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (inst
                                                                         +
                                                                         "ii")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "ii")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (expand
                                                                                 "max")
                                                                                (("2"
                                                                                  (expand
                                                                                   "abs")
                                                                                  (("2"
                                                                                    (lift-if)
                                                                                    (("2"
                                                                                      (ground)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 3)
                          (("2" (split +)
                            (("1" (typepred "xb")
                              (("1"
                                (expand "greatest_lower_bound?")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (inst - "x + (xb-x)/2")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "lower_bound?")
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (typepred "s")
                                            (("1"
                                              (expand "Dset" -1)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (typepred "xb")
                              (("2"
                                (expand "greatest_lower_bound?")
                                (("2"
                                  (flatten)
                                  (("2"
                                    (expand "lower_bound?")
                                    (("2"
                                      (expand "nonempty?")
                                      (("2"
                                        (expand "empty?")
                                        (("2"
                                          (skosimp*)
                                          (("2"
                                            (inst - "x!1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "member")
                                                (("1"
                                                  (expand "Dset")
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "member")
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (expand "bounded_below?")
                    (("2" (inst + "x-1")
                      (("2" (expand "lower_bound?")
                        (("2" (skosimp*)
                          (("2" (typepred "s!1")
                            (("2" (expand "Dset" -1)
                              (("2" (ground) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "nonempty?")
                (("2" (expand "empty?")
                  (("2" (inst - "y")
                    (("2" (expand "member")
                      (("2" (expand "Dset")
                        (("2" (assert)
                          (("2" (inst 2 "y")
                            (("2" (assert)
                              (("2"
                                (skosimp*)
                                (("2"
                                  (inst + "N!1")
                                  (("2"
                                    (skosimp*)
                                    (("2"
                                      (inst + "ii!1")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (inst - "ii!1")
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (expand "abs")
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (ground)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sequence type-eq-decl nil sequences nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (poly_continuous formula-decl nil polynomials nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (bounded_above? const-decl "bool" bounded_real_defs nil)
    (least_upper_bound? const-decl "bool" bounded_real_defs nil)
    (lub const-decl "{x | least_upper_bound?(x, SA)}" bounded_real_defs
     nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cc skolem-const-decl "real" polynomials nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (newep skolem-const-decl "real" polynomials nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (thisset skolem-const-decl "[nat -> [real -> boolean]]" polynomials
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div2 formula-decl nil real_props nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (archimedean formula-decl nil real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (Fset skolem-const-decl "[real -> boolean]" polynomials nil)
    (f skolem-const-decl "[real -> real]" polynomials nil)
    (xy skolem-const-decl "real" polynomials nil)
    (upper_bound? const-decl "bool" bounded_real_defs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (choose const-decl "(p)" sets nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (KK skolem-const-decl "real" polynomials nil)
    (sigma_le formula-decl nil sigma nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (nzrat_abs_is_pos application-judgement "{r: posrat | r >= q}"
     real_defs nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (abs_expt formula-decl nil exponentiation nil)
    (TRUE const-decl "bool" booleans nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (nnreal_expt application-judgement "nnreal" exponentiation nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (expt def-decl "real" exponentiation nil)
    (nnreal_expt judgement-tcc nil exponentiation nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (y skolem-const-decl "real" polynomials nil)
    (x skolem-const-decl "real" polynomials nil)
    (cc skolem-const-decl "real" polynomials nil)
    (both_sides_expt_pos_le formula-decl nil exponentiation nil)
    (subrange type-eq-decl nil integers nil)
    (nnreal_exp application-judgement "nnreal" exponentiation nil)
    (abs_mult formula-decl nil real_props nil)
    (le_times_le_any1 formula-decl nil extra_real_props nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (T_high type-eq-decl nil sigma nil)
    (T_low type-eq-decl nil sigma nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nonneg_real_max application-judgement
     "{z: nonneg_real | z >= x AND z >= y}" real_defs nil)
    (lower_bound? const-decl "bool" bounded_real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (Dset skolem-const-decl "[real -> boolean]" polynomials nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (x!1 skolem-const-decl "real" polynomials nil)
    (xb skolem-const-decl "{x | greatest_lower_bound?(x, Dset)}"
     polynomials nil)
    (epsil skolem-const-decl "posreal" polynomials nil)
    (newx skolem-const-decl
     "{p: real | p >= x AND p >= xb - epsil / 2}" polynomials nil)
    (glb const-decl "{x | greatest_lower_bound?(x, SB)}"
     bounded_real_defs nil)
    (greatest_lower_bound? const-decl "bool" bounded_real_defs nil)
    (bounded_below? const-decl "bool" bounded_real_defs nil))
   shostak))
 (poly_attains_minimum 0
  (poly_attains_minimum-1 nil 3569079005
   ("" (skeep)
    (("" (lemma "poly_attains_maximum")
      (("" (inst - "-a" "n" "x" "y")
        (("" (assert)
          (("" (skeep -1)
            (("" (inst + "c")
              (("" (assert)
                (("" (skeep)
                  (("" (inst - "cc")
                    (("" (assert)
                      (("" (rewrite "neg_polynomial" :dir rl)
                        (("" (expand "-") (("" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((poly_attains_maximum formula-decl nil polynomials nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (neg_polynomial formula-decl nil polynomials nil)
    (- const-decl "[T -> real]" real_fun_ops nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (poly_strictly_increasing 0
  (poly_strictly_increasing-2 nil 3569080186
   (""
    (case "FORALL (a: sequence[real], n: nat, x, y: real):
               (n > 0 AND
                 x < y AND
                  (EXISTS (ddp: posreal):
                     FORALL (c):
                       x <= c AND c <= y IMPLIES
                        polynomial(poly_deriv(a), n - 1)(c) >= ddp))
                IMPLIES polynomial(a, n)(x) < polynomial(a, n)(y)")
    (("1" (skeep)
      (("1" (lemma "poly_attains_minimum")
        (("1" (inst - "poly_deriv(a)" "n-1" "x" "y")
          (("1" (assert)
            (("1" (skosimp*)
              (("1" (inst -7 "c!1")
                (("1" (assert)
                  (("1" (inst -4 "a" "n" "x" "y")
                    (("1" (assert)
                      (("1"
                        (inst + "polynomial(poly_deriv(a),n-1)(c!1)")
                        nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep)
        (("2" (lemma "poly_eq_deriv_plus")
          (("2" (inst - "a" "n")
            (("2" (assert)
              (("2" (skeep -1)
                (("2"
                  (case "EXISTS (delta:posreal): FORALL (c,r:real): x<=r AND r<c AND c<=y AND c-r <= delta IMPLIES polynomial(a,n)(r) < polynomial(a,n)(c)")
                  (("1" (skeep -1)
                    (("1" (case "EXISTS (N:posnat): (y-x)/N < delta")
                      (("1" (skeep -1)
                        (("1"
                          (name "deer"
                                "LAMBDA (ii:nat): x + ii*((y-x)/N)")
                          (("1"
                            (case "FORALL (ii:nat): ii+1<=N IMPLIES polynomial(a,n)(deer(ii)) < polynomial(a,n)(deer(ii+1))")
                            (("1"
                              (case "FORALL (ii:nat): ii+1<=N IMPLIES polynomial(a,n)(deer(0)) < polynomial(a,n)(deer(ii+1))")
                              (("1"
                                (inst - "N-1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "deer" -1)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but (-1 1))
                                (("2"
                                  (induct "ii")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst - "0")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skeep)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (inst - "1+j")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skeep)
                              (("2"
                                (inst -4 "deer(ii+1)" "deer(ii)")
                                (("2"
                                  (assert)
                                  (("2"
                                    (replace 1)
                                    (("2"
                                      (hide (1 3))
                                      (("2"
                                        (split +)
                                        (("1"
                                          (case "(y-x)/N >= 0")
                                          (("1"
                                            (mult-by -1 "ii")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "deer" +)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (cross-mult 1)
                                            nil
                                            nil))
                                          nil)
                                         ("2"
                                          (case "(y-x)/N >= 0")
                                          (("1"
                                            (expand "deer" +)
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (cross-mult 1)
                                            nil
                                            nil))
                                          nil)
                                         ("3"
                                          (case "(y-x)/N > 0")
                                          (("1"
                                            (mult-by -2 "(y-x)/N")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "deer" +)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (cross-mult 1)
                                            nil
                                            nil))
                                          nil)
                                         ("4"
                                          (assert)
                                          (("4"
                                            (expand "deer" +)
                                            (("4" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "archimedean")
                        (("2" (inst - "delta/(y-x)")
                          (("1" (skolem -1 "kkz")
                            (("1" (inst + "kkz")
                              (("1"
                                (cross-mult -1)
                                (("1" (cross-mult 1) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (split)
                              (("1" (cross-mult 1) nil nil)
                               ("2" (cross-mult 1) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2"
                      (case "EXISTS (delta:posreal): FORALL (h:posreal,r:real): h <= delta AND (x<=r AND r+h<=y) IMPLIES polynomial(poly_deriv(a), n - 1)(r) + h*polynomial(LAMBDA (ii: nat): polynomial(pseq(ii), nseq(ii))(h),
                                                                                                n - 1)
                                                                                               (r) > 0")
                      (("1" (skeep -1)
                        (("1" (inst + "delta")
                          (("1" (skeep)
                            (("1" (inst - "c-r" "r")
                              (("1"
                                (name "h" "c-r")
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst - "h" "r")
                                      (("1"
                                        (mult-by -2 "h")
                                        (("1"
                                          (expand "^")
                                          (("1"
                                            (expand "expt")
                                            (("1"
                                              (expand "expt")
                                              (("1"
                                                (expand "expt")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (hide -1)
                          (("2"
                            (case "EXISTS (M:posreal): FORALL (r:real,h:posreal): x<=r AND r<=y AND h<=1 IMPLIES abs(polynomial(LAMBDA (ii: nat):
                                                                                                         polynomial(pseq(ii), nseq(ii))(h),
                                                                                                       n - 1)
                                                                                                      (r)) < M")
                            (("1" (skeep -1)
                              (("1"
                                (skeep -4)
                                (("1"
                                  (inst + "min(ddp/(2*M),1/2)")
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst - "r" "h")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (invoke
                                           (case "-%1 < M")
                                           (! -1 1 1))
                                          (("1"
                                            (mult-by -1 "h")
                                            (("1"
                                              (case "M*h < ddp")
                                              (("1"
                                                (inst - "r")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (case "h < ddp/M")
                                                  (("1"
                                                    (cross-mult -1)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (-1 1))
                                            (("2"
                                              (grind
                                               :exclude
                                               ("polynomial"
                                                "poly_deriv"))
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (case
                                 "EXISTS (Mp:posreal): FORALL (ii:nat): ii<=n-1 IMPLIES FORALL (h:nnreal): h<=1 IMPLIES abs(polynomial(pseq(ii), nseq(ii))(h)) < Mp")
                                (("1"
                                  (skeep -1)
                                  (("1"
                                    (case
                                     "EXISTS (Mx:posreal): FORALL (r:real): FORALL (ii:nat): ii<=n-1 AND x<=r AND r<=y IMPLIES abs(r^ii) < Mx")
                                    (("1"
                                      (skeep -1)
                                      (("1"
                                        (inst + "n*Mx*Mp")
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (expand "polynomial" + 1)
                                            (("1"
                                              (case
                                               "FORALL (ss:{rr:real|rr=1 OR rr=-1}): FORALL (kp:nat): kp<=n-1 IMPLIES ss*sigma(0, kp,
                                                                                                                                    LAMBDA (i: nat):
                                                                                                                                      polynomial(pseq(i), nseq(i))(h) *
                                                                                                                                       (IF i = 0 THEN 1 ELSE r ^ i ENDIF))
                                                                                                                                              < (kp+1)*Mp * Mx")
                                              (("1"
                                                (inst-cp - "-1")
                                                (("1"
                                                  (inst - "1")
                                                  (("1"
                                                    (inst - "n-1")
                                                    (("1"
                                                      (inst - "n-1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "abs")
                                                          (("1"
                                                            (lift-if)
                                                            (("1"
                                                              (ground)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (skeep)
                                                  (("2"
                                                    (typepred "ss")
                                                    (("2"
                                                      (induct "kp")
                                                      (("1"
                                                        (expand
                                                         "sigma"
                                                         +)
                                                        (("1"
                                                          (expand
                                                           "sigma"
                                                           +)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst
                                                               -3
                                                               "0")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (inst
                                                                   -3
                                                                   "h")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "x")
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "0")
                                                                        (("1"
                                                                          (case
                                                                           "x^0 = 1")
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "abs"
                                                                                 -3)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (case
                                                                                     "Mp < Mp*Mx")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "abs")
                                                                                      (("1"
                                                                                        (lift-if)
                                                                                        (("1"
                                                                                          (ground)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (mult-by
                                                                                       -3
                                                                                       "Mp")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             1)
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skeep)
                                                        (("2"
                                                          (expand
                                                           "sigma"
                                                           +)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (invoke
                                                               (case
                                                                "%1 < Mp*Mx")
                                                               (!
                                                                1
                                                                1
                                                                2))
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (hide
                                                                   -1)
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "r")
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "1+j")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "1+j")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (inst
                                                                               -
                                                                               "h")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (mult-ineq
                                                                                   -3
                                                                                   -4)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "abs_mult"
                                                                                     :dir
                                                                                     rl)
                                                                                    (("1"
                                                                                      (grind
                                                                                       :exclude
                                                                                       ("polynomial"
                                                                                        "poly_deriv"
                                                                                        "^"))
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     (2
                                                                                      3))
                                                                                    (("2"
                                                                                      (grind
                                                                                       :exclude
                                                                                       ("polynomial"
                                                                                        "poly_deriv"
                                                                                        "^"))
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (lemma
                                             "posreal_times_posreal_is_posreal")
                                            (("2" (inst?) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (case
                                         "FORALL (kp:nat): kp<n IMPLIES EXISTS (Mx: posreal):
                                                                              FORALL (r: real):
                                                                                FORALL (ii: nat):
                                                                                  ii <= kp AND x <= r AND r <= y IMPLIES ( abs(x ^ ii) < Mx AND abs(y ^ ii) < Mx)")
                                        (("1"
                                          (inst - "n-1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (skeep -1)
                                              (("1"
                                                (inst + "Mx")
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (inst - "r")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (inst - "ii")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (case
                                                                 "NOT abs(r) <= max(abs(x),abs(y))")
                                                                (("1"
                                                                  (hide-all-but
                                                                   (-4
                                                                    -5
                                                                    1))
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (case
                                                                   "abs(r) = 0")
                                                                  (("1"
                                                                    (case
                                                                     "NOT r = 0")
                                                                    (("1"
                                                                      (hide-all-but
                                                                       (-1
                                                                        1))
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (replace
                                                                       -1)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (case
                                                                           "NOT 0^ii = 0")
                                                                          (("1"
                                                                            (case
                                                                             "ii = 0")
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (case
                                                                                   "x^0 = 1")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "^"
                                                                                     +)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "expt"
                                                                                       +)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide-all-but
                                                                                     1)
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "^"
                                                                               +)
                                                                              (("2"
                                                                                (expand
                                                                                 "expt"
                                                                                 +)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (replace
                                                                             -1)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (lemma
                                                                     "abs_expt")
                                                                    (("2"
                                                                      (case
                                                                       "NOT FORALL (ip: nat, n0x: real): abs(n0x) ^ ip = abs(n0x ^ ip)")
                                                                      (("1"
                                                                        (hide-all-but
                                                                         (-1
                                                                          1))
                                                                        (("1"
                                                                          (skeep)
                                                                          (("1"
                                                                            (case
                                                                             "n0x = 0")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (case
                                                                                     "ip = 0")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("1"
                                                                                        (hide
                                                                                         -)
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "^"
                                                                                         +)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "expt"
                                                                                           +)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (case
                                                                                               "abs(0) = 0")
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide-all-but
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (inst
                                                                               -
                                                                               "ip"
                                                                               "n0x")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         -2)
                                                                        (("2"
                                                                          (rewrite
                                                                           -1
                                                                           :dir
                                                                           rl)
                                                                          (("2"
                                                                            (rewrite
                                                                             -1
                                                                             :dir
                                                                             rl)
                                                                            (("2"
                                                                              (rewrite
                                                                               -1
                                                                               :dir
                                                                               rl)
                                                                              (("2"
                                                                                (hide
                                                                                 -1)
                                                                                (("2"
                                                                                  (invoke
                                                                                   (case
                                                                                    "%1 = %2")
                                                                                   (!
                                                                                    -1
                                                                                    1)
                                                                                   (!
                                                                                    -1
                                                                                    2))
                                                                                  (("1"
                                                                                    (expand
                                                                                     "max")
                                                                                    (("1"
                                                                                      (lift-if)
                                                                                      (("1"
                                                                                        (ground)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (lemma
                                                                                     "both_sides_expt_pos_lt_aux")
                                                                                    (("2"
                                                                                      (case
                                                                                       "ii = 0")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "^")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "expt")
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (inst
                                                                                         -
                                                                                         "ii-1"
                                                                                         "abs(r)"
                                                                                         "max(abs(x),abs(y))")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "^")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "max")
                                                                                              (("1"
                                                                                                (lift-if)
                                                                                                (("1"
                                                                                                  (ground)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil)
                                                                                         ("3"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil)
                                                                                         ("4"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (hide-all-but (-2 -3 1))
                                            (("2"
                                              (induct "kp")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst + "2")
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (case "ii = 0")
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skeep)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (skeep -1)
                                                    (("2"
                                                      (inst
                                                       +
                                                       "max(Mx+1,max(abs(x^(j+1)),abs(y^(j+1)))+1)")
                                                      (("2"
                                                        (skeep)
                                                        (("2"
                                                          (inst - "r")
                                                          (("2"
                                                            (skeep)
                                                            (("2"
                                                              (case
                                                               "ii = 1+j")
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (hide
                                                                     -)
                                                                    (("1"
                                                                      (grind
                                                                       :exclude
                                                                       "^")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (inst
                                                                 -
                                                                 "ii")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (grind
                                                                     :exclude
                                                                     ("abs"
                                                                      "^"))
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (case
                                     "FORALL (ii:nat): ii<=n-1 IMPLIES EXISTS (Mp:posreal): (FORALL (h: nnreal):
                                                             h <= 1 IMPLIES abs(polynomial(pseq(ii), nseq(ii))(h)) < Mp)")
                                    (("1"
                                      (case
                                       "FORALL (kp:nat): kp<=n-1 IMPLIES EXISTS (Mp: posreal):
                                                             FORALL (ii: nat):
                                                               ii <= kp IMPLIES
                                                                (FORALL (h: nnreal):
                                                                   h <= 1 IMPLIES abs(polynomial(pseq(ii), nseq(ii))(h)) < Mp)")
                                      (("1"
                                        (inst - "n-1")
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (induct "kp")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst - "0")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (skeep -1)
                                                  (("1"
                                                    (inst + "Mp")
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (case
                                                           "ii = 0")
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skeep)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (inst -3 "1+j")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (skolem -3 "Mp1j")
                                                    (("2"
                                                      (skeep -1)
                                                      (("2"
                                                        (inst
                                                         +
                                                         "max(Mp,Mp1j)")
                                                        (("2"
                                                          (skeep)
                                                          (("2"
                                                            (case
                                                             "ii = 1+j")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (skeep)
                                                                  (("1"
                                                                    (inst
                                                                     -6
                                                                     "h")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skeep 2)
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "ii")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "h")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide (-3 2))
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (name
                                           "Mp"
                                           "sigma(0,nseq(ii),LAMBDA (jv:nat): abs(pseq(ii)(jv)) + 1)")
                                          (("1"
                                            (case
                                             "FORALL (h: nnreal):
                                                                     h <= 1 IMPLIES abs(polynomial(pseq(ii), nseq(ii))(h)) < Mp")
                                            (("1"
                                              (inst + "Mp")
                                              (("1"
                                                (inst - "1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (lemma "sigma_abs")
                                                  (("2"
                                                    (expand
                                                     "polynomial"
                                                     +)
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (invoke
                                                         (case
                                                          "%1 < Mp")
                                                         (! -1 2))
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide (-1 2))
                                                          (("2"
                                                            (replace
                                                             -2
                                                             :dir
                                                             rl)
                                                            (("2"
                                                              (hide -2)
                                                              (("2"
                                                                (rewrite
                                                                 "sigma_lt")
                                                                (("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (skosimp*)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (lift-if)
                                                                        (("2"
                                                                          (ground)
                                                                          (("2"
                                                                            (case
                                                                             "h = 0")
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (expand
                                                                                 "^"
                                                                                 +)
                                                                                (("1"
                                                                                  (expand
                                                                                   "expt"
                                                                                   +)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "abs"
                                                                                     +
                                                                                     1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (lemma
                                                                               "both_sides_expt_pos_lt_aux")
                                                                              (("2"
                                                                                (inst
                                                                                 -
                                                                                 "n!1-1"
                                                                                 "h"
                                                                                 "1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "^")
                                                                                    (("1"
                                                                                      (case
                                                                                       "h = 1")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "expt_1i")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -
                                                                                               "n!1")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "^"
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (lemma
                                                                                         "expt_1i")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -
                                                                                           "n!1")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "^")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (rewrite
                                                                                                     "abs_mult")
                                                                                                    (("2"
                                                                                                      (invoke
                                                                                                       (case
                                                                                                        "NOT %1 >= 0")
                                                                                                       (!
                                                                                                        -2
                                                                                                        1))
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (invoke
                                                                                                         (case
                                                                                                          "NOT abs(%1) < 1")
                                                                                                         (!
                                                                                                          -3
                                                                                                          1))
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "abs"
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (invoke
                                                                                                           (mult-by
                                                                                                            -1
                                                                                                            "%1")
                                                                                                           (!
                                                                                                            4
                                                                                                            1
                                                                                                            1))
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (flatten)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skosimp*) (("3" (assert) nil nil)) nil))
    nil)
   ((poly_eq_deriv_plus formula-decl nil polynomials nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (y skolem-const-decl "real" polynomials nil)
    (x skolem-const-decl "real" polynomials nil)
    (N skolem-const-decl "posnat" polynomials nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (deer skolem-const-decl "[nat -> real]" polynomials nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (delta skolem-const-decl "posreal" polynomials nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div2 formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (archimedean formula-decl nil real_props nil)
    (c skolem-const-decl "real" polynomials nil)
    (r skolem-const-decl "real" polynomials nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (both_sides_times_pos_gt1 formula-decl nil real_props nil)
    (sigma_nnreal application-judgement "nnreal" sigma_nat nil)
    (sigma_abs formula-decl nil sigma nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (expt_1i formula-decl nil exponentiation nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (subrange type-eq-decl nil integers nil)
    (h skolem-const-decl "nnreal" polynomials nil)
    (sigma_lt formula-decl nil sigma nil)
    (Mp skolem-const-decl "nnreal" polynomials nil)
    (posreal_max application-judgement
     "{z: posreal | z >= x AND z >= y}" real_defs nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (nzrat_abs_is_pos application-judgement "{r: posrat | r >= q}"
     real_defs nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (nnreal_exp application-judgement "nnreal" exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (n0x skolem-const-decl "real" polynomials nil)
    (posreal_expt application-judgement "posreal" exponentiation nil)
    (nnreal_expt application-judgement "nnreal" exponentiation nil)
    (r skolem-const-decl "real" polynomials nil)
    (ii skolem-const-decl "nat" polynomials nil)
    (both_sides_expt_pos_lt_aux formula-decl nil exponentiation nil)
    (abs_expt formula-decl nil exponentiation nil)
    (nonneg_real_max application-judgement
     "{z: nonneg_real | z >= x AND z >= y}" real_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (posreal_times_posreal_is_posreal judgement-tcc nil real_types nil)
    (T_low type-eq-decl nil sigma nil)
    (T_high type-eq-decl nil sigma nil)
    (sigma def-decl "real" sigma nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (lt_times_lt_any1 formula-decl nil extra_real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (abs_mult formula-decl nil real_props nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (n skolem-const-decl "nat" polynomials nil)
    (Mx skolem-const-decl "posreal" polynomials nil)
    (Mp skolem-const-decl "posreal" polynomials nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nnreal type-eq-decl nil real_types nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (n skolem-const-decl "nat" polynomials nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (poly_attains_minimum formula-decl nil polynomials nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (poly_deriv const-decl "real" polynomials nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   nil)
  (poly_strictly_increasing-1 nil 3564745333
   ("" (skeep)
    (("" (lemma "poly_eq_deriv_plus")
      (("" (inst - "a" "n")
        (("" (assert)
          (("" (skeep -1)
            ((""
              (case "EXISTS (delta:posreal): FORALL (c,r:real): x<=r AND r<c AND c<=y AND c-r <= delta IMPLIES polynomial(a,n)(r) < polynomial(a,n)(c)")
              (("1" (skeep -1)
                (("1" (case "EXISTS (N:posnat): (y-x)/N < delta")
                  (("1" (skeep -1)
                    (("1"
                      (name "deer" "LAMBDA (ii:nat): x + ii*((y-x)/N)")
                      (("1"
                        (case "FORALL (ii:nat): ii+1<=N IMPLIES polynomial(a,n)(deer(ii)) < polynomial(a,n)(deer(ii+1))")
                        (("1"
                          (case "FORALL (ii:nat): ii+1<=N IMPLIES polynomial(a,n)(deer(0)) < polynomial(a,n)(deer(ii+1))")
                          (("1" (inst - "N-1")
                            (("1" (assert)
                              (("1"
                                (expand "deer" -1)
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but (-1 1))
                            (("2" (induct "ii")
                              (("1"
                                (assert)
                                (("1"
                                  (inst - "0")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (skeep)
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst - "1+j")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skeep)
                          (("2" (inst -4 "deer(ii+1)" "deer(ii)")
                            (("2" (assert)
                              (("2"
                                (replace 1)
                                (("2"
                                  (hide (1 3))
                                  (("2"
                                    (split +)
                                    (("1"
                                      (case "(y-x)/N >= 0")
                                      (("1"
                                        (mult-by -1 "ii")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "deer" +)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (cross-mult 1) nil nil))
                                      nil)
                                     ("2"
                                      (case "(y-x)/N >= 0")
                                      (("1"
                                        (expand "deer" +)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2" (cross-mult 1) nil nil))
                                      nil)
                                     ("3"
                                      (case "(y-x)/N > 0")
                                      (("1"
                                        (mult-by -2 "(y-x)/N")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "deer" +)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (cross-mult 1) nil nil))
                                      nil)
                                     ("4"
                                      (assert)
                                      (("4"
                                        (expand "deer" +)
                                        (("4" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lemma "archimedean")
                    (("2" (inst - "delta/(y-x)")
                      (("1" (skolem -1 "kkz")
                        (("1" (inst + "kkz")
                          (("1" (cross-mult -1)
                            (("1" (cross-mult 1) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (split)
                          (("1" (cross-mult 1) nil nil)
                           ("2" (cross-mult 1) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2"
                  (case "EXISTS (delta:posreal): FORALL (h:posreal,r:real): h <= delta AND (x<=r AND r+h<=y) IMPLIES polynomial(poly_deriv(a), n - 1)(r) + h*polynomial(LAMBDA (ii: nat): polynomial(pseq(ii), nseq(ii))(h),
                                                                   n - 1)
                                                                  (r) > 0")
                  (("1" (skeep -1)
                    (("1" (inst + "delta")
                      (("1" (skeep)
                        (("1" (inst - "c-r" "r")
                          (("1" (name "h" "c-r")
                            (("1" (replace -1)
                              (("1"
                                (assert)
                                (("1"
                                  (inst - "h" "r")
                                  (("1"
                                    (mult-by -2 "h")
                                    (("1"
                                      (expand "^")
                                      (("1"
                                        (expand "expt")
                                        (("1"
                                          (expand "expt")
                                          (("1"
                                            (expand "expt")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (hide -1)
                      (("2"
                        (case "EXISTS (M:posreal): FORALL (r:real,h:posreal): x<=r AND r<=y AND h<=1 IMPLIES abs(polynomial(LAMBDA (ii: nat):
                                                                      polynomial(pseq(ii), nseq(ii))(h),
                                                                    n - 1)
                                                                   (r)) < M")
                        (("1" (skeep -1)
                          (("1" (skeep -4)
                            (("1" (inst + "min(ddp/(2*M),1/2)")
                              (("1"
                                (skeep)
                                (("1"
                                  (inst - "r" "h")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (invoke
                                       (case "-%1 < M")
                                       (! -1 1 1))
                                      (("1"
                                        (mult-by -1 "h")
                                        (("1"
                                          (case "M*h < ddp")
                                          (("1"
                                            (inst - "r")
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (case "h < ddp/M")
                                              (("1"
                                                (cross-mult -1)
                                                nil
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but (-1 1))
                                        (("2"
                                          (grind
                                           :exclude
                                           ("polynomial" "poly_deriv"))
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2"
                            (case "EXISTS (Mp:posreal): FORALL (ii:nat): ii<=n-1 IMPLIES FORALL (h:nnreal): h<=1 IMPLIES abs(polynomial(pseq(ii), nseq(ii))(h)) < Mp")
                            (("1" (skeep -1)
                              (("1"
                                (case
                                 "EXISTS (Mx:posreal): FORALL (r:real): FORALL (ii:nat): ii<=n-1 AND x<=r AND r<=y IMPLIES abs(r^ii) < Mx")
                                (("1"
                                  (skeep -1)
                                  (("1"
                                    (inst + "n*Mx*Mp")
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (expand "polynomial" + 1)
                                        (("1"
                                          (case
                                           "FORALL (ss:{rr:real|rr=1 OR rr=-1}): FORALL (kp:nat): kp<=n-1 IMPLIES ss*sigma(0, kp,
                                                                         LAMBDA (i: nat):
                                                                           polynomial(pseq(i), nseq(i))(h) *
                                                                            (IF i = 0 THEN 1 ELSE r ^ i ENDIF))
                                                                                   < (kp+1)*Mp * Mx")
                                          (("1"
                                            (inst-cp - "-1")
                                            (("1"
                                              (inst - "1")
                                              (("1"
                                                (inst - "n-1")
                                                (("1"
                                                  (inst - "n-1")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "abs")
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (typepred "ss")
                                                (("2"
                                                  (induct "kp")
                                                  (("1"
                                                    (expand "sigma" +)
                                                    (("1"
                                                      (expand
                                                       "sigma"
                                                       +)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst -3 "0")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst
                                                               -3
                                                               "h")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "x")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "0")
                                                                    (("1"
                                                                      (case
                                                                       "x^0 = 1")
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "abs"
                                                                             -3)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (case
                                                                                 "Mp < Mp*Mx")
                                                                                (("1"
                                                                                  (expand
                                                                                   "abs")
                                                                                  (("1"
                                                                                    (lift-if)
                                                                                    (("1"
                                                                                      (ground)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (mult-by
                                                                                   -3
                                                                                   "Mp")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (skeep)
                                                    (("2"
                                                      (expand
                                                       "sigma"
                                                       +)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (invoke
                                                           (case
                                                            "%1 < Mp*Mx")
                                                           (! 1 1 2))
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (hide -1)
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "r")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "1+j")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "1+j")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "h")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (mult-ineq
                                                                               -3
                                                                               -4)
                                                                              (("1"
                                                                                (rewrite
                                                                                 "abs_mult"
                                                                                 :dir
                                                                                 rl)
                                                                                (("1"
                                                                                  (grind
                                                                                   :exclude
                                                                                   ("polynomial"
                                                                                    "poly_deriv"
                                                                                    "^"))
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 (2
                                                                                  3))
                                                                                (("2"
                                                                                  (grind
                                                                                   :exclude
                                                                                   ("polynomial"
                                                                                    "poly_deriv"
                                                                                    "^"))
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (lemma
                                         "posreal_times_posreal_is_posreal")
                                        (("2" (inst?) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (case
                                     "FORALL (kp:nat): kp<n IMPLIES EXISTS (Mx: posreal):
                         FORALL (r: real):
                           FORALL (ii: nat):
                             ii <= kp AND x <= r AND r <= y IMPLIES ( abs(x ^ ii) < Mx AND abs(y ^ ii) < Mx)")
                                    (("1"
                                      (inst - "n-1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (skeep -1)
                                          (("1"
                                            (inst + "Mx")
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (inst - "r")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (inst - "ii")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (case
                                                             "NOT abs(r) <= max(abs(x),abs(y))")
                                                            (("1"
                                                              (hide-all-but
                                                               (-4
                                                                -5
                                                                1))
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (case
                                                               "abs(r) = 0")
                                                              (("1"
                                                                (case
                                                                 "NOT r = 0")
                                                                (("1"
                                                                  (hide-all-but
                                                                   (-1
                                                                    1))
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (replace
                                                                   -1)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (case
                                                                       "NOT 0^ii = 0")
                                                                      (("1"
                                                                        (case
                                                                         "ii = 0")
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (case
                                                                               "x^0 = 1")
                                                                              (("1"
                                                                                (expand
                                                                                 "^"
                                                                                 +)
                                                                                (("1"
                                                                                  (expand
                                                                                   "expt"
                                                                                   +)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "^"
                                                                           +)
                                                                          (("2"
                                                                            (expand
                                                                             "expt"
                                                                             +)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (replace
                                                                         -1)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (lemma
                                                                 "abs_expt")
                                                                (("2"
                                                                  (case
                                                                   "NOT FORALL (ip: nat, n0x: real): abs(n0x) ^ ip = abs(n0x ^ ip)")
                                                                  (("1"
                                                                    (hide-all-but
                                                                     (-1
                                                                      1))
                                                                    (("1"
                                                                      (skeep)
                                                                      (("1"
                                                                        (case
                                                                         "n0x = 0")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (case
                                                                                 "ip = 0")
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -)
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "^"
                                                                                     +)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "expt"
                                                                                       +)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (case
                                                                                           "abs(0) = 0")
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide-all-but
                                                                                             1)
                                                                                            (("2"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (inst
                                                                           -
                                                                           "ip"
                                                                           "n0x")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     -2)
                                                                    (("2"
                                                                      (rewrite
                                                                       -1
                                                                       :dir
                                                                       rl)
                                                                      (("2"
                                                                        (rewrite
                                                                         -1
                                                                         :dir
                                                                         rl)
                                                                        (("2"
                                                                          (rewrite
                                                                           -1
                                                                           :dir
                                                                           rl)
                                                                          (("2"
                                                                            (hide
                                                                             -1)
                                                                            (("2"
                                                                              (invoke
                                                                               (case
                                                                                "%1 = %2")
                                                                               (!
                                                                                -1
                                                                                1)
                                                                               (!
                                                                                -1
                                                                                2))
                                                                              (("1"
                                                                                (expand
                                                                                 "max")
                                                                                (("1"
                                                                                  (lift-if)
                                                                                  (("1"
                                                                                    (ground)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (lemma
                                                                                 "both_sides_expt_pos_lt_aux")
                                                                                (("2"
                                                                                  (case
                                                                                   "ii = 0")
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "^")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "expt")
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (inst
                                                                                     -
                                                                                     "ii-1"
                                                                                     "abs(r)"
                                                                                     "max(abs(x),abs(y))")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "^")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "max")
                                                                                          (("1"
                                                                                            (lift-if)
                                                                                            (("1"
                                                                                              (ground)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("3"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("4"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (hide-all-but (-2 -3 1))
                                        (("2"
                                          (induct "kp")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst + "2")
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (case "ii = 0")
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skeep)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (skeep -1)
                                                (("2"
                                                  (inst
                                                   +
                                                   "max(Mx+1,max(abs(x^(j+1)),abs(y^(j+1)))+1)")
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (inst - "r")
                                                      (("2"
                                                        (skeep)
                                                        (("2"
                                                          (case
                                                           "ii = 1+j")
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide
                                                                 -)
                                                                (("1"
                                                                  (grind
                                                                   :exclude
                                                                   "^")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (inst
                                                             -
                                                             "ii")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (grind
                                                                 :exclude
                                                                 ("abs"
                                                                  "^"))
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (case
                                 "FORALL (ii:nat): ii<=n-1 IMPLIES EXISTS (Mp:posreal): (FORALL (h: nnreal):
              h <= 1 IMPLIES abs(polynomial(pseq(ii), nseq(ii))(h)) < Mp)")
                                (("1"
                                  (case
                                   "FORALL (kp:nat): kp<=n-1 IMPLIES EXISTS (Mp: posreal):
        FORALL (ii: nat):
          ii <= kp IMPLIES
           (FORALL (h: nnreal):
              h <= 1 IMPLIES abs(polynomial(pseq(ii), nseq(ii))(h)) < Mp)")
                                  (("1"
                                    (inst - "n-1")
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (induct "kp")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst - "0")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (skeep -1)
                                              (("1"
                                                (inst + "Mp")
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (case "ii = 0")
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skeep)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (inst -3 "1+j")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (skolem -3 "Mp1j")
                                                (("2"
                                                  (skeep -1)
                                                  (("2"
                                                    (inst
                                                     +
                                                     "max(Mp,Mp1j)")
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (case
                                                         "ii = 1+j")
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (skeep)
                                                              (("1"
                                                                (inst
                                                                 -6
                                                                 "h")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skeep 2)
                                                          (("2"
                                                            (inst
                                                             -
                                                             "ii")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "h")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide (-3 2))
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (name
                                       "Mp"
                                       "sigma(0,nseq(ii),LAMBDA (jv:nat): abs(pseq(ii)(jv)) + 1)")
                                      (("1"
                                        (case
                                         "FORALL (h: nnreal):
          h <= 1 IMPLIES abs(polynomial(pseq(ii), nseq(ii))(h)) < Mp")
                                        (("1"
                                          (inst + "Mp")
                                          (("1"
                                            (inst - "1")
                                            (("1"
                                              (assert)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (lemma "sigma_abs")
                                              (("2"
                                                (expand "polynomial" +)
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (invoke
                                                     (case "%1 < Mp")
                                                     (! -1 2))
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (hide (-1 2))
                                                      (("2"
                                                        (replace
                                                         -2
                                                         :dir
                                                         rl)
                                                        (("2"
                                                          (hide -2)
                                                          (("2"
                                                            (rewrite
                                                             "sigma_lt")
                                                            (("2"
                                                              (hide 2)
                                                              (("2"
                                                                (skosimp*)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (ground)
                                                                      (("2"
                                                                        (case
                                                                         "h = 0")
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (expand
                                                                             "^"
                                                                             +)
                                                                            (("1"
                                                                              (expand
                                                                               "expt"
                                                                               +)
                                                                              (("1"
                                                                                (expand
                                                                                 "abs"
                                                                                 +
                                                                                 1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (lemma
                                                                           "both_sides_expt_pos_lt_aux")
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "n!1-1"
                                                                             "h"
                                                                             "1")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "^")
                                                                                (("1"
                                                                                  (case
                                                                                   "h = 1")
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "expt_1i")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "n!1")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "^"
                                                                                             -1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (lemma
                                                                                     "expt_1i")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -
                                                                                       "n!1")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "^")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("2"
                                                                                                (rewrite
                                                                                                 "abs_mult")
                                                                                                (("2"
                                                                                                  (invoke
                                                                                                   (case
                                                                                                    "NOT %1 >= 0")
                                                                                                   (!
                                                                                                    -2
                                                                                                    1))
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (invoke
                                                                                                     (case
                                                                                                      "NOT abs(%1) < 1")
                                                                                                     (!
                                                                                                      -3
                                                                                                      1))
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "abs"
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (invoke
                                                                                                       (mult-by
                                                                                                        -1
                                                                                                        "%1")
                                                                                                       (!
                                                                                                        4
                                                                                                        1
                                                                                                        1))
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (flatten)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil (sigma_abs formula-decl nil sigma nil)
    (sigma_lt formula-decl nil sigma nil)
    (T_low type-eq-decl nil sigma nil)
    (T_high type-eq-decl nil sigma nil)
    (sigma def-decl "real" sigma nil))
   shostak))
 (poly_increasing 0
  (poly_increasing-1 nil 3564757870
   (""
    (case "FORALL (a: sequence[real], n: nat, x, y: real): n>0 IMPLIES FORALL (hwy:posreal): LET aa = (LAMBDA (ii:nat): IF ii = 1 THEN a(ii) + hwy ELSE a(ii) ENDIF) IN (x < y AND
                        (FORALL (c):
                           x <= c AND c <= y IMPLIES
                            polynomial(poly_deriv(a), n - 1)(c) >= 0)) IMPLIES polynomial(aa, n)(x) < polynomial(aa, n)(y)")
    (("1" (skeep)
      (("1" (case "NOT x < y")
        (("1" (assert) nil nil)
         ("2" (hide -3)
          (("2" (inst - "a" "n" "x" "y")
            (("2" (replace -3)
              (("2" (name "epp" "y-x")
                (("2"
                  (case "FORALL (hwy:posreal): polynomial(a, n)(x)< polynomial(a, n)(y)+hwy*epp")
                  (("1" (hide (-4 -6))
                    (("1"
                      (inst -
                       "(polynomial(a, n)(x) - polynomial(a, n)(y))/epp")
                      (("1" (assert) nil nil)
                       ("2" (split)
                        (("1" (cross-mult 1) (("1" (assert) nil nil))
                          nil)
                         ("2" (cross-mult 1) (("2" (assert) nil nil))
                          nil))
                        nil)
                       ("3" (assert) nil nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (skeep)
                      (("2" (inst - "hwy")
                        (("2" (skoletin -3)
                          (("2" (assert)
                            (("2" (replace -6)
                              (("2"
                                (name
                                 "dis"
                                 "LAMBDA (ii:nat): IF ii = 1 THEN hwy ELSE 0 ENDIF")
                                (("2"
                                  (case "aa = a + dis")
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (lemma
                                       "sum_polynomial_eq_degree")
                                      (("1"
                                        (inst - "a" "dis" "n")
                                        (("1"
                                          (replace -1 :dir rl)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (case
                                                 "polynomial(dis,n) = LAMBDA (xx:real): xx*hwy")
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "+")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide
                                                   (-1 -2 -3 -4 2))
                                                  (("2"
                                                    (decompose-equality
                                                     +)
                                                    (("2"
                                                      (expand
                                                       "polynomial"
                                                       +)
                                                      (("2"
                                                        (lemma
                                                         "sigma_eq_one_arg")
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (inst
                                                             -
                                                             "1")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (split
                                                                 -)
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (hide
                                                                     -)
                                                                    (("1"
                                                                      (expand
                                                                       "dis")
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (expand
                                                                     "dis")
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("3"
                                                                    (expand
                                                                     "dis")
                                                                    (("3"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2"
                                      (decompose-equality +)
                                      (("2"
                                        (expand "aa")
                                        (("2"
                                          (expand "dis")
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep)
        (("2" (skeep)
          (("2" (skoletin 1)
            (("2" (lemma "poly_strictly_increasing")
              (("2" (assert)
                (("2" (inst - "aa" "n" "x" "y")
                  (("2" (assert)
                    (("2" (flatten)
                      (("2" (assert)
                        (("2" (hide 2)
                          (("2" (skeep)
                            (("2" (inst - "c")
                              (("2"
                                (assert)
                                (("2"
                                  (name
                                   "dis"
                                   "LAMBDA (ii:nat): IF ii = 1 THEN hwy ELSE 0 ENDIF")
                                  (("2"
                                    (case "aa = a + dis")
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (rewrite
                                         "poly_deriv_plus_eval")
                                        (("1"
                                          (expand "+")
                                          (("1"
                                            (invoke
                                             (case "%1=hwy")
                                             (! 1 1 2))
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (hide-all-but 1)
                                              (("2"
                                                (expand "polynomial")
                                                (("2"
                                                  (lemma
                                                   "sigma_eq_one_arg")
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (inst - "0")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (split -)
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (hide -)
                                                              (("1"
                                                                (expand
                                                                 "dis")
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (skosimp*)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (hide 2)
                                                            (("3"
                                                              (skosimp*)
                                                              (("3"
                                                                (expand
                                                                 "dis")
                                                                (("3"
                                                                  (grind
                                                                   :exclude
                                                                   "^")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but 1)
                                      (("2"
                                        (decompose-equality +)
                                        (("2"
                                          (expand "aa")
                                          (("2"
                                            (expand "dis")
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2) (("3" (skosimp*) (("3" (assert) nil nil)) nil))
      nil))
    nil)
   ((poly_strictly_increasing formula-decl nil polynomials nil)
    (aa skolem-const-decl "[nat -> real]" polynomials nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (dis skolem-const-decl "[nat -> real]" polynomials nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (poly_deriv_plus_eval formula-decl nil polynomials nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil)
    (epp skolem-const-decl "real" polynomials nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (a skolem-const-decl "sequence[real]" polynomials nil)
    (n skolem-const-decl "nat" polynomials nil)
    (x skolem-const-decl "real" polynomials nil)
    (y skolem-const-decl "real" polynomials nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[T -> real]" real_fun_ops nil)
    (sum_polynomial_eq_degree formula-decl nil polynomials nil)
    (T_low type-eq-decl nil sigma nil)
    (T_high type-eq-decl nil sigma nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (dis skolem-const-decl "[nat -> real]" polynomials nil)
    (expt def-decl "real" exponentiation nil)
    (sigma_eq_one_arg formula-decl nil sigma nil)
    (aa skolem-const-decl "[nat -> real]" polynomials nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (poly_deriv const-decl "real" polynomials nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   shostak))
 (poly_strictly_decreasing 0
  (poly_strictly_decreasing-1 nil 3564763300
   ("" (skeep)
    (("" (lemma "poly_strictly_increasing")
      (("" (inst - "-a" "n" "x" "y")
        (("" (assert)
          (("" (split -)
            (("1" (lemma "scal_polynomial")
              (("1" (case "-a = (const_fun(-1)*a)")
                (("1" (inst - "a" "n" "-1")
                  (("1" (replace -1)
                    (("1" (replace -2 :dir rl)
                      (("1" (expand "const_fun")
                        (("1" (expand "*") (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1)
                  (("2" (decompose-equality +) (("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp*)
              (("2" (inst - "c!1")
                (("2" (assert)
                  (("2" (assert)
                    (("2"
                      (case "poly_deriv(-a) = const_fun(-1)*poly_deriv(a)")
                      (("1" (replace -1)
                        (("1" (rewrite "scal_polynomial" :dir rl)
                          (("1" (expand "const_fun")
                            (("1" (expand "*") (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1)
                        (("2" (decompose-equality +)
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((poly_strictly_increasing formula-decl nil polynomials nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (poly_deriv const-decl "real" polynomials nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (scal_polynomial formula-decl nil polynomials nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (* const-decl "[T -> real]" real_fun_ops nil)
    (const_fun const-decl "[T -> real]" real_fun_ops nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (- const-decl "[T -> real]" real_fun_ops nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (poly_decreasing 0
  (poly_decreasing-1 nil 3564763542
   ("" (skeep)
    (("" (lemma "poly_increasing")
      (("" (inst - "-a" "n" "x" "y")
        (("" (assert)
          (("" (split -)
            (("1" (lemma "scal_polynomial")
              (("1" (case "-a = (const_fun(-1)*a)")
                (("1" (inst - "a" "n" "-1")
                  (("1" (replace -1)
                    (("1" (replace -2 :dir rl)
                      (("1" (expand "const_fun")
                        (("1" (expand "*") (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1)
                  (("2" (decompose-equality +) (("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp*)
              (("2" (inst - "c!1")
                (("2" (assert)
                  (("2" (assert)
                    (("2"
                      (case "poly_deriv(-a) = const_fun(-1)*poly_deriv(a)")
                      (("1" (replace -1)
                        (("1" (rewrite "scal_polynomial" :dir rl)
                          (("1" (expand "const_fun")
                            (("1" (expand "*") (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1)
                        (("2" (decompose-equality +)
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((poly_increasing formula-decl nil polynomials nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (poly_deriv const-decl "real" polynomials nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (scal_polynomial formula-decl nil polynomials nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (const_fun const-decl "[T -> real]" real_fun_ops nil)
    (* const-decl "[T -> real]" real_fun_ops nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (- const-decl "[T -> real]" real_fun_ops nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (poly_intermediate_value_increasing_0 0
  (poly_intermediate_value_increasing_0-1 nil 3568994808
   ("" (skeep)
    (("" (name "f" "polynomial(a,n)")
      (("" (label "fname" -1)
        (("" (replace -1)
          (("" (case "f(x) = 0")
            (("1" (inst + "x") (("1" (assert) nil nil)) nil)
             ("2" (case "f(y) = 0")
              (("1" (inst + "y") (("1" (assert) nil nil)) nil)
               ("2"
                (name "Aset"
                      "LAMBDA (cc:real): x<=cc AND cc<=y AND f(cc)>=0")
                (("2" (case "nonempty?[real](Aset)")
                  (("1" (name "xc" "glb(Aset)")
                    (("1" (typepred "xc")
                      (("1" (expand "greatest_lower_bound?")
                        (("1" (flatten)
                          (("1" (label "lb" -1)
                            (("1" (label "glbdef" -2)
                              (("1"
                                (case "x<=xc AND xc<=y")
                                (("1"
                                  (inst + "xc")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case "f(xc) < 0")
                                          (("1"
                                            (lemma "poly_continuous")
                                            (("1"
                                              (inst
                                               -
                                               "a"
                                               "n"
                                               "xc"
                                               "-f(xc)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (skeep -1)
                                                  (("1"
                                                    (name
                                                     "nxc"
                                                     "min(y,xc+delta/2)")
                                                    (("1"
                                                      (inst
                                                       "glbdef"
                                                       "nxc")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (case
                                                           "NOT nxc > xc")
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (expand
                                                               "nxc")
                                                              (("1"
                                                                (expand
                                                                 "min"
                                                                 +)
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (ground)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "lower_bound?")
                                                              (("2"
                                                                (skeep)
                                                                (("2"
                                                                  (typepred
                                                                   "s")
                                                                  (("2"
                                                                    (expand
                                                                     "Aset"
                                                                     -1)
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (inst
                                                                         "lb"
                                                                         "s")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "s")
                                                                            (("2"
                                                                              (replace
                                                                               "fname")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (split
                                                                                   -)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "abs")
                                                                                    (("1"
                                                                                      (ground)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (case
                                                                                     "nxc - xc < delta")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "abs")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       2)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "min")
                                                                                        (("2"
                                                                                          (lift-if)
                                                                                          (("2"
                                                                                            (ground)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (lemma "poly_continuous")
                                              (("2"
                                                (inst
                                                 -
                                                 "a"
                                                 "n"
                                                 "xc"
                                                 "f(xc)")
                                                (("2"
                                                  (skeep -1)
                                                  (("2"
                                                    (expand
                                                     "lower_bound?"
                                                     "lb")
                                                    (("2"
                                                      (name
                                                       "nxc"
                                                       "max(x,xc-delta/2)")
                                                      (("2"
                                                        (inst
                                                         "lb"
                                                         "nxc")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "nxc"
                                                             "lb")
                                                            (("1"
                                                              (expand
                                                               "max"
                                                               "lb")
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (ground)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "Aset"
                                                           +)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (case
                                                               "nxc<=xc")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "nxc")
                                                                  (("1"
                                                                    (split
                                                                     -)
                                                                    (("1"
                                                                      (replace
                                                                       "fname")
                                                                      (("1"
                                                                        (expand
                                                                         "abs")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "nxc"
                                                                       1)
                                                                      (("2"
                                                                        (expand
                                                                         "max"
                                                                         +)
                                                                        (("2"
                                                                          (lift-if)
                                                                          (("2"
                                                                            (ground)
                                                                            (("1"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "abs")
                                                                              (("2"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "nxc"
                                                                   1)
                                                                  (("2"
                                                                    (expand
                                                                     "max"
                                                                     +)
                                                                    (("2"
                                                                      (lift-if)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 4)
                                  (("2"
                                    (split)
                                    (("1"
                                      (inst - "x")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide-all-but 2)
                                          (("1"
                                            (expand "Aset")
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "lower_bound?" "lb")
                                      (("2"
                                        (inst - "y")
                                        (("2"
                                          (expand "Aset")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (hide-all-but 1)
                        (("2" (expand "bounded_below?")
                          (("2" (inst + "x")
                            (("2" (expand "Aset")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "nonempty?")
                    (("2" (expand "empty?")
                      (("2" (inst - "y")
                        (("2" (expand "member")
                          (("2" (expand "Aset")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((polynomial const-decl "[real -> real]" polynomials nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (y skolem-const-decl "real" polynomials nil)
    (< const-decl "bool" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (f skolem-const-decl "[real -> real]" polynomials nil)
    (Aset skolem-const-decl "[real -> boolean]" polynomials nil)
    (xc skolem-const-decl "{x | greatest_lower_bound?(x, Aset)}"
     polynomials nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nxc skolem-const-decl "{p: real | p <= y AND p <= delta / 2 + xc}"
     polynomials nil)
    (lower_bound? const-decl "bool" bounded_real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (poly_continuous formula-decl nil polynomials nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (nxc skolem-const-decl "{p: real | p >= x AND p >= xc - delta / 2}"
     polynomials nil)
    (delta skolem-const-decl "posreal" polynomials nil)
    (x skolem-const-decl "real" polynomials nil)
    (glb const-decl "{x | greatest_lower_bound?(x, SB)}"
     bounded_real_defs nil)
    (greatest_lower_bound? const-decl "bool" bounded_real_defs nil)
    (bounded_below? const-decl "bool" bounded_real_defs nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (poly_intermediate_value_inc 0
  (poly_intermediate_value_inc-1 nil 3568996573
   ("" (lemma " poly_intermediate_value_increasing_0")
    (("" (skeep)
      ((""
        (name "aa"
              "LAMBDA (ii:nat): IF ii = 0 THEN a(ii) - c ELSE a(ii) ENDIF")
        ((""
          (case "FORALL (xy:real): polynomial(aa,n)(xy) = polynomial(a,n)(xy)-c")
          (("1" (label "polydef" -1)
            (("1" (inst - "aa" "n" "x" "y")
              (("1" (assert)
                (("1" (split -)
                  (("1" (skeep -1)
                    (("1" (assert)
                      (("1" (inst + "cc")
                        (("1" (assert)
                          (("1" (inst - "cc") (("1" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (inst - "x") (("2" (assert) nil nil)) nil)
                   ("3" (inst - "y") (("3" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide-all-but 1)
            (("2" (skeep)
              (("2" (expand "polynomial")
                (("2" (invoke (name "aasig" "%1") (! 1 1))
                  (("2" (replaces -1)
                    (("2" (lemma "sigma_split")
                      (("2" (inst?)
                        (("2" (inst - "0")
                          (("2" (assert)
                            (("2" (replaces -1)
                              (("2"
                                (expand "sigma" + 1)
                                (("2"
                                  (expand "sigma" + 1)
                                  (("2"
                                    (invoke (name "asig" "%1") (! 1 2))
                                    (("2"
                                      (replaces -1)
                                      (("2"
                                        (expand "aasig")
                                        (("2"
                                          (lemma "sigma_split")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (inst - "0")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (replaces -1)
                                                  (("2"
                                                    (expand
                                                     "sigma"
                                                     +
                                                     1)
                                                    (("2"
                                                      (expand
                                                       "sigma"
                                                       +
                                                       1)
                                                      (("2"
                                                        (expand
                                                         "aa"
                                                         +
                                                         1)
                                                        (("2"
                                                          (expand
                                                           "asig")
                                                          (("2"
                                                            (rewrite
                                                             "sigma_eq")
                                                            (("2"
                                                              (hide 2)
                                                              (("2"
                                                                (expand
                                                                 "aa")
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((polynomial const-decl "[real -> real]" polynomials nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (T_low type-eq-decl nil sigma nil)
    (T_high type-eq-decl nil sigma nil)
    (sigma def-decl "real" sigma nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (sigma_split formula-decl nil sigma nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (asig skolem-const-decl "real" polynomials nil)
    (sigma_eq formula-decl nil sigma nil)
    (aa skolem-const-decl "[nat -> real]" polynomials nil)
    (aasig skolem-const-decl "real" polynomials nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (TRUE const-decl "bool" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sequence type-eq-decl nil sequences nil)
    (poly_intermediate_value_increasing_0 formula-decl nil polynomials
     nil))
   shostak))
 (poly_intermediate_value_dec 0
  (poly_intermediate_value_dec-1 nil 3568997078
   ("" (skeep)
    (("" (lemma "poly_intermediate_value_inc")
      (("" (inst - "-a" "-c" "n" "x" "y")
        (("" (assert)
          (("" (rewrite "neg_polynomial" :dir rl)
            (("" (assert)
              (("" (expand "-")
                (("" (skeep -1)
                  (("" (inst + "cc") (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((poly_intermediate_value_inc formula-decl nil polynomials nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (neg_polynomial formula-decl nil polynomials nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[T -> real]" real_fun_ops nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (poly_Rolle 0
  (poly_Rolle-1 nil 3569003877
   ("" (skeep)
    ((""
      (case "FORALL (aa:[nat->real],nn:nat): (FORALL (c: real):
                      x < c AND c < y IMPLIES polynomial(aa, nn)(c) > 0) IMPLIES (FORALL (c: real):
                      x <= c AND c <= y IMPLIES polynomial(aa, nn)(c) >= 0)")
      (("1"
        (case "NOT FORALL (c: real):
                        x < c AND c < y IMPLIES polynomial(poly_deriv(a), n - 1)(c) > 0")
        (("1"
          (case "NOT FORALL (c: real):
                            x < c AND c < y IMPLIES polynomial(poly_deriv(a), n - 1)(c) < 0")
          (("1" (hide -1)
            (("1" (skosimp*)
              (("1" (case "c!2 <= c!1")
                (("1" (lemma "poly_intermediate_value_inc")
                  (("1" (inst - "poly_deriv(a)" "0" "n-1" "c!2" "c!1")
                    (("1" (assert)
                      (("1" (skosimp*)
                        (("1" (inst + "cc!1") (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil)
                 ("2" (lemma "poly_intermediate_value_dec")
                  (("2" (inst - "poly_deriv(a)" "0" "n-1" "c!1" "c!2")
                    (("1" (assert)
                      (("1" (skosimp*)
                        (("1" (inst + "cc!1") (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide +)
            (("2"
              (case "NOT FORALL (c: real):
                     x <= c AND c <= y IMPLIES polynomial(poly_deriv(a), n - 1)(c) <= 0")
              (("1" (skosimp*)
                (("1" (inst -4 "-poly_deriv(a)" "n-1")
                  (("1" (split -)
                    (("1" (inst - "c!1")
                      (("1" (assert)
                        (("1" (rewrite "neg_polynomial" :dir rl)
                          (("1" (assert)
                            (("1" (expand "-") (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skosimp*)
                      (("2" (rewrite "neg_polynomial" :dir rl)
                        (("2" (expand "-")
                          (("2" (inst - "c!2") (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil)
               ("2" (hide -3)
                (("2" (lemma "poly_decreasing")
                  (("2" (inst - "a" "n" "x" "(x+y)/2")
                    (("2" (assert)
                      (("2" (split -)
                        (("1" (lemma "poly_strictly_decreasing")
                          (("1"
                            (inst - "a" "n" "(x+y)/2"
                             "((x+y)/2 + y)/2")
                            (("1" (assert)
                              (("1"
                                (split -)
                                (("1"
                                  (lemma "poly_decreasing")
                                  (("1"
                                    (inst
                                     -
                                     "a"
                                     "n"
                                     "((x+y)/2+y)/2"
                                     "y")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (inst-cp - "c!1")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skosimp*)
                                  (("2"
                                    (inst - "c!1")
                                    (("2"
                                      (inst - "c!1")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skosimp*)
                          (("2" (inst - "c!1") (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (skosimp*) (("3" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (inst - "poly_deriv(a)" "n-1")
          (("1" (assert)
            (("1" (replace -1)
              (("1" (lemma "poly_increasing")
                (("1" (inst - "a" "n" "x" "(x+y)/2")
                  (("1" (assert)
                    (("1" (split -)
                      (("1" (lemma "poly_strictly_increasing")
                        (("1"
                          (inst - "a" "n" "(x+y)/2" "((x+y)/2 + y)/2")
                          (("1" (assert)
                            (("1" (split -)
                              (("1"
                                (lemma "poly_increasing")
                                (("1"
                                  (inst - "a" "n" "((x+y)/2+y)/2" "y")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (skosimp*)
                                      (("1"
                                        (inst - "c!1")
                                        (("1"
                                          (inst - "c!1")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skosimp*)
                                (("2"
                                  (inst - "c!1")
                                  (("2"
                                    (inst - "c!1")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skosimp*)
                        (("2" (inst - "c!1")
                          (("2" (inst - "c!1") (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil)
         ("3" (skosimp*) (("3" (assert) nil nil)) nil))
        nil)
       ("2" (hide (-3 2))
        (("2" (skosimp*)
          (("2" (lemma "poly_continuous")
            (("2"
              (inst - "aa!1" "nn!1" "c!1"
               "-polynomial(aa!1,nn!1)(c!1)/2")
              (("1" (skosimp*)
                (("1" (assert)
                  (("1"
                    (case "EXISTS (yy:real): x<yy AND yy<y AND abs(c!1-yy)<=delta!1")
                    (("1" (skosimp*)
                      (("1" (inst - "yy!1")
                        (("1" (assert)
                          (("1" (inst - "yy!1")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide (-1 -2 2))
                      (("2" (case "c!1 = x")
                        (("1" (inst + "min(x+delta!1/2,(x+y)/2)")
                          (("1" (assert) (("1" (grind) nil nil)) nil))
                          nil)
                         ("2" (case "c!1=y")
                          (("1" (inst + "max(y-delta!1/2,(x+y)/2)")
                            (("1" (grind) nil nil)) nil)
                           ("2" (inst + "c!1")
                            (("2" (assert)
                              (("2"
                                (assert)
                                (("2"
                                  (expand "abs")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((<= const-decl "bool" reals nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (sequence type-eq-decl nil sequences nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (poly_strictly_increasing formula-decl nil polynomials nil)
    (poly_increasing formula-decl nil polynomials nil)
    (poly_intermediate_value_dec formula-decl nil polynomials nil)
    (poly_intermediate_value_inc formula-decl nil polynomials nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (n skolem-const-decl "nat" polynomials nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[T -> real]" real_fun_ops nil)
    (neg_polynomial formula-decl nil polynomials nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (poly_decreasing formula-decl nil polynomials nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (poly_strictly_decreasing formula-decl nil polynomials nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (poly_deriv const-decl "real" polynomials nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (aa!1 skolem-const-decl "[nat -> real]" polynomials nil)
    (nn!1 skolem-const-decl "nat" polynomials nil)
    (c!1 skolem-const-decl "real" polynomials nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (poly_continuous formula-decl nil polynomials nil))
   shostak))
 (poly_mean_value_TCC1 0
  (poly_mean_value_TCC1-1 nil 3569089923 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (poly_mean_value subtype
    "((number_fields.-)(polynomials.y, polynomials.x))" "nznum")))
 (poly_mean_value 0
  (poly_mean_value-1 nil 3569089924
   ("" (skeep)
    (("" (case "n = 1")
      (("1" (replace -1)
        (("1" (assert)
          (("1" (expand "polynomial")
            (("1" (expand "sigma")
              (("1" (expand "sigma")
                (("1" (expand "sigma")
                  (("1" (expand "poly_deriv")
                    (("1" (expand "^")
                      (("1" (expand "expt")
                        (("1" (expand "expt")
                          (("1" (assert)
                            (("1" (inst + "x") (("1" (field) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2"
        (name "qq"
              "(polynomial(a, n)(y) - polynomial(a, n)(x)) / (y - x)")
        (("1"
          (name "qsub"
                "LAMBDA (ii:nat): IF ii = 0 THEN polynomial(a,n)(x) - x*qq ELSIF ii = 1 THEN qq ELSE 0 ENDIF")
          (("1"
            (case "NOT (FORALL (yy:real): polynomial(qsub,n)(yy) = polynomial(a,n)(x) + qq*(yy-x))")
            (("1" (hide-all-but (1 2 -4))
              (("1" (skeep)
                (("1" (expand "polynomial" + 1)
                  (("1" (lemma "sigma_split")
                    (("1" (inst?)
                      (("1" (inst - "1")
                        (("1" (assert)
                          (("1" (invoke (case "NOT %1 = 0") (! -1 2 2))
                            (("1" (rewrite "sigma_restrict_eq_0")
                              (("1"
                                (skosimp*)
                                (("1"
                                  (expand "qsub")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (replaces -1)
                              (("2"
                                (assert)
                                (("2"
                                  (replaces -1)
                                  (("2"
                                    (expand "sigma")
                                    (("2"
                                      (expand "sigma")
                                      (("2"
                                        (expand "sigma")
                                        (("2"
                                          (expand "qsub")
                                          (("2"
                                            (expand "^")
                                            (("2"
                                              (expand "expt")
                                              (("2"
                                                (expand "expt")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (name "asub" "a-qsub")
              (("2" (lemma "poly_Rolle")
                (("2" (inst - "asub" "n" "x" "y")
                  (("2" (assert)
                    (("2" (split -)
                      (("1" (skeep -)
                        (("1" (inst + "c")
                          (("1" (assert)
                            (("1" (replace -4 :dir rl)
                              (("1"
                                (rewrite "poly_deriv_sub")
                                (("1"
                                  (rewrite "polynomial_sub")
                                  (("1"
                                    (case
                                     "FORALL (aa,bb:real): (aa-bb = 0) IFF (aa = bb)")
                                    (("1"
                                      (expand "-")
                                      (("1"
                                        (rewrite -1 -4)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (replace -3)
                                            (("1"
                                              (expand "polynomial" + 1)
                                              (("1"
                                                (lemma "sigma_split")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (inst - "0")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (invoke
                                                         (case
                                                          "NOT %1 = 0")
                                                         (! -1 2 2))
                                                        (("1"
                                                          (rewrite
                                                           "sigma_restrict_eq_0")
                                                          (("1"
                                                            (skosimp*)
                                                            (("1"
                                                              (hide-all-but
                                                               1)
                                                              (("1"
                                                                (typepred
                                                                 "i!1")
                                                                (("1"
                                                                  (expand
                                                                   "qsub")
                                                                  (("1"
                                                                    (grind
                                                                     :exclude
                                                                     "^")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (replaces -1)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (replaces
                                                               -1)
                                                              (("2"
                                                                (expand
                                                                 "sigma"
                                                                 +)
                                                                (("2"
                                                                  (expand
                                                                   "sigma"
                                                                   +)
                                                                  (("2"
                                                                    (expand
                                                                     "poly_deriv")
                                                                    (("2"
                                                                      (expand
                                                                       "qsub")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but 1)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (replace -1 :dir rl)
                        (("2" (rewrite "polynomial_sub")
                          (("2" (expand "-")
                            (("2" (inst-cp -2 "x")
                              (("2"
                                (replaces -3)
                                (("2"
                                  (inst - "y")
                                  (("2"
                                    (replaces -2)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "qq" 1)
                                        (("2" (field) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sigma def-decl "real" sigma nil)
    (^ const-decl "real" exponentiation nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (div_cancel4 formula-decl nil real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (expt def-decl "real" exponentiation nil)
    (poly_deriv const-decl "real" polynomials nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[T -> real]" real_fun_ops nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (polynomial_sub formula-decl nil polynomials nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (subrange type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (poly_deriv_sub formula-decl nil polynomials nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel2 formula-decl nil real_props nil)
    (qq skolem-const-decl "real" polynomials nil)
    (poly_Rolle formula-decl nil polynomials nil)
    (T_low type-eq-decl nil sigma nil)
    (T_high type-eq-decl nil sigma nil)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (sigma_restrict_eq_0 formula-decl nil sigma nil)
    (qsub skolem-const-decl "[nat -> real]" polynomials nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sigma_split formula-decl nil sigma nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sequence type-eq-decl nil sequences nil))
   shostak))
 (poly_integral_TCC1 0
  (poly_integral_TCC1-1 nil 3569170349 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (poly_integral subtype "(number_fields.-)(polynomials.n, 1)"
    "nat")))
 (poly_integral_TCC2 0
  (poly_integral_TCC2-1 nil 3569321861 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil))
   nil (poly_integral subtype "polynomials.n" "nznum")))
 (polynomial_int_sum 0
  (polynomial_int_sum-1 nil 3569171886
   ("" (skeep)
    (("" (expand "polynomial_int")
      ((""
        (case "poly_integral(a+b,0) = poly_integral(a,0) + poly_integral(b,0)")
        (("1" (replaces -1)
          (("1" (lemma "sum_polynomial_eq_degree")
            (("1" (rewrite -1 :dir rl)
              (("1" (hide -1)
                (("1" (assert)
                  (("1" (grind :exclude ("polynomial" "poly_integral"))
                    nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (decompose-equality) (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((polynomial_int const-decl "real" polynomials nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (sum_polynomial_eq_degree formula-decl nil polynomials nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sequence type-eq-decl nil sequences nil)
    (poly_integral const-decl "real" polynomials nil)
    (+ const-decl "[T -> real]" real_fun_ops nil))
   shostak))
 (polynomial_ftc 0
  (polynomial_ftc-1 nil 3569170350
   ("" (skeep)
    (("" (expand "polynomial")
      (("" (rewrite "sigma_minus")
        (("" (expand "polynomial_int")
          (("" (expand "polynomial")
            (("" (rewrite "sigma_minus")
              (("" (rewrite "sigma_eq")
                (("" (hide 2)
                  (("" (skosimp*) (("" (grind :exclude "^") nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((polynomial const-decl "[real -> real]" polynomials nil)
    (polynomial_int const-decl "real" polynomials nil)
    (poly_deriv const-decl "real" polynomials nil)
    (poly_integral const-decl "real" polynomials nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sigma_eq formula-decl nil sigma nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T_low type-eq-decl nil sigma nil)
    (T_high type-eq-decl nil sigma nil)
    (<= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (sequence type-eq-decl nil sequences nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sigma_minus formula-decl nil sigma nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil))
   shostak))
 (antideriv_power_linear 0
  (antideriv_power_linear-1 nil 3569258640
   ("" (skeep)
    (("" (expand "poly_deriv")
      (("" (expand "power_linear")
        (("" (decompose-equality 2)
          (("1" (name "kk" "1+n")
            (("1" (replace -1)
              (("1" (assert)
                (("1" (expand "*")
                  (("1" (assert)
                    (("1" (lift-if)
                      (("1" (lift-if)
                        (("1" (lift-if)
                          (("1" (assert)
                            (("1" (ground)
                              (("1"
                                (name "dd" "1+x!1")
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (case "r^dd = r*r^x!1")
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (case
                                           "C(kk,dd)*(1+x!1) = kk*C(n,x!1)")
                                          (("1"
                                            (cross-mult 2)
                                            (("1"
                                              (cross-mult 2)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (field)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 3)
                                            (("2"
                                              (replace -1)
                                              (("2"
                                                (expand "C")
                                                (("2"
                                                  (expand
                                                   "factorial"
                                                   +
                                                   1)
                                                  (("2"
                                                    (expand
                                                     "factorial"
                                                     +
                                                     2)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (field)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 3)
                                        (("2"
                                          (lemma "expt_plus")
                                          (("2"
                                            (inst - "x!1" "1" "r")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (case "r^1 = r")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (grind) nil nil) ("3" (grind) nil nil)
           ("4" (grind) nil nil) ("5" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (poly_deriv const-decl "real" polynomials nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (/= const-decl "boolean" notequal nil)
    (r skolem-const-decl "real" polynomials nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (n skolem-const-decl "nat" polynomials nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (c skolem-const-decl "real" polynomials nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[T -> real]" real_fun_ops nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (C const-decl "posnat" binomial nil)
    (^ const-decl "real" exponentiation nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (expt def-decl "real" exponentiation nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (expt_plus formula-decl nil exponentiation nil)
    (TRUE const-decl "bool" booleans nil)
    (cross_mult formula-decl nil real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (factorial def-decl "posnat" factorial "ints/")
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (times_div2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (div_div2 formula-decl nil real_props nil)
    (div_distributes formula-decl nil real_props nil)
    (div_cancel3 formula-decl nil real_props nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (times_div1 formula-decl nil real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (power_linear const-decl "real" polynomials nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (poly_local_max_deriv 0
  (poly_local_max_deriv-2 nil 3618843773
   ("" (skeep)
    (("" (lemma "poly_continuous")
      ((""
        (case "FORALL (eggy:posreal): EXISTS (y): abs(x-y)<eggy AND polynomial(poly_deriv(a),n-1)(y)>=0")
        (("1"
          (case "FORALL (eggy:posreal): EXISTS (y): abs(x-y)<eggy AND polynomial(poly_deriv(a),n-1)(y)<=0")
          (("1" (inst - "poly_deriv(a)" "n-1" "x" _)
            (("1" (case "polynomial(poly_deriv(a),n-1)(x)>0")
              (("1" (inst -4 "polynomial(poly_deriv(a),n-1)(x)/2")
                (("1" (skeep)
                  (("1" (inst - "delta")
                    (("1" (skeep)
                      (("1" (inst -5 "y")
                        (("1" (assert)
                          (("1" (expand "abs")
                            (("1" (lift-if)
                              (("1" (ground) nil)))))))))))))))
                 ("2" (assert) nil) ("3" (assert) nil)))
               ("2" (inst -3 "-polynomial(poly_deriv(a),n-1)(x)/2")
                (("1" (skeep)
                  (("1" (inst -2 "delta")
                    (("1" (assert)
                      (("1" (skeep)
                        (("1" (inst -4 "y")
                          (("1" (assert)
                            (("1" (expand "abs" -4)
                              (("1" (ground) nil)))))))))))))))
                 ("2" (assert) nil) ("3" (assert) nil)))
               ("3" (assert) nil)))
             ("2" (assert) nil)))
           ("2" (hide (-1 -2 2))
            (("2" (skeep)
              (("2" (inst - "x+min(epsil,eggy)/2")
                (("2" (assert)
                  (("2" (split)
                    (("1" (lemma "poly_mean_value")
                      (("1" (inst - "a" "n" "x" "x+min(epsil,eggy)/2")
                        (("1" (assert)
                          (("1" (skeep)
                            (("1" (assert)
                              (("1"
                                (inst + "cc")
                                (("1"
                                  (split)
                                  (("1" (grind) nil)
                                   ("2"
                                    (replace -3)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (cross-mult 1)
                                        nil)))))))))))))))))))
                     ("2" (expand "abs")
                      (("2" (assert) nil)))))))))))))))
         ("2" (hide (-1 2))
          (("2" (skeep)
            (("2" (inst - "x-min(epsil,eggy)/2")
              (("2" (assert)
                (("2" (split)
                  (("1" (lemma "poly_mean_value")
                    (("1" (inst - "a" "n" "x-min(epsil,eggy)/2" "x")
                      (("1" (assert)
                        (("1" (skeep)
                          (("1" (assert)
                            (("1" (inst + "cc")
                              (("1"
                                (split)
                                (("1" (grind) nil)
                                 ("2"
                                  (replace -3)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (cross-mult 1)
                                      nil)))))))))))))))))))
                   ("2" (expand "abs") (("2" (assert) nil)))))))))))))
         ("3" (skosimp*) (("3" (assert) nil))))))))
    nil)
   ((poly_continuous formula-decl nil polynomials nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (div_mult_pos_ge2 formula-decl nil real_props nil)
    (<= const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (x skolem-const-decl "real" polynomials nil)
    (a skolem-const-decl "sequence[real]" polynomials nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (n skolem-const-decl "nat" polynomials nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (poly_mean_value formula-decl nil polynomials nil)
    (sigma def-decl "real" sigma nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div1 formula-decl nil real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (poly_deriv const-decl "real" polynomials nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil)
  (poly_local_max_deriv-1 nil 3618842543
   ("" (skeep)
    (("" (lemma "poly_continuous")
      ((""
        (case "FORALL (eggy:posreal): EXISTS (y): abs(x-y)<eggy AND polynomial(poly_deriv(a),n-1)(y)>=0")
        (("1"
          (case "FORALL (eggy:posreal): EXISTS (y): abs(x-y)<eggy AND polynomial(poly_deriv(a),n-1)(y)<=0")
          (("1" (inst - "poly_deriv(a)" "n-1" "x" _)
            (("1" (case "polynomial(poly_deriv(a),n-1)(x)>0")
              (("1" (inst -4 "polynomial(poly_deriv(a),n-1)(x)/2")
                (("1" (skeep)
                  (("1" (inst - "delta")
                    (("1" (skeep)
                      (("1" (inst -5 "y")
                        (("1" (assert)
                          (("1" (expand "abs")
                            (("1" (lift-if) (("1" (ground) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil) ("3" (assert) nil nil))
                nil)
               ("2" (inst -3 "-polynomial(poly_deriv(a),n-1)(x)/2")
                (("1" (skeep)
                  (("1" (inst -2 "delta")
                    (("1" (assert)
                      (("1" (skeep)
                        (("1" (inst -4 "y")
                          (("1" (assert)
                            (("1" (expand "abs" -4)
                              (("1" (ground) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil) ("3" (assert) nil nil))
                nil)
               ("3" (assert) nil nil))
              nil)
             ("2" (assert) nil nil))
            nil)
           ("2" (hide (-1 -2 2))
            (("2" (skeep)
              (("2" (inst - "x+min(epsil,eggy)/2")
                (("2" (assert)
                  (("2" (split)
                    (("1" (lemma "poly_mean_value")
                      (("1" (inst - "a" "n" "x" "x+min(epsil,eggy)/2")
                        (("1" (assert)
                          (("1" (skeep)
                            (("1" (assert)
                              (("1"
                                (inst + "cc")
                                (("1"
                                  (split)
                                  (("1" (grind) nil nil)
                                   ("2"
                                    (replace -3)
                                    (("2"
                                      (assert)
                                      (("2" (cross-mult 1) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "abs") (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide (-1 2))
          (("2" (skeep)
            (("2" (inst - "x-min(epsil,eggy)/2")
              (("2" (assert)
                (("2" (split)
                  (("1" (lemma "poly_mean_value")
                    (("1" (inst - "a" "n" "x-min(epsil,eggy)/2" "x")
                      (("1" (assert)
                        (("1" (skeep)
                          (("1" (assert)
                            (("1" (inst + "cc")
                              (("1"
                                (split)
                                (("1" (grind) nil nil)
                                 ("2"
                                  (replace -3)
                                  (("2"
                                    (assert)
                                    (("2" (cross-mult 1) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "abs") (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (skosimp*) (("3" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((sigma def-decl "real" sigma nil)) shostak))
 (poly_local_min_deriv 0
  (poly_local_min_deriv-1 nil 3618843803
   ("" (skeep)
    (("" (lemma "poly_local_max_deriv")
      (("" (inst - "-a" "n" "x" "epsil")
        (("" (assert)
          (("" (split -)
            (("1" (lemma "poly_deriv_scal")
              (("1" (inst - "a" "-1")
                (("1" (case "(-1)*a = -a")
                  (("1" (replaces -1)
                    (("1" (replaces -1)
                      (("1" (rewrite "scal_polynomial2")
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (decompose-equality 1)
                    (("2" (expand "*")
                      (("2" (expand "-") (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (skeep)
                (("2" (inst - "y")
                  (("2" (assert)
                    (("2" (rewrite "neg_polynomial" :dir rl)
                      (("2" (expand "-") (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((poly_local_max_deriv formula-decl nil polynomials nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (neg_polynomial formula-decl nil polynomials nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (poly_deriv_scal formula-decl nil polynomials nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (* const-decl "[T -> real]" real_fun_ops nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (scal_polynomial2 formula-decl nil polynomials nil)
    (poly_deriv const-decl "real" polynomials nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[T -> real]" real_fun_ops nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (polynomial_integration_by_parts 0
  (polynomial_integration_by_parts-1 nil 3569172032
   ("" (skeep)
    (("" (case "FORALL (aa,bb,cc:real): aa+cc = bb IMPLIES aa=bb-cc")
      (("1" (rewrite -1)
        (("1" (hide (-1 2))
          (("1" (rewrite "polynomial_int_sum")
            (("1" (expand "polynomial_int")
              (("1" (rewrite "polynomial_prod_def")
                (("1" (rewrite "polynomial_prod_def")
                  (("1"
                    (case "NOT FORALL (ap,bp:[nat->real],nn:posnat): polynomial(poly_deriv(ap),nn-1) = polynomial(poly_deriv(bp),nn-1) IMPLIES (polynomial(ap,nn)(y)-polynomial(ap,nn)(x)) = (polynomial(bp,nn)(y) - polynomial(bp,nn)(x))")
                    (("1" (hide-all-but 1)
                      (("1" (skeep)
                        (("1" (rewrite "polynomial_eq_coeff" -1)
                          (("1" (expand "polynomial")
                            (("1" (rewrite "sigma_minus")
                              (("1"
                                (rewrite "sigma_minus")
                                (("1"
                                  (rewrite "sigma_eq")
                                  (("1"
                                    (hide 2)
                                    (("1"
                                      (skosimp*)
                                      (("1"
                                        (case "n!1 = 0")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (case "ap(n!1) = bp(n!1)")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (hide 3)
                                              (("2"
                                                (inst - "n!1-1")
                                                (("2"
                                                  (expand "poly_deriv")
                                                  (("2"
                                                    (mult-by 1 "n!1")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (rewrite -1)
                      (("2" (hide 2)
                        (("2" (hide -1)
                          (("2" (decompose-equality)
                            (("2" (rewrite "poly_product_rule")
                              (("2"
                                (assert)
                                (("2"
                                  (rewrite "polynomial_prod_def")
                                  (("2"
                                    (rewrite "polynomial_prod_def")
                                    (("2"
                                      (rewrite
                                       "sum_polynomial_eq_degree_eval")
                                      (("2"
                                        (case
                                         "NOT FORALL (aaseq:[nat->real]): poly_deriv(poly_integral(aaseq,0)) = aaseq")
                                        (("1"
                                          (hide 2)
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (decompose-equality)
                                              (("1"
                                                (expand
                                                 "poly_deriv"
                                                 :assert?
                                                 none)
                                                (("1"
                                                  (expand
                                                   "poly_integral"
                                                   :assert?
                                                   none)
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (split +)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (name
                                                           "egv1"
                                                           "x!2+1")
                                                          (("2"
                                                            (replace
                                                             -1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (cross-mult
                                                                 2)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (rewrite -1) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert) nil nil) ("3" (assert) nil nil)
         ("4" (assert) nil nil))
        nil)
       ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
      nil))
    nil)
   ((- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[T -> real]" real_fun_ops nil)
    (poly_integral const-decl "real" polynomials nil)
    (poly_product_rule formula-decl nil polynomials nil)
    (sum_polynomial_eq_degree_eval formula-decl nil polynomials nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (div_cancel3 formula-decl nil real_props nil)
    (times_div1 formula-decl nil real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (polynomial_eq_coeff formula-decl nil polynomials nil)
    (T_low type-eq-decl nil sigma nil)
    (T_high type-eq-decl nil sigma nil)
    (<= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (sigma_minus formula-decl nil sigma nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sigma_eq formula-decl nil sigma nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (subrange type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (polynomial_prod_def formula-decl nil polynomials nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (polynomial_int_sum formula-decl nil polynomials nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (poly_deriv const-decl "real" polynomials nil)
    (polynomial_prod const-decl "real" polynomials nil)
    (polynomial_int const-decl "real" polynomials nil)
    (sequence type-eq-decl nil sequences nil)
    (n skolem-const-decl "nat" polynomials nil)
    (m skolem-const-decl "nat" polynomials nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (poly_maclaurin_TCC1 0
  (poly_maclaurin_TCC1-1 nil 3570268970 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (poly_maclaurin subtype
    "(number_fields.-)(polynomials.k, polynomials.n)" "nat")))
 (poly_maclaurin 0
  (poly_maclaurin-2 nil 3570268847
   ("" (skeep)
    (("" (name "fk" "polynomial(a,k)")
      (("" (label "fkname" -1)
        (("" (replace "fkname")
          (("" (name "fn1" "polynomial(a,n-1)")
            (("1" (label "fn1name" -1)
              (("1" (replace "fn1name")
                (("1" (assert)
                  (("1"
                    (name "Ffun"
                          "LAMBDA (x:real): fk(br) - sigma(0,n-1,LAMBDA (ii:nat): IF ii<=k THEN (polynomial(poly_n_deriv(a,ii),k-ii)(x)/factorial(ii))*(br-x)^ii ELSE 0 ENDIF)")
                    (("1"
                      (case "EXISTS (c: real):
                                                                                                                                            0 <= c AND
                                                                                                                                             c <= br AND Ffun(0) = polynomial(poly_n_deriv(a, n), k - n)(c) * br ^ n *
                                                                                                                                                 (1 / factorial(n))")
                      (("1" (skeep -1)
                        (("1" (inst + "c")
                          (("1" (assert)
                            (("1" (replace -3 :dir rl)
                              (("1"
                                (expand "Ffun" +)
                                (("1"
                                  (invoke
                                   (case "%1 = %2")
                                   (! 1 2 1)
                                   (! 1 2 2))
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (expand "fn1" +)
                                      (("2"
                                        (expand "polynomial" +)
                                        (("2"
                                          (rewrite "sigma_eq")
                                          (("1"
                                            (hide 2)
                                            (("1"
                                              (skosimp*)
                                              (("1"
                                                (invoke
                                                 (case "%1 = %2")
                                                 (! 1 1 1)
                                                 (! 1 2 1))
                                                (("1"
                                                  (invoke
                                                   (case "%1 = %2")
                                                   (! 1 1 1)
                                                   (! 1 2 1))
                                                  (("1"
                                                    (replaces
                                                     -1
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (ground)
                                                        (("1"
                                                          (replaces -1)
                                                          (("1"
                                                            (hide -)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (lemma
                                                     "sigma_eq_one_arg")
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (inst - "0")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (split -)
                                                            (("1"
                                                              (replaces
                                                               -1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "poly_n_deriv"
                                                                   +)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (case
                                                                       "C(n!1,n!1) = 1")
                                                                      (("1"
                                                                        (replaces
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "C"
                                                                         1)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (skosimp*)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (hide 2)
                                                              (("3"
                                                                (hide
                                                                 -)
                                                                (("3"
                                                                  (skosimp*)
                                                                  (("3"
                                                                    (grind
                                                                     :exclude
                                                                     "poly_n_deriv")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (hide -)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2"
                          (name "gg"
                                "LAMBDA (x:real): Ffun(x) - ((br-x)/br)^n*Ffun(0)")
                          (("2" (case "NOT (gg(0) = 0 AND gg(br) = 0)")
                            (("1" (hide (-2 2))
                              (("1"
                                (split +)
                                (("1"
                                  (expand "gg" +)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (rewrite "expt_1i")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "gg" +)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (lemma "expt_eq_0")
                                      (("2"
                                        (inst - "n" "0")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (replaces -1)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "Ffun" +)
                                                (("2"
                                                  (lemma
                                                   "sigma_eq_one_arg")
                                                  (("2"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst - "0")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (split -)
                                                            (("1"
                                                              (replaces
                                                               -1)
                                                              (("1"
                                                                (expand
                                                                 "^"
                                                                 +)
                                                                (("1"
                                                                  (expand
                                                                   "expt"
                                                                   +)
                                                                  (("1"
                                                                    (case
                                                                     "poly_n_deriv(a,0) = a")
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       2)
                                                                      (("2"
                                                                        (hide
                                                                         -)
                                                                        (("2"
                                                                          (decompose-equality)
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (skosimp*)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (hide 2)
                                                              (("3"
                                                                (skosimp*)
                                                                (("3"
                                                                  (expand
                                                                   "^")
                                                                  (("3"
                                                                    (expand
                                                                     "expt")
                                                                    (("3"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (case
                                 "EXISTS (fpoly:[nat->real]): Ffun=polynomial(fpoly,k) AND FORALL (x:real): polynomial(poly_deriv(fpoly),k-1)(x) = -(polynomial(poly_n_deriv(a,n),k-n)(x)/factorial(n-1))*(br-x)^(n-1)")
                                (("1"
                                  (name
                                   "g2"
                                   "(Ffun(0)/br^n)*power_linear(br,-1,n)")
                                  (("1"
                                    (label "g2name" -1)
                                    (("1"
                                      (skeep -2)
                                      (("1"
                                        (case
                                         "NOT gg = polynomial(fpoly-g2,k)")
                                        (("1"
                                          (hide 2)
                                          (("1"
                                            (decompose-equality +)
                                            (("1"
                                              (rewrite
                                               "polynomial_sub")
                                              (("1"
                                                (replace -2 + :dir rl)
                                                (("1"
                                                  (expand "-")
                                                  (("1"
                                                    (replace
                                                     -1
                                                     +
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (lemma
                                                       "scal_polynomial")
                                                      (("1"
                                                        (inst
                                                         -
                                                         "power_linear(br,-1,n)"
                                                         "k"
                                                         _)
                                                        (("1"
                                                          (inst
                                                           -
                                                           "(Ffun(0)/br^n)")
                                                          (("1"
                                                            (decompose-equality
                                                             -1)
                                                            (("1"
                                                              (inst
                                                               -
                                                               "x!1")
                                                              (("1"
                                                                (invoke
                                                                 (case
                                                                  "NOT %1 = %2")
                                                                 (!
                                                                  -1
                                                                  2)
                                                                 (!
                                                                  1
                                                                  2
                                                                  2))
                                                                (("1"
                                                                  (hide
                                                                   (-1
                                                                    2))
                                                                  (("1"
                                                                    (invoke
                                                                     (case
                                                                      "%1 = %2")
                                                                     (!
                                                                      1
                                                                      1
                                                                      0
                                                                      1)
                                                                     (!
                                                                      1
                                                                      2
                                                                      0
                                                                      1))
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("2"
                                                                        (decompose-equality)
                                                                        (("2"
                                                                          (expand
                                                                           "const_fun")
                                                                          (("2"
                                                                            (expand
                                                                             "*")
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (replaces
                                                                   -1)
                                                                  (("2"
                                                                    (replace
                                                                     -1
                                                                     :dir
                                                                     rl)
                                                                    (("2"
                                                                      (expand
                                                                       "gg"
                                                                       +)
                                                                      (("2"
                                                                        (expand
                                                                         "*"
                                                                         +)
                                                                        (("2"
                                                                          (rewrite
                                                                           "power_linear_polynomial"
                                                                           :dir
                                                                           rl)
                                                                          (("2"
                                                                            (expand
                                                                             "const_fun")
                                                                            (("2"
                                                                              (rewrite
                                                                               "div_expt")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "^"
                                                                                       +)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "expt"
                                                                                         +)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma "poly_Rolle")
                                          (("2"
                                            (inst
                                             -
                                             "fpoly-g2"
                                             "k"
                                             "0"
                                             "br")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (skeep -1)
                                                  (("2"
                                                    (inst + "c")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (rewrite
                                                         "poly_deriv_sub")
                                                        (("2"
                                                          (rewrite
                                                           "polynomial_sub")
                                                          (("2"
                                                            (expand
                                                             "-"
                                                             -3)
                                                            (("2"
                                                              (inst
                                                               -
                                                               "c")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (replace
                                                                   -7)
                                                                  (("2"
                                                                    (replace
                                                                     "g2name"
                                                                     -3
                                                                     :dir
                                                                     rl)
                                                                    (("2"
                                                                      (rewrite
                                                                       "poly_deriv_scal"
                                                                       -3)
                                                                      (("2"
                                                                        (rewrite
                                                                         "scal_polynomial2")
                                                                        (("2"
                                                                          (rewrite
                                                                           "deriv_power_linear")
                                                                          (("2"
                                                                            (case
                                                                             "max(n-1,0) = n-1")
                                                                            (("1"
                                                                              (replaces
                                                                               -1)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "scal_polynomial2")
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "power_linear_polynomial"
                                                                                     :dir
                                                                                     rl)
                                                                                    (("1"
                                                                                      (case
                                                                                       "NOT polynomial(poly_n_deriv(a, n), k - n)(c) / factorial(n - 1) = n*Ffun(0) / br ^ n")
                                                                                      (("1"
                                                                                        (mult-by
                                                                                         1
                                                                                         "(br-c)^(n-1)")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (lemma
                                                                                           "nzreal_expt")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -
                                                                                             "n-1"
                                                                                             "br-c")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "^")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (cross-mult
                                                                                         -1)
                                                                                        (("2"
                                                                                          (cross-mult
                                                                                           1)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "factorial"
                                                                                             +)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "max"
                                                                               1)
                                                                              (("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma "nzreal_expt")
                                    (("2"
                                      (inst - "n" "br")
                                      (("2"
                                        (expand "^")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (name
                                     "Fdfun"
                                     "LAMBDA (nn:nat): (LAMBDA (x: real):
                                                                                                               fk(br) -
                                                                                                                sigma(0, nn,
                                                                                                                      LAMBDA (ii: nat):
                                                                                                                        IF ii <= k
                                                                                                                          THEN (polynomial(poly_n_deriv(a, ii), k - ii)(x) /
                                                                                                                                 factorial(ii))
                                                                                                                                * (br - x) ^ ii
                                                                                                                        ELSE 0
                                                                                                                        ENDIF))")
                                    (("2"
                                      (case "NOT Ffun = Fdfun(n-1)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "Fdfun" 1)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case
                                         "FORALL (nn:nat): nn+1<=k IMPLIES EXISTS (fpoly: [nat -> real]):
                                                                                                                          Fdfun(nn) = polynomial(fpoly, k) AND
                                                                                                                           (FORALL (x: real):
                                                                                                                              polynomial(poly_deriv(fpoly), k - 1)(x) =
                                                                                                                               -(polynomial(poly_n_deriv(a, nn+1), k - nn-1)(x) / factorial(nn))
                                                                                                                                * (br - x) ^ (nn))")
                                        (("1"
                                          (inst - "n-1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replaces -2 :dir rl)
                                              nil
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (induct "nn")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (name
                                                   "fbseq"
                                                   "LaMBDA (ii:nat): IF ii = 0 THEN fk(br) ELSE 0 ENDIF")
                                                  (("1"
                                                    (inst + "fbseq-a")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (case
                                                         "NOT Fdfun(0) = polynomial(fbseq-a,k)")
                                                        (("1"
                                                          (hide -8)
                                                          (("1"
                                                            (decompose-equality)
                                                            (("1"
                                                              (rewrite
                                                               "polynomial_sub")
                                                              (("1"
                                                                (expand
                                                                 "-"
                                                                 +)
                                                                (("1"
                                                                  (expand
                                                                   "Fdfun"
                                                                   +)
                                                                  (("1"
                                                                    (expand
                                                                     "sigma"
                                                                     +)
                                                                    (("1"
                                                                      (expand
                                                                       "sigma"
                                                                       +)
                                                                      (("1"
                                                                        (rewrite
                                                                         "expt_x0")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (case
                                                                             "NOT FORALL (aa,bb,cc,dd:real): aa=cc AND bb=dd IMPLIES aa-bb=cc-dd")
                                                                            (("1"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (rewrite
                                                                               -1)
                                                                              (("1"
                                                                                (hide
                                                                                 (-1
                                                                                  2))
                                                                                (("1"
                                                                                  (expand
                                                                                   "polynomial"
                                                                                   +)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "sigma_eq_one_arg")
                                                                                    (("1"
                                                                                      (inst?)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "0")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (split
                                                                                             -)
                                                                                            (("1"
                                                                                              (replaces
                                                                                               -1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "fbseq"
                                                                                                 +)
                                                                                                (("1"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (skosimp*)
                                                                                              nil
                                                                                              nil)
                                                                                             ("3"
                                                                                              (skosimp*)
                                                                                              (("3"
                                                                                                (expand
                                                                                                 "fbseq"
                                                                                                 1)
                                                                                                (("3"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (lemma
                                                                                 "poly_n_deriv_def")
                                                                                (("2"
                                                                                  (inst?)
                                                                                  (("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (skeep)
                                                            (("2"
                                                              (rewrite
                                                               "expt_x0")
                                                              (("2"
                                                                (rewrite
                                                                 "poly_deriv_sub")
                                                                (("2"
                                                                  (rewrite
                                                                   "polynomial_sub"
                                                                   +)
                                                                  (("2"
                                                                    (lemma
                                                                     "poly_n_deriv_def")
                                                                    (("2"
                                                                      (inst?)
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (replace
                                                                           -2)
                                                                          (("2"
                                                                            (expand
                                                                             "-"
                                                                             +)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (invoke
                                                                                 (case
                                                                                  "%1 = 0")
                                                                                 (!
                                                                                  1
                                                                                  1
                                                                                  1))
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (hide-all-but
                                                                                     1)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "polynomial")
                                                                                      (("2"
                                                                                        (rewrite
                                                                                         "sigma_restrict_eq_0")
                                                                                        (("2"
                                                                                          (hide
                                                                                           2)
                                                                                          (("2"
                                                                                            (skosimp*)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "poly_deriv")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "fbseq")
                                                                                                (("2"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skeep)
                                              (("2"
                                                (hide -8)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (skeep -1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (name
                                                         "dpoly"
                                                         "-(1/factorial(1 + j))*polynomial_prod(poly_n_deriv(a, 1 + j),-1-j+k,power_linear(br,-1,j+1),j+1)")
                                                        (("2"
                                                          (inst
                                                           +
                                                           "fpoly+dpoly")
                                                          (("2"
                                                            (case
                                                             "NOT Fdfun(1 + j) = polynomial(fpoly + dpoly, k)")
                                                            (("1"
                                                              (hide 2)
                                                              (("1"
                                                                (decompose-equality)
                                                                (("1"
                                                                  (rewrite
                                                                   "sum_polynomial_eq_degree_eval"
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (case
                                                                     "NOT Fdfun(1+j)(x!1) = Fdfun(j)(x!1) - (IF 1+j <= k
                                                                                                                                 THEN (polynomial(poly_n_deriv(a, 1+j), k - j - 1)(x!1) /
                                                                                                                                        factorial(1+j))
                                                                                                                                       * (br - x!1) ^ (1+j)
                                                                                                                               ELSE 0
                                                                                                                               ENDIF)")
                                                                    (("1"
                                                                      (hide
                                                                       (-3
                                                                        2))
                                                                      (("1"
                                                                        (expand
                                                                         "Fdfun"
                                                                         +)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "sigma"
                                                                             +
                                                                             1)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (replaces
                                                                       -1)
                                                                      (("2"
                                                                        (replaces
                                                                         -2
                                                                         :dir
                                                                         rl)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (hide
                                                                             (-5))
                                                                            (("2"
                                                                              (hide
                                                                               -1)
                                                                              (("2"
                                                                                (expand
                                                                                 "dpoly"
                                                                                 +)
                                                                                (("2"
                                                                                  (rewrite
                                                                                   "scal_polynomial2")
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     "polynomial_prod_def"
                                                                                     :dir
                                                                                     rl)
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "power_linear_polynomial"
                                                                                       :dir
                                                                                       rl)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (skeep)
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "x")
                                                                  (("2"
                                                                    (case
                                                                     "NOT poly_deriv(fpoly+dpoly) = poly_deriv(fpoly) + poly_deriv(dpoly)")
                                                                    (("1"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("1"
                                                                        (decompose-equality)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (replaces
                                                                       -1)
                                                                      (("2"
                                                                        (rewrite
                                                                         "sum_polynomial_eq_degree_eval"
                                                                         :dir
                                                                         rl)
                                                                        (("2"
                                                                          (replaces
                                                                           -4)
                                                                          (("2"
                                                                            (hide
                                                                             -2)
                                                                            (("2"
                                                                              (expand
                                                                               "dpoly"
                                                                               +)
                                                                              (("2"
                                                                                (rewrite
                                                                                 "poly_deriv_scal")
                                                                                (("2"
                                                                                  (rewrite
                                                                                   "scal_polynomial2")
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     "poly_product_rule")
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "power_linear_polynomial"
                                                                                       :dir
                                                                                       rl)
                                                                                      (("2"
                                                                                        (rewrite
                                                                                         "deriv_power_linear")
                                                                                        (("2"
                                                                                          (rewrite
                                                                                           "scal_polynomial2")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "max")
                                                                                            (("2"
                                                                                              (rewrite
                                                                                               "power_linear_polynomial"
                                                                                               :dir
                                                                                               rl)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (case
                                                                                                   "(1+j)/factorial(1+j) = 1/factorial(j)")
                                                                                                  (("1"
                                                                                                    (mult-by
                                                                                                     -1
                                                                                                     "polynomial(poly_n_deriv(a, 1 + j), -1 - j + k)(x) * (br - x) ^ j")
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (case
                                                                                                         "NOT 1 / factorial(j) *
                                                                 (polynomial(poly_n_deriv(a, 1 + j), -1 - j + k)(x) * (br - x) ^ j) = -(-(polynomial(poly_n_deriv(a, 1 + j), -1 - j + k)(x) / factorial(j))
                                                                  * (br - x) ^ j)")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (replace
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (invoke
                                                                                                               (name
                                                                                                                "aad4"
                                                                                                                "%1")
                                                                                                               (!
                                                                                                                1
                                                                                                                1
                                                                                                                1
                                                                                                                1))
                                                                                                              (("2"
                                                                                                                (replaces
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (lemma
                                                                                                                   "poly_n_deriv_def")
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "a")
                                                                                                                    (("2"
                                                                                                                      (flatten)
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -
                                                                                                                         "1+j")
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (cross-mult
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "factorial"
                                                                                                         +
                                                                                                         3)
                                                                                                        (("2"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (hide 2)
                                              (("3"
                                                (hide -)
                                                (("3"
                                                  (skosimp*)
                                                  (("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("4"
                                              (assert)
                                              (("4"
                                                (hide -)
                                                (("4"
                                                  (skosimp*)
                                                  (("4"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (hide-all-but 1)
                                          (("3"
                                            (skosimp*)
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1)
                      (("2" (skosimp*) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((polynomial const-decl "[real -> real]" polynomials nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fn1 skolem-const-decl "[real -> real]" polynomials nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sigma_eq formula-decl nil sigma nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (C const-decl "posnat" binomial nil)
    (factorial_0 formula-decl nil factorial "ints/")
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (sigma_eq_one_arg formula-decl nil sigma nil)
    (expt def-decl "real" exponentiation nil)
    (TRUE const-decl "bool" booleans nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (subrange type-eq-decl nil integers nil)
    (Ffun skolem-const-decl "[real -> real]" polynomials nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Fdfun skolem-const-decl "[nat -> [real -> real]]" polynomials nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[T -> real]" real_fun_ops nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (both_sides_times1_imp formula-decl nil extra_real_props nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (poly_product_rule formula-decl nil polynomials nil)
    (sum_polynomial_eq_degree_eval formula-decl nil polynomials nil)
    (polynomial_prod_def formula-decl nil polynomials nil)
    (dpoly skolem-const-decl "[nat -> real]" polynomials nil)
    (polynomial_prod const-decl "real" polynomials nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (sigma_restrict_eq_0 formula-decl nil sigma nil)
    (fbseq skolem-const-decl "[nat -> real]" polynomials nil)
    (poly_n_deriv_def formula-decl nil polynomials nil)
    (expt_x0 formula-decl nil exponentiation nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (* const-decl "[T -> real]" real_fun_ops nil)
    (power_linear const-decl "real" polynomials nil)
    (poly_Rolle formula-decl nil polynomials nil)
    (poly_deriv_scal formula-decl nil polynomials nil)
    (deriv_power_linear formula-decl nil polynomials nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nzreal_expt judgement-tcc nil exponentiation nil)
    (br skolem-const-decl "real" polynomials nil)
    (c skolem-const-decl "real" polynomials nil)
    (n skolem-const-decl "nat" polynomials nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (times_div1 formula-decl nil real_props nil)
    (div_cancel4 formula-decl nil real_props nil)
    (times_div2 formula-decl nil real_props nil)
    (div_cancel3 formula-decl nil real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (scal_polynomial2 formula-decl nil polynomials nil)
    (poly_deriv_sub formula-decl nil polynomials nil)
    (polynomial_sub formula-decl nil polynomials nil)
    (scal_polynomial formula-decl nil polynomials nil)
    (power_linear_polynomial formula-decl nil polynomials nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (div_expt formula-decl nil exponentiation nil)
    (* const-decl "[T -> real]" real_fun_ops nil)
    (const_fun const-decl "[T -> real]" real_fun_ops nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[T -> real]" real_fun_ops nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (poly_deriv const-decl "real" polynomials nil)
    (expt_eq_0 formula-decl nil exponentiation nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (k skolem-const-decl "nat" polynomials nil)
    (gg skolem-const-decl "[real -> real]" polynomials nil)
    (expt_1i formula-decl nil exponentiation nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (T_low type-eq-decl nil sigma nil)
    (T_high type-eq-decl nil sigma nil)
    (sigma def-decl "real" sigma nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (poly_n_deriv const-decl "real" polynomials nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (factorial def-decl "posnat" factorial "ints/")
    (^ const-decl "real" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   nil)
  (poly_maclaurin-1 nil 3569263097
   ("" (induct "m")
    (("1" (assert) nil nil)
     ("2" (skeep)
      (("2" (assert)
        (("2" (rewrite "polynomial_n0")
          (("2" (assert)
            (("2" (assert)
              (("2"
                (case "NOT power_linear(x,-1,0) = (LAMBDA (ii:nat): IF ii = 0 THEN 1 ELSE 0 ENDIF)")
                (("1" (hide-all-but 1)
                  (("1" (decompose-equality) (("1" (grind) nil nil))
                    nil))
                  nil)
                 ("2" (replace -1)
                  (("2" (case "NOT max(n-1,0) = n-1")
                    (("1" (expand "max") (("1" (propax) nil nil)) nil)
                     ("2" (replaces -1)
                      (("2" (assert)
                        (("2" (rewrite "polynomial_eq_a0_plus" 1)
                          (("2"
                            (case "FORALL (aa,bb,cc,dd:real): aa = cc AND bb=dd IMPLIES aa+bb=cc+dd")
                            (("1" (rewrite -1)
                              (("1"
                                (hide 2)
                                (("1"
                                  (case
                                   "FORALL (egr:real): (1)*egr = egr")
                                  (("1"
                                    (rewrite -1)
                                    (("1"
                                      (expand "polynomial" + 1)
                                      (("1"
                                        (rewrite "sigma_scal" :dir rl)
                                        (("1"
                                          (invoke
                                           (case
                                            "NOT %1 = poly_n_deriv(a,1)")
                                           (! 1 2 1))
                                          (("1"
                                            (hide 2)
                                            (("1"
                                              (expand "poly_n_deriv")
                                              (("1"
                                                (decompose-equality)
                                                (("1"
                                                  (expand
                                                   "polynomial_prod")
                                                  (("1"
                                                    (expand "max")
                                                    (("1"
                                                      (lemma
                                                       "sigma_split")
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (inst
                                                           -
                                                           "x!1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (split -)
                                                              (("1"
                                                                (invoke
                                                                 (case
                                                                  "%1 = 0")
                                                                 (!
                                                                  -1
                                                                  2
                                                                  1))
                                                                (("1"
                                                                  (replaces
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         "sigma")
                                                                        (("1"
                                                                          (expand
                                                                           "sigma")
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   (-1
                                                                    2))
                                                                  (("2"
                                                                    (rewrite
                                                                     "sigma_restrict_eq_0")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "sigma")
                                                                  (("2"
                                                                    (inst
                                                                     -6
                                                                     "1+x!1")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (replaces -1)
                                            (("2"
                                              (hide -1)
                                              (("2"
                                                (expand
                                                 "polynomial_int")
                                                (("2"
                                                  (expand "polynomial")
                                                  (("2"
                                                    (rewrite
                                                     "sigma_minus")
                                                    (("2"
                                                      (invoke
                                                       (name
                                                        "egvd1"
                                                        "%1")
                                                       (! 1 1))
                                                      (("2"
                                                        (replace -1)
                                                        (("2"
                                                          (lemma
                                                           "sigma_split")
                                                          (("2"
                                                            (label
                                                             "egname"
                                                             -2)
                                                            (("2"
                                                              (hide
                                                               "egname")
                                                              (("2"
                                                                (inst?)
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "0")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (invoke
                                                                       (case
                                                                        "%1 = 0")
                                                                       (!
                                                                        -1
                                                                        2
                                                                        1))
                                                                      (("1"
                                                                        (replaces
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (replaces
                                                                             -1)
                                                                            (("1"
                                                                              (expand
                                                                               "egvd1")
                                                                              (("1"
                                                                                (rewrite
                                                                                 "sigma_shift_fun_eq")
                                                                                (("1"
                                                                                  (hide
                                                                                   2)
                                                                                  (("1"
                                                                                    (skosimp*)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (case
                                                                                         "0^(1+i!1) = 0")
                                                                                        (("1"
                                                                                          (replaces
                                                                                           -1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "poly_integral")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "poly_n_deriv")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     "C_1")
                                                                                                    (("1"
                                                                                                      (lift-if)
                                                                                                      (("1"
                                                                                                        (ground)
                                                                                                        (("1"
                                                                                                          (replaces
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (hide
                                                                                                               -)
                                                                                                              (("1"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (lemma
                                                                                                           "expt_plus")
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "1"
                                                                                                             "i!1"
                                                                                                             "x")
                                                                                                            (("1"
                                                                                                              (replaces
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (case
                                                                                                                 "x^1 = x")
                                                                                                                (("1"
                                                                                                                  (replaces
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (hide
                                                                                                                       -)
                                                                                                                      (("1"
                                                                                                                        (field)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide-all-but
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (grind)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (flatten)
                                                                                                              (("2"
                                                                                                                (replaces
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (hide
                                                                                                                   -)
                                                                                                                  (("2"
                                                                                                                    (grind)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide-all-but
                                                                                           1)
                                                                                          (("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         (-1
                                                                          2))
                                                                        (("2"
                                                                          (rewrite
                                                                           "sigma_restrict_eq_0")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep)
      (("3" (skeep)
        (("3" (inst - "a" "n" "x" "k")
          (("3" (assert)
            (("3" (replace -4)
              (("3" (lemma "polynomial_integration_by_parts")
                (("3" (name "u" "poly_n_deriv(a,2+j)")
                  (("3" (replace -1)
                    (("3" (name "dv" "power_linear(x,-1,1+j)")
                      (("3" (replace -1)
                        (("3" (lemma "antideriv_power_linear")
                          (("3" (inst - "x" "1+j" "-1")
                            (("3" (assert)
                              (("3"
                                (replaces -1 :dir rl)
                                (("3"
                                  (invoke (name "v" "%1") (! -1 1 1))
                                  (("3"
                                    (replaces -1)
                                    (("3"
                                      (replace -1 + :dir rl)
                                      (("3"
                                        (inst?)
                                        (("3"
                                          (inst - "0" "x")
                                          (("3"
                                            (assert)
                                            (("3"
                                              (case
                                               "max(-2 - j + n, 0) > 0")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "max")
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (ground)
                                                      (("1"
                                                        (replace -2)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replaces
                                                             -1
                                                             +)
                                                            (("1"
                                                              (case
                                                               "NOT polynomial(a,1+j)(x) = polynomial(a,j)(x) + a(1+j)*x^(1+j)")
                                                              (("1"
                                                                (hide-all-but
                                                                 1)
                                                                (("1"
                                                                  (expand
                                                                   "polynomial")
                                                                  (("1"
                                                                    (expand
                                                                     "sigma"
                                                                     +
                                                                     1)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (replace
                                                                 -1)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (rewrite
                                                                     "polynomial_x0")
                                                                    (("2"
                                                                      (rewrite
                                                                       "polynomial_x0")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (postpone)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (postpone)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (postpone) nil nil) ("5" (postpone) nil nil))
    nil)
   nil shostak))
 (taylor_poly_TCC1 0
  (taylor_poly_TCC1-1 nil 3570287991 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (taylor_poly subtype
    "(number_fields.-)(polynomials.k, polynomials.d)" "nat")))
 (taylor_poly_TCC2 0
  (taylor_poly_TCC2-1 nil 3570287991 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (taylor_poly subtype
    "((number_fields.-)(polynomials.d, polynomials.i))"
    "{i: integers.int | booleans.OR(((number_fields.-)(polynomials.rr)) /= 0, reals.>=(i, 0))}")))
 (taylor_poly_def_TCC1 0
  (taylor_poly_def_TCC1-1 nil 3570287991 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (C const-decl "posnat" binomial nil)
    (poly_n_deriv const-decl "real" polynomials nil)
    (^ const-decl "real" exponentiation nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (taylor_poly const-decl "real" polynomials nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (taylor_poly_def subtype
    "(number_fields.-)((number_fields.-)(polynomials.k, polynomials.n), 1)"
    "nat")))
 (taylor_poly_def_TCC2 0
  (taylor_poly_def_TCC2-1 nil 3570287991 ("" (subtype-tcc) nil nil)
   ((C const-decl "posnat" binomial nil)
    (poly_n_deriv const-decl "real" polynomials nil)
    (^ const-decl "real" exponentiation nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (taylor_poly const-decl "real" polynomials nil)
    (/= const-decl "boolean" notequal nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil))
   nil
   (taylor_poly_def subtype "((number_fields.+)(polynomials.n, 1))"
    "{i: integers.int | booleans.OR(((number_fields.-)(polynomials.x, polynomials.rr)) /= 0, reals.>=(i, 0))}")))
 (taylor_poly_def 0
  (taylor_poly_def-1 nil 3570290493
   ("" (skeep)
    (("" (invoke (case "NOT %1") (! 1 1))
      (("1" (hide 2)
        (("1" (expand "polynomial" + 1)
          (("1" (lemma "sigma_split")
            (("1" (inst?)
              (("1" (inst - "0")
                (("1" (assert)
                  (("1" (invoke (case "%1 = 0") (! -1 2 2))
                    (("1" (replaces -1)
                      (("1" (assert)
                        (("1" (replaces -1)
                          (("1" (expand "sigma")
                            (("1" (expand "sigma")
                              (("1"
                                (expand "taylor_poly")
                                (("1"
                                  (expand "sigma")
                                  (("1"
                                    (expand "sigma")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lemma "poly_n_deriv_def")
                                        (("1"
                                          (inst - "a")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (replaces -1)
                                              (("1"
                                                (hide -)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "^")
                                                    (("1"
                                                      (expand "expt")
                                                      (("1"
                                                        (expand "C")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1)
                      (("2" (rewrite "sigma_restrict_eq_0")
                        (("2" (hide 2)
                          (("2" (skosimp*)
                            (("2" (expand "taylor_poly")
                              (("2"
                                (expand "sigma")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (assert)
        (("2" (skeep)
          (("2" (lemma "binomial_theorem")
            (("2" (inst - "1+n" "x" "-rr")
              (("2" (replace -1)
                (("2" (hide -1)
                  (("2" (lemma "sigma_split")
                    (("2" (inst?)
                      (("1" (inst - "n")
                        (("1" (assert)
                          (("1" (replaces -1)
                            (("1" (expand "sigma" + 2)
                              (("1"
                                (expand "sigma" + 2)
                                (("1"
                                  (case "C(1+n,1+n)=1 AND (-rr)^0 = 1")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (replace -2)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (invoke
                                             (name "cc" "%1")
                                             (! 1 2 3 2))
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (rewrite
                                                 "sigma_scal_right"
                                                 :dir
                                                 rl)
                                                (("1"
                                                  (expand
                                                   "polynomial"
                                                   +
                                                   1)
                                                  (("1"
                                                    (lemma
                                                     "sigma_split")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (inst - "1+n")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (invoke
                                                             (case
                                                              "NOT %1 = 0")
                                                             (!
                                                              -1
                                                              2
                                                              2))
                                                            (("1"
                                                              (hide
                                                               (-1 2))
                                                              (("1"
                                                                (rewrite
                                                                 "sigma_restrict_eq_0")
                                                                (("1"
                                                                  (hide
                                                                   2)
                                                                  (("1"
                                                                    (skosimp*)
                                                                    (("1"
                                                                      (typepred
                                                                       "i!1")
                                                                      (("1"
                                                                        (expand
                                                                         "taylor_poly"
                                                                         +)
                                                                        (("1"
                                                                          (expand
                                                                           "sigma"
                                                                           +)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (replaces
                                                               -1)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (replaces
                                                                   -1)
                                                                  (("2"
                                                                    (expand
                                                                     "polynomial"
                                                                     +
                                                                     1)
                                                                    (("2"
                                                                      (lemma
                                                                       "sigma_split")
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "LAMBDA (i: nat):
               taylor_poly(a, k, n, rr)(i) *
                (IF i = 0 THEN 1 ELSE x ^ i ENDIF)"
                                                                         _
                                                                         _
                                                                         _)
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "n")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (invoke
                                                                                 (case
                                                                                  "NOT %1 = 0")
                                                                                 (!
                                                                                  -1
                                                                                  2
                                                                                  2))
                                                                                (("1"
                                                                                  (hide
                                                                                   (-1
                                                                                    2))
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "sigma_restrict_eq_0")
                                                                                    (("1"
                                                                                      (hide
                                                                                       2)
                                                                                      (("1"
                                                                                        (skosimp*)
                                                                                        (("1"
                                                                                          (typepred
                                                                                           "i!1")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "taylor_poly"
                                                                                             +)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "sigma"
                                                                                               +)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (replaces
                                                                                       -1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "sigma"
                                                                                           +
                                                                                           1)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (rewrite
                                                                                               "sigma_sum")
                                                                                              (("1"
                                                                                                (case
                                                                                                 "FORALL (vt,uva,pretense,kind:real): vt = kind AND uva = pretense IMPLIES vt + uva = kind+pretense")
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     2)
                                                                                                    (("1"
                                                                                                      (rewrite
                                                                                                       "sigma_eq")
                                                                                                      (("1"
                                                                                                        (hide
                                                                                                         2)
                                                                                                        (("1"
                                                                                                          (skosimp*)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (typepred
                                                                                                               "n!1")
                                                                                                              (("1"
                                                                                                                (case
                                                                                                                 "taylor_poly(a, k, 1 + n, rr)(n!1) = (C(1 + n, n!1) * (-rr) ^ (1 - n!1 + n)) * cc + taylor_poly(a, k, n, rr)(n!1)")
                                                                                                                (("1"
                                                                                                                  (mult-by
                                                                                                                   -1
                                                                                                                   "x^n!1")
                                                                                                                  (("1"
                                                                                                                    (case
                                                                                                                     "(IF n!1 = 0 THEN 1 ELSE x^n!1 ENDIF) = x^n!1")
                                                                                                                    (("1"
                                                                                                                      (replaces
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (hide-all-but
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (lift-if)
                                                                                                                        (("2"
                                                                                                                          (ground)
                                                                                                                          (("2"
                                                                                                                            (replaces
                                                                                                                             -1)
                                                                                                                            (("2"
                                                                                                                              (grind)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide
                                                                                                                   2)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "taylor_poly"
                                                                                                                     +)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "sigma"
                                                                                                                       +
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide-all-but
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (skosimp*)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("3"
                                                                                                        (skosimp*)
                                                                                                        (("3"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "taylor_poly"
                                                                                                       +)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "sigma"
                                                                                                         +)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "sigma"
                                                                                                           +)
                                                                                                          (("2"
                                                                                                            (replace
                                                                                                             -2)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "C")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("3"
                                                                                                    (hide-all-but
                                                                                                     1)
                                                                                                    (("3"
                                                                                                      (skosimp*)
                                                                                                      (("3"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("4"
                                                                                                    (hide-all-but
                                                                                                     1)
                                                                                                    (("4"
                                                                                                      (skosimp*)
                                                                                                      (("4"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide-all-but
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (skosimp*)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide-all-but
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (skosimp*)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("3"
                                                                                                (hide-all-but
                                                                                                 1)
                                                                                                (("3"
                                                                                                  (skosimp*)
                                                                                                  (("3"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (skosimp*)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide-all-but 1)
                                                  (("3"
                                                    (skosimp*)
                                                    (("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2"
                                      (expand "C")
                                      (("2"
                                        (assert)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1)
                        (("2" (skosimp*) (("2" (assert) nil nil)) nil))
                        nil)
                       ("3" (hide-all-but 1)
                        (("3" (skosimp*) (("3" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (taylor_poly const-decl "real" polynomials nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (<= const-decl "bool" reals nil)
    (T_high type-eq-decl nil sigma nil)
    (T_low type-eq-decl nil sigma nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sigma_restrict_eq_0 formula-decl nil sigma nil)
    (TRUE const-decl "bool" booleans nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (factorial_0 formula-decl nil factorial "ints/")
    (expt def-decl "real" exponentiation nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (C const-decl "posnat" binomial nil)
    (poly_n_deriv_def formula-decl nil polynomials nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sigma def-decl "real" sigma nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sigma_split formula-decl nil sigma nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil)
    (n skolem-const-decl "nat" polynomials nil)
    (rr skolem-const-decl "real" polynomials nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (sigma_sum formula-decl nil sigma nil)
    (sigma_eq formula-decl nil sigma nil)
    (both_sides_times1_imp formula-decl nil extra_real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (subrange type-eq-decl nil integers nil)
    (sigma_scal_right formula-decl nil sigma nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (poly_n_deriv const-decl "real" polynomials nil)
    (factorial def-decl "posnat" factorial "ints/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (binomial_theorem formula-decl nil polynomials nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (poly_taylor_TCC1 0
  (poly_taylor_TCC1-1 nil 3570319504 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (poly_taylor subtype
    "(number_fields.-)(polynomials.k, polynomials.n)" "nat")))
 (poly_taylor_TCC2 0
  (poly_taylor_TCC2-1 nil 3570319504 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (poly_taylor subtype "polynomials.n"
    "{i: integers.int | booleans.OR(((number_fields.-)(polynomials.x, polynomials.y)) /= 0, reals.>=(i, 0))}")))
 (poly_taylor 0
  (poly_taylor-1 nil 3570319505
   ("" (lemma "poly_maclaurin")
    ((""
      (case "NOT FORALL (a: sequence[real], n, k: nat, br: real):
                      (k >= n AND
                        n > 0 AND (FORALL (ii: nat): ii > k IMPLIES a(ii) = 0))
                       IMPLIES
                       (EXISTS (c: real):
                          ((0 <= c AND
                           c <= br) OR (br<=c AND c<=0)) AND
                            LET fk = polynomial(a, k), fn1 = polynomial(a, n - 1) IN
                              fk(br) =
                               fn1(br) +
                                (1 / factorial(n)) *
                                 polynomial(poly_n_deriv(a, n), k - n)(c)
                                 * br ^ n)")
      (("1" (hide 2)
        (("1" (skeep)
          (("1" (case "br > 0")
            (("1" (inst -5 "a" "n" "k" "br")
              (("1" (assert)
                (("1" (replace -4)
                  (("1" (skosimp*)
                    (("1" (inst + "c!1") (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (case "br = 0")
              (("1" (replaces -1)
                (("1" (assert)
                  (("1" (inst + "0")
                    (("1" (assert)
                      (("1" (case "NOT 0^n=0")
                        (("1" (hide-all-but 1) (("1" (grind) nil nil))
                          nil)
                         ("2" (replace -1)
                          (("2" (assert)
                            (("2" (expand "polynomial" + 1)
                              (("2"
                                (lemma "sigma_eq_one_arg")
                                (("2"
                                  (inst?)
                                  (("2"
                                    (inst - "0")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (split -)
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (expand "polynomial" +)
                                            (("1"
                                              (lemma
                                               "sigma_eq_one_arg")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (inst - "0")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (hide-all-but 1)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2" (grind) nil nil))
                                          nil)
                                         ("3"
                                          (hide-all-but 1)
                                          (("3" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (case "br < 0")
                (("1" (hide (1 2))
                  (("1" (name "bb" "LAMBDA (ii:nat): (-1)^ii * a(ii)")
                    (("1" (inst -6 "bb" "n" "k" "-br")
                      (("1" (assert)
                        (("1" (split -)
                          (("1" (skosimp*)
                            (("1" (inst + "-c!1")
                              (("1"
                                (assert)
                                (("1"
                                  (case
                                   "NOT FORALL (dd:nat): polynomial(bb,dd)(-br) = polynomial(a,dd)(br)")
                                  (("1"
                                    (hide-all-but 1)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (expand "polynomial")
                                        (("1"
                                          (rewrite "sigma_eq")
                                          (("1"
                                            (hide 2)
                                            (("1"
                                              (skosimp*)
                                              (("1"
                                                (expand "bb")
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "mult_expt")
                                                      (("2"
                                                        (inst
                                                         -
                                                         "n!1"
                                                         "-1"
                                                         "-br")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (inst-cp - "k")
                                    (("2"
                                      (inst - "n-1")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (replaces -1)
                                          (("2"
                                            (replaces -1)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (replaces -3)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (invoke
                                                     (case
                                                      "(-1)^n * %1 = %2")
                                                     (! 1 1 1)
                                                     (! 1 2 1))
                                                    (("1"
                                                      (replaces
                                                       -1
                                                       :dir
                                                       rl)
                                                      (("1"
                                                        (lemma
                                                         "mult_expt")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "n"
                                                           "-1"
                                                           "br")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (expand
                                                         "polynomial"
                                                         +)
                                                        (("2"
                                                          (rewrite
                                                           "sigma_scal"
                                                           :dir
                                                           rl)
                                                          (("2"
                                                            (rewrite
                                                             "sigma_eq")
                                                            (("2"
                                                              (hide 2)
                                                              (("2"
                                                                (skosimp*)
                                                                (("2"
                                                                  (lift-if)
                                                                  (("2"
                                                                    (ground)
                                                                    (("1"
                                                                      (expand
                                                                       "poly_n_deriv")
                                                                      (("1"
                                                                        (expand
                                                                         "bb")
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (case
                                                                               "FORALL (nnn:nat): (-1)^nnn * (-1)^nnn=1 ")
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "n")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("2"
                                                                                  (induct
                                                                                   "nnn")
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (skeep)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "^")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "expt"
                                                                                         +)
                                                                                        (("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (lemma
                                                                       "mult_expt")
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "n!1"
                                                                         "-1"
                                                                         "c!1")
                                                                        (("1"
                                                                          (replaces
                                                                           -1)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "poly_n_deriv")
                                                                              (("1"
                                                                                (expand
                                                                                 "bb"
                                                                                 +)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "expt_plus")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "n!1"
                                                                                       "n"
                                                                                       "-1")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (replaces
                                                                                           -1)
                                                                                          (("1"
                                                                                            (case
                                                                                             "FORALL (nnn:nat): (-1)^nnn * (-1)^nnn=1 ")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -
                                                                                               "n")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (invoke
                                                                                                   (mult-by
                                                                                                    -1
                                                                                                    "%1")
                                                                                                   (!
                                                                                                    2
                                                                                                    2))
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide-all-but
                                                                                               1)
                                                                                              (("2"
                                                                                                (induct
                                                                                                 "nnn")
                                                                                                (("1"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (skeep)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "^")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "expt"
                                                                                                       +)
                                                                                                      (("2"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (replaces
                                                                               -1)
                                                                              (("2"
                                                                                (expand
                                                                                 "^")
                                                                                (("2"
                                                                                  (expand
                                                                                   "expt"
                                                                                   +)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (hide -1)
                              (("2"
                                (skeep)
                                (("2"
                                  (inst - "ii")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "bb")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide -2)
        (("2" (skeep)
          (("2" (assert)
            (("2" (name "aa" "poly_shift(a,k)(y)")
              (("2" (inst - "aa" "n" "k" "x-y")
                (("2" (assert)
                  (("2" (invoke (case "NOT %1") (! -2 1))
                    (("1" (hide (-2 2))
                      (("1" (skeep)
                        (("1" (assert)
                          (("1" (expand "aa" +)
                            (("1" (expand "poly_shift" +)
                              (("1"
                                (expand "sigma")
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (replace -1)
                        (("2" (assert)
                          (("2" (skosimp*)
                            (("2" (name "cc" "c!1 + y")
                              (("2"
                                (inst + "cc")
                                (("2"
                                  (assert)
                                  (("2"
                                    (invoke (case "NOT %1") (! 1 1))
                                    (("1"
                                      (hide (-5 2))
                                      (("1" (ground) nil nil))
                                      nil)
                                     ("2"
                                      (replace -1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (invoke
                                           (case
                                            "(%1 = %2) AND (%3 = %4) AND (%5 = %6)")
                                           (! -6 1)
                                           (! 1 1)
                                           (! -6 2 1)
                                           (! 1 2 1)
                                           (! -6 2 2)
                                           (! 1 2 2))
                                          (("1"
                                            (flatten)
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (hide (-6 2))
                                            (("2"
                                              (split)
                                              (("1"
                                                (expand "aa" +)
                                                (("1"
                                                  (rewrite
                                                   "poly_shift_id"
                                                   :dir
                                                   rl)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "aa" +)
                                                (("2"
                                                  (case
                                                   "FORALL (dd:nat): (polynomial(aa, dd)(x - y) =
                         polynomial(taylor_poly(a, k, dd, y), dd)(x))")
                                                  (("1"
                                                    (inst - "n-1")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (induct "dd")
                                                      (("1"
                                                        (expand
                                                         "polynomial")
                                                        (("1"
                                                          (expand
                                                           "sigma")
                                                          (("1"
                                                            (expand
                                                             "sigma")
                                                            (("1"
                                                              (expand
                                                               "taylor_poly")
                                                              (("1"
                                                                (expand
                                                                 "sigma")
                                                                (("1"
                                                                  (expand
                                                                   "sigma")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "polynomial")
                                                                      (("1"
                                                                        (expand
                                                                         "aa"
                                                                         +)
                                                                        (("1"
                                                                          (expand
                                                                           "poly_shift"
                                                                           +)
                                                                          (("1"
                                                                            (case
                                                                             "C(0,0) = 1")
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (case
                                                                                 "(-y)^0 = 1")
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (case
                                                                                       "FORALL (egv1:real): egv1/1 = egv1")
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         -1)
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "sigma_eq")
                                                                                          (("1"
                                                                                            (hide
                                                                                             2)
                                                                                            (("1"
                                                                                              (skosimp*)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "poly_n_deriv")
                                                                                                (("1"
                                                                                                  (lift-if)
                                                                                                  (("1"
                                                                                                    (split
                                                                                                     +)
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (case
                                                                                                           "y^0 = 1")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (hide-all-but
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   1)
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skeep)
                                                        (("2"
                                                          (rewrite
                                                           "polynomial_rec"
                                                           +)
                                                          (("2"
                                                            (replace
                                                             -1)
                                                            (("2"
                                                              (expand
                                                               "aa"
                                                               +)
                                                              (("2"
                                                                (lemma
                                                                 "binomial_theorem")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "1+j"
                                                                   "x"
                                                                   "-y")
                                                                  (("2"
                                                                    (replace
                                                                     -1)
                                                                    (("2"
                                                                      (hide
                                                                       -1)
                                                                      (("2"
                                                                        (name
                                                                         "ddc"
                                                                         "poly_shift(a, k)(y)(1 + j)")
                                                                        (("2"
                                                                          (replace
                                                                           -1)
                                                                          (("2"
                                                                            (rewrite
                                                                             "sigma_scal"
                                                                             :dir
                                                                             rl)
                                                                            (("1"
                                                                              (expand
                                                                               "sigma"
                                                                               +)
                                                                              (("1"
                                                                                (lemma
                                                                                 "polynomial_rec")
                                                                                (("1"
                                                                                  (inst
                                                                                   -
                                                                                   _
                                                                                   "1+j"
                                                                                   _)
                                                                                  (("1"
                                                                                    (inst?)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -1)
                                                                                          (("1"
                                                                                            (invoke
                                                                                             (case
                                                                                              "NOT %1 = %2")
                                                                                             (!
                                                                                              1
                                                                                              1
                                                                                              3)
                                                                                             (!
                                                                                              1
                                                                                              2
                                                                                              2))
                                                                                            (("1"
                                                                                              (hide
                                                                                               2)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "(-y)^0 = 1")
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (case
                                                                                                       "C(1+j,1+j) = 1")
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (invoke
                                                                                                             (case
                                                                                                              "%1 = %2")
                                                                                                             (!
                                                                                                              1
                                                                                                              1
                                                                                                              2)
                                                                                                             (!
                                                                                                              1
                                                                                                              2
                                                                                                              1))
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (hide
                                                                                                               2)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "ddc"
                                                                                                                 +)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "poly_shift"
                                                                                                                   +)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "taylor_poly"
                                                                                                                     +)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "sigma"
                                                                                                                       +
                                                                                                                       2)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "sigma"
                                                                                                                         +
                                                                                                                         2)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (lift-if)
                                                                                                                            (("2"
                                                                                                                              (split
                                                                                                                               +)
                                                                                                                              (("1"
                                                                                                                                (flatten)
                                                                                                                                (("1"
                                                                                                                                  (replace
                                                                                                                                   -3)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (replace
                                                                                                                                       -2)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (case
                                                                                                                                           "FORALL (ddv:real): 1*ddv = ddv")
                                                                                                                                          (("1"
                                                                                                                                            (rewrite
                                                                                                                                             -1)
                                                                                                                                            (("1"
                                                                                                                                              (hide
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "polynomial"
                                                                                                                                                 +)
                                                                                                                                                (("1"
                                                                                                                                                  (lemma
                                                                                                                                                   "sigma_scal")
                                                                                                                                                  (("1"
                                                                                                                                                    (inst
                                                                                                                                                     -
                                                                                                                                                     _
                                                                                                                                                     "1/factorial(1+j)"
                                                                                                                                                     _
                                                                                                                                                     _)
                                                                                                                                                    (("1"
                                                                                                                                                      (inst
                                                                                                                                                       -
                                                                                                                                                       _
                                                                                                                                                       "-1-j+k"
                                                                                                                                                       "0")
                                                                                                                                                      (("1"
                                                                                                                                                        (inst?)
                                                                                                                                                        (("1"
                                                                                                                                                          (replaces
                                                                                                                                                           -1
                                                                                                                                                           :dir
                                                                                                                                                           rl)
                                                                                                                                                          (("1"
                                                                                                                                                            (rewrite
                                                                                                                                                             "sigma_shift_fun_eq")
                                                                                                                                                            (("1"
                                                                                                                                                              (hide
                                                                                                                                                               2)
                                                                                                                                                              (("1"
                                                                                                                                                                (skosimp*)
                                                                                                                                                                (("1"
                                                                                                                                                                  (case
                                                                                                                                                                   "(IF i!1 = 0 THEN 1 ELSE y ^ i!1 ENDIF) = y^i!1")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (replaces
                                                                                                                                                                     -1)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (expand
                                                                                                                                                                       "poly_n_deriv")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (hide-all-but
                                                                                                                                                                     1)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (lift-if)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (ground)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (replaces
                                                                                                                                                                           -1)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (grind)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (hide-all-but
                                                                                                                                                               1)
                                                                                                                                                              (("2"
                                                                                                                                                                (grind)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("3"
                                                                                                                                                              (hide-all-but
                                                                                                                                                               1)
                                                                                                                                                              (("3"
                                                                                                                                                                (grind)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (hide-all-but
                                                                                                                                             1)
                                                                                                                                            (("2"
                                                                                                                                              (grind)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (flatten)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "sigma"
                                                                                                                                   +)
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide-all-but
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "C")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide-all-but
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (replaces
                                                                                               -1)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "polynomial"
                                                                                                   +)
                                                                                                  (("2"
                                                                                                    (rewrite
                                                                                                     "sigma_sum")
                                                                                                    (("1"
                                                                                                      (rewrite
                                                                                                       "sigma_eq")
                                                                                                      (("1"
                                                                                                        (hide
                                                                                                         2)
                                                                                                        (("1"
                                                                                                          (skosimp*)
                                                                                                          (("1"
                                                                                                            (case
                                                                                                             "(IF n!1 = 0 THEN 1 ELSE x ^ n!1 ENDIF) = x^n!1")
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (case
                                                                                                                   "taylor_poly(a, k, j, y)(n!1) +
       ddc * (C(1 + j, n!1) * (-y) ^ (1 - n!1 + j))
       = taylor_poly(a, k, 1 + j, y)(n!1)")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (hide
                                                                                                                     2)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "taylor_poly"
                                                                                                                       +)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "sigma"
                                                                                                                         +
                                                                                                                         2)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (lift-if)
                                                                                                                            (("2"
                                                                                                                              (case
                                                                                                                               "1+j > k")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (case
                                                                                                                                   "ddc = 0")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (expand
                                                                                                                                     "ddc"
                                                                                                                                     1)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "poly_shift"
                                                                                                                                       1)
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "sigma"
                                                                                                                                         1)
                                                                                                                                        (("2"
                                                                                                                                          (propax)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (split
                                                                                                                                 +)
                                                                                                                                (("1"
                                                                                                                                  (flatten)
                                                                                                                                  (("1"
                                                                                                                                    (hide
                                                                                                                                     2)
                                                                                                                                    (("1"
                                                                                                                                      (case
                                                                                                                                       "ddc = polynomial(poly_n_deriv(a, 1 + j), -1 - j + k)(y) /
          factorial(1 + j)")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (replaces
                                                                                                                                           -1
                                                                                                                                           :dir
                                                                                                                                           rl)
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (hide
                                                                                                                                         2)
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "ddc"
                                                                                                                                           +)
                                                                                                                                          (("2"
                                                                                                                                            (lemma
                                                                                                                                             "sigma_scal")
                                                                                                                                            (("2"
                                                                                                                                              (inst
                                                                                                                                               -
                                                                                                                                               _
                                                                                                                                               "1/factorial(1+j)"
                                                                                                                                               "-1-j+k"
                                                                                                                                               "0")
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "polynomial"
                                                                                                                                                 +)
                                                                                                                                                (("1"
                                                                                                                                                  (inst?)
                                                                                                                                                  (("1"
                                                                                                                                                    (replaces
                                                                                                                                                     -1
                                                                                                                                                     :dir
                                                                                                                                                     rl)
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       "poly_shift"
                                                                                                                                                       +)
                                                                                                                                                      (("1"
                                                                                                                                                        (rewrite
                                                                                                                                                         "sigma_shift_fun_eq")
                                                                                                                                                        (("1"
                                                                                                                                                          (hide
                                                                                                                                                           2)
                                                                                                                                                          (("1"
                                                                                                                                                            (skosimp*)
                                                                                                                                                            (("1"
                                                                                                                                                              (case
                                                                                                                                                               "(IF i!1 = 0 THEN 1 ELSE y ^ i!1 ENDIF) = y^i!1")
                                                                                                                                                              (("1"
                                                                                                                                                                (replace
                                                                                                                                                                 -1)
                                                                                                                                                                (("1"
                                                                                                                                                                  (expand
                                                                                                                                                                   "poly_n_deriv"
                                                                                                                                                                   +)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (hide-all-but
                                                                                                                                                                 1)
                                                                                                                                                                (("2"
                                                                                                                                                                  (lift-if)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (ground)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (replaces
                                                                                                                                                                       -1)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (grind)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (hide-all-but
                                                                                                                                                           1)
                                                                                                                                                          (("2"
                                                                                                                                                            (grind)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("3"
                                                                                                                                                          (hide-all-but
                                                                                                                                                           1)
                                                                                                                                                          (("3"
                                                                                                                                                            (grind)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (hide-all-but
                                                                                                                                                 1)
                                                                                                                                                (("2"
                                                                                                                                                  (grind)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("3"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (flatten)
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (hide-all-but
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide-all-but
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("3"
                                                                                                        (hide-all-but
                                                                                                         1)
                                                                                                        (("3"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide-all-but
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("3"
                                                                                                      (hide-all-but
                                                                                                       1)
                                                                                                      (("3"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("3"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (case
                                                 "polynomial(poly_n_deriv(aa, n), k - n)(c!1)  =
        polynomial(poly_n_deriv(a, n), k - n)(cc)")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (replaces
                                                     -2
                                                     :dir
                                                     rl)
                                                    (("2"
                                                      (expand "aa" +)
                                                      (("2"
                                                        (case
                                                         "poly_n_deriv(poly_shift(a, k)(y), n) = poly_shift(poly_n_deriv(a,n),k-n)(y)")
                                                        (("1"
                                                          (replaces -1)
                                                          (("1"
                                                            (rewrite
                                                             "poly_shift_id")
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (decompose-equality
                                                             +)
                                                            (("2"
                                                              (name
                                                               "ii"
                                                               "x!1")
                                                              (("2"
                                                                (replaces
                                                                 -1)
                                                                (("2"
                                                                  (expand
                                                                   "poly_n_deriv")
                                                                  (("2"
                                                                    (expand
                                                                     "poly_shift")
                                                                    (("2"
                                                                      (rewrite
                                                                       "sigma_scal"
                                                                       :dir
                                                                       rl)
                                                                      (("1"
                                                                        (rewrite
                                                                         "sigma_shift_fun_eq")
                                                                        (("1"
                                                                          (hide
                                                                           2)
                                                                          (("1"
                                                                            (skosimp*)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (case
                                                                                 "C(i!1 + ii + n, ii + n) *
       C(ii + n, n) = C(i!1 + ii + n, n) *
        C(i!1 + ii, ii)")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "C")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("3"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("4"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("4"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("5"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("5"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("3"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (hide-all-but 1)
        (("3" (skosimp*) (("3" (assert) nil nil)) nil)) nil)
       ("4" (hide-all-but 1)
        (("4" (skosimp*) (("4" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((^ const-decl "real" exponentiation nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (poly_n_deriv const-decl "real" polynomials nil)
    (polynomial const-decl "[real -> real]" polynomials nil)
    (factorial def-decl "posnat" factorial "ints/")
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (T_low type-eq-decl nil sigma nil)
    (T_high type-eq-decl nil sigma nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (sigma_eq_one_arg formula-decl nil sigma nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (expt def-decl "real" exponentiation nil)
    (TRUE const-decl "bool" booleans nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (sigma_eq formula-decl nil sigma nil)
    (mult_expt formula-decl nil exponentiation nil)
    (subrange type-eq-decl nil integers nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (int_expt application-judgement "int" exponentiation nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (bb skolem-const-decl "[nat -> real]" polynomials nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (rat_exp application-judgement "rat" exponentiation nil)
    (c!1 skolem-const-decl "real" polynomials nil)
    (expt_plus formula-decl nil exponentiation nil)
    (nzrat_times_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (both_sides_times1_imp formula-decl nil extra_real_props nil)
    (C const-decl "posnat" binomial nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (sigma_scal formula-decl nil sigma nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (poly_shift const-decl "sequence[real]" polynomials nil)
    (taylor_poly const-decl "real" polynomials nil)
    (poly_shift_id formula-decl nil polynomials nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (factorial_0 formula-decl nil factorial "ints/")
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (polynomial_rec formula-decl nil polynomials nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (sigma_sum formula-decl nil sigma nil)
    (sigma_shift_fun_eq formula-decl nil sigma nil)
    (ddc skolem-const-decl "real" polynomials nil)
    (binomial_theorem formula-decl nil polynomials nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (sigma def-decl "real" sigma nil)
    (aa skolem-const-decl "sequence[real]" polynomials nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (poly_maclaurin formula-decl nil polynomials nil))
   shostak)))


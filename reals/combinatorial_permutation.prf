(combinatorial_permutation
 (P_TCC1 0
  (P_TCC1-1 nil 3709644893 ("" (subtype-tcc) nil nil) nil nil
   (P subtype
    "(number_fields.-)(combinatorial_permutation.n, combinatorial_permutation.r)"
    "nat")))
 (P_TCC2 0
  (P_TCC2-1 nil 3709644893
   ("" (induct "n")
    (("1" (skeep)
      (("1" (split)
        (("1" (case "r=0")
          (("1" (replace -1) (("1" (assert) nil nil)) nil)
           ("2" (assert) nil nil))
          nil)
         ("2" (case "r=0")
          (("1" (replace -1) (("1" (assert) nil nil)) nil)
           ("2" (assert) nil nil))
          nil)
         ("3" (case "r=0")
          (("1" (replace -1) (("1" (assert) nil nil)) nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (case "r=j+1")
          (("1" (replace -1)
            (("1" (assert)
              (("1" (split)
                (("1" (assert) nil nil) ("2" (assert) nil nil)
                 ("3" (assert) nil nil))
                nil))
              nil))
            nil)
           ("2" (case "r=0")
            (("1" (replace -1) (("1" (assert) nil nil)) nil)
             ("2" (inst -1 "r-1")
              (("1" (lemma "factorial_n")
                (("1" (inst -1 "j+1")
                  (("1" (split)
                    (("1" (replace -1)
                      (("1" (assert)
                        (("1" (split)
                          (("1" (flatten -2)
                            (("1"
                              (case "NOT (factorial(j) + factorial(j) * j) / factorial(1 - r + j) = (j+1) * (factorial(j) / factorial(1 - r + j))")
                              (("1" (field) nil nil)
                               ("2" (replace -1)
                                (("2" (lemma "int_times_int_is_int")
                                  (("2"
                                    (inst -1 "j+1"
                                     "factorial(j) / factorial(1 - r + j)")
                                    nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil)
                           ("3"
                            (case "NOT (factorial(j) + factorial(j) * j) / factorial(1 - r + j) = (j+1) * (factorial(j)/factorial(1-r+j))")
                            (("1" (field) nil nil)
                             ("2" (replace -1)
                              (("2" (flatten)
                                (("2" (lemma "posint_times_posint_is_posint")
                                  (("2"
                                    (inst -1 "j+1"
                                     "factorial(j) / factorial(1 - r + j)")
                                    nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (j skolem-const-decl "nat" combinatorial_permutation nil)
    (r skolem-const-decl "{i: nat | i <= 1 + j}" combinatorial_permutation
     nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat" rationals
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel2 formula-decl nil real_props nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (int_times_int_is_int judgement-tcc nil integers nil)
    (posint_times_posint_is_posint judgement-tcc nil integers nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (factorial_n formula-decl nil factorial ints)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (factorial_0 formula-decl nil factorial ints)
    (even_minus_even_is_even application-judgement "even_int" integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (factorial def-decl "posnat" factorial ints)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals
     nil))
   nil
   (P subtype
    "number_fields./(factorial.factorial(combinatorial_permutation.n), factorial.factorial((number_fields.-)(combinatorial_permutation.n, combinatorial_permutation.r)))"
    "posnat")))
 (P_0_TCC1 0
  (P_0_TCC1-1 nil 3709644893 ("" (subtype-tcc) nil nil) nil nil
   (P_0 subtype "0"
    "{i: naturalnumbers.nat | reals.<=(i, combinatorial_permutation.n)}")))
 (P_0 0
  (P_0-1 nil 3709646013
   ("" (skeep) (("" (expand "P") (("" (assert) nil nil)) nil)) nil)
   ((P const-decl "posnat" combinatorial_permutation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals
     nil))
   shostak))
 (P_n_TCC1 0
  (P_n_TCC1-1 nil 3709644893 ("" (subtype-tcc) nil nil) nil nil
   (P_n subtype "combinatorial_permutation.n"
    "{i: naturalnumbers.nat | reals.<=(i, combinatorial_permutation.n)}")))
 (P_n 0
  (P_n-1 nil 3709646028
   ("" (skeep) (("" (expand "P") (("" (assert) nil nil)) nil)) nil)
   ((P const-decl "posnat" combinatorial_permutation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (factorial_0 formula-decl nil factorial ints))
   shostak))
 (P_1_TCC1 0
  (P_1_TCC1-1 nil 3709644893 ("" (subtype-tcc) nil nil) nil nil
   (P_1 subtype "1"
    "{i: naturalnumbers.nat | reals.<=(i, combinatorial_permutation.pn)}")))
 (P_1 0
  (P_1-1 nil 3709646046
   ("" (skeep)
    (("" (expand "P")
      (("" (lemma "factorial_n")
        (("" (inst -1 "pn")
          (("" (split)
            (("1" (replace -1) (("1" (assert) (("1" (field) nil nil)) nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((P const-decl "posnat" combinatorial_permutation nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (factorial def-decl "posnat" factorial ints)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (div_cancel3 formula-decl nil real_props nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (factorial_n formula-decl nil factorial ints))
   shostak))
 (P_n_1_TCC1 0
  (P_n_1_TCC1-1 nil 3709644893 ("" (subtype-tcc) nil nil) nil nil
   (P_n_1 subtype "(number_fields.-)(combinatorial_permutation.pn, 1)"
    "{i: naturalnumbers.nat | reals.<=(i, combinatorial_permutation.pn)}")))
 (P_n_1 0
  (P_n_1-2 "" 3790088908
   ("" (skeep) (("" (expand "P") (("" (assert) nil nil)) nil)) nil) nil
   shostak)
  (P_n_1-1 nil 3709646087
   ("" (skeep)
    (("" (expand "P") (("" (assert) (("" (postpone) nil nil)) nil)) nil)) nil)
   ((P const-decl "posnat" combinatorial_permutation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (factorial_1 formula-decl nil factorial ints))
   shostak))
 (P_is_factr_times_C 0
  (P_is_factr_times_C-1 nil 3709646138
   ("" (skeep)
    (("" (expand "P") (("" (expand "C") (("" (field) nil nil)) nil)) nil))
    nil)
   ((P const-decl "posnat" combinatorial_permutation nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil) (<= const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat" rationals
     nil)
    (C const-decl "posnat" binomial nil))
   shostak)))


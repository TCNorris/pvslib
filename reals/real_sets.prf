(real_sets
 (sup_lemma 0
  (sup_lemma-2 "" 3790089398
   ("" (skolem!) (("" (typepred "sup(U!1)") (("" (propax) nil nil)) nil)) nil)
   nil shostak)
  (sup_lemma-1 nil 3506273133
   ("" (skolem!) (("" (typepred "sup(U!1)") (("" (propax) nil)))) nil)
   ((sup const-decl "{x | least_upper_bound(<=)(x, Su)}" bounded_reals nil)
    (above_bounded const-decl "bool" bounded_reals nil)
    (setof type-eq-decl nil defined_types nil)
    (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (sup_set type-eq-decl nil bounded_reals nil)
    (<= const-decl "bool" reals nil)
    (least_upper_bound const-decl "bool" bound_defs nil)
    (T formal-subtype-decl nil real_sets nil)
    (T_pred const-decl "[real -> boolean]" real_sets nil)
    (pred type-eq-decl nil defined_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (sup_is_bound 0
  (sup_is_bound-2 "" 3790089398
   ("" (skosimp*) (("" (typepred "sup(U!1)") (("" (grind) nil nil)) nil)) nil)
   nil shostak)
  (sup_is_bound-1 nil 3506273133
   ("" (skosimp*) (("" (typepred "sup(U!1)") (("" (grind) nil)))) nil)
   ((sup const-decl "{x | least_upper_bound(<=)(x, Su)}" bounded_reals nil)
    (above_bounded const-decl "bool" bounded_reals nil)
    (setof type-eq-decl nil defined_types nil)
    (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (sup_set type-eq-decl nil bounded_reals nil)
    (<= const-decl "bool" reals nil)
    (least_upper_bound const-decl "bool" bound_defs nil)
    (T formal-subtype-decl nil real_sets nil)
    (T_pred const-decl "[real -> boolean]" real_sets nil)
    (pred type-eq-decl nil defined_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (upper_bound const-decl "bool" bound_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil))
 (sup_is_bound2 0
  (sup_is_bound2-2 "" 3790089398
   ("" (skosimp*) (("" (typepred "sup(U!1)") (("" (grind) nil nil)) nil)) nil)
   nil shostak)
  (sup_is_bound2-1 nil 3506273133
   ("" (skosimp*) (("" (typepred "sup(U!1)") (("" (grind) nil)))) nil)
   ((sup const-decl "{x | least_upper_bound(<=)(x, Su)}" bounded_reals nil)
    (above_bounded const-decl "bool" bounded_reals nil)
    (setof type-eq-decl nil defined_types nil)
    (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (sup_set type-eq-decl nil bounded_reals nil)
    (<= const-decl "bool" reals nil)
    (least_upper_bound const-decl "bool" bound_defs nil)
    (T formal-subtype-decl nil real_sets nil)
    (T_pred const-decl "[real -> boolean]" real_sets nil)
    (pred type-eq-decl nil defined_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (upper_bound const-decl "bool" bound_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil))
 (sup_is_sup 0
  (sup_is_sup-2 "" 3790089398
   ("" (skosimp*)
    (("" (typepred "sup(U!1)")
      (("" (grind :exclude "upper_bound")
        (("" (expand "upper_bound")
          (("" (skosimp*) (("" (inst?) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (sup_is_sup-1 nil 3506273133
   ("" (skosimp*)
    (("" (typepred "sup(U!1)")
      (("" (grind :exclude "upper_bound")
        (("" (expand "upper_bound")
          (("" (skosimp*) (("" (inst?) (("" (assert) nil))))))))))))
    nil)
   ((sup const-decl "{x | least_upper_bound(<=)(x, Su)}" bounded_reals nil)
    (above_bounded const-decl "bool" bounded_reals nil)
    (setof type-eq-decl nil defined_types nil)
    (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (sup_set type-eq-decl nil bounded_reals nil)
    (<= const-decl "bool" reals nil)
    (least_upper_bound const-decl "bool" bound_defs nil)
    (T formal-subtype-decl nil real_sets nil)
    (T_pred const-decl "[real -> boolean]" real_sets nil)
    (pred type-eq-decl nil defined_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (upper_bound const-decl "bool" bound_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil))
 (upper_bound_subset 0
  (upper_bound_subset-2 "" 3790089398
   ("" (grind :if-match nil)
    (("" (inst -8 "z!1") (("" (inst -9 "z!1") (("" (assert) nil nil)) nil))
      nil))
    nil)
   nil shostak)
  (upper_bound_subset-1 nil 3506273133
   ("" (grind :if-match nil)
    (("" (inst -8 "z!1") (("" (inst -9 "z!1") (("" (assert) nil)))))) nil)
   ((z!1 skolem-const-decl "(S1!1)" real_sets nil)
    (S1!1 skolem-const-decl "(nonempty?[T])" real_sets nil)
    (S2!1 skolem-const-decl "(nonempty?[T])" real_sets nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (empty? const-decl "bool" sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil) (nonempty? const-decl "bool" sets nil)
    (upper_bound const-decl "bool" bound_defs nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (T_pred const-decl "[real -> boolean]" real_sets nil)
    (T formal-subtype-decl nil real_sets nil)
    (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil))
   nil))
 (subset_above_bounded 0
  (subset_above_bounded-2 "" 3790089398
   ("" (skosimp)
    (("" (typepred "U!1")
      (("" (expand "above_bounded")
        (("" (skolem!)
          (("" (inst?)
            ((""
              (lemma "upper_bound_subset" ("S1" "S!1" "S2" "U!1" "a" "n!1"))
              (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (subset_above_bounded-1 nil 3506273133
   ("" (skosimp)
    (("" (typepred "U!1")
      (("" (expand "above_bounded")
        (("" (skolem!)
          (("" (inst?)
            ((""
              (lemma "upper_bound_subset" ("S1" "S!1" "S2" "U!1" "a" "n!1"))
              (("" (assert) nil))))))))))))
    nil)
   ((sup_set type-eq-decl nil bounded_reals nil)
    (above_bounded const-decl "bool" bounded_reals nil)
    (setof type-eq-decl nil defined_types nil)
    (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (T formal-subtype-decl nil real_sets nil)
    (T_pred const-decl "[real -> boolean]" real_sets nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (upper_bound_subset formula-decl nil real_sets nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil))
   nil))
 (sup_of_subset 0
  (sup_of_subset-2 "" 3790089398
   ("" (skosimp)
    (("" (lemma "sup_lemma" ("U" "U2!1"))
      (("" (expand "least_upper_bound")
        (("" (flatten)
          (("" (delete -2)
            (("" (forward-chain "upper_bound_subset")
              (("" (rewrite "sup_is_sup") nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (sup_of_subset-1 nil 3506273133
   ("" (skosimp)
    (("" (lemma "sup_lemma" ("U" "U2!1"))
      (("" (expand "least_upper_bound")
        (("" (flatten)
          (("" (delete -2)
            (("" (forward-chain "upper_bound_subset")
              (("" (rewrite "sup_is_sup") nil))))))))))))
    nil)
   ((sup_set type-eq-decl nil bounded_reals nil)
    (above_bounded const-decl "bool" bounded_reals nil)
    (setof type-eq-decl nil defined_types nil)
    (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (T formal-subtype-decl nil real_sets nil)
    (T_pred const-decl "[real -> boolean]" real_sets nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sup_lemma formula-decl nil real_sets nil)
    (upper_bound_subset formula-decl nil real_sets nil)
    (pred type-eq-decl nil defined_types nil) (<= const-decl "bool" reals nil)
    (sup const-decl "{x | least_upper_bound(<=)(x, Su)}" bounded_reals nil)
    (sup_is_sup formula-decl nil real_sets nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (least_upper_bound const-decl "bool" bound_defs nil))
   nil))
 (adherence_sup 0
  (adherence_sup-2 "" 3790089398
   ("" (skosimp*)
    (("" (lemma "sup_is_sup" ("U" "U!1" "x" "sup(U!1) - epsilon!1"))
      (("" (assert)
        (("" (expand "upper_bound")
          (("" (skosimp) (("" (inst?) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (adherence_sup-1 nil 3506273133
   ("" (skosimp*)
    (("" (lemma "sup_is_sup" ("U" "U!1" "x" "sup(U!1) - epsilon!1"))
      (("" (assert)
        (("" (expand "upper_bound")
          (("" (skosimp) (("" (inst?) (("" (assert) nil))))))))))))
    nil)
   ((posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (sup const-decl "{x | least_upper_bound(<=)(x, Su)}" bounded_reals nil)
    (<= const-decl "bool" reals nil)
    (least_upper_bound const-decl "bool" bound_defs nil)
    (pred type-eq-decl nil defined_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sup_set type-eq-decl nil bounded_reals nil)
    (above_bounded const-decl "bool" bounded_reals nil)
    (setof type-eq-decl nil defined_types nil)
    (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (T formal-subtype-decl nil real_sets nil)
    (T_pred const-decl "[real -> boolean]" real_sets nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sup_is_sup formula-decl nil real_sets nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (upper_bound const-decl "bool" bound_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil))
 (inf_lemma 0
  (inf_lemma-2 "" 3790089398
   ("" (skosimp*) (("" (typepred "inf(V!1)") (("" (propax) nil nil)) nil))
    nil)
   nil shostak)
  (inf_lemma-1 nil 3506273133
   ("" (skosimp*) (("" (typepred "inf(V!1)") (("" (propax) nil)))) nil)
   ((inf const-decl "{x | greatest_lower_bound(<=)(x, Sl)}" bounded_reals nil)
    (below_bounded const-decl "bool" bounded_reals nil)
    (setof type-eq-decl nil defined_types nil)
    (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (inf_set type-eq-decl nil bounded_reals nil)
    (<= const-decl "bool" reals nil)
    (greatest_lower_bound const-decl "bool" bound_defs nil)
    (T formal-subtype-decl nil real_sets nil)
    (T_pred const-decl "[real -> boolean]" real_sets nil)
    (pred type-eq-decl nil defined_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (inf_is_bound 0
  (inf_is_bound-2 "" 3790089398
   ("" (skosimp*)
    (("" (typepred "inf(V!1)")
      (("" (expand "greatest_lower_bound")
        (("" (flatten) (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   nil shostak)
  (inf_is_bound-1 nil 3506273133
   ("" (skosimp*)
    (("" (typepred "inf(V!1)")
      (("" (expand "greatest_lower_bound")
        (("" (flatten) (("" (grind) nil))))))))
    nil)
   ((inf const-decl "{x | greatest_lower_bound(<=)(x, Sl)}" bounded_reals nil)
    (below_bounded const-decl "bool" bounded_reals nil)
    (setof type-eq-decl nil defined_types nil)
    (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (inf_set type-eq-decl nil bounded_reals nil)
    (<= const-decl "bool" reals nil)
    (greatest_lower_bound const-decl "bool" bound_defs nil)
    (T formal-subtype-decl nil real_sets nil)
    (T_pred const-decl "[real -> boolean]" real_sets nil)
    (pred type-eq-decl nil defined_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (lower_bound const-decl "bool" bound_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil))
 (inf_is_bound2 0
  (inf_is_bound2-2 "" 3790089398
   ("" (skosimp*) (("" (typepred "inf(V!1)") (("" (grind) nil nil)) nil)) nil)
   nil shostak)
  (inf_is_bound2-1 nil 3506273133
   ("" (skosimp*) (("" (typepred "inf(V!1)") (("" (grind) nil)))) nil)
   ((inf const-decl "{x | greatest_lower_bound(<=)(x, Sl)}" bounded_reals nil)
    (below_bounded const-decl "bool" bounded_reals nil)
    (setof type-eq-decl nil defined_types nil)
    (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (inf_set type-eq-decl nil bounded_reals nil)
    (<= const-decl "bool" reals nil)
    (greatest_lower_bound const-decl "bool" bound_defs nil)
    (T formal-subtype-decl nil real_sets nil)
    (T_pred const-decl "[real -> boolean]" real_sets nil)
    (pred type-eq-decl nil defined_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (lower_bound const-decl "bool" bound_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil))
 (inf_is_inf 0
  (inf_is_inf-2 "" 3790089398
   ("" (skosimp*)
    (("" (typepred "inf(V!1)")
      (("" (grind :exclude "lower_bound")
        (("" (expand "lower_bound")
          (("" (skosimp*) (("" (inst -1 "z!1") (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (inf_is_inf-1 nil 3506273133
   ("" (skosimp*)
    (("" (typepred "inf(V!1)")
      (("" (grind :exclude "lower_bound")
        (("" (expand "lower_bound")
          (("" (skosimp*) (("" (inst -1 "z!1") (("" (assert) nil))))))))))))
    nil)
   ((inf const-decl "{x | greatest_lower_bound(<=)(x, Sl)}" bounded_reals nil)
    (below_bounded const-decl "bool" bounded_reals nil)
    (setof type-eq-decl nil defined_types nil)
    (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (inf_set type-eq-decl nil bounded_reals nil)
    (<= const-decl "bool" reals nil)
    (greatest_lower_bound const-decl "bool" bound_defs nil)
    (T formal-subtype-decl nil real_sets nil)
    (T_pred const-decl "[real -> boolean]" real_sets nil)
    (pred type-eq-decl nil defined_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (lower_bound const-decl "bool" bound_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil))
 (lower_bound_subset 0
  (lower_bound_subset-2 "" 3790089398
   ("" (grind :if-match nil)
    (("" (inst -8 "z!1") (("" (inst -9 "z!1") (("" (assert) nil nil)) nil))
      nil))
    nil)
   nil shostak)
  (lower_bound_subset-1 nil 3506273133
   ("" (grind :if-match nil)
    (("" (inst -8 "z!1") (("" (inst -9 "z!1") (("" (assert) nil)))))) nil)
   ((z!1 skolem-const-decl "(S1!1)" real_sets nil)
    (S1!1 skolem-const-decl "(nonempty?[T])" real_sets nil)
    (S2!1 skolem-const-decl "(nonempty?[T])" real_sets nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (empty? const-decl "bool" sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil) (nonempty? const-decl "bool" sets nil)
    (lower_bound const-decl "bool" bound_defs nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (T_pred const-decl "[real -> boolean]" real_sets nil)
    (T formal-subtype-decl nil real_sets nil)
    (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil))
   nil))
 (subset_below_bounded 0
  (subset_below_bounded-2 "" 3790089398
   ("" (skosimp)
    (("" (typepred "V!1")
      (("" (expand "below_bounded")
        (("" (skolem!)
          (("" (inst?)
            ((""
              (lemma "lower_bound_subset" ("S1" "S!1" "S2" "V!1" "a" "n!1"))
              (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (subset_below_bounded-1 nil 3506273133
   ("" (skosimp)
    (("" (typepred "V!1")
      (("" (expand "below_bounded")
        (("" (skolem!)
          (("" (inst?)
            ((""
              (lemma "lower_bound_subset" ("S1" "S!1" "S2" "V!1" "a" "n!1"))
              (("" (assert) nil))))))))))))
    nil)
   ((inf_set type-eq-decl nil bounded_reals nil)
    (below_bounded const-decl "bool" bounded_reals nil)
    (setof type-eq-decl nil defined_types nil)
    (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (T formal-subtype-decl nil real_sets nil)
    (T_pred const-decl "[real -> boolean]" real_sets nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (lower_bound_subset formula-decl nil real_sets nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil))
   nil))
 (inf_of_subset 0
  (inf_of_subset-2 "" 3790089398
   ("" (skosimp)
    (("" (lemma "inf_lemma" ("V" "V2!1"))
      (("" (expand "greatest_lower_bound")
        (("" (flatten)
          (("" (delete -2)
            (("" (forward-chain "lower_bound_subset")
              (("" (rewrite "inf_is_inf") nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (inf_of_subset-1 nil 3506273133
   ("" (skosimp)
    (("" (lemma "inf_lemma" ("V" "V2!1"))
      (("" (expand "greatest_lower_bound")
        (("" (flatten)
          (("" (delete -2)
            (("" (forward-chain "lower_bound_subset")
              (("" (rewrite "inf_is_inf") nil))))))))))))
    nil)
   ((inf_set type-eq-decl nil bounded_reals nil)
    (below_bounded const-decl "bool" bounded_reals nil)
    (setof type-eq-decl nil defined_types nil)
    (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (T formal-subtype-decl nil real_sets nil)
    (T_pred const-decl "[real -> boolean]" real_sets nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (inf_lemma formula-decl nil real_sets nil)
    (lower_bound_subset formula-decl nil real_sets nil)
    (pred type-eq-decl nil defined_types nil) (<= const-decl "bool" reals nil)
    (inf const-decl "{x | greatest_lower_bound(<=)(x, Sl)}" bounded_reals nil)
    (inf_is_inf formula-decl nil real_sets nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (greatest_lower_bound const-decl "bool" bound_defs nil))
   nil))
 (adherence_inf 0
  (adherence_inf-2 "" 3790089398
   ("" (skolem!)
    (("" (lemma "inf_is_inf" ("V" "V!1" "x" "inf(V!1) + epsilon!1"))
      (("" (assert)
        (("" (expand "lower_bound")
          (("" (skosimp*) (("" (inst 2 "z!1") (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (adherence_inf-1 nil 3506273133
   ("" (skolem!)
    (("" (lemma "inf_is_inf" ("V" "V!1" "x" "inf(V!1) + epsilon!1"))
      (("" (assert)
        (("" (expand "lower_bound")
          (("" (skosimp*) (("" (inst 2 "z!1") (("" (assert) nil))))))))))))
    nil)
   ((posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (inf const-decl "{x | greatest_lower_bound(<=)(x, Sl)}" bounded_reals nil)
    (<= const-decl "bool" reals nil)
    (greatest_lower_bound const-decl "bool" bound_defs nil)
    (pred type-eq-decl nil defined_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (inf_set type-eq-decl nil bounded_reals nil)
    (below_bounded const-decl "bool" bounded_reals nil)
    (setof type-eq-decl nil defined_types nil)
    (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (T formal-subtype-decl nil real_sets nil)
    (T_pred const-decl "[real -> boolean]" real_sets nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (inf_is_inf formula-decl nil real_sets nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (lower_bound const-decl "bool" bound_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil)))


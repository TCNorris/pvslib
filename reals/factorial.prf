(factorial
 (factorial_product_TCC1 0
  (factorial_product_TCC1-1 nil 3536929858 ("" (subtype-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil (factorial_product subtype "1" "T_low[nat]")))
 (factorial_product_TCC2 0
  (factorial_product_TCC2-1 nil 3536929858 ("" (subtype-tcc) nil nil) nil nil
   (factorial_product subtype "factorial.n" "T_high[nat]")))
 (factorial_product_TCC3 0
  (factorial_product_TCC3-1 nil 3536930474 ("" (assuming-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil
   (factorial_product assuming "product[nat].product"
    "connected_domain: ASSUMPTION (FORALL (x, y: product.T), (z: integers.integer): booleans.IMPLIES(booleans.AND(reals.<=(x, z), reals.<=(z, y)), product.T_pred(z)))")))
 (factorial_product 0
  (factorial_product-1 nil 3536930226
   ("" (skeep)
    (("" (rewrite "product_it_product" :dir rl)
      (("" (expand "product_it")
        (("" (lemma "for_induction")
          (("" (inst? -1)
            (("" (inst -1 "LAMBDA(i:upto(n),a:real) : a = factorial(i)")
              (("" (assert)
                (("" (hide 2)
                  (("" (skeep)
                    (("" (expand "factorial" +) (("" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((product_it_product formula-decl nil product nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (T_high type-eq-decl nil product nil)
    (T_low type-eq-decl nil product nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (for_induction formula-decl nil for_iterate structures)
    (factorial def-decl "posnat" factorial ints)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (PRED type-eq-decl nil defined_types nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (factorial_0 formula-decl nil factorial ints)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subrange type-eq-decl nil integers nil)
    (ForBody type-eq-decl nil for_iterate structures)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (product_it const-decl "real" product nil))
   shostak))
 (product_factorial_TCC1 0
  (product_factorial_TCC1-1 nil 3536930474 ("" (subtype-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (product_factorial subtype "1" "T_low[posnat]")))
 (product_factorial_TCC2 0
  (product_factorial_TCC2-1 nil 3536930474 ("" (subtype-tcc) nil nil) nil nil
   (product_factorial subtype "factorial.p" "T_high[posnat]")))
 (product_factorial_TCC3 0
  (product_factorial_TCC3-1 nil 3536930474 ("" (assuming-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (product_factorial assuming "product[posnat].product"
    "connected_domain: ASSUMPTION (FORALL (x, y: product.T), (z: integers.integer): booleans.IMPLIES(booleans.AND(reals.<=(x, z), reals.<=(z, y)), product.T_pred(z)))")))
 (product_factorial 0
  (product_factorial-1 nil 3536930495
   ("" (skeep)
    (("" (rewrite "product_it_product" :dir rl)
      (("" (expand "product_it")
        (("" (lemma "for_induction")
          (("" (inst? -1)
            (("" (inst -1 "LAMBDA(i:upto(p),a:real) : a = factorial(i)")
              (("" (assert)
                (("" (hide 2)
                  (("" (skeep)
                    (("" (expand "factorial" +) (("" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((product_it_product formula-decl nil product nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (T_high type-eq-decl nil product nil)
    (T_low type-eq-decl nil product nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (for_induction formula-decl nil for_iterate structures)
    (factorial def-decl "posnat" factorial ints)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (PRED type-eq-decl nil defined_types nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (factorial_0 formula-decl nil factorial ints)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (subrange type-eq-decl nil integers nil)
    (ForBody type-eq-decl nil for_iterate structures)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (product_it const-decl "real" product nil))
   nil))
 (factorial_2n_lb_TCC1 0
  (factorial_2n_lb_TCC1-1 nil 3689803686
   ("" (skosimp*) (("" (assert) nil nil)) nil)
   ((nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil
   (factorial_2n_lb subtype "(number_fields.*(2, factorial.n))"
    "{i: integers.int | booleans.OR(sqrt.sqrt(factorial.n) /= 0, reals.>=(i, 0))}")))
 (factorial_2n_lb 0
  (factorial_2n_lb-1 nil 3689803792
   ("" (case "FORALL (n: nat): n^n <= factorial(2 * n)")
    (("1" (skosimp)
      (("1" (inst - "n!1")
        (("1" (rewrite "expt_times")
          (("1" (expand "^" 1 1)
            (("1" (expand "expt" 1)
              (("1" (expand "expt" 1)
                (("1" (expand "expt" 1) (("1" (rewrite "sq_rew") nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (case "FORALL (n, N: nat): n <= N => N ^ n <= factorial(n + N)")
        (("1" (skosimp)
          (("1" (inst - "n!1" "n!1") (("1" (assert) nil nil)) nil)) nil)
         ("2" (hide 2)
          (("2" (skolem 1 ("_" "N"))
            (("2" (induct "n")
              (("1" (assert)
                (("1" (expand "^")
                  (("1" (expand "expt") (("1" (assert) nil nil)) nil)) nil))
                nil)
               ("2" (skosimp*)
                (("2" (assert)
                  (("2" (rewrite "expt_plus")
                    (("2" (rewrite "expt_x1")
                      (("2" (expand "factorial" 1)
                        (("2" (lemma "le_times_le_pos")
                          (("2"
                            (inst - "N^j!1" "N" "N+j!1+1" "factorial(N+j!1)")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (le_times_le_pos formula-decl nil real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (expt_plus formula-decl nil exponentiation nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nnreal type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (expt_times formula-decl nil exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (nnreal_exp application-judgement "nnreal" exponentiation nil)
    (expt def-decl "real" exponentiation nil) (sq_rew formula-decl nil sq nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (sq_sqrt formula-decl nil sqrt nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (factorial def-decl "posnat" factorial ints)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil))
   nil))
 (factorial_2np1_lb_TCC1 0
  (factorial_2np1_lb_TCC1-1 nil 3689803686
   ("" (skosimp*) (("" (assert) nil nil)) nil)
   ((nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil
   (factorial_2np1_lb subtype
    "((number_fields.+)(number_fields.*(2, factorial.n), 1))"
    "{i: integers.int | booleans.OR(sqrt.sqrt(factorial.n) /= 0, reals.>=(i, 0))}")))
 (factorial_2np1_lb 0
  (factorial_2np1_lb-1 nil 3689803812
   ("" (skosimp)
    (("" (lemma "factorial_2n_lb" ("n" "n!1"))
      (("" (case-replace "n!1=0")
        (("1" (expand "factorial")
          (("1" (expand "factorial")
            (("1" (rewrite "sqrt_0")
              (("1" (expand "^")
                (("1" (expand "expt") (("1" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil)
         ("2" (rewrite "expt_plus" 2)
          (("2" (expand "factorial" 2)
            (("2" (assert)
              (("2" (rewrite "expt_x1")
                (("2"
                  (lemma "le_times_le_pos"
                   ("nnx" "sqrt(n!1) ^ (2 * n!1)" "y" "factorial(2 * n!1)"
                    "nnz" "sqrt(n!1)" "w" "1+2*n!1"))
                  (("2" (assert)
                    (("2" (hide-all-but (1 2))
                      (("2"
                        (lemma "sq_le"
                         ("nna" "sqrt(n!1)" "nnb" "1 + 2 * n!1"))
                        (("2" (rewrite "sq_sqrt")
                          (("2" (replace -1 1 rl)
                            (("2" (hide -1)
                              (("2" (expand "sq") (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (factorial_2n_lb formula-decl nil factorial nil)
    (expt_plus formula-decl nil exponentiation nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt nil)
    (nnreal_exp application-judgement "nnreal" exponentiation nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (le_times_le_pos formula-decl nil real_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (sq_sqrt formula-decl nil sqrt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (sq const-decl "nonneg_real" sq nil) (sq_le formula-decl nil sq nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (factorial def-decl "posnat" factorial ints)
    (sqrt_0 formula-decl nil sqrt nil)
    (expt def-decl "real" exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   nil))
 (factorial_monotone_increasing 0
  (factorial_monotone_increasing-1 nil 3707649477
   ("" (induct "a")
    (("1" (skeep) (("1" (typepred "b") (("1" (assert) nil nil)) nil)) nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (case "b=0 OR b-1>=0")
          (("1" (hide -1)
            (("1" (inst -1 "b-1")
              (("1" (assert)
                (("1" (expand "factorial" 1)
                  (("1" (lift-if)
                    (("1" (split)
                      (("1" (flatten)
                        (("1" (factor! (! 1 l))
                          (("1" (case "j>0")
                            (("1" (assert) nil nil) ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (factor! (! 2 l))
                          (("2" (mult-ineq -1 -2 (+ +))
                            (("1" (assert) nil nil)
                             ("2" (typepred "b") (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (reveal -2)
                (("2" (split)
                  (("1" (replaces -1 2) (("1" (assert) nil nil)) nil)
                   ("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide - 2)
            (("2" (typepred "b")
              (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (b skolem-const-decl "nat" factorial nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (gt_times_gt_any1 formula-decl nil extra_real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (factorial_0 formula-decl nil factorial ints)
    (TRUE const-decl "bool" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (factorial def-decl "posnat" factorial ints)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (ffactorial_TCC1 0
  (ffactorial_TCC1-2 "" 3790088548
   ("" (skeep)
    (("" (rewrite "product_it_product") (("" (assert) nil nil)) nil)) nil)
   nil shostak
   (ffactorial subtype
    "product[nat].product_it(1, factorial.n, LAMBDA (i: naturalnumbers.nat): i)"
    "nat"))
  (ffactorial_TCC1-1 nil 3689801791
   ("" (skeep)
    (("" (rewrite "product_it_product")
      (("" (assert) (("" (postpone) nil nil)) nil)) nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (product_it_product formula-decl nil product nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (T_high type-eq-decl nil product nil)
    (T_low type-eq-decl nil product nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (prod_nat application-judgement "nat" product nil))
   nil
   (ffactorial subtype
    "product[nat].product_it(1, factorial.n, LAMBDA (i: naturalnumbers.nat): i)"
    "nat")))
 (ffactorial_factorial 0
  (ffactorial_factorial-1 nil 3689801939
   ("" (skeep)
    (("" (rewrite "factorial_product")
      (("" (expand "ffactorial") (("" (rewrite "product_it_product") nil nil))
        nil))
      nil))
    nil)
   ((factorial_product formula-decl nil factorial nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (prod_nat application-judgement "nat" product nil)
    (product_it_product formula-decl nil product nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (T_high type-eq-decl nil product nil)
    (T_low type-eq-decl nil product nil)
    (ffactorial const-decl "nat" factorial nil))
   shostak))
 (ffactorial_pos 0
  (ffactorial_pos-1 nil 3689802002
   ("" (skeep)
    (("" (rewrite "ffactorial_factorial") (("" (assert) nil nil)) nil)) nil)
   ((ffactorial_factorial formula-decl nil factorial nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (ffactorial_pos subtype "factorial.ffactorial(factorial.n)" "posnat"))))


(real_facts
 (bounded?_lem 0
  (bounded?_lem-1 nil 3280072578
   ("" (skosimp*)
    (("" (prop)
      (("1" (expand "bounded?")
        (("1" (flatten)
          (("1" (expand "bounded_above?")
            (("1" (expand "bounded_below?")
              (("1" (skosimp*)
                (("1" (expand "lower_bound?")
                  (("1" (expand "upper_bound?")
                    (("1" (inst + "max(abs(x!1),abs(x!2))")
                      (("1" (skosimp*)
                        (("1" (inst - "x!3")
                          (("1" (inst - "x!3")
                            (("1" (expand "max")
                              (("1" (lift-if)
                                (("1" (ground)
                                  (("1" (grind) nil nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skosimp*)
        (("2" (expand "bounded?")
          (("2" (prop)
            (("1" (expand "bounded_above?")
              (("1" (expand "upper_bound?")
                (("1" (inst + "B!1")
                  (("1" (skosimp*) (("1" (inst?) (("1" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "bounded_below?")
              (("2" (expand "lower_bound?")
                (("2" (inst + "-B!1")
                  (("2" (skosimp*)
                    (("2" (inst - "s!1") (("2" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bounded_below? const-decl "bool" bounded_real_defs nil)
    (lower_bound? const-decl "bool" bounded_real_defs nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (upper_bound? const-decl "bool" bounded_real_defs nil)
    (bounded_above? const-decl "bool" bounded_real_defs nil)
    (bounded? const-decl "bool" bounded_real_defs nil))
   shostak))
 (archimedean2 0
  (archimedean2-2 "" 3790089399
   ("" (skolem!)
    (("" (lemma "axiom_of_archimedes" ("x" "1/x!1"))
      (("" (skolem!)
        (("" (assert)
          (("" (inst 1 "i!1")
            (("" (rewrite "div_mult_pos_lt1")
              (("" (rewrite "div_mult_pos_lt1") (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (archimedean2-1 nil 3258973007
   ("" (skolem!)
    (("" (lemma "axiom_of_archimedes" ("x" "1/x!1"))
      (("" (skolem!)
        (("" (assert)
          (("" (inst 1 "i!1")
            (("" (rewrite "div_mult_pos_lt1")
              (("" (rewrite "div_mult_pos_lt1")
                (("" (assert) nil))))))))))))))
    nil)
   ((posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (axiom_of_archimedes formula-decl nil real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (archimedean3 0
  (archimedean3-2 "" 3790089399
   ("" (skosimp)
    (("" (case "x!1 > 0")
      (("1" (lemma "archimedean2" ("x" "x!1"))
        (("1" (skolem!) (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
         ("2" (propax) nil nil))
        nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   nil shostak)
  (archimedean3-1 nil 3258973007
   ("" (skosimp)
    (("" (case "x!1 > 0")
      (("1" (lemma "archimedean2" ("x" "x!1"))
        (("1" (skolem!) (("1" (inst?) (("1" (assert) nil)))))
         ("2" (propax) nil)))
       ("2" (assert) nil))))
    nil)
   ((nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (archimedean2 formula-decl nil real_facts nil)
    (posreal nonempty-type-eq-decl nil real_types nil))
   nil))
 (nat_interval 0
  (nat_interval-2 "" 3790089399
   ("" (skolem!)
    (("" (lemma "wf_nat")
      (("" (expand "well_founded?")
        (("" (inst -1 "lambda (b : nat) : x!1 < b")
          (("" (split)
            (("1" (skolem!)
              (("1" (typepred "y!1")
                (("1" (inst -2 "y!1 - 1")
                  (("1" (assert) nil nil)
                   ("2" (inst 2 "y!1 - 1") (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (lemma "axiom_of_archimedes" ("x" "x!1"))
              (("2" (skolem!) (("2" (inst?) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (nat_interval-1 nil 3258973007
   ("" (skolem!)
    (("" (lemma "wf_nat")
      (("" (expand "well_founded?")
        (("" (inst -1 "lambda (b : nat) : x!1 < b")
          (("" (beta)
            (("" (split)
              (("1" (skolem!)
                (("1" (typepred "y!1")
                  (("1" (inst -2 "y!1 - 1")
                    (("1" (assert) nil)
                     ("2" (inst 2 "y!1 - 1") (("2" (assert) nil)))))))))
               ("2" (lemma "axiom_of_archimedes" ("x" "x!1"))
                (("2" (skolem!)
                  (("2" (inst?) (("2" (assert) nil))))))))))))))))))
    nil)
   ((wf_nat formula-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil) (< const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (axiom_of_archimedes formula-decl nil real_props nil)
    (i!1 skolem-const-decl "int" real_facts nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (x!1 skolem-const-decl "nonneg_real" real_facts nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (y!1 skolem-const-decl "(LAMBDA (b: nat): x!1 < b)" real_facts nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (well_founded? const-decl "bool" orders nil))
   nil))
 (int_interval 0
  (int_interval-2 "" 3790089400
   ("" (skolem!)
    (("" (case "x!1 >= 0")
      (("1" (lemma "nat_interval" ("x" "x!1"))
        (("1" (skosimp) (("1" (inst 1 "a!1") (("1" (assert) nil nil)) nil))
          nil)
         ("2" (propax) nil nil))
        nil)
       ("2" (lemma "nat_interval" ("x" "- x!1"))
        (("1" (skosimp)
          (("1" (case "a!1 = -x!1")
            (("1" (inst 2 "- a!1") (("1" (assert) nil nil)) nil)
             ("2" (inst 3 "-a!1 - 1") (("2" (assert) nil nil)) nil))
            nil))
          nil)
         ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   nil shostak)
  (int_interval-1 nil 3258973007
   ("" (skolem!)
    (("" (case "x!1 >= 0")
      (("1" (lemma "nat_interval" ("x" "x!1"))
        (("1" (skosimp) (("1" (inst 1 "a!1") (("1" (assert) nil)))))
         ("2" (propax) nil)))
       ("2" (lemma "nat_interval" ("x" "- x!1"))
        (("1" (skosimp)
          (("1" (case "a!1 = -x!1")
            (("1" (inst 2 "- a!1") (("1" (assert) nil)))
             ("2" (inst 3 "-a!1 - 1") (("2" (assert) nil)))))))
         ("2" (assert) nil))))))
    nil)
   ((>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nat_interval formula-decl nil real_facts nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil))
   nil))
 (lub_is_bound 0
  (lub_is_bound-1 nil 3258973007
   ("" (skolem!) (("" (typepred "lub(U!1)") (("" (grind) nil nil)) nil)) nil)
   ((lub const-decl "{x | least_upper_bound?(x, SA)}" bounded_real_defs nil)
    (bounded_above? const-decl "bool" bounded_real_defs nil)
    (least_upper_bound? const-decl "bool" bounded_real_defs nil)
    (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (upper_bound? const-decl "bool" bounded_real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil))
 (lub_is_lub 0
  (lub_is_lub-1 nil 3258973007
   ("" (skolem!)
    (("" (typepred "lub(U!1)")
      (("" (grind :if-match nil)
        (("1" (inst? -3) (("1" (inst? -2) (("1" (assert) nil nil)) nil)) nil)
         ("2" (inst? -2) (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((lub const-decl "{x | least_upper_bound?(x, SA)}" bounded_real_defs nil)
    (bounded_above? const-decl "bool" bounded_real_defs nil)
    (least_upper_bound? const-decl "bool" bounded_real_defs nil)
    (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (upper_bound? const-decl "bool" bounded_real_defs nil))
   nil))
 (lub_closed_intv_TCC1 0
  (lub_closed_intv_TCC1-1 nil 3258973165
   ("" (skosimp*)
    (("" (prop)
      (("1" (expand "nonempty?")
        (("1" (expand "empty?")
          (("1" (expand "member")
            (("1" (inst -1 "a!1") (("1" (assert) nil nil)) nil)) nil))
          nil))
        nil)
       ("2" (expand "bounded_above?")
        (("2" (expand "upper_bound?")
          (("2" (inst 1 "b!1") (("2" (skosimp*) (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((empty? const-decl "bool" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (member const-decl "bool" sets nil) (nonempty? const-decl "bool" sets nil)
    (upper_bound? const-decl "bool" bounded_real_defs nil)
    (bounded_above? const-decl "bool" bounded_real_defs nil))
   shostak
   (lub_closed_intv subtype
    "{x | booleans.AND(reals.<=(real_facts.a, real_facts.x), reals.<=(real_facts.x, real_facts.b))}"
    "(bounded_real_defs.bounded_above?)")))
 (lub_closed_intv 0
  (lub_closed_intv-1 nil 3258974830
   ("" (skosimp*)
    (("" (typepred "lub({x | a!1 <= x AND x <= b!1})")
      (("1" (expand "least_upper_bound?")
        (("1" (flatten)
          (("1" (expand "upper_bound?")
            (("1" (inst -1 "b!1")
              (("1" (inst -2 "b!1") (("1" (assert) nil nil)) nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (prop)
          (("1" (expand "nonempty?")
            (("1" (expand "empty?")
              (("1" (expand "member")
                (("1" (inst -1 "a!1") (("1" (assert) nil nil)) nil)) nil))
              nil))
            nil)
           ("2" (expand "bounded_above?")
            (("2" (inst + "b!1")
              (("2" (expand "upper_bound?") (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (lub const-decl "{x | least_upper_bound?(x, SA)}" bounded_real_defs nil)
    (bounded_above? const-decl "bool" bounded_real_defs nil)
    (least_upper_bound? const-decl "bool" bounded_real_defs nil)
    (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (a!1 skolem-const-decl "real" real_facts nil)
    (b!1 skolem-const-decl "real" real_facts nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (upper_bound? const-decl "bool" bounded_real_defs nil)
    (empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil))
   shostak))
 (adherence_sup 0
  (adherence_sup-1 nil 3258973007
   ("" (skolem!)
    (("" (use "lub_is_lub" ("y" "lub(U!1) - epsilon!1"))
      (("" (assert)
        (("" (skolem!) (("" (inst + "x!1") (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (lub_is_lub formula-decl nil real_facts nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil) (nonempty? const-decl "bool" sets nil)
    (bounded_above? const-decl "bool" bounded_real_defs nil)
    (least_upper_bound? const-decl "bool" bounded_real_defs nil)
    (lub const-decl "{x | least_upper_bound?(x, SA)}" bounded_real_defs nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil))
 (glb_is_bound 0
  (glb_is_bound-1 nil 3258973007
   ("" (skolem!) (("" (typepred "glb(V!1)") (("" (grind) nil nil)) nil)) nil)
   ((glb const-decl "{x | greatest_lower_bound?(x, SB)}" bounded_real_defs
     nil)
    (bounded_below? const-decl "bool" bounded_real_defs nil)
    (greatest_lower_bound? const-decl "bool" bounded_real_defs nil)
    (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (lower_bound? const-decl "bool" bounded_real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil))
 (glb_is_glb 0
  (glb_is_glb-1 nil 3258973007
   ("" (skolem!)
    (("" (typepred "glb(V!1)")
      (("" (grind :if-match nil)
        (("1" (inst?) (("1" (assert) nil nil)) nil)
         ("2" (inst? -2) (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((glb const-decl "{x | greatest_lower_bound?(x, SB)}" bounded_real_defs
     nil)
    (bounded_below? const-decl "bool" bounded_real_defs nil)
    (greatest_lower_bound? const-decl "bool" bounded_real_defs nil)
    (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (lower_bound? const-decl "bool" bounded_real_defs nil))
   nil))
 (glb_closed_intv_TCC1 0
  (glb_closed_intv_TCC1-1 nil 3258974981 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (lower_bound? const-decl "bool" bounded_real_defs nil)
    (bounded_below? const-decl "bool" bounded_real_defs nil))
   shostak
   (glb_closed_intv subtype
    "{x | booleans.AND(reals.<=(real_facts.a, real_facts.x), reals.<=(real_facts.x, real_facts.b))}"
    "(bounded_real_defs.bounded_below?)")))
 (glb_closed_intv 0
  (glb_closed_intv-1 nil 3258975012
   ("" (skosimp*)
    (("" (typepred "glb({x | a!1 <= x AND x <= b!1})")
      (("1" (expand "greatest_lower_bound?")
        (("1" (flatten)
          (("1" (inst - "a!1")
            (("1" (expand "lower_bound?")
              (("1" (inst - "a!1")
                (("1" (grind) nil nil) ("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2) (("2" (grind) nil nil)) nil))
      nil))
    nil)
   ((<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (glb const-decl "{x | greatest_lower_bound?(x, SB)}" bounded_real_defs
     nil)
    (bounded_below? const-decl "bool" bounded_real_defs nil)
    (greatest_lower_bound? const-decl "bool" bounded_real_defs nil)
    (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (lower_bound? const-decl "bool" bounded_real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (b!1 skolem-const-decl "real" real_facts nil)
    (a!1 skolem-const-decl "real" real_facts nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil))
   shostak))
 (adherence_inf 0
  (adherence_inf-1 nil 3258973007
   ("" (skolem!)
    (("" (use "glb_is_glb" ("y" "glb(V!1) + epsilon!1"))
      (("" (assert)
        (("" (skolem!) (("" (inst + "x!1") (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (glb_is_glb formula-decl nil real_facts nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil) (nonempty? const-decl "bool" sets nil)
    (bounded_below? const-decl "bool" bounded_real_defs nil)
    (greatest_lower_bound? const-decl "bool" bounded_real_defs nil)
    (glb const-decl "{x | greatest_lower_bound?(x, SB)}" bounded_real_defs
     nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil))
 (bounded_sequence_converges 0
  (bounded_sequence_converges-5 nil 3672477843
   ("" (skeep*)
    ((""
      (name "Aset"
            "{r:real | EXISTS (K:nat): FORALL (m:nat): m>=K IMPLIES seq(m)>=r}")
      (("" (case "bounded_above?(Aset)")
        (("1" (name "Y" "lub(Aset)")
          (("1"
            (case "NOT FORALL (epsil:posreal,N:nat): EXISTS (m:nat): m>=N AND abs(seq(m)-Y)<epsil")
            (("1" (hide 2)
              (("1" (skeep*)
                (("1" (typepred "Y")
                  (("1" (expand "least_upper_bound?")
                    (("1" (flatten)
                      (("1" (case "Aset(Y-epsil/2)")
                        (("1" (expand "Aset" -1)
                          (("1" (skeep*)
                            (("1" (case "NOT Aset(Y+epsil/2)")
                              (("1" (expand "Aset" 1)
                                (("1" (inst + "max(K+1,N+1)")
                                  (("1" (skeep*)
                                    (("1" (insteep)
                                      (("1"
                                        (insteep)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide-all-but (-2 1 2))
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (expand "upper_bound?")
                                (("2" (inst -3 "Y+epsil/2")
                                  (("1" (assert) nil nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (inst - "Y-epsil/2")
                          (("2" (assert)
                            (("2" (hide 3)
                              (("2" (expand "upper_bound?" +)
                                (("2" (skeep)
                                  (("2" (typepred "s")
                                    (("2" (expand "Aset" (-1 1))
                                      (("2"
                                        (skeep*)
                                        (("2"
                                          (inst + "K")
                                          (("2"
                                            (skeep*)
                                            (("2"
                                              (inst - "m")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (case "NOT a<=b")
              (("1" (inst - "M") (("1" (assert) (("1" (ground) nil nil)) nil))
                nil)
               ("2" (assert)
                (("2" (case "NOT (a<=Y AND Y<=b)")
                  (("1" (hide 2)
                    (("1" (split +)
                      (("1" (inst - "(a-Y)/2" "M")
                        (("1" (skosimp*)
                          (("1" (hide (-4 -5 -6)) (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("2" (inst - "(Y-b)/2" "M")
                        (("1" (skosimp*)
                          (("1" (inst - "m!1") (("1" (assert) nil nil)) nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (hide -3)
                      (("2" (assert)
                        (("2"
                          (case "NOT EXISTS (gs:[set[nat]->nat]): FORALL (A:set[nat]): (not empty?(A)) IMPLIES (A(gs(A)) AND FORALL (j:(A)): gs(A)<=j)")
                          (("1" (hide-all-but 1)
                            (("1"
                              (name "F"
                                    "LAMBDA (A:set[nat]): IF empty?(A) THEN 0 ELSE choose({n:(A) | greatest_lower_bound?(n,A)}) ENDIF")
                              (("1" (inst + "F")
                                (("1" (skeep*)
                                  (("1" (assert)
                                    (("1" (split +)
                                      (("1"
                                        (expand "F" 1)
                                        (("1" (propax) nil nil))
                                        nil)
                                       ("2"
                                        (skeep*)
                                        (("2"
                                          (expand "F" 1)
                                          (("2"
                                            (invoke (name "ZZ" "%1") (! 1 1))
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (typepred "ZZ")
                                                (("1"
                                                  (expand
                                                   "greatest_lower_bound?")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (expand
                                                       "lower_bound?"
                                                       -2)
                                                      (("1"
                                                        (inst - "j")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "extend"
                                                             1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (expand "nonempty?")
                                                (("2"
                                                  (expand "empty?")
                                                  (("2"
                                                    (expand "member")
                                                    (("2"
                                                      (lemma "glb_nat")
                                                      (("2"
                                                        (inst?)
                                                        (("1"
                                                          (skeep*)
                                                          (("1"
                                                            (inst - "n")
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand "nonempty?")
                                                          (("2"
                                                            (expand "empty?")
                                                            (("2"
                                                              (expand
                                                               "member")
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (hide 2)
                                              (("3"
                                                (skeep*)
                                                (("3"
                                                  (expand "nonempty?")
                                                  (("3"
                                                    (expand "empty?")
                                                    (("3"
                                                      (expand "extend")
                                                      (("3"
                                                        (expand "member")
                                                        (("3"
                                                          (skeep*)
                                                          (("3"
                                                            (inst - "x")
                                                            (("3"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide 2)
                                (("2" (skeep*)
                                  (("2" (lemma "glb_nat")
                                    (("2" (inst - "A")
                                      (("1"
                                        (expand "nonempty?")
                                        (("1"
                                          (expand "empty?")
                                          (("1"
                                            (expand "member")
                                            (("1"
                                              (skeep*)
                                              (("1" (inst - "n") nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 3)
                                        (("2"
                                          (expand "nonempty?")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3" (hide 2)
                                (("3" (skeep*)
                                  (("3" (expand "nonempty?")
                                    (("3" (expand "empty?")
                                      (("3"
                                        (expand "extend")
                                        (("3"
                                          (expand "member")
                                          (("3"
                                            (skosimp*)
                                            (("3"
                                              (inst - "x!1")
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skeep -)
                            (("2"
                              (case "NOT FORALL (K:nat): EXISTS (sub:[nat->nat]): sub(0)=gs({m:nat | abs(seq(m)-Y)<1}) AND (FORALL (i:nat): i+1<=K IMPLIES sub(i+1)=gs({m:nat | m>sub(i) AND abs(seq(m)-Y)<1/(i+1)}))")
                              (("1" (hide 2)
                                (("1" (induct "K")
                                  (("1"
                                    (inst +
                                     "LAMBDA (i:nat): gs({m: nat | abs(seq(m) - Y) < 1})")
                                    (("1" (assert) nil nil)) nil)
                                   ("2" (skolem 1 "K")
                                    (("2" (flatten)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (name
                                             "sub2"
                                             "LAMBDA (i:nat): IF i=0 OR i<K THEN sub(i) ELSE gs({m:nat | m>sub(i-1) AND abs(seq(m)-Y)<1/i}) ENDIF")
                                            (("1"
                                              (inst + "sub2")
                                              (("1"
                                                (split +)
                                                (("1"
                                                  (expand "sub2" +)
                                                  (("1" (propax) nil nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (skeep*)
                                                    (("2"
                                                      (case "NOT i+1=K+1")
                                                      (("1"
                                                        (inst - "i")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand "sub2" +)
                                                            (("1"
                                                              (lift-if)
                                                              (("1"
                                                                (ground)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (hide -2)
                                                          (("2"
                                                            (expand
                                                             "sub2"
                                                             +
                                                             1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (case
                                                                 "FORALL (z:nat): z<=K IMPLIES sub2(z)=sub(z)")
                                                                (("1"
                                                                  (inst - "i")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide 2)
                                                                  (("2"
                                                                    (skeep*)
                                                                    (("2"
                                                                      (expand
                                                                       "sub2"
                                                                       1)
                                                                      (("2"
                                                                        (lift-if)
                                                                        (("2"
                                                                          (ground)
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "z-1")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2" (skeep*) nil nil))
                                              nil)
                                             ("3"
                                              (skosimp*)
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (name "sub"
                                      "LAMBDA (K:nat): choose({F: [nat -> nat] |
          F(0) = gs({m: nat | abs(seq(m) - Y) < 1}) AND
           (FORALL (i: nat):
              i + 1 <= K IMPLIES
               F(i + 1) =
                gs({m: nat | m > F(i) AND abs(seq(m) - Y) < 1 / (i + 1)}))})")
                                (("1"
                                  (case "NOT FORALL (J,K:nat): J<=K IMPLIES FORALL (i:nat): i<=J IMPLIES sub(J)(i)=sub(K)(i)")
                                  (("1" (hide (-2 2))
                                    (("1" (skeep)
                                      (("1"
                                        (induct "i")
                                        (("1"
                                          (assert)
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (skolem 1 "i")
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (typepred "sub(J)")
                                                (("2"
                                                  (inst - "i")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (replace -3)
                                                      (("2"
                                                        (typepred "sub(K)")
                                                        (("2"
                                                          (inst - "i")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (name "SUB" "LAMBDA (i:nat): sub(i)(i)")
                                    (("2"
                                      (case
                                       "NOT (SUB(0)=gs({m: nat | abs(seq(m) - Y) < 1}) AND FORALL (i:nat): SUB(i+1)=gs({m: nat |
                               m > SUB(i) AND
                                abs(seq(m) - Y) < 1 / (i + 1)}))")
                                      (("1"
                                        (hide 2)
                                        (("1"
                                          (split +)
                                          (("1"
                                            (expand "SUB" +)
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (skeep*)
                                            (("2"
                                              (expand "SUB" 1)
                                              (("2"
                                                (inst - "i" "1+i")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (inst - "i")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (replace -2 +)
                                                        (("2"
                                                          (typepred
                                                           "sub(1+i)")
                                                          (("2"
                                                            (inst - "i")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (hide (-3 -4 -5 -6))
                                          (("2"
                                            (inst + "Y" "SUB")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (invoke
                                                 (case "NOT %1")
                                                 (! 1 1))
                                                (("1"
                                                  (hide 2)
                                                  (("1"
                                                    (case
                                                     "FORALL (i:nat): SUB(i)<SUB(i+1)")
                                                    (("1"
                                                      (induct "j")
                                                      (("1" (assert) nil nil)
                                                       ("2"
                                                        (skolem 1 "j")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (inst - "i")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "j")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (skeep*)
                                                        (("2"
                                                          (inst - "i")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (inst
                                                               -
                                                               "{m: nat | m > SUB(i) AND abs(seq(m) - Y) < 1 / (1 + i)}")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "empty?")
                                                                  (("2"
                                                                    (expand
                                                                     "member")
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "1/(1+i)"
                                                                       "SUB(i)+1")
                                                                      (("2"
                                                                        (skeep)
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "m")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (replace -1)
                                                  (("2"
                                                    (skeep*)
                                                    (("2"
                                                      (lemma "archimedean2")
                                                      (("2"
                                                        (inst - "epsil")
                                                        (("2"
                                                          (skolem - "N")
                                                          (("2"
                                                            (inst + "N")
                                                            (("2"
                                                              (skeep +)
                                                              (("2"
                                                                (inst - "i-1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (name
                                                                     "D"
                                                                     "{m: nat | m > SUB(i - 1) AND abs(seq(m) - Y) < 1 / i}")
                                                                    (("1"
                                                                      (case
                                                                       "empty?(D)")
                                                                      (("1"
                                                                        (expand
                                                                         "empty?")
                                                                        (("1"
                                                                          (expand
                                                                           "member")
                                                                          (("1"
                                                                            (inst
                                                                             -10
                                                                             "1/i"
                                                                             "SUB(i-1)+1")
                                                                            (("1"
                                                                              (skosimp*)
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "m!1")
                                                                                (("1"
                                                                                  (expand
                                                                                   "D")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (split
                                                                                 1)
                                                                                (("1"
                                                                                  (cross-mult
                                                                                   1)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (cross-mult
                                                                                   1)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (inst
                                                                         -
                                                                         "D")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (replace
                                                                               -1)
                                                                              (("2"
                                                                                (replace
                                                                                 -5
                                                                                 -6
                                                                                 :dir
                                                                                 rl)
                                                                                (("2"
                                                                                  (copy
                                                                                   -6)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "D"
                                                                                     -1)
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (case
                                                                                           "1/i<=1/N")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (cross-mult
                                                                                             1)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide 2)
                                  (("2" (skeep*)
                                    (("2" (inst - "K")
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (expand "nonempty?")
                                          (("2"
                                            (expand "empty?")
                                            (("2"
                                              (expand "member")
                                              (("2"
                                                (inst - "sub")
                                                (("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (propax) nil nil))
          nil)
         ("2" (hide 2)
          (("2" (expand "bounded_above?")
            (("2" (inst + "b+1")
              (("2" (expand "upper_bound?")
                (("2" (skeep)
                  (("2" (typepred "s")
                    (("2" (expand "Aset" -1)
                      (("2" (skosimp*)
                        (("2" (inst - "max(K!1,M)")
                          (("2" (assert)
                            (("2" (split -)
                              (("1" (inst?) (("1" (assert) nil nil)) nil)
                               ("2" (hide -) (("2" (grind) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide 2)
          (("3" (expand "nonempty?")
            (("3" (expand "empty?")
              (("3" (inst - "a-1")
                (("3" (expand "member")
                  (("3" (expand "Aset")
                    (("3" (inst + "M")
                      (("3" (skeep)
                        (("3" (inst - "m") (("3" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs
     nil)
    (least_upper_bound? const-decl "bool" bounded_real_defs nil)
    (lub const-decl "{x | least_upper_bound?(x, SA)}" bounded_real_defs nil)
    (<= const-decl "bool" reals nil)
    (a skolem-const-decl "real" real_facts nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (b skolem-const-decl "real" real_facts nil)
    (empty? const-decl "bool" sets nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (choose const-decl "(p)" sets nil)
    (greatest_lower_bound? const-decl "bool" bounded_real_defs nil)
    (FALSE const-decl "bool" booleans nil) (extend const-decl "R" extend nil)
    (F skolem-const-decl "[set[nat] -> nat]" real_facts nil)
    (glb_nat formula-decl nil integer_props nil)
    (member const-decl "bool" sets nil)
    (lower_bound? const-decl "bool" bounded_real_defs nil)
    (j skolem-const-decl "(A)" real_facts nil)
    (A skolem-const-decl "set[nat]" real_facts nil)
    (A skolem-const-decl "set[nat]" real_facts nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (sub2 skolem-const-decl "[nat -> nat]" real_facts nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (SUB skolem-const-decl "[nat -> nat]" real_facts nil)
    (archimedean2 formula-decl nil real_facts nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (D skolem-const-decl "[nat -> boolean]" real_facts nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div2 formula-decl nil real_props nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat" rationals
     nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (i skolem-const-decl "nat" real_facts nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (Aset skolem-const-decl "[real -> boolean]" real_facts nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posrat_max application-judgement "{s: posrat | s >= q AND s >= r}"
     real_defs nil)
    (posint_max application-judgement "{k: posint | i <= k AND j <= k}"
     real_defs nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (epsil skolem-const-decl "posreal" real_facts nil)
    (Y skolem-const-decl "{x | least_upper_bound?(x, Aset)}" real_facts nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (upper_bound? const-decl "bool" bounded_real_defs nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bounded_above? const-decl "bool" bounded_real_defs nil)
    (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil)
  (bounded_sequence_converges-4 nil 3672474235
   ("" (skeep*)
    ((""
      (name "Aset"
            "{r:real | EXISTS (K:nat): FORALL (m:nat): m>=K IMPLIES seq(m)>=r}")
      (("" (case "bounded_above?(Aset)")
        (("1" (name "Y" "lub(Aset)")
          (("1"
            (case "NOT FORALL (epsil:posreal,N:nat): EXISTS (m:nat): m>=N AND abs(seq(m)-Y)<epsil")
            (("1" (hide 2)
              (("1" (skeep*)
                (("1" (typepred "Y")
                  (("1" (expand "least_upper_bound?")
                    (("1" (flatten)
                      (("1" (case "Aset(Y-epsil/2)")
                        (("1" (expand "Aset" -1)
                          (("1" (skeep*)
                            (("1" (case "NOT Aset(Y+epsil/2)")
                              (("1" (expand "Aset" 1)
                                (("1" (inst + "max(K+1,N+1)")
                                  (("1" (skeep*)
                                    (("1" (insteep)
                                      (("1"
                                        (insteep)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide-all-but (-2 1 2))
                                            (("1" (grind) nil)))))))))))))))
                               ("2" (expand "upper_bound?")
                                (("2" (inst -3 "Y+epsil/2")
                                  (("1" (assert) nil)
                                   ("2" (assert) nil)))))))))))
                         ("2" (inst - "Y-epsil/2")
                          (("2" (assert)
                            (("2" (hide 3)
                              (("2" (expand "upper_bound?" +)
                                (("2" (skeep)
                                  (("2" (typepred "s")
                                    (("2" (expand "Aset" (-1 1))
                                      (("2"
                                        (skeep*)
                                        (("2"
                                          (inst + "K")
                                          (("2"
                                            (skeep*)
                                            (("2"
                                              (inst - "m")
                                              (("2"
                                                (assert)
                                                nil)))))))))))))))))))))))))))))))))))
             ("2" (case "NOT a<=b")
              (("1" (inst - "M") (("1" (assert) (("1" (ground) nil)))))
               ("2" (assert)
                (("2" (case "NOT (a<=Y AND Y<=b)")
                  (("1" (hide 2)
                    (("1" (split +)
                      (("1" (inst - "(a-Y)/2" "M")
                        (("1" (skosimp*)
                          (("1" (hide (-4 -5 -6)) (("1" (grind) nil)))))
                         ("2" (assert) nil)))
                       ("2" (inst - "(Y-b)/2" "M")
                        (("1" (skosimp*)
                          (("1" (inst - "m!1") (("1" (assert) nil)))))
                         ("2" (assert) nil)))))))
                   ("2" (flatten)
                    (("2" (hide -3)
                      (("2" (assert)
                        (("2"
                          (case "NOT EXISTS (gs:[set[nat]->nat]): FORALL (A:set[nat]): (not empty?(A)) IMPLIES (A(gs(A)) AND FORALL (j:(A)): gs(A)<=j)")
                          (("1" (hide-all-but 1)
                            (("1"
                              (name "F"
                                    "LAMBDA (A:set[nat]): IF empty?(A) THEN 0 ELSE choose({n:(A) | greatest_lower_bound?(n,A)}) ENDIF")
                              (("1" (inst + "F")
                                (("1" (skeep*)
                                  (("1" (assert)
                                    (("1" (split +)
                                      (("1"
                                        (expand "F" 1)
                                        (("1" (propax) nil)))
                                       ("2"
                                        (skeep*)
                                        (("2"
                                          (expand "F" 1)
                                          (("2"
                                            (invoke (name "ZZ" "%1") (! 1 1))
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (typepred "ZZ")
                                                (("1"
                                                  (expand
                                                   "greatest_lower_bound?")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (expand
                                                       "lower_bound?"
                                                       -2)
                                                      (("1"
                                                        (inst - "j")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "extend"
                                                             1)
                                                            (("1"
                                                              (propax)
                                                              nil)))))))))))))))))
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (expand "nonempty?")
                                                (("2"
                                                  (expand "empty?")
                                                  (("2"
                                                    (expand "member")
                                                    (("2"
                                                      (lemma "glb_nat")
                                                      (("2"
                                                        (inst?)
                                                        (("1"
                                                          (skeep*)
                                                          (("1"
                                                            (inst - "n")
                                                            nil)))
                                                         ("2"
                                                          (expand "nonempty?")
                                                          (("2"
                                                            (expand "empty?")
                                                            (("2"
                                                              (expand
                                                               "member")
                                                              (("2"
                                                                (propax)
                                                                nil)))))))))))))))))))
                                             ("3"
                                              (hide 2)
                                              (("3"
                                                (skeep*)
                                                (("3"
                                                  (expand "nonempty?")
                                                  (("3"
                                                    (expand "empty?")
                                                    (("3"
                                                      (expand "extend")
                                                      (("3"
                                                        (expand "member")
                                                        (("3"
                                                          (skeep*)
                                                          (("3"
                                                            (inst - "x")
                                                            (("3"
                                                              (assert)
                                                              nil)))))))))))))))))))))))))))))))
                               ("2" (hide 2)
                                (("2" (skeep*)
                                  (("2" (lemma "glb_nat")
                                    (("2" (inst - "A")
                                      (("1"
                                        (expand "nonempty?")
                                        (("1"
                                          (expand "empty?")
                                          (("1"
                                            (expand "member")
                                            (("1"
                                              (skeep*)
                                              (("1" (inst - "n") nil)))))))))
                                       ("2"
                                        (hide 3)
                                        (("2"
                                          (expand "nonempty?")
                                          (("2" (propax) nil)))))))))))))
                               ("3" (hide 2)
                                (("3" (skeep*)
                                  (("3" (expand "nonempty?")
                                    (("3" (expand "empty?")
                                      (("3"
                                        (expand "extend")
                                        (("3"
                                          (expand "member")
                                          (("3"
                                            (skosimp*)
                                            (("3"
                                              (inst - "x!1")
                                              (("3"
                                                (assert)
                                                nil)))))))))))))))))))))
                           ("2" (skeep -)
                            (("2"
                              (case "NOT FORALL (K:nat): EXISTS (sub:[nat->nat]): sub(0)=gs({m:nat | abs(seq(m)-Y)<1}) AND (FORALL (i:nat): i+1<=K IMPLIES sub(i+1)=gs({m:nat | m>sub(i) AND abs(seq(m)-Y)<1/(i+1)}))")
                              (("1" (hide 2)
                                (("1" (induct "K")
                                  (("1"
                                    (inst +
                                     "LAMBDA (i:nat): gs({m: nat | abs(seq(m) - Y) < 1})")
                                    (("1" (assert) nil)))
                                   ("2" (skolem + "K")
                                    (("2" (flatten)
                                      (("2"
                                        (skeep*)
                                        (("2"
                                          (name
                                           "sub2"
                                           "LAMBDA (i:nat): IF i=0 THEN sub(0) ELSE gs({m:nat | m>sub(i) AND abs(seq(m)-Y)<1/(i+1)}) ENDIF")
                                          (("2"
                                            (inst + "sub2")
                                            (("2"
                                              (split +)
                                              (("1"
                                                (expand "sub2" +)
                                                (("1" (propax) nil)))
                                               ("2"
                                                (skeep*)
                                                (("2"
                                                  (case "NOT i+1=K+1")
                                                  (("1"
                                                    (expand "sub2" +)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst - "i")
                                                        (("1"
                                                          (assert)
                                                          nil)))))))
                                                   ("2"
                                                    (postpone)
                                                    nil)))))))))))))))))))))
                               ("2" (postpone) nil)))))))))))))))))))))
           ("2" (postpone) nil)))
         ("2" (postpone) nil) ("3" (postpone) nil))))))
    nil)
   nil nil)
  (bounded_sequence_converges-3 nil 3672473621
   ("" (skeep*)
    ((""
      (name "Aset"
            "{r:real | EXISTS (K:nat): FORALL (m:nat): m>=K IMPLIES seq(m)>=r}")
      (("" (case "bounded_above?(Aset)")
        (("1" (name "Y" "lub(Aset)")
          (("1"
            (case "NOT FORALL (epsil:posreal,N:nat): EXISTS (m:nat): m>=N AND abs(seq(m)-Y)<epsil")
            (("1" (hide 2)
              (("1" (skeep*)
                (("1" (typepred "Y")
                  (("1" (expand "least_upper_bound?")
                    (("1" (flatten)
                      (("1" (case "Aset(Y-epsil/2)")
                        (("1" (expand "Aset" -1)
                          (("1" (skeep*)
                            (("1" (case "NOT Aset(Y+epsil/2)")
                              (("1" (expand "Aset" 1)
                                (("1" (inst + "max(K+1,N+1)")
                                  (("1" (skeep*)
                                    (("1" (insteep)
                                      (("1"
                                        (insteep)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide-all-but (-2 1 2))
                                            (("1" (grind) nil)))))))))))))))
                               ("2" (expand "upper_bound?")
                                (("2" (inst -3 "Y+epsil/2")
                                  (("1" (assert) nil)
                                   ("2" (assert) nil)))))))))))
                         ("2" (inst - "Y-epsil/2")
                          (("2" (assert)
                            (("2" (hide 3)
                              (("2" (expand "upper_bound?" +)
                                (("2" (skeep)
                                  (("2" (typepred "s")
                                    (("2" (expand "Aset" (-1 1))
                                      (("2"
                                        (skeep*)
                                        (("2"
                                          (inst + "K")
                                          (("2"
                                            (skeep*)
                                            (("2"
                                              (inst - "m")
                                              (("2"
                                                (assert)
                                                nil)))))))))))))))))))))))))))))))))))
             ("2" (case "NOT a<=b")
              (("1" (inst - "M") (("1" (assert) (("1" (ground) nil)))))
               ("2" (assert)
                (("2" (case "NOT (a<=Y AND Y<=b)")
                  (("1" (hide 2)
                    (("1" (split +)
                      (("1" (inst - "(a-Y)/2" "M")
                        (("1" (skosimp*)
                          (("1" (hide (-4 -5 -6)) (("1" (grind) nil)))))
                         ("2" (assert) nil)))
                       ("2" (inst - "(Y-b)/2" "M")
                        (("1" (skosimp*)
                          (("1" (inst - "m!1") (("1" (assert) nil)))))
                         ("2" (assert) nil)))))))
                   ("2" (flatten)
                    (("2" (hide -3)
                      (("2" (assert)
                        (("2"
                          (case "NOT EXISTS (gs:[set[nat]->nat]): FORALL (A:set[nat]): (not empty?(A)) IMPLIES (A(gs(A)) AND FORALL (j:(A)): gs(A)<=j)")
                          (("1" (hide-all-but 1)
                            (("1"
                              (name "F"
                                    "LAMBDA (A:set[nat]): IF empty?(A) THEN 0 ELSE choose({n:(A) | greatest_lower_bound?(n,A)}) ENDIF")
                              (("1" (inst + "F")
                                (("1" (skeep*)
                                  (("1" (assert)
                                    (("1" (split +)
                                      (("1"
                                        (expand "F" 1)
                                        (("1" (propax) nil)))
                                       ("2"
                                        (skeep*)
                                        (("2"
                                          (expand "F" 1)
                                          (("2"
                                            (invoke (name "ZZ" "%1") (! 1 1))
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (typepred "ZZ")
                                                (("1"
                                                  (expand
                                                   "greatest_lower_bound?")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (expand
                                                       "lower_bound?"
                                                       -2)
                                                      (("1"
                                                        (inst - "j")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "extend"
                                                             1)
                                                            (("1"
                                                              (propax)
                                                              nil)))))))))))))))))
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (expand "nonempty?")
                                                (("2"
                                                  (expand "empty?")
                                                  (("2"
                                                    (expand "member")
                                                    (("2"
                                                      (lemma "glb_nat")
                                                      (("2"
                                                        (inst?)
                                                        (("1"
                                                          (skeep*)
                                                          (("1"
                                                            (inst - "n")
                                                            nil)))
                                                         ("2"
                                                          (expand "nonempty?")
                                                          (("2"
                                                            (expand "empty?")
                                                            (("2"
                                                              (expand
                                                               "member")
                                                              (("2"
                                                                (propax)
                                                                nil)))))))))))))))))))
                                             ("3"
                                              (hide 2)
                                              (("3"
                                                (skeep*)
                                                (("3"
                                                  (expand "nonempty?")
                                                  (("3"
                                                    (expand "empty?")
                                                    (("3"
                                                      (expand "extend")
                                                      (("3"
                                                        (expand "member")
                                                        (("3"
                                                          (skeep*)
                                                          (("3"
                                                            (inst - "x")
                                                            (("3"
                                                              (assert)
                                                              nil)))))))))))))))))))))))))))))))
                               ("2" (hide 2)
                                (("2" (skeep*)
                                  (("2" (lemma "glb_nat")
                                    (("2" (inst - "A")
                                      (("1"
                                        (expand "nonempty?")
                                        (("1"
                                          (expand "empty?")
                                          (("1"
                                            (expand "member")
                                            (("1"
                                              (skeep*)
                                              (("1" (inst - "n") nil)))))))))
                                       ("2"
                                        (hide 3)
                                        (("2"
                                          (expand "nonempty?")
                                          (("2" (propax) nil)))))))))))))
                               ("3" (hide 2)
                                (("3" (skeep*)
                                  (("3" (expand "nonempty?")
                                    (("3" (expand "empty?")
                                      (("3"
                                        (expand "extend")
                                        (("3"
                                          (expand "member")
                                          (("3"
                                            (skosimp*)
                                            (("3"
                                              (inst - "x!1")
                                              (("3"
                                                (assert)
                                                nil)))))))))))))))))))))
                           ("2" (skeep -)
                            (("2"
                              (case "NOT FORALL (K:nat): EXISTS (sub:[nat->nat]): sub(0)=gs({m:nat | abs(seq(m)-Y)<1}) AND (FORALL (i:nat): i+1<=K IMPLIES sub(i+1)=gs({m:nat | m>sub(i) AND abs(seq(m)-Y)<1/(i+1)}))")
                              (("1" (hide 2)
                                (("1" (induct "K")
                                  (("1"
                                    (inst +
                                     "LAMBDA (i:nat): gs({m: nat | abs(seq(m) - Y) < 1})")
                                    (("1" (assert) nil)))
                                   ("2" (skolem + "K")
                                    (("2" (flatten)
                                      (("2"
                                        (skeep*)
                                        (("2"
                                          (name
                                           "sub2"
                                           "LAMBDA (i:nat): IF i<K THEN sub(i) ELSE gs({m:nat | m>sub(i-1) AND abs(seq(m)-Y)<1/i}) ENDIF")
                                          (("2"
                                            (inst + "sub2")
                                            (("2"
                                              (split +)
                                              (("1"
                                                (expand "sub2" +)
                                                (("1" (propax) nil)))
                                               ("2"
                                                (skeep*)
                                                (("2"
                                                  (case "NOT i+1=K+1")
                                                  (("1"
                                                    (expand "sub2" +)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst - "i")
                                                        (("1"
                                                          (assert)
                                                          nil)))))))
                                                   ("2"
                                                    (postpone)
                                                    nil)))))))))))))))))))))
                               ("2" (postpone) nil)))))))))))))))))))))
           ("2" (postpone) nil)))
         ("2" (postpone) nil) ("3" (postpone) nil))))))
    nil)
   nil nil)
  (bounded_sequence_converges-2 nil 3672420641
   ("" (skeep*)
    ((""
      (name "Aset"
            "{r:real | EXISTS (K:nat): FORALL (m:nat): m>=K IMPLIES seq(m)>=r}")
      (("" (case "bounded_above?(Aset)")
        (("1" (name "Y" "lub(Aset)")
          (("1"
            (case "NOT FORALL (epsil:posreal,N:nat): EXISTS (m:nat): m>=N AND abs(seq(m)-Y)<epsil")
            (("1" (hide 2)
              (("1" (skeep*)
                (("1" (typepred "Y")
                  (("1" (expand "least_upper_bound?")
                    (("1" (flatten)
                      (("1" (case "Aset(Y-epsil/2)")
                        (("1" (expand "Aset" -1)
                          (("1" (skeep*)
                            (("1" (case "NOT Aset(Y+epsil/2)")
                              (("1" (expand "Aset" 1)
                                (("1" (inst + "max(K+1,N+1)")
                                  (("1" (skeep*)
                                    (("1" (insteep)
                                      (("1"
                                        (insteep)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide-all-but (-2 1 2))
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (expand "upper_bound?")
                                (("2" (inst -3 "Y+epsil/2")
                                  (("1" (assert) nil nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (inst - "Y-epsil/2")
                          (("2" (assert)
                            (("2" (hide 3)
                              (("2" (expand "upper_bound?" +)
                                (("2" (skeep)
                                  (("2" (typepred "s")
                                    (("2" (expand "Aset" (-1 1))
                                      (("2"
                                        (skeep*)
                                        (("2"
                                          (inst + "K")
                                          (("2"
                                            (skeep*)
                                            (("2"
                                              (inst - "m")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (case "NOT a<=b")
              (("1" (inst - "M") (("1" (assert) (("1" (ground) nil nil)) nil))
                nil)
               ("2" (assert)
                (("2" (case "NOT (a<=Y AND Y<=b)")
                  (("1" (hide 2)
                    (("1" (split +)
                      (("1" (inst - "(a-Y)/2" "M")
                        (("1" (skosimp*)
                          (("1" (hide (-4 -5 -6)) (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("2" (inst - "(Y-b)/2" "M")
                        (("1" (skosimp*)
                          (("1" (inst - "m!1") (("1" (assert) nil nil)) nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (hide -3)
                      (("2" (assert)
                        (("2"
                          (case "NOT EXISTS (gs:[set[nat]->nat]): FORALL (A:set[nat]): (not empty?(A)) IMPLIES (A(gs(A)) AND FORALL (j:(A)): gs(A)<=j)")
                          (("1" (hide-all-but 1)
                            (("1"
                              (name "F"
                                    "LAMBDA (A:set[nat]): IF empty?(A) THEN 0 ELSE choose({n:(A) | greatest_lower_bound?(n,A)}) ENDIF")
                              (("1" (inst + "F")
                                (("1" (skeep*)
                                  (("1" (assert)
                                    (("1" (split +)
                                      (("1"
                                        (expand "F" 1)
                                        (("1" (propax) nil nil))
                                        nil)
                                       ("2"
                                        (skeep*)
                                        (("2"
                                          (expand "F" 1)
                                          (("2"
                                            (invoke (name "ZZ" "%1") (! 1 1))
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (typepred "ZZ")
                                                (("1"
                                                  (expand
                                                   "greatest_lower_bound?")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (expand
                                                       "lower_bound?"
                                                       -2)
                                                      (("1"
                                                        (inst - "j")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "extend"
                                                             1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (expand "nonempty?")
                                                (("2"
                                                  (expand "empty?")
                                                  (("2"
                                                    (expand "member")
                                                    (("2"
                                                      (lemma "glb_nat")
                                                      (("2"
                                                        (inst?)
                                                        (("1"
                                                          (skeep*)
                                                          (("1"
                                                            (inst - "n")
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand "nonempty?")
                                                          (("2"
                                                            (expand "empty?")
                                                            (("2"
                                                              (expand
                                                               "member")
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (hide 2)
                                              (("3"
                                                (skeep*)
                                                (("3"
                                                  (expand "nonempty?")
                                                  (("3"
                                                    (expand "empty?")
                                                    (("3"
                                                      (expand "extend")
                                                      (("3"
                                                        (expand "member")
                                                        (("3"
                                                          (skeep*)
                                                          (("3"
                                                            (inst - "x")
                                                            (("3"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide 2)
                                (("2" (skeep*)
                                  (("2" (lemma "glb_nat")
                                    (("2" (inst - "A")
                                      (("1"
                                        (expand "nonempty?")
                                        (("1"
                                          (expand "empty?")
                                          (("1"
                                            (expand "member")
                                            (("1"
                                              (skeep*)
                                              (("1" (inst - "n") nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 3)
                                        (("2"
                                          (expand "nonempty?")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3" (hide 2)
                                (("3" (skeep*)
                                  (("3" (expand "nonempty?")
                                    (("3" (expand "empty?")
                                      (("3"
                                        (expand "extend")
                                        (("3"
                                          (expand "member")
                                          (("3"
                                            (skosimp*)
                                            (("3"
                                              (inst - "x!1")
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skeep -)
                            (("2"
                              (case "NOT FORALL (K:nat): EXISTS (sub:[nat->nat]): sub(0)=gs({m:nat | abs(seq(m)-Y)<1}) AND (FORALL (i:nat): i+1<=K IMPLIES sub(i+1)=gs({m:nat | m>sub(i) AND abs(seq(m)-Y)<1/(i+1)}))")
                              (("1" (hide 2)
                                (("1" (induct "K")
                                  (("1"
                                    (inst +
                                     "LAMBDA (i:nat): gs({m: nat | abs(seq(m) - Y) < 1})")
                                    (("1" (assert) nil nil)) nil)
                                   ("2" (skolem + "K")
                                    (("2" (flatten)
                                      (("2"
                                        (skeep*)
                                        (("2"
                                          (name
                                           "sub2"
                                           "LAMBDA (i:nat): IF i<=K THEN sub(i) ELSE sub(i+1) ENDIF")
                                          (("2"
                                            (inst + "sub2")
                                            (("2"
                                              (split +)
                                              (("1"
                                                (expand "sub2" +)
                                                (("1" (propax) nil nil))
                                                nil)
                                               ("2"
                                                (skeep*)
                                                (("2"
                                                  (case "NOT i+1=K+1")
                                                  (("1"
                                                    (expand "sub2" +)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst - "i")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2" (postpone) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (postpone) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (postpone) nil nil))
          nil)
         ("2" (postpone) nil nil) ("3" (postpone) nil nil))
        nil))
      nil))
    nil)
   nil nil)
  (bounded_sequence_converges-1 nil 3672160802
   ("" (skeep*)
    ((""
      (name "Aset"
            "{r:real | EXISTS (K:nat): FORALL (m:nat): m>=K IMPLIES seq(m)>=r}")
      (("" (case "bounded_above?(Aset)")
        (("1" (name "Y" "lub(Aset)")
          (("1"
            (case "NOT FORALL (epsil:posreal,N:nat): EXISTS (m:nat): m>=N AND abs(seq(m)-Y)<epsil")
            (("1" (hide 2)
              (("1" (skeep*)
                (("1" (typepred "Y")
                  (("1" (expand "least_upper_bound?")
                    (("1" (flatten)
                      (("1" (case "Aset(Y-epsil/2)")
                        (("1" (expand "Aset" -1)
                          (("1" (skeep*)
                            (("1" (case "NOT Aset(Y+epsil/2)")
                              (("1" (expand "Aset" 1)
                                (("1" (inst + "max(K+1,N+1)")
                                  (("1" (skeep*)
                                    (("1" (insteep)
                                      (("1"
                                        (insteep)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide-all-but (-2 1 2))
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (expand "upper_bound?")
                                (("2" (inst -3 "Y+epsil/2")
                                  (("1" (assert) nil nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (inst - "Y-epsil/2")
                          (("2" (assert)
                            (("2" (hide 3)
                              (("2" (expand "upper_bound?" +)
                                (("2" (skeep)
                                  (("2" (typepred "s")
                                    (("2" (expand "Aset" (-1 1))
                                      (("2"
                                        (skeep*)
                                        (("2"
                                          (inst + "K")
                                          (("2"
                                            (skeep*)
                                            (("2"
                                              (inst - "m")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (case "NOT a<=b")
              (("1" (inst - "M") (("1" (assert) (("1" (ground) nil nil)) nil))
                nil)
               ("2" (assert)
                (("2" (case "NOT (a<=Y AND Y<=b)")
                  (("1" (hide 2)
                    (("1" (split +)
                      (("1" (inst - "(a-Y)/2" "M")
                        (("1" (skosimp*)
                          (("1" (hide (-4 -5 -6)) (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("2" (inst - "(Y-b)/2" "M")
                        (("1" (skosimp*)
                          (("1" (inst - "m!1") (("1" (assert) nil nil)) nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (hide -3)
                      (("2" (assert)
                        (("2"
                          (case "NOT EXISTS (gs:[set[nat]->nat]): FORALL (Aset:set[nat]): (not empty?(Aset)) IMPLIES (Aset(gs(Aset)) AND FORALL (j:(Aset)): gs(Aset)<=j)")
                          (("1" (hide-all-but 1)
                            (("1"
                              (name "F"
                                    "LAMBDA (Aset:set[nat]): IF empty?(Aset) THEN 0 ELSE glb(Aset) ENDIF")
                              (("1" (inst + "F")
                                (("1" (skeep*) (("1" (postpone) nil nil)) nil)
                                 ("2" (postpone) nil nil))
                                nil)
                               ("2" (postpone) nil nil))
                              nil))
                            nil)
                           ("2" (postpone) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (propax) nil nil))
          nil)
         ("2" (postpone) nil nil) ("3" (postpone) nil nil))
        nil))
      nil))
    nil)
   nil shostak))
 (bounded_double_sequence_converges 0
  (bounded_double_sequence_converges-1 nil 3672484684
   (""
    (case "NOT FORALL (F:[nat->nat]): (FORALL (ii,jj:nat): ii<jj IMPLIES F(ii)<F(jj)) IMPLIES FORALL (ii:nat): F(ii)>=ii")
    (("1" (hide-all-but 1)
      (("1" (skeep)
        (("1" (induct "ii")
          (("1" (assert) nil nil)
           ("2" (skeep)
            (("2" (inst - "j" "j+1") (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("2" (skeep*)
      (("2" (lemma "bounded_sequence_converges")
        (("2" (inst - "a" "b" "LAMBDA (i:nat): seq(i)`1")
          (("2" (split -)
            (("1" (skolem - ("r" "subx"))
              (("1" (flatten)
                (("1" (lemma "bounded_sequence_converges")
                  (("1" (inst - "x" "y" "LAMBDA (i:nat): seq(subx(i))`2")
                    (("1" (split -)
                      (("1" (skolem - ("s" "suby"))
                        (("1" (flatten)
                          (("1" (assert)
                            (("1"
                              (inst + "r" "s" "LAMBDA (i:nat): subx(suby(i))")
                              (("1" (assert)
                                (("1" (split +)
                                  (("1" (skosimp*)
                                    (("1" (inst - "i!1" "j!1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst - "suby(i!1)" "suby(j!1)")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (skeep*)
                                    (("2" (inst -4 "epsil")
                                      (("2"
                                        (inst -8 "epsil")
                                        (("2"
                                          (skosimp*)
                                          (("2"
                                            (inst + "max(N!1,N!2)")
                                            (("2"
                                              (skosimp*)
                                              (("2"
                                                (copy -10)
                                                (("2"
                                                  (inst-cp - "suby")
                                                  (("2"
                                                    (inst - "subx")
                                                    (("2"
                                                      (replace -6)
                                                      (("2"
                                                        (replace -10)
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (inst? -7)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (inst?
                                                                       -11)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (inst + "M")
                          (("2" (skosimp*)
                            (("2" (inst? -7)
                              (("2" (assert)
                                (("2" (split -)
                                  (("1" (flatten) (("1" (assert) nil nil))
                                    nil)
                                   ("2" (copy -6)
                                    (("2" (inst?)
                                      (("2"
                                        (split -)
                                        (("1"
                                          (inst?)
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (inst + "M")
                (("2" (skosimp*)
                  (("2" (inst -3 "i!1")
                    (("2" (assert)
                      (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (posint_max application-judgement "{k: posint | i <= k AND j <= k}"
     real_defs nil)
    (posrat_max application-judgement "{s: posrat | s >= q AND s >= r}"
     real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (bounded_sequence_converges formula-decl nil real_facts nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil))
   shostak))
 (cont_int_min 0
  (cont_int_min-1 nil 3672487148
   ("" (skeep)
    (("" (skeep*)
      (("" (name "Img" "{r:real | EXISTS (x:real): a<=x AND x<=b AND r=f(x)}")
        (("" (label "cont" -3)
          (("" (case "bounded_below?(Img)")
            (("1" (name "fx" "glb(Img)")
              (("1"
                (case "EXISTS (seq:[nat->real]): FORALL (i:nat): a<=seq(i) AND seq(i)<=b AND f(seq(i))<=fx+1/(i+1)")
                (("1" (skeep -)
                  (("1" (lemma "bounded_sequence_converges")
                    (("1" (insteep -)
                      (("1" (split -)
                        (("1" (skolem - ("x" "sub"))
                          (("1" (flatten)
                            (("1" (insteep +)
                              (("1" (assert)
                                (("1" (case "f(x)>fx")
                                  (("1" (name "badep" "(f(x)-fx)/3")
                                    (("1" (inst -12 "x")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst -12 "badep")
                                          (("1"
                                            (skeep -12)
                                            (("1"
                                              (inst - "delta/2")
                                              (("1"
                                                (skeep -)
                                                (("1"
                                                  (lemma "archimedean2")
                                                  (("1"
                                                    (copy -8)
                                                    (("1"
                                                      (inst -2 "badep")
                                                      (("1"
                                                        (skolem - "G")
                                                        (("1"
                                                          (case
                                                           "EXISTS (i:nat): i>=N AND i>=G")
                                                          (("1"
                                                            (skeep -)
                                                            (("1"
                                                              (case
                                                               "1/(i+1)<1/G")
                                                              (("1"
                                                                (label
                                                                 "hyp"
                                                                 -4)
                                                                (("1"
                                                                  (hide "hyp")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "i")
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "i")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (copy
                                                                             "cont")
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "seq(sub(i))")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (reveal
                                                                                   "hyp")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "sub(i)")
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (case
                                                                                           "f(seq(sub(i)))>=fx")
                                                                                          (("1"
                                                                                            (case
                                                                                             "1/(1+sub(i))<1/G")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "abs")
                                                                                              (("1"
                                                                                                (lift-if)
                                                                                                (("1"
                                                                                                  (ground)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (case
                                                                                               "FORALL (ii:nat): sub(ii)>=ii")
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                (("1"
                                                                                                  (cross-mult
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (induct
                                                                                                 "ii")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (skeep*)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "j"
                                                                                                     "j+1")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (lemma
                                                                                             "glb_is_bound")
                                                                                            (("2"
                                                                                              (inst?)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -
                                                                                                 "f(seq(sub(i)))")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   "Img")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     +
                                                                                                     "seq(sub(i))")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (cross-mult 1)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (inst
                                                             +
                                                             "max(N,G)")
                                                            (("2"
                                                              (hide-all-but 1)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (case "f(x)<fx")
                                    (("1" (lemma "glb_is_bound")
                                      (("1"
                                        (inst - "Img" "f(x)")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (expand "Img" 1)
                                          (("2"
                                            (inst?)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (case "NOT f(x)=fx")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (skeep)
                                        (("2"
                                          (lemma "glb_is_bound")
                                          (("2"
                                            (inst - "Img" "f(y)")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (expand "Img" 1)
                                              (("2"
                                                (inst + "y")
                                                (("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (inst + "0")
                          (("2" (skeep)
                            (("2" (inst - "i") (("2" (ground) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2"
                  (inst +
                   "LAMBDA (i:nat): choose({s:real | a <= s AND s <= b AND f(s) <= fx + 1 / (i + 1)})")
                  (("1" (assert)
                    (("1" (skosimp*)
                      (("1" (assert) (("1" (assert) nil nil)) nil)) nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (hide "cont")
                      (("2" (skeep)
                        (("2" (expand "nonempty?")
                          (("2" (expand "empty?")
                            (("2" (expand "member")
                              (("2" (lemma "adherence_inf")
                                (("2" (inst - "Img" "1/(1+i)")
                                  (("2" (skolem - "fy")
                                    (("2" (typepred "fy")
                                      (("2"
                                        (expand "Img" -1)
                                        (("2"
                                          (skosimp*)
                                          (("2"
                                            (replaces -3)
                                            (("2"
                                              (inst - "x!1")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (propax) nil nil))
              nil)
             ("2" (hide 2)
              (("2"
                (case "EXISTS (seq:[nat->real]): FORALL (i:nat): a<=seq(i) AND seq(i)<=b AND f(seq(i))<-i")
                (("1" (skeep)
                  (("1" (lemma "bounded_sequence_converges")
                    (("1" (insteep -)
                      (("1" (split -)
                        (("1" (skolem - ("x" "sub"))
                          (("1" (flatten)
                            (("1" (inst "cont" "x")
                              (("1" (assert)
                                (("1" (inst "cont" "1")
                                  (("1" (skeep)
                                    (("1" (inst -4 "delta")
                                      (("1"
                                        (skeep -)
                                        (("1"
                                          (case
                                           "EXISTS (i:nat): -i<f(x)-15 AND i>N")
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (inst - "i")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (name "yy" "seq(sub(i))")
                                                  (("1"
                                                    (inst "cont" "yy")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst - "sub(i)")
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (case
                                                                 "FORALL (ii:nat): sub(ii)>=ii")
                                                                (("1"
                                                                  (inst - "i")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (induct
                                                                   "ii")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "j"
                                                                       "j+1")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (inst
                                             +
                                             "ceiling(max(abs(f(x))+30,N+1))")
                                            (("2"
                                              (hide-all-but 1)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (inst + "0")
                          (("2" (skeep*)
                            (("2" (inst - "i") (("2" (ground) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2"
                  (inst +
                   "LAMBDA (i:nat): choose({s:real | a <= s AND s <= b AND f(s) < -i})")
                  (("1" (assert)
                    (("1" (skosimp*)
                      (("1" (assert) (("1" (assert) nil nil)) nil)) nil))
                    nil)
                   ("2" (skeep*)
                    (("2" (expand "nonempty?")
                      (("2" (expand "empty?")
                        (("2" (expand "member")
                          (("2" (expand "bounded_below?" +)
                            (("2" (inst + "-i")
                              (("2" (expand "lower_bound?")
                                (("2" (skosimp*)
                                  (("2" (typepred "s!1")
                                    (("2" (expand "Img" -1)
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (inst - "x")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (expand "nonempty?")
              (("3" (expand "empty?")
                (("3" (expand "member")
                  (("3" (inst - "f(a)")
                    (("3" (expand "Img")
                      (("3" (inst + "a") (("3" (assert) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (lower_bound? const-decl "bool" bounded_real_defs nil)
    (integer nonempty-type-from-decl nil integers nil)
    (ceiling const-decl "{i | x <= i & i < x + 1}" floor_ceil nil)
    (posreal_max application-judgement "{z: posreal | z >= x AND z >= y}"
     real_defs nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (greatest_lower_bound? const-decl "bool" bounded_real_defs nil)
    (glb const-decl "{x | greatest_lower_bound?(x, SB)}" bounded_real_defs
     nil)
    (a skolem-const-decl "real" real_facts nil)
    (b skolem-const-decl "real" real_facts nil)
    (fx skolem-const-decl "{x | greatest_lower_bound?(x, Img)}" real_facts
     nil)
    (choose const-decl "(p)" sets nil) (member const-decl "bool" sets nil)
    (adherence_inf formula-decl nil real_facts nil)
    (empty? const-decl "bool" sets nil) (> const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (archimedean2 formula-decl nil real_facts nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (times_div2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (i skolem-const-decl "nat" real_facts nil)
    (sub skolem-const-decl "[nat -> nat]" real_facts nil)
    (seq skolem-const-decl "[nat -> real]" real_facts nil)
    (f skolem-const-decl "[real -> real]" real_facts nil)
    (Img skolem-const-decl "[real -> boolean]" real_facts nil)
    (glb_is_bound formula-decl nil real_facts nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (posint_max application-judgement "{k: posint | i <= k AND j <= k}"
     real_defs nil)
    (posrat_max application-judgement "{s: posrat | s >= q AND s >= r}"
     real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (y skolem-const-decl "real" real_facts nil)
    (x skolem-const-decl "real" real_facts nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (bounded_sequence_converges formula-decl nil real_facts nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (bounded_below? const-decl "bool" bounded_real_defs nil)
    (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil))
   shostak))
 (cont_box_min 0
  (cont_box_min-1 nil 3672491894
   ("" (skeep)
    (("" (skeep*)
      ((""
        (name "Img"
              "{r:real | EXISTS (x1,x2:real): a1 <= x1 AND x1 <= b1 AND a2 <= x2 AND x2 <= b2 AND r=f(x1,x2)}")
        (("" (label "cont" -4)
          (("" (case "bounded_below?(Img)")
            (("1" (name "fx" "glb(Img)")
              (("1"
                (case "EXISTS (seq:[nat->[real,real]]): FORALL (i:nat): a1 <= seq(i)`1 AND seq(i)`1 <= b1 AND a2 <= seq(i)`2 AND seq(i)`2 <= b2 AND f(seq(i))<=fx+1/(i+1)")
                (("1" (skeep -)
                  (("1" (lemma "bounded_double_sequence_converges")
                    (("1" (inst - "a1" "b1" "a2" "b2" "seq")
                      (("1" (split -)
                        (("1" (skolem - ("x1" "x2" "sub"))
                          (("1" (flatten)
                            (("1" (insteep +)
                              (("1" (assert)
                                (("1" (case "f(x1,x2)>fx")
                                  (("1" (name "badep" "(f(x1,x2)-fx)/3")
                                    (("1" (inst "cont" "x1" "x2")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst "cont" "badep")
                                          (("1"
                                            (skeep "cont")
                                            (("1"
                                              (inst - "delta/2")
                                              (("1"
                                                (skeep -)
                                                (("1"
                                                  (lemma "archimedean2")
                                                  (("1"
                                                    (copy -10)
                                                    (("1"
                                                      (inst -2 "badep")
                                                      (("1"
                                                        (skolem - "G")
                                                        (("1"
                                                          (case
                                                           "EXISTS (i:nat): i>=N AND i>=G")
                                                          (("1"
                                                            (skeep -)
                                                            (("1"
                                                              (case
                                                               "1/(i+1)<1/G")
                                                              (("1"
                                                                (label
                                                                 "hyp"
                                                                 -4)
                                                                (("1"
                                                                  (hide "hyp")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "i")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (copy
                                                                           "cont")
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "seq(sub(i))`1"
                                                                             "seq(sub(i))`2")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "sub(i)")
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (case
                                                                                       "f(seq(sub(i)))>=fx")
                                                                                      (("1"
                                                                                        (case
                                                                                         "1/(1+sub(i))<1/G")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "abs")
                                                                                          (("1"
                                                                                            (lift-if)
                                                                                            (("1"
                                                                                              (ground)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (case
                                                                                           "FORALL (ii:nat): sub(ii)>=ii")
                                                                                          (("1"
                                                                                            (inst?)
                                                                                            (("1"
                                                                                              (cross-mult
                                                                                               1)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (induct
                                                                                             "ii")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (skeep*)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -
                                                                                                 "j"
                                                                                                 "j+1")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (lemma
                                                                                         "glb_is_bound")
                                                                                        (("2"
                                                                                          (inst?)
                                                                                          (("2"
                                                                                            (inst
                                                                                             -
                                                                                             "f(seq(sub(i)))")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand
                                                                                               "Img")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (cross-mult 1)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (inst
                                                             +
                                                             "max(N,G)")
                                                            (("2"
                                                              (hide-all-but 1)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (case "f(x1,x2)<fx")
                                    (("1" (lemma "glb_is_bound")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst - "Img" "f(x1,x2)")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (expand "Img" 1)
                                            (("2"
                                              (inst?)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert)
                                      (("2"
                                        (case "NOT f(x1,x2)=fx")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (skeep)
                                          (("2"
                                            (lemma "glb_is_bound")
                                            (("2"
                                              (inst - "Img" "f(y1,y2)")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (expand "Img" 1)
                                                (("2"
                                                  (inst + "y1" "y2")
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (inst + "0")
                          (("2" (skeep)
                            (("2" (inst - "i") (("2" (ground) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2"
                  (inst +
                   "LAMBDA (i:nat): choose({s:[real,real] |  a1 <= s`1 AND s`1 <= b1 AND a2 <= s`2
           AND s`2 <= b2 AND f(s) <= fx + 1 / (i + 1)})")
                  (("1" (assert)
                    (("1" (skosimp*)
                      (("1" (assert) (("1" (assert) nil nil)) nil)) nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (hide "cont")
                      (("2" (skeep)
                        (("2" (expand "nonempty?")
                          (("2" (expand "empty?")
                            (("2" (expand "member")
                              (("2" (lemma "adherence_inf")
                                (("2" (inst - "Img" "1/(1+i)")
                                  (("2" (skolem - "fy")
                                    (("2" (typepred "fy")
                                      (("2"
                                        (expand "Img" -1)
                                        (("2"
                                          (skosimp*)
                                          (("2"
                                            (replaces -5)
                                            (("2"
                                              (inst - "(x1!1,x2!1)")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (propax) nil nil))
              nil)
             ("2" (hide 2)
              (("2"
                (case "EXISTS (seq:[nat->[real,real]]): FORALL (i:nat): a1<=seq(i)`1 AND seq(i)`1<=b1 AND  a2<=seq(i)`2 AND seq(i)`2<=b2 AND f(seq(i))<-i")
                (("1" (skeep)
                  (("1" (lemma "bounded_double_sequence_converges")
                    (("1" (inst - "a1" "b1" "a2" "b2" "seq")
                      (("1" (split -)
                        (("1" (skolem - ("x1" "x2" "sub"))
                          (("1" (flatten)
                            (("1" (inst "cont" "x1" "x2")
                              (("1" (assert)
                                (("1" (inst "cont" "1")
                                  (("1" (skeep)
                                    (("1" (inst -6 "delta")
                                      (("1"
                                        (skeep -)
                                        (("1"
                                          (case
                                           "EXISTS (i:nat): -i<f(x1,x2)-15 AND i>N")
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (inst - "i")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (name
                                                     "y1"
                                                     "seq(sub(i))`1")
                                                    (("1"
                                                      (name
                                                       "y2"
                                                       "seq(sub(i))`2")
                                                      (("1"
                                                        (inst
                                                         "cont"
                                                         "y1"
                                                         "y2")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (inst - "sub(i)")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (case
                                                                   "FORALL (ii:nat): sub(ii)>=ii")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "i")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (induct
                                                                     "ii")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "j"
                                                                         "j+1")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (inst
                                             +
                                             "ceiling(max(abs(f(x1,x2))+30,N+1))")
                                            (("2"
                                              (hide-all-but 1)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (inst + "0")
                          (("2" (skeep*)
                            (("2" (inst - "i") (("2" (ground) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2"
                  (inst +
                   "LAMBDA (i:nat): choose({s:[real,real]| a1 <= s`1 AND s`1 <= b1 AND a2 <= s`2
           AND s`2 <= b2 AND f(s) < -i})")
                  (("1" (assert)
                    (("1" (skosimp*)
                      (("1" (assert) (("1" (assert) nil nil)) nil)) nil))
                    nil)
                   ("2" (skeep*)
                    (("2" (expand "nonempty?")
                      (("2" (expand "empty?")
                        (("2" (expand "member")
                          (("2" (expand "bounded_below?" +)
                            (("2" (inst + "-i")
                              (("2" (expand "lower_bound?")
                                (("2" (skosimp*)
                                  (("2" (typepred "s!1")
                                    (("2" (expand "Img" -1)
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (inst - "(x1,x2)")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (expand "nonempty?")
              (("3" (expand "empty?")
                (("3" (expand "member")
                  (("3" (inst - "f(a1,a2)")
                    (("3" (expand "Img")
                      (("3" (inst + "a1" "a2") (("3" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (lower_bound? const-decl "bool" bounded_real_defs nil)
    (integer nonempty-type-from-decl nil integers nil)
    (ceiling const-decl "{i | x <= i & i < x + 1}" floor_ceil nil)
    (posreal_max application-judgement "{z: posreal | z >= x AND z >= y}"
     real_defs nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (greatest_lower_bound? const-decl "bool" bounded_real_defs nil)
    (glb const-decl "{x | greatest_lower_bound?(x, SB)}" bounded_real_defs
     nil)
    (a1 skolem-const-decl "real" real_facts nil)
    (b1 skolem-const-decl "real" real_facts nil)
    (a2 skolem-const-decl "real" real_facts nil)
    (b2 skolem-const-decl "real" real_facts nil)
    (fx skolem-const-decl "{x | greatest_lower_bound?(x, Img)}" real_facts
     nil)
    (choose const-decl "(p)" sets nil) (member const-decl "bool" sets nil)
    (adherence_inf formula-decl nil real_facts nil)
    (empty? const-decl "bool" sets nil) (> const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (archimedean2 formula-decl nil real_facts nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (times_div2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (i skolem-const-decl "nat" real_facts nil)
    (sub skolem-const-decl "[nat -> nat]" real_facts nil)
    (seq skolem-const-decl "[nat -> [real, real]]" real_facts nil)
    (f skolem-const-decl "[[real, real] -> real]" real_facts nil)
    (Img skolem-const-decl "[real -> boolean]" real_facts nil)
    (glb_is_bound formula-decl nil real_facts nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (posint_max application-judgement "{k: posint | i <= k AND j <= k}"
     real_defs nil)
    (posrat_max application-judgement "{s: posrat | s >= q AND s >= r}"
     real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (y1 skolem-const-decl "real" real_facts nil)
    (y2 skolem-const-decl "real" real_facts nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (x1 skolem-const-decl "real" real_facts nil)
    (x2 skolem-const-decl "real" real_facts nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (bounded_double_sequence_converges formula-decl nil real_facts nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (bounded_below? const-decl "bool" bounded_real_defs nil)
    (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil))
   nil))
 (cont_int_ivt 0
  (cont_int_ivt-1 nil 3672502796
   (""
    (case "FORALL (a, b: real):
                      a <= b IMPLIES
                       (FORALL (f: [real -> real]):
                          (FORALL (x: real):
                             a <= x AND x <= b IMPLIES
                              (FORALL (epsil: posreal):
                                 EXISTS (delta: posreal):
                                   FORALL (y: real):
                                     a <= y AND y <= b AND abs(y - x) <= delta IMPLIES
                                      abs(f(y) - f(x)) <= epsil))
                           AND f(a)<0 AND  f(b) > 0
                           IMPLIES (EXISTS (x: real): a <= x AND x <= b AND f(x) = 0))")
    (("1" (skeep*)
      (("1" (inst-cp + "a")
        (("1" (inst-cp + "b")
          (("1" (assert)
            (("1" (case "f(a)-c<0")
              (("1" (case "NOT f(b)-c>0")
                (("1" (mult-by -1 "c-f(b)") (("1" (assert) nil nil)) nil)
                 ("2" (assert)
                  (("2" (insteep -)
                    (("2" (assert)
                      (("2" (inst - "LAMBDA (x:real): f(x)-c")
                        (("2" (assert)
                          (("2" (replace -5)
                            (("2" (skosimp*)
                              (("2" (inst + "x!1") (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (insteep -)
                (("2" (name "F" "LAMBDA (x:real): -f(x)+c")
                  (("2" (case "F(a)<0 AND F(b)>0")
                    (("1" (assert)
                      (("1" (flatten)
                        (("1" (inst - "F")
                          (("1" (assert)
                            (("1" (split -)
                              (("1" (skosimp*)
                                (("1" (inst + "x!1")
                                  (("1" (assert)
                                    (("1" (expand "F" -3)
                                      (("1" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (skeep)
                                (("2" (inst - "x")
                                  (("2" (assert)
                                    (("2" (skeep)
                                      (("2"
                                        (inst - "epsil")
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (inst + "delta")
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (inst - "y")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "F" 1)
                                                    (("2" (grind) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -2)
                      (("2" (expand "F" 1)
                        (("2" (assert)
                          (("2" (case "NOT f(a)-c>0")
                            (("1" (assert) nil nil)
                             ("2" (mult-by -1 "f(b)-c")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep)
        (("2" (skeep)
          (("2"
            (case "EXISTS (epsil:posreal): FORALL (x:real): a<=x AND x<=b IMPLIES abs(f(x))>epsil")
            (("1" (label "ig2" -1)
              (("1" (label "cont" -3)
                (("1" (skeep)
                  (("1" (name "Aset" "{x:real | a<=x AND x<=b AND f(x)>=0}")
                    (("1" (case "bounded_below?(Aset)")
                      (("1" (name "X" "glb(Aset)")
                        (("1" (inst + "X")
                          (("1" (assert)
                            (("1" (case "NOT a<=X")
                              (("1" (typepred "X")
                                (("1" (expand "greatest_lower_bound?")
                                  (("1" (flatten)
                                    (("1" (inst - "a")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "lower_bound?" +)
                                          (("1"
                                            (skeep*)
                                            (("1"
                                              (typepred "s")
                                              (("1"
                                                (expand "Aset" -1)
                                                (("1" (ground) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert)
                                (("2" (case "NOT X<=b")
                                  (("1" (typepred "X")
                                    (("1" (expand "greatest_lower_bound?")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "lower_bound?")
                                          (("1"
                                            (inst - "b")
                                            (("1"
                                              (expand "Aset" 1)
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert)
                                    (("2" (lemma "adherence_inf")
                                      (("2"
                                        (inst -9 "X")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (inst -9 "epsil/4")
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (inst - "Aset" _)
                                                (("2"
                                                  (replace -4)
                                                  (("2"
                                                    (inst - "delta/2")
                                                    (("2"
                                                      (skosimp*)
                                                      (("2"
                                                        (typepred "x!1")
                                                        (("2"
                                                          (expand "Aset" -1)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (typepred "X")
                                                              (("2"
                                                                (expand
                                                                 "greatest_lower_bound?")
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (hide -2)
                                                                    (("2"
                                                                      (expand
                                                                       "lower_bound?"
                                                                       -1)
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "x!1")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (hide
                                                                             -2)
                                                                            (("2"
                                                                              (copy
                                                                               "ig2")
                                                                              (("2"
                                                                                (inst
                                                                                 -
                                                                                 "x!1")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "abs"
                                                                                     -1)
                                                                                    (("2"
                                                                                      (copy
                                                                                       "cont")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -
                                                                                         "x!1")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "abs"
                                                                                             -1
                                                                                             1)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (case
                                                                                                 "X = a")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "abs")
                                                                                                  (("1"
                                                                                                    (lift-if)
                                                                                                    (("1"
                                                                                                      (ground)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (case
                                                                                                   "NOT a<X")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (case
                                                                                                       "EXISTS (d:posreal): d<min((X-a)/4,delta/4)")
                                                                                                      (("1"
                                                                                                        (skeep)
                                                                                                        (("1"
                                                                                                          (name
                                                                                                           "Xstar"
                                                                                                           "X-d")
                                                                                                          (("1"
                                                                                                            (typepred
                                                                                                             "X")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "greatest_lower_bound?")
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                (("1"
                                                                                                                  (hide
                                                                                                                   -2)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "lower_bound?"
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -
                                                                                                                       "Xstar")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (expand
                                                                                                                         "Aset"
                                                                                                                         1)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (copy
                                                                                                                             "ig2")
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               -
                                                                                                                               "Xstar")
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "abs"
                                                                                                                                   -1)
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (copy
                                                                                                                                       "cont")
                                                                                                                                      (("2"
                                                                                                                                        (inst
                                                                                                                                         -
                                                                                                                                         "Xstar")
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          (("2"
                                                                                                                                            (expand
                                                                                                                                             "abs"
                                                                                                                                             -1
                                                                                                                                             1)
                                                                                                                                            (("2"
                                                                                                                                              (expand
                                                                                                                                               "abs")
                                                                                                                                              (("2"
                                                                                                                                                (lift-if)
                                                                                                                                                (("2"
                                                                                                                                                  (ground)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (inst
                                                                                                         +
                                                                                                         "min((X - a) / 4, delta / 4)/2")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (hide-all-but
                                                                                                             (-1
                                                                                                              1))
                                                                                                            (("1"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (hide-all-but
                                                                                                           (-1
                                                                                                            1))
                                                                                                          (("2"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (propax) nil nil))
                        nil)
                       ("2" (expand "bounded_below?")
                        (("2" (inst + "a-1")
                          (("2" (expand "lower_bound?")
                            (("2" (skosimp*)
                              (("2" (typepred "s!1")
                                (("2" (expand "Aset" -1)
                                  (("2" (flatten) (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (expand "nonempty?" 1)
                        (("3" (expand "empty?")
                          (("3" (expand "member")
                            (("3" (expand "Aset")
                              (("3" (inst - "b") (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (name "F" "LAMBDA (x:real): abs(f(x))")
              (("2" (lemma "cont_int_min")
                (("2" (inst - "a" "b")
                  (("2" (assert)
                    (("2" (inst - "F")
                      (("2" (split -)
                        (("1" (skosimp*)
                          (("1" (inst 2 "x!1")
                            (("1" (assert)
                              (("1" (case "NOT F(x!1)>0")
                                (("1" (expand "F" 1)
                                  (("1" (hide-all-but (1 3))
                                    (("1" (grind) nil nil)) nil))
                                  nil)
                                 ("2" (inst + "F(x!1)/2")
                                  (("1" (skolem 1 "y")
                                    (("1" (flatten)
                                      (("1"
                                        (inst - "y")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "F" -4)
                                            (("1"
                                              (expand "F")
                                              (("1"
                                                (expand "abs")
                                                (("1"
                                                  (lift-if)
                                                  (("1" (ground) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide (2 3))
                          (("2" (skeep)
                            (("2" (inst - "x")
                              (("2" (assert)
                                (("2" (skeep)
                                  (("2" (insteep -)
                                    (("2" (skeep)
                                      (("2"
                                        (insteep)
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (insteep)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "F" +)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (f skolem-const-decl "[real -> real]" real_facts nil)
    (x!1 skolem-const-decl "real" real_facts nil)
    (F skolem-const-decl
     "[x: real -> {n: nonneg_real | n >= f(x) AND n >= -f(x)}]" real_facts
     nil)
    (cont_int_min formula-decl nil real_facts nil)
    (set type-eq-decl nil sets nil) (nonempty? const-decl "bool" sets nil)
    (bounded_below? const-decl "bool" bounded_real_defs nil)
    (lower_bound? const-decl "bool" bounded_real_defs nil)
    (Aset skolem-const-decl "[real -> boolean]" real_facts nil)
    (b skolem-const-decl "real" real_facts nil)
    (adherence_inf formula-decl nil real_facts nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (Xstar skolem-const-decl "real" real_facts nil)
    (delta skolem-const-decl "posreal" real_facts nil)
    (a skolem-const-decl "real" real_facts nil)
    (X skolem-const-decl "{x | greatest_lower_bound?(x, Aset)}" real_facts
     nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (glb const-decl "{x | greatest_lower_bound?(x, SB)}" bounded_real_defs
     nil)
    (greatest_lower_bound? const-decl "bool" bounded_real_defs nil)
    (empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (TRUE const-decl "bool" booleans nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (b skolem-const-decl "real" real_facts nil)
    (f skolem-const-decl "[real -> real]" real_facts nil)
    (c skolem-const-decl "real" real_facts nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (both_sides_times_pos_gt1 formula-decl nil real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (F skolem-const-decl "[real -> real]" real_facts nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   shostak))
 (quad_box_cont_TCC1 0
  (quad_box_cont_TCC1-1 nil 3672560690 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (quad_box_cont subtype "2"
    "{i: integers.int | booleans.OR(real_facts.x /= 0, reals.>=(i, 0))}")))
 (quad_box_cont 0
  (quad_box_cont-2 nil 3672567465
   (""
    (name "cont"
          "LAMBDA (f: [[real, real] -> real]): (FORALL (x1, x2: real, epsil: posreal):
                   EXISTS (delta: posreal):
                     FORALL (y1, y2: real):
                       abs(y1 - x1) <= delta AND abs(y2 - x2) <= delta IMPLIES
                        abs(f(y1, y2) - f(x1, x2)) <= epsil)")
    ((""
      (case "NOT FORALL (f,g: [[real, real] -> real]): cont(f) AND cont(g) IMPLIES cont(LAMBDA (x,y:real): f(x,y)*g(x,y))")
      (("1" (hide 2)
        (("1" (hide -)
          (("1" (skeep*)
            (("1" (expand "cont")
              (("1" (skeep*)
                (("1"
                  (case "EXISTS (M:posnat): M>max(abs(f(x1,x2)),abs(g(x1,x2)))+50")
                  (("1" (skeep -)
                    (("1" (name "eps" "min(1/1000,epsil/(100*M))")
                      (("1" (inst - "x1" "x2" "eps")
                        (("1" (inst - "x1" "x2" "eps")
                          (("1" (skolem - "d1")
                            (("1" (skolem - "d2")
                              (("1" (name "delta" "min(d1,d2)")
                                (("1" (inst + "delta")
                                  (("1" (skeep*)
                                    (("1" (inst - "y1" "y2")
                                      (("1"
                                        (inst - "y1" "y2")
                                        (("1"
                                          (case
                                           "NOT f(y1, y2) * g(y1, y2) - f(x1, x2) * g(x1, x2) = f(y1,y2)*(g(y1,y2)-g(x1,x2))+g(x1,x2)*(f(y1,y2)-f(x1,x2))")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (replaces -1)
                                            (("2"
                                              (case
                                               "NOT FORALL (a,b:real): abs(a)+abs(b)<=epsil IMPLIES abs(a+b)<=epsil")
                                              (("1"
                                                (hide-all-but 1)
                                                (("1" (grind) nil nil))
                                                nil)
                                               ("2"
                                                (inst?)
                                                (("2"
                                                  (replace 1)
                                                  (("2"
                                                    (hide 2)
                                                    (("2"
                                                      (rewrite "abs_mult")
                                                      (("2"
                                                        (rewrite "abs_mult")
                                                        (("2"
                                                          (case
                                                           "NOT FORALL (a,b:real): a<=epsil/2 AND b<=epsil/2 IMPLIES a+b<=epsil")
                                                          (("1"
                                                            (hide-all-but 1)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (rewrite -1)
                                                            (("1"
                                                              (hide (-1 2))
                                                              (("1"
                                                                (case
                                                                 "abs(f(y1, y2))<=M")
                                                                (("1"
                                                                  (mult-ineq
                                                                   -1
                                                                   -6)
                                                                  (("1"
                                                                    (case
                                                                     "M*eps<=epsil/2")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (case
                                                                       "eps<=epsil/(100*M)")
                                                                      (("1"
                                                                        (cross-mult
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (split 1)
                                                                    (("1"
                                                                      (hide-all-but
                                                                       (-1 1))
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       (-6 1))
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (case
                                                                   "abs(f(x1,x2))<=M-50 AND eps<1")
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide (-1 2))
                                                              (("2"
                                                                (case
                                                                 "abs(g(x1,x2))<= M AND M*eps<=epsil/2")
                                                                (("1"
                                                                  (ground)
                                                                  (("1"
                                                                    (mult-ineq
                                                                     -1
                                                                     -6)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (split
                                                                       1)
                                                                      (("1"
                                                                        (hide-all-but
                                                                         (-1
                                                                          1))
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         (-6
                                                                          1))
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (case
                                                                     "eps<=epsil/(100*M)")
                                                                    (("1"
                                                                      (cross-mult
                                                                       -1)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2"
                    (inst +
                     "ceiling(max(abs(f(x1, x2)), abs(g(x1, x2))) + 50)+5")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2"
        (case "NOT FORALL (T,UU,V:real): cont(LAMBDA (x,y:real): T * x + UU * y + V)")
        (("1" (hide-all-but 1)
          (("1" (skeep*)
            (("1" (expand "cont")
              (("1" (skeep*)
                (("1" (name "delta" "epsil/(100*(abs(T)+abs(UU)+100))")
                  (("1" (inst + "delta")
                    (("1" (skeep*)
                      (("1" (mult-by -2 "abs(T)")
                        (("1" (mult-by -3 "abs(UU)")
                          (("1" (case "delta*(abs(T)+abs(UU))<=epsil")
                            (("1" (hide -4)
                              (("1" (rewrite "abs_mult" :dir rl)
                                (("1" (rewrite "abs_mult" :dir rl)
                                  (("1" (grind) nil nil)) nil))
                                nil))
                              nil)
                             ("2" (cross-mult -3) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep*)
          (("2" (name "F1" "LAMBDA (x,y): Q * x ^ 2")
            (("2" (name "F2" "LAMBDA (x,y): R * y ^ 2")
              (("2" (name "F3" "LAMBDA (x,y): S*x*y")
                (("2" (name "F4" "LAMBDA (x,y): T * x + UU * y + V")
                  (("2"
                    (case "cont(F1) AND cont(F2) AND cont(F3) AND cont(F4)")
                    (("1" (flatten)
                      (("1"
                        (case "f = (LAMBDA (x,y): F1(x,y)+F2(x,y)+F3(x,y)+F4(x,y))")
                        (("1" (hide-all-but (-1 -2 -3 -4 -5 1))
                          (("1" (expand "cont")
                            (("1" (inst - "x1" "x2" "epsil/8")
                              (("1" (inst - "x1" "x2" "epsil/8")
                                (("1" (inst - "x1" "x2" "epsil/8")
                                  (("1" (inst - "x1" "x2" "epsil/8")
                                    (("1" (skolem - "d1")
                                      (("1"
                                        (skolem - "d2")
                                        (("1"
                                          (skolem - "d3")
                                          (("1"
                                            (skolem - "d4")
                                            (("1"
                                              (inst
                                               +
                                               "min(min(d1,d2),min(d3,d4))")
                                              (("1"
                                                (skeep*)
                                                (("1"
                                                  (insteep -)
                                                  (("1"
                                                    (insteep -)
                                                    (("1"
                                                      (insteep -)
                                                      (("1"
                                                        (insteep -)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replaces -1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide (-5 -6))
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (decompose-equality +)
                          (("2" (rewrite -12)
                            (("2" (hide-all-but 1)
                              (("2" (expand "F1")
                                (("2" (expand "F2")
                                  (("2" (expand "F3")
                                    (("2" (expand "F4")
                                      (("2" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide (-7 2))
                      (("2" (hide (-1 -2 -3 -4))
                        (("2" (split +)
                          (("1" (expand "F1")
                            (("1"
                              (inst - "LAMBDA (x,y): Q*x" "LAMBDA (x,y): x")
                              (("1" (expand "^")
                                (("1" (expand "expt" +)
                                  (("1" (expand "expt" +)
                                    (("1" (expand "expt" +)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide 1)
                                          (("1"
                                            (inst-cp - "Q" "0" "0")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst - "1" "0" "0")
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "F2" 1)
                            (("2"
                              (inst - "LAMBDA (x,y): R*y" "LAMBDA (x,y): y")
                              (("2" (expand "^")
                                (("2" (expand "expt" +)
                                  (("2" (expand "expt" +)
                                    (("2" (expand "expt" +)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (hide 1)
                                          (("2"
                                            (inst-cp - "0" "R" "0")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (inst-cp - "0" "1" "0")
                                                (("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (expand "F3")
                            (("3"
                              (inst - "LAMBDA (x,y): S*x" "LAMBDA (x,y): y")
                              (("3" (assert)
                                (("3" (hide 1)
                                  (("3" (inst-cp - "S" "0" "0")
                                    (("3" (assert)
                                      (("3"
                                        (inst - "0" "1" "0")
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (expand "F4")
                            (("4" (inst-cp - "T" "UU" "V") nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cont skolem-const-decl "[[[real, real] -> real] -> boolean]" real_facts
     nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (posreal_min application-judgement "{z: posreal | z <= x AND z <= y}"
     real_defs nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (abs_mult formula-decl nil real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (< const-decl "bool" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (le_times_le_any1 formula-decl nil extra_real_props nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs
     nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_real_max application-judgement
     "{z: nonneg_real | z >= x AND z >= y}" real_defs nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (integer nonempty-type-from-decl nil integers nil)
    (ceiling const-decl "{i | x <= i & i < x + 1}" floor_ceil nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (TRUE const-decl "bool" booleans nil)
    (expt def-decl "real" exponentiation nil)
    (F2 skolem-const-decl "[[real, real] -> real]" real_facts nil)
    (F4 skolem-const-decl "[[real, real] -> real]" real_facts nil)
    (F3 skolem-const-decl "[[real, real] -> real]" real_facts nil)
    (F1 skolem-const-decl "[[real, real] -> real]" real_facts nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (div_cancel3 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil))
   nil)
  (quad_box_cont-1 nil 3672564200
   (""
    (name "cont"
          "LAMBDA (f: [[real, real] -> real]): (FORALL (x1, x2: real, epsil: posreal):
            EXISTS (delta: posreal):
              FORALL (y1, y2: real):
                abs(y1 - x1) <= delta AND abs(y2 - x2) <= delta IMPLIES
                 abs(f(y1, y2) - f(x1, x2)) <= epsil)")
    ((""
      (case "NOT FORALL (f,g: [[real, real] -> real]): cont(f) AND cont(g) IMPLIES cont(LAMBDA (x,y:real): f(x,y)*g(x,y))")
      (("1" (hide 2)
        (("1" (hide -)
          (("1" (skeep*)
            (("1" (expand "cont")
              (("1" (skeep*)
                (("1"
                  (case "EXISTS (M:posnat): M>max(abs(f(x1,x2)),abs(g(x1,x2)))+50")
                  (("1" (skeep -)
                    (("1" (name "eps" "min(1/1000,epsil/(100*M))")
                      (("1" (inst - "x1" "x2" "eps")
                        (("1" (inst - "x1" "x2" "eps")
                          (("1" (skolem - "d1")
                            (("1" (skolem - "d2")
                              (("1" (name "delta" "min(d1,d2)")
                                (("1" (inst + "delta")
                                  (("1" (skeep*)
                                    (("1" (inst - "y1" "y2")
                                      (("1"
                                        (inst - "y1" "y2")
                                        (("1"
                                          (case
                                           "NOT f(y1, y2) * g(y1, y2) - f(x1, x2) * g(x1, x2) = f(y1,y2)*(g(y1,y2)-g(x1,x2))+g(x1,x2)*(f(y1,y2)-f(x1,x2))")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (replaces -1)
                                            (("2"
                                              (case
                                               "NOT FORALL (a,b:real): abs(a)+abs(b)<=epsil IMPLIES abs(a+b)<=epsil")
                                              (("1"
                                                (hide-all-but 1)
                                                (("1" (grind) nil nil))
                                                nil)
                                               ("2"
                                                (inst?)
                                                (("2"
                                                  (replace 1)
                                                  (("2"
                                                    (hide 2)
                                                    (("2"
                                                      (rewrite "abs_mult")
                                                      (("2"
                                                        (rewrite "abs_mult")
                                                        (("2"
                                                          (case
                                                           "NOT FORALL (a,b:real): a<=epsil/2 AND b<=epsil/2 IMPLIES a+b<=epsil")
                                                          (("1"
                                                            (hide-all-but 1)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (rewrite -1)
                                                            (("1"
                                                              (hide (-1 2))
                                                              (("1"
                                                                (case
                                                                 "abs(f(y1, y2))<=M")
                                                                (("1"
                                                                  (mult-ineq
                                                                   -1
                                                                   -6)
                                                                  (("1"
                                                                    (case
                                                                     "M*eps<=epsil/2")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (case
                                                                       "eps<=epsil/(100*M)")
                                                                      (("1"
                                                                        (cross-mult
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (split 1)
                                                                    (("1"
                                                                      (hide-all-but
                                                                       (-1 1))
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       (-6 1))
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (case
                                                                   "abs(f(x1,x2))<=M-50 AND eps<1")
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide (-1 2))
                                                              (("2"
                                                                (case
                                                                 "abs(g(x1,x2))<= M AND M*eps<=epsil/2")
                                                                (("1"
                                                                  (ground)
                                                                  (("1"
                                                                    (mult-ineq
                                                                     -1
                                                                     -6)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (split
                                                                       1)
                                                                      (("1"
                                                                        (hide-all-but
                                                                         (-1
                                                                          1))
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         (-6
                                                                          1))
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (case
                                                                     "eps<=epsil/(100*M)")
                                                                    (("1"
                                                                      (cross-mult
                                                                       -1)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2"
                    (inst +
                     "ceiling(max(abs(f(x1, x2)), abs(g(x1, x2))) + 50)+5")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2"
        (case "NOT FORALL (T,UU,V:real): cont(LAMBDA (x,y:real): T * x + UU * y + V)")
        (("1" (hide-all-but 1)
          (("1" (skeep*)
            (("1" (expand "cont")
              (("1" (skeep*)
                (("1" (name "delta" "epsil/(100*(abs(T)+abs(UU)+100))")
                  (("1" (inst + "delta")
                    (("1" (skeep*)
                      (("1" (mult-by -2 "abs(UU)")
                        (("1" (mult-by -3 "abs(T)")
                          (("1" (case "delta*(abs(T)+abs(UU))<=epsil")
                            (("1" (hide -4)
                              (("1" (rewrite "abs_mult" :dir rl)
                                (("1" (rewrite "abs_mult" :dir rl)
                                  (("1" (postpone) nil nil)) nil))
                                nil))
                              nil)
                             ("2" (postpone) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (postpone) nil nil))
        nil))
      nil))
    nil)
   nil shostak)))


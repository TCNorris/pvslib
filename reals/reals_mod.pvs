% modulus operation for real numbers
reals_mod: THEORY
BEGIN

  i,k,cc: VAR real % int
  m: VAR posreal % posnat
  n,a,b,c,x: VAR nat   

  j: VAR nonzero_real % nonzero_integer

  ml3: LEMMA abs(i -  m * floor(i/m)) < m
  ml4: LEMMA abs(i +  m * floor(-i/m)) < m

  mod(i,j): {k| abs(k) < abs(j)} = i-j*floor(i/j)

  mod_pos:  LEMMA mod(i,m) >= 0 AND mod(i,m) < m

  JUDGEMENT mod(i:int, m: posnat) HAS_TYPE below(m)

  mod_lt_real : LEMMA -m < i AND i < m IMPLIES mod(i,m) = 
                                   IF i >= 0 THEN i ELSE i + m
                                   ENDIF
  
  mod_frac: LEMMA FORALL (x:real, y:posreal):
    mod(x,y)/y = fractional(x/y)
  
  mod_multiple: LEMMA FORALL (x:real, y:posreal, i:int):
    mod(i*y+x, y) = mod(x,y)
  
  mod_eq: LEMMA FORALL (a,b: real, y:posreal):
    mod(a,y) = mod(b,y) IFF mod(a - b, y) = 0

  mod_int: LEMMA FORALL(a: int, b: nonzero_integer):
    mod(a,b) = mod.mod(a,b)

End reals_mod

(sigma_fseq
 (sigma_fs_nnr 0
  (sigma_fs_nnr-2 "" 3790088505
   ("" (skeep) (("" (expand "sigma") (("" (assert) nil nil)) nil)) nil) nil
   shostak
   (sigma_fs_nnr subtype
    "sigma_fseq_def[nonneg_real].sigma(sigma_fseq.fs_nnr)" "nonneg_real"))
  (sigma_fs_nnr-1 nil 3411472230
   ("" (skeep)
    (("" (expand "sigma")
      (("" (assert)
        (("" (lemma "sigma_nonneg")
          (("" (inst?)
            (("" (assert)
              (("" (skeep)
                (("" (assert)
                  (("" (typepred "fs_nnr`seq(i)") (("" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma const-decl "real" sigma_fseq_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (sigma_nnreal application-judgement "nnreal" sigma_nat nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (sigma_fs_nnr subtype
    "sigma_fseq_def[nonneg_real].sigma(sigma_fseq.fs_nnr)" "nonneg_real")))
 (sigma_fs_npr 0
  (sigma_fs_npr-2 "" 3790088505
   ("" (skeep)
    (("" (expand "sigma")
      (("" (lemma "sigma_nonpos") (("" (inst?) (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   nil shostak
   (sigma_fs_npr subtype
    "sigma_fseq_def[nonpos_real].sigma(sigma_fseq.fs_npr)" "nonpos_real"))
  (sigma_fs_npr-1 nil 3411472230
   ("" (skeep)
    (("" (expand "sigma")
      (("" (lemma "sigma_nonpos")
        (("" (inst?)
          (("" (assert)
            (("" (skosimp*)
              (("" (typepred "fs_npr`seq(i!1)") (("" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma const-decl "real" sigma_fseq_def nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (<= const-decl "bool" reals nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (barray type-eq-decl nil fseqs structures)
    (fseq type-eq-decl nil fseqs structures)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (T_high type-eq-decl nil sigma nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (T_low type-eq-decl nil sigma nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (sigma_nonpos_real application-judgement "nonpos_real" sigma_nat nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sigma_nonpos formula-decl nil sigma nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil
   (sigma_fs_npr subtype
    "sigma_fseq_def[nonpos_real].sigma(sigma_fseq.fs_npr)" "nonpos_real")))
 (sigma_fs_nat 0
  (sigma_fs_nat-2 nil 3411472562
   ("" (auto-rewrite-theory "integers")
    (("" (auto-rewrite-theory "rationals")
      (("" (skeep)
        (("" (expand "sigma")
          (("" (lemma "sigma_ge")
            (("" (inst?) (("" (inst?) (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma_nat application-judgement "nat" sigma_nat nil)
    (sigma const-decl "real" sigma_fseq_def nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (barray type-eq-decl nil fseqs structures)
    (fseq type-eq-decl nil fseqs structures)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (T_high type-eq-decl nil sigma nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (T_low type-eq-decl nil sigma nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (sigma_ge formula-decl nil sigma nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil
   (sigma_fs_nat subtype "sigma_fseq_def[nat].sigma(sigma_fseq.fs_nat)"
    "nat"))
  (sigma_fs_nat-1 nil 3411472230 ("" (judgement-tcc) nil nil) nil nil
   (sigma_fs_nat subtype "sigma_fseq_def[nat].sigma(sigma_fseq.fs_nat)"
    "nat")))
 (sigma_fs_npi 0
  (sigma_fs_npi-2 nil 3411473210
   ("" (auto-rewrite-theory "integers")
    (("" (auto-rewrite-theory "rationals")
      (("" (skeep)
        (("" (expand "sigma")
          (("" (lemma "sigma_le")
            (("" (inst?) (("" (inst?) (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma_nonpos_int application-judgement "nonpos_int" sigma_nat nil)
    (sigma const-decl "real" sigma_fseq_def nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (<= const-decl "bool" reals nil)
    (nonpos_int nonempty-type-eq-decl nil integers nil)
    (barray type-eq-decl nil fseqs structures)
    (fseq type-eq-decl nil fseqs structures)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (T_high type-eq-decl nil sigma nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (T_low type-eq-decl nil sigma nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (sigma_le formula-decl nil sigma nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil
   (sigma_fs_npi subtype "sigma_fseq_def[nonpos_int].sigma(sigma_fseq.fs_npi)"
    "nonpos_int"))
  (sigma_fs_npi-1 nil 3411472230 ("" (judgement-tcc) nil nil) nil nil
   (sigma_fs_npi subtype "sigma_fseq_def[nonpos_int].sigma(sigma_fseq.fs_npi)"
    "nonpos_int"))))

